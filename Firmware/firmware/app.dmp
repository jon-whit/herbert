
firmware/app.elf:     file format elf32-microblaze

Disassembly of section .vectors.reset:

00000000 <__vectors>:
   0:	b0009000 	imm	-28672
   4:	b8080000 	brai	0
Disassembly of section .vectors.sw_exception:

00000008 <_vector_sw_exception>:
   8:	b0009001 	imm	-28671
   c:	b8082034 	brai	8244
Disassembly of section .vectors.interrupt:

00000010 <_vector_interrupt>:
  10:	b0009001 	imm	-28671
  14:	b8082160 	brai	8544
Disassembly of section .vectors.hw_exception:

00000020 <_vector_hw_exception>:
  20:	b0009001 	imm	-28671
  24:	b808204c 	brai	8268
Disassembly of section .text:

90000000 <_start1>:
90000000:	b0009002 	imm	-28670
90000004:	31a04090 	addik	r13, r0, 16528
90000008:	b0009002 	imm	-28670
9000000c:	30403688 	addik	r2, r0, 13960
90000010:	b0009007 	imm	-28665
90000014:	30208ff0 	addik	r1, r0, -28688
90000018:	b9f400e8 	brlid	r15, 232	// 90000100 <_crtinit>
9000001c:	80000000 	or	r0, r0, r0
90000020:	b0000001 	imm	1
90000024:	b9f43e30 	brlid	r15, 15920	// 90013e54 <exit>
90000028:	30a30000 	addik	r5, r3, 0

9000002c <_exit>:
9000002c:	b8000000 	bri	0		// 9000002c

90000030 <__do_global_dtors_aux>:
90000030:	b0009002 	imm	-28670
90000034:	e0604090 	lbui	r3, r0, 16528
90000038:	3021ffe4 	addik	r1, r1, -28
9000003c:	f9e10000 	swi	r15, r1, 0
90000040:	bc030018 	beqi	r3, 24		// 90000058
90000044:	b8000050 	bri	80		// 90000094
90000048:	b0009002 	imm	-28670
9000004c:	f8603690 	swi	r3, r0, 13968
90000050:	99fc2000 	brald	r15, r4
90000054:	80000000 	or	r0, r0, r0
90000058:	b0009002 	imm	-28670
9000005c:	e8603690 	lwi	r3, r0, 13968
90000060:	e8830000 	lwi	r4, r3, 0
90000064:	be24ffe4 	bneid	r4, -28		// 90000048
90000068:	30630004 	addik	r3, r3, 4
9000006c:	b0000000 	imm	0
90000070:	30600000 	addik	r3, r0, 0
90000074:	bc030014 	beqi	r3, 20		// 90000088
90000078:	b0009002 	imm	-28670
9000007c:	30a04088 	addik	r5, r0, 16520
90000080:	99fc1800 	brald	r15, r3
90000084:	80000000 	or	r0, r0, r0
90000088:	30600001 	addik	r3, r0, 1
9000008c:	b0009002 	imm	-28670
90000090:	f0604090 	sbi	r3, r0, 16528
90000094:	e9e10000 	lwi	r15, r1, 0
90000098:	b60f0008 	rtsd	r15, 8
9000009c:	3021001c 	addik	r1, r1, 28

900000a0 <frame_dummy>:
900000a0:	b0000000 	imm	0
900000a4:	30600000 	addik	r3, r0, 0
900000a8:	3021ffe4 	addik	r1, r1, -28
900000ac:	f9e10000 	swi	r15, r1, 0
900000b0:	b0009002 	imm	-28670
900000b4:	30a04088 	addik	r5, r0, 16520
900000b8:	b0009002 	imm	-28670
900000bc:	30c04094 	addik	r6, r0, 16532
900000c0:	bc03000c 	beqi	r3, 12		// 900000cc
900000c4:	99fc1800 	brald	r15, r3
900000c8:	80000000 	or	r0, r0, r0
900000cc:	b0009002 	imm	-28670
900000d0:	e860408c 	lwi	r3, r0, 16524
900000d4:	b0000000 	imm	0
900000d8:	30800000 	addik	r4, r0, 0
900000dc:	bc030018 	beqi	r3, 24		// 900000f4
900000e0:	b0009002 	imm	-28670
900000e4:	30a0408c 	addik	r5, r0, 16524
900000e8:	bc04000c 	beqi	r4, 12		// 900000f4
900000ec:	99fc2000 	brald	r15, r4
900000f0:	80000000 	or	r0, r0, r0
900000f4:	e9e10000 	lwi	r15, r1, 0
900000f8:	b60f0008 	rtsd	r15, 8
900000fc:	3021001c 	addik	r1, r1, 28

90000100 <_crtinit>:
90000100:	2021ffec 	addi	r1, r1, -20
90000104:	f9e10000 	swi	r15, r1, 0
90000108:	b0009002 	imm	-28670
9000010c:	20c04090 	addi	r6, r0, 16528
90000110:	b0009002 	imm	-28670
90000114:	20e04090 	addi	r7, r0, 16528
90000118:	06463800 	rsub	r18, r6, r7
9000011c:	bc720014 	blei	r18, 20		// 90000130
90000120:	f8060000 	swi	r0, r6, 0
90000124:	20c60004 	addi	r6, r6, 4
90000128:	06463800 	rsub	r18, r6, r7
9000012c:	bc92fff4 	bgti	r18, -12		// 90000120
90000130:	b0009002 	imm	-28670
90000134:	20c04090 	addi	r6, r0, 16528
90000138:	b0009003 	imm	-28669
9000013c:	20e05000 	addi	r7, r0, 20480
90000140:	06463800 	rsub	r18, r6, r7
90000144:	bc720014 	blei	r18, 20		// 90000158
90000148:	f8060000 	swi	r0, r6, 0
9000014c:	20c60004 	addi	r6, r6, 4
90000150:	06463800 	rsub	r18, r6, r7
90000154:	bc92fff4 	bgti	r18, -12		// 90000148
90000158:	b0000001 	imm	1
9000015c:	b9f41ee8 	brlid	r15, 7912	// 90012044 <_program_init>
90000160:	80000000 	or	r0, r0, r0
90000164:	b0000002 	imm	2
90000168:	b9f402e0 	brlid	r15, 736	// 90020448 <__init>
9000016c:	80000000 	or	r0, r0, r0
90000170:	20c00000 	addi	r6, r0, 0
90000174:	20e00000 	addi	r7, r0, 0
90000178:	b9f43b78 	brlid	r15, 15224	// 90003cf0 <main>
9000017c:	20a00000 	addi	r5, r0, 0
90000180:	32630000 	addik	r19, r3, 0
90000184:	b0000002 	imm	2
90000188:	b9f402e8 	brlid	r15, 744	// 90020470 <__fini>
9000018c:	80000000 	or	r0, r0, r0
90000190:	b0000001 	imm	1
90000194:	b9f41ea8 	brlid	r15, 7848	// 9001203c <_program_clean>
90000198:	80000000 	or	r0, r0, r0
9000019c:	c9e10000 	lw	r15, r1, r0
900001a0:	30730000 	addik	r3, r19, 0
900001a4:	b60f0008 	rtsd	r15, 8
900001a8:	20210014 	addi	r1, r1, 20

900001ac <cacheInit>:



void cacheInit()
{
900001ac:	3021ffe0 	addik	r1, r1, -32
900001b0:	f9e10000 	swi	r15, r1, 0
900001b4:	fa61001c 	swi	r19, r1, 28
900001b8:	12610000 	addk	r19, r1, r0
    microblaze_disable_icache();
900001bc:	b0000001 	imm	1
900001c0:	b9f41ed8 	brlid	r15, 7896	// 90012098 <microblaze_disable_icache>
900001c4:	80000000 	or	r0, r0, r0
    microblaze_init_icache_range(XPAR_MICROBLAZE_ICACHE_BASEADDR, XPAR_MICROBLAZE_0_CACHE_BYTE_SIZE);
900001c8:	b0009000 	imm	-28672
900001cc:	30a00000 	addik	r5, r0, 0
900001d0:	30c00800 	addik	r6, r0, 2048
900001d4:	b0000001 	imm	1
900001d8:	b9f41f54 	brlid	r15, 8020	// 9001212c <microblaze_init_icache_range>
900001dc:	80000000 	or	r0, r0, r0
    microblaze_enable_icache();
900001e0:	b0000001 	imm	1
900001e4:	b9f41ef4 	brlid	r15, 7924	// 900120d8 <microblaze_enable_icache>
900001e8:	80000000 	or	r0, r0, r0

    microblaze_disable_dcache();
900001ec:	b0000001 	imm	1
900001f0:	b9f41e88 	brlid	r15, 7816	// 90012078 <microblaze_disable_dcache>
900001f4:	80000000 	or	r0, r0, r0
    microblaze_init_dcache_range(XPAR_MICROBLAZE_DCACHE_BASEADDR, XPAR_MICROBLAZE_0_DCACHE_BYTE_SIZE);
900001f8:	b0009000 	imm	-28672
900001fc:	30a00000 	addik	r5, r0, 0
90000200:	30c00800 	addik	r6, r0, 2048
90000204:	b0000001 	imm	1
90000208:	b9f41ef0 	brlid	r15, 7920	// 900120f8 <microblaze_init_dcache_range>
9000020c:	80000000 	or	r0, r0, r0
    microblaze_enable_dcache();
90000210:	b0000001 	imm	1
90000214:	b9f41ea4 	brlid	r15, 7844	// 900120b8 <microblaze_enable_dcache>
90000218:	80000000 	or	r0, r0, r0
}
9000021c:	e9e10000 	lwi	r15, r1, 0
90000220:	10330000 	addk	r1, r19, r0
90000224:	ea61001c 	lwi	r19, r1, 28
90000228:	30210020 	addik	r1, r1, 32
9000022c:	b60f0008 	rtsd	r15, 8
90000230:	80000000 	or	r0, r0, r0

90000234 <commInit>:
///////////////////////////////////////////////////
// Interface functions

void commInit()
{
90000234:	3021ffe0 	addik	r1, r1, -32
90000238:	f9e10000 	swi	r15, r1, 0
9000023c:	fa61001c 	swi	r19, r1, 28
90000240:	12610000 	addk	r19, r1, r0
    memset(&commData, 0, sizeof(commData));
90000244:	b0009002 	imm	-28670
90000248:	3060fe1c 	addik	r3, r0, -484
9000024c:	308001c8 	addik	r4, r0, 456
90000250:	10a30000 	addk	r5, r3, r0
90000254:	10c00000 	addk	r6, r0, r0
90000258:	10e40000 	addk	r7, r4, r0
9000025c:	b0000001 	imm	1
90000260:	b9f43d70 	brlid	r15, 15728	// 90013fd0 <memset>
90000264:	80000000 	or	r0, r0, r0

    commData.monitoringConnection = false;
90000268:	b0009002 	imm	-28670
9000026c:	f800fe34 	swi	r0, r0, -460
    commData.commWatchdogDisabled = false;
90000270:	b0009002 	imm	-28670
90000274:	f800ffe0 	swi	r0, r0, -32

    setSerialPortRxSignal(HOST_INTERFACE_PORT, &commData.serialInterfaceRxSignal);
90000278:	10a00000 	addk	r5, r0, r0
9000027c:	b0009002 	imm	-28670
90000280:	30c0fe2c 	addik	r6, r0, -468
90000284:	b0000000 	imm	0
90000288:	b9f48dac 	brlid	r15, -29268	// 90009034 <setSerialPortRxSignal>
9000028c:	80000000 	or	r0, r0, r0
    startTimer(&commData.serialInterfaceTimer, MSEC_TO_TICKS(COMM_PROCESS_HOST_PERIOD_ms));
90000290:	b0009002 	imm	-28670
90000294:	30a0fe1c 	addik	r5, r0, -484
90000298:	30c00000 	addik	r6, r0, 0
9000029c:	b000000a 	imm	10
900002a0:	30e02c24 	addik	r7, r0, 11300
900002a4:	b0000000 	imm	0
900002a8:	b9f4bc48 	brlid	r15, -17336	// 9000bef0 <startTimer>
900002ac:	80000000 	or	r0, r0, r0
    startTimer(&commData.connectionTimer, SEC_TO_TICKS(COMM_CONNECTION_TIMEOUT_s));
900002b0:	b0009002 	imm	-28670
900002b4:	30a0fe38 	addik	r5, r0, -456
900002b8:	30c00009 	addik	r6, r0, 9
900002bc:	b000502f 	imm	20527
900002c0:	30e090c8 	addik	r7, r0, -28472
900002c4:	b0000000 	imm	0
900002c8:	b9f4bc28 	brlid	r15, -17368	// 9000bef0 <startTimer>
900002cc:	80000000 	or	r0, r0, r0
}
900002d0:	e9e10000 	lwi	r15, r1, 0
900002d4:	10330000 	addk	r1, r19, r0
900002d8:	ea61001c 	lwi	r19, r1, 28
900002dc:	30210020 	addik	r1, r1, 32
900002e0:	b60f0008 	rtsd	r15, 8
900002e4:	80000000 	or	r0, r0, r0

900002e8 <commProcess>:



bool commProcess(void* unused)
{
900002e8:	3021fb50 	addik	r1, r1, -1200
900002ec:	f9e10000 	swi	r15, r1, 0
900002f0:	fa6104ac 	swi	r19, r1, 1196
900002f4:	12610000 	addk	r19, r1, r0
900002f8:	f8b304b4 	swi	r5, r19, 1204
    CmdPkt cmdPkt;

    if(timerExpired(&commData.serialInterfaceTimer))
900002fc:	b0009002 	imm	-28670
90000300:	30a0fe1c 	addik	r5, r0, -484
90000304:	b0000000 	imm	0
90000308:	b9f4bc4c 	brlid	r15, -17332	// 9000bf54 <timerExpired>
9000030c:	80000000 	or	r0, r0, r0
90000310:	bc0300f8 	beqi	r3, 248		// 90000408
    {
        if(!commData.commWatchdogDisabled && commData.monitoringConnection && timerExpired(&commData.connectionTimer))
90000314:	b0009002 	imm	-28670
90000318:	e860ffe0 	lwi	r3, r0, -32
9000031c:	bc230044 	bnei	r3, 68		// 90000360
90000320:	b0009002 	imm	-28670
90000324:	e860fe34 	lwi	r3, r0, -460
90000328:	bc030038 	beqi	r3, 56		// 90000360
9000032c:	b0009002 	imm	-28670
90000330:	30a0fe38 	addik	r5, r0, -456
90000334:	b0000000 	imm	0
90000338:	b9f4bc1c 	brlid	r15, -17380	// 9000bf54 <timerExpired>
9000033c:	80000000 	or	r0, r0, r0
90000340:	bc030020 	beqi	r3, 32		// 90000360
        {
            systemAbort();
90000344:	b9f4263c 	brlid	r15, 9788	// 90002980 <systemAbort>
90000348:	80000000 	or	r0, r0, r0
            sendErrorMsg(err_connectionTimeout, "FPGA did not receive communication from host for more than "
9000034c:	30a00005 	addik	r5, r0, 5
90000350:	b0009002 	imm	-28670
90000354:	30c00708 	addik	r6, r0, 1800
90000358:	b9f400cc 	brlid	r15, 204	// 90000424 <sendErrorMsg>
9000035c:	80000000 	or	r0, r0, r0
                                                STRINGIFY(COMM_CONNECTION_TIMEOUT_s)
                                                " seconds - All operations aborted");
        }

        cmdPkt.bufByteCount = serialGetPkt(HOST_INTERFACE_PORT, (uint8*)cmdPkt.buf, COMM_CMD_BUF_SIZE - 1);
90000360:	30730020 	addik	r3, r19, 32
90000364:	10a00000 	addk	r5, r0, r0
90000368:	10c30000 	addk	r6, r3, r0
9000036c:	30e003ff 	addik	r7, r0, 1023
90000370:	b0000000 	imm	0
90000374:	b9f48d50 	brlid	r15, -29360	// 900090c4 <serialGetPkt>
90000378:	80000000 	or	r0, r0, r0
9000037c:	f873001c 	swi	r3, r19, 28

        if(cmdPkt.bufByteCount)
90000380:	e873001c 	lwi	r3, r19, 28
90000384:	bc030064 	beqi	r3, 100		// 900003e8
        {
            cmdPkt.buf[cmdPkt.bufByteCount] = 0;
90000388:	e893001c 	lwi	r4, r19, 28
9000038c:	3073001c 	addik	r3, r19, 28
90000390:	10641800 	addk	r3, r4, r3
90000394:	f0030004 	sbi	r0, r3, 4

            #if DISPLAY_RX_TX
                printf("RX: %s\n", cmdPkt.buf);
            #endif

            if(parseCmdPkt(&cmdPkt))
90000398:	3073001c 	addik	r3, r19, 28
9000039c:	10a30000 	addk	r5, r3, r0
900003a0:	b9f402d4 	brlid	r15, 724	// 90000674 <parseCmdPkt>
900003a4:	80000000 	or	r0, r0, r0
900003a8:	bc030040 	beqi	r3, 64		// 900003e8
            {
                commData.monitoringConnection = true;
900003ac:	30600001 	addik	r3, r0, 1
900003b0:	b0009002 	imm	-28670
900003b4:	f860fe34 	swi	r3, r0, -460
                startTimer(&commData.connectionTimer, SEC_TO_TICKS(COMM_CONNECTION_TIMEOUT_s));
900003b8:	b0009002 	imm	-28670
900003bc:	30a0fe38 	addik	r5, r0, -456
900003c0:	30c00009 	addik	r6, r0, 9
900003c4:	b000502f 	imm	20527
900003c8:	30e090c8 	addik	r7, r0, -28472
900003cc:	b0000000 	imm	0
900003d0:	b9f4bb20 	brlid	r15, -17632	// 9000bef0 <startTimer>
900003d4:	80000000 	or	r0, r0, r0
                processCmdPkt(&cmdPkt);
900003d8:	3073001c 	addik	r3, r19, 28
900003dc:	10a30000 	addk	r5, r3, r0
900003e0:	b9f40690 	brlid	r15, 1680	// 90000a70 <processCmdPkt>
900003e4:	80000000 	or	r0, r0, r0
            }
        }

        startTimer(&commData.serialInterfaceTimer, MSEC_TO_TICKS(COMM_PROCESS_HOST_PERIOD_ms));
900003e8:	b0009002 	imm	-28670
900003ec:	30a0fe1c 	addik	r5, r0, -484
900003f0:	30c00000 	addik	r6, r0, 0
900003f4:	b000000a 	imm	10
900003f8:	30e02c24 	addik	r7, r0, 11300
900003fc:	b0000000 	imm	0
90000400:	b9f4baf0 	brlid	r15, -17680	// 9000bef0 <startTimer>
90000404:	80000000 	or	r0, r0, r0
    }

    return true;
90000408:	30600001 	addik	r3, r0, 1
}
9000040c:	e9e10000 	lwi	r15, r1, 0
90000410:	10330000 	addk	r1, r19, r0
90000414:	ea6104ac 	lwi	r19, r1, 1196
90000418:	302104b0 	addik	r1, r1, 1200
9000041c:	b60f0008 	rtsd	r15, 8
90000420:	80000000 	or	r0, r0, r0

90000424 <sendErrorMsg>:



void sendErrorMsg(ErrorCodes errorCode, const char* errorDesc)
{
90000424:	3021fbc4 	addik	r1, r1, -1084
90000428:	f9e10000 	swi	r15, r1, 0
9000042c:	fa610438 	swi	r19, r1, 1080
90000430:	12610000 	addk	r19, r1, r0
90000434:	f8b30440 	swi	r5, r19, 1088
90000438:	f8d30444 	swi	r6, r19, 1092
    ASSERT(errorCode < num_errors);
9000043c:	e8730440 	lwi	r3, r19, 1088
90000440:	22400053 	addi	r18, r0, 83
90000444:	16439003 	cmpu	r18, r3, r18
90000448:	bcb2002c 	bgei	r18, 44		// 90000474
9000044c:	94110002 	msrclr	r0, 2
90000450:	b0009002 	imm	-28670
90000454:	30a00768 	addik	r5, r0, 1896
90000458:	b0009002 	imm	-28670
9000045c:	30c00780 	addik	r6, r0, 1920
90000460:	30e001c4 	addik	r7, r0, 452
90000464:	b0000000 	imm	0
90000468:	b9f4bfbc 	brlid	r15, -16452	// 9000c424 <printAssert>
9000046c:	80000000 	or	r0, r0, r0
90000470:	b8000000 	bri	0		// 90000470

    RspPkt rspPkt;

    initIpErrorPkt(&rspPkt, errorCode);
90000474:	e8730440 	lwi	r3, r19, 1088
90000478:	3093001c 	addik	r4, r19, 28
9000047c:	10a40000 	addk	r5, r4, r0
90000480:	10c30000 	addk	r6, r3, r0
90000484:	b9f415d0 	brlid	r15, 5584	// 90001a54 <initIpErrorPkt>
90000488:	80000000 	or	r0, r0, r0

    if(errorDesc)
9000048c:	e8730444 	lwi	r3, r19, 1092
90000490:	bc030030 	beqi	r3, 48		// 900004c0
    {
        addStringParamToRspPkt(&rspPkt, "-");
90000494:	3073001c 	addik	r3, r19, 28
90000498:	10a30000 	addk	r5, r3, r0
9000049c:	b0009002 	imm	-28670
900004a0:	30c0078c 	addik	r6, r0, 1932
900004a4:	b9f40844 	brlid	r15, 2116	// 90000ce8 <addStringParamToRspPkt>
900004a8:	80000000 	or	r0, r0, r0
        addStringParamToRspPkt(&rspPkt, errorDesc);
900004ac:	3073001c 	addik	r3, r19, 28
900004b0:	10a30000 	addk	r5, r3, r0
900004b4:	e8d30444 	lwi	r6, r19, 1092
900004b8:	b9f40830 	brlid	r15, 2096	// 90000ce8 <addStringParamToRspPkt>
900004bc:	80000000 	or	r0, r0, r0
    }

    sendRspPkt(&rspPkt);
900004c0:	3073001c 	addik	r3, r19, 28
900004c4:	10a30000 	addk	r5, r3, r0
900004c8:	b9f408e8 	brlid	r15, 2280	// 90000db0 <sendRspPkt>
900004cc:	80000000 	or	r0, r0, r0
}
900004d0:	e9e10000 	lwi	r15, r1, 0
900004d4:	10330000 	addk	r1, r19, r0
900004d8:	ea610438 	lwi	r19, r1, 1080
900004dc:	3021043c 	addik	r1, r1, 1084
900004e0:	b60f0008 	rtsd	r15, 8
900004e4:	80000000 	or	r0, r0, r0

900004e8 <sendLogMsg>:



void sendLogMsg(const char* logMsg)
{
900004e8:	3021fbc4 	addik	r1, r1, -1084
900004ec:	f9e10000 	swi	r15, r1, 0
900004f0:	fa610438 	swi	r19, r1, 1080
900004f4:	12610000 	addk	r19, r1, r0
900004f8:	f8b30440 	swi	r5, r19, 1088
    ASSERT(logMsg);
900004fc:	e8730440 	lwi	r3, r19, 1088
90000500:	bc23002c 	bnei	r3, 44		// 9000052c
90000504:	94110002 	msrclr	r0, 2
90000508:	b0009002 	imm	-28670
9000050c:	30a00790 	addik	r5, r0, 1936
90000510:	b0009002 	imm	-28670
90000514:	30c00780 	addik	r6, r0, 1920
90000518:	30e001d7 	addik	r7, r0, 471
9000051c:	b0000000 	imm	0
90000520:	b9f4bf04 	brlid	r15, -16636	// 9000c424 <printAssert>
90000524:	80000000 	or	r0, r0, r0
90000528:	b8000000 	bri	0		// 90000528

    RspPkt rspPkt;

    initIpLogPkt(&rspPkt);
9000052c:	3073001c 	addik	r3, r19, 28
90000530:	10a30000 	addk	r5, r3, r0
90000534:	b9f415a4 	brlid	r15, 5540	// 90001ad8 <initIpLogPkt>
90000538:	80000000 	or	r0, r0, r0
    addStringParamToRspPkt(&rspPkt, logMsg);
9000053c:	3073001c 	addik	r3, r19, 28
90000540:	10a30000 	addk	r5, r3, r0
90000544:	e8d30440 	lwi	r6, r19, 1088
90000548:	b9f407a0 	brlid	r15, 1952	// 90000ce8 <addStringParamToRspPkt>
9000054c:	80000000 	or	r0, r0, r0
    printf("Log: %s\n", logMsg);
90000550:	b0009002 	imm	-28670
90000554:	30a00798 	addik	r5, r0, 1944
90000558:	e8d30440 	lwi	r6, r19, 1088
9000055c:	b0000000 	imm	0
90000560:	b9f4f8e4 	brlid	r15, -1820	// 9000fe44 <printf>
90000564:	80000000 	or	r0, r0, r0

    sendRspPkt(&rspPkt);
90000568:	3073001c 	addik	r3, r19, 28
9000056c:	10a30000 	addk	r5, r3, r0
90000570:	b9f40840 	brlid	r15, 2112	// 90000db0 <sendRspPkt>
90000574:	80000000 	or	r0, r0, r0
}
90000578:	e9e10000 	lwi	r15, r1, 0
9000057c:	10330000 	addk	r1, r19, r0
90000580:	ea610438 	lwi	r19, r1, 1080
90000584:	3021043c 	addik	r1, r1, 1084
90000588:	b60f0008 	rtsd	r15, 8
9000058c:	80000000 	or	r0, r0, r0

90000590 <signalOfflineTaskCompleteCallback>:



///////////////////////////////////////////////////
// Local functions

static void signalOfflineTaskCompleteCallback(int offlineTask, ErrorCodes error, const char* errorDesc)
{
90000590:	3021ffe0 	addik	r1, r1, -32
90000594:	f9e10000 	swi	r15, r1, 0
90000598:	fa61001c 	swi	r19, r1, 28
9000059c:	12610000 	addk	r19, r1, r0
900005a0:	f8b30024 	swi	r5, r19, 36
900005a4:	f8d30028 	swi	r6, r19, 40
900005a8:	f8f3002c 	swi	r7, r19, 44
    ASSERT(offlineTask >= 0 && offlineTask < OfflineCommand_count);
900005ac:	e8730024 	lwi	r3, r19, 36
900005b0:	bc430014 	blti	r3, 20		// 900005c4
900005b4:	e8730024 	lwi	r3, r19, 36
900005b8:	32400001 	addik	r18, r0, 1
900005bc:	16439001 	cmp	r18, r3, r18
900005c0:	bcb2002c 	bgei	r18, 44		// 900005ec
900005c4:	94110002 	msrclr	r0, 2
900005c8:	b0009002 	imm	-28670
900005cc:	30a007a4 	addik	r5, r0, 1956
900005d0:	b0009002 	imm	-28670
900005d4:	30c00780 	addik	r6, r0, 1920
900005d8:	30e001e9 	addik	r7, r0, 489
900005dc:	b0000000 	imm	0
900005e0:	b9f4be44 	brlid	r15, -16828	// 9000c424 <printAssert>
900005e4:	80000000 	or	r0, r0, r0
900005e8:	b8000000 	bri	0		// 900005e8
    ASSERT(error >= 0 && error < num_errors);
900005ec:	e8730028 	lwi	r3, r19, 40
900005f0:	22400053 	addi	r18, r0, 83
900005f4:	16439003 	cmpu	r18, r3, r18
900005f8:	bcb2002c 	bgei	r18, 44		// 90000624
900005fc:	94110002 	msrclr	r0, 2
90000600:	b0009002 	imm	-28670
90000604:	30a007dc 	addik	r5, r0, 2012
90000608:	b0009002 	imm	-28670
9000060c:	30c00780 	addik	r6, r0, 1920
90000610:	30e001ea 	addik	r7, r0, 490
90000614:	b0000000 	imm	0
90000618:	b9f4be0c 	brlid	r15, -16884	// 9000c424 <printAssert>
9000061c:	80000000 	or	r0, r0, r0
90000620:	b8000000 	bri	0		// 90000620

    if(error == err_noError)
90000624:	e8730028 	lwi	r3, r19, 40
90000628:	bc23001c 	bnei	r3, 28		// 90000644
    {
        sendOfflineRspOk(offlineTask, errorDesc);
9000062c:	e8730024 	lwi	r3, r19, 36
90000630:	10a30000 	addk	r5, r3, r0
90000634:	e8d3002c 	lwi	r6, r19, 44
90000638:	b9f40bb8 	brlid	r15, 3000	// 900011f0 <sendOfflineRspOk>
9000063c:	80000000 	or	r0, r0, r0
90000640:	b800001c 	bri	28		// 9000065c
    }
    else
    {
        sendOfflineRspError(offlineTask, error, errorDesc);
90000644:	e8730024 	lwi	r3, r19, 36
90000648:	10a30000 	addk	r5, r3, r0
9000064c:	e8d30028 	lwi	r6, r19, 40
90000650:	e8f3002c 	lwi	r7, r19, 44
90000654:	b9f40c2c 	brlid	r15, 3116	// 90001280 <sendOfflineRspError>
90000658:	80000000 	or	r0, r0, r0
    }
}
9000065c:	e9e10000 	lwi	r15, r1, 0
90000660:	10330000 	addk	r1, r19, r0
90000664:	ea61001c 	lwi	r19, r1, 28
90000668:	30210020 	addik	r1, r1, 32
9000066c:	b60f0008 	rtsd	r15, 8
90000670:	80000000 	or	r0, r0, r0

90000674 <parseCmdPkt>:

static bool parseCmdPkt(CmdPkt* cmdPkt)
{
90000674:	3021ffc0 	addik	r1, r1, -64
90000678:	f9e10000 	swi	r15, r1, 0
9000067c:	fa610038 	swi	r19, r1, 56
90000680:	fac1003c 	swi	r22, r1, 60
90000684:	12610000 	addk	r19, r1, r0
90000688:	f8b30044 	swi	r5, r19, 68
    ASSERT(cmdPkt);
9000068c:	e8730044 	lwi	r3, r19, 68
90000690:	bc23002c 	bnei	r3, 44		// 900006bc
90000694:	94110002 	msrclr	r0, 2
90000698:	b0009002 	imm	-28670
9000069c:	30a00800 	addik	r5, r0, 2048
900006a0:	b0009002 	imm	-28670
900006a4:	30c00780 	addik	r6, r0, 1920
900006a8:	30e001f8 	addik	r7, r0, 504
900006ac:	b0000000 	imm	0
900006b0:	b9f4bd74 	brlid	r15, -17036	// 9000c424 <printAssert>
900006b4:	80000000 	or	r0, r0, r0
900006b8:	b8000000 	bri	0		// 900006b8
    ASSERT(cmdPkt->bufByteCount < sizeof(cmdPkt->buf) - 1);
900006bc:	e8730044 	lwi	r3, r19, 68
900006c0:	e8630000 	lwi	r3, r3, 0
900006c4:	224003fe 	addi	r18, r0, 1022
900006c8:	16439003 	cmpu	r18, r3, r18
900006cc:	bcb2002c 	bgei	r18, 44		// 900006f8
900006d0:	94110002 	msrclr	r0, 2
900006d4:	b0009002 	imm	-28670
900006d8:	30a00808 	addik	r5, r0, 2056
900006dc:	b0009002 	imm	-28670
900006e0:	30c00780 	addik	r6, r0, 1920
900006e4:	30e001f9 	addik	r7, r0, 505
900006e8:	b0000000 	imm	0
900006ec:	b9f4bd38 	brlid	r15, -17096	// 9000c424 <printAssert>
900006f0:	80000000 	or	r0, r0, r0
900006f4:	b8000000 	bri	0		// 900006f4

    cmdPkt->dstSrc     = NULL;
900006f8:	e8730044 	lwi	r3, r19, 68
900006fc:	f8030404 	swi	r0, r3, 1028
    cmdPkt->seqNum     = NULL;
90000700:	e8730044 	lwi	r3, r19, 68
90000704:	f8030408 	swi	r0, r3, 1032
    cmdPkt->cmd        = NULL;
90000708:	e8730044 	lwi	r3, r19, 68
9000070c:	f803040c 	swi	r0, r3, 1036
    cmdPkt->crc        = NULL;
90000710:	e8730044 	lwi	r3, r19, 68
90000714:	f803048c 	swi	r0, r3, 1164
    cmdPkt->paramCount = 0;
90000718:	e8730044 	lwi	r3, r19, 68
9000071c:	f8030410 	swi	r0, r3, 1040

    if(cmdPkt->buf[0] == paramDelimiter || !isprint(cmdPkt->buf[0]))
90000720:	e8730044 	lwi	r3, r19, 68
90000724:	e0630004 	lbui	r3, r3, 4
90000728:	90630060 	sext8	r3, r3
9000072c:	aa430020 	xori	r18, r3, 32
90000730:	bc120030 	beqi	r18, 48		// 90000760
90000734:	e8730044 	lwi	r3, r19, 68
90000738:	e0630004 	lbui	r3, r3, 4
9000073c:	90630060 	sext8	r3, r3
90000740:	10830000 	addk	r4, r3, r0
90000744:	b0009002 	imm	-28670
90000748:	e8603b5c 	lwi	r3, r0, 15196
9000074c:	10641800 	addk	r3, r4, r3
90000750:	e0630000 	lbui	r3, r3, 0
90000754:	90630060 	sext8	r3, r3
90000758:	a4630097 	andi	r3, r3, 151
9000075c:	bc230010 	bnei	r3, 16		// 9000076c
    {
        // First character is bad
        return false;
90000760:	10600000 	addk	r3, r0, r0
90000764:	f8730034 	swi	r3, r19, 52
90000768:	b80002e8 	bri	744		// 90000a50
    }



    // Find and verify CRC
    char* crcParam = strrchr(cmdPkt->buf, paramDelimiter);
9000076c:	e8730044 	lwi	r3, r19, 68
90000770:	30630004 	addik	r3, r3, 4
90000774:	10a30000 	addk	r5, r3, r0
90000778:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
9000077c:	b0000001 	imm	1
90000780:	b9f43f2c 	brlid	r15, 16172	// 900146ac <strrchr>
90000784:	80000000 	or	r0, r0, r0
90000788:	f873002c 	swi	r3, r19, 44

    if(!crcParam)
9000078c:	e873002c 	lwi	r3, r19, 44
90000790:	bc230010 	bnei	r3, 16		// 900007a0
    {
        // No CRC parameter found
        return false;
90000794:	10600000 	addk	r3, r0, r0
90000798:	f8730034 	swi	r3, r19, 52
9000079c:	b80002b4 	bri	692		// 90000a50
    }

    *crcParam++ = 0;
900007a0:	e873002c 	lwi	r3, r19, 44
900007a4:	f0030000 	sbi	r0, r3, 0
900007a8:	e873002c 	lwi	r3, r19, 44
900007ac:	30630001 	addik	r3, r3, 1
900007b0:	f873002c 	swi	r3, r19, 44
    cmdPkt->crc = crcParam;
900007b4:	e8930044 	lwi	r4, r19, 68
900007b8:	e873002c 	lwi	r3, r19, 44
900007bc:	f864048c 	swi	r3, r4, 1164

    uint32 calcCrc = calcCRC16(INITIAL_CRC16_VALUE, cmdPkt->buf, strlen(cmdPkt->buf));
900007c0:	e8730044 	lwi	r3, r19, 68
900007c4:	32c30004 	addik	r22, r3, 4
900007c8:	e8730044 	lwi	r3, r19, 68
900007cc:	30630004 	addik	r3, r3, 4
900007d0:	10a30000 	addk	r5, r3, r0
900007d4:	b0000001 	imm	1
900007d8:	b9f43c68 	brlid	r15, 15464	// 90014440 <strlen>
900007dc:	80000000 	or	r0, r0, r0
900007e0:	30a0ffff 	addik	r5, r0, -1
900007e4:	10d60000 	addk	r6, r22, r0
900007e8:	10e30000 	addk	r7, r3, r0
900007ec:	b0000000 	imm	0
900007f0:	b9f4d108 	brlid	r15, -12024	// 9000d8f8 <calcCRC16>
900007f4:	80000000 	or	r0, r0, r0
900007f8:	f8730028 	swi	r3, r19, 40
    uint32 pktCrc;

    if(!getUnsignedValue(cmdPkt->crc, &pktCrc, 10) ||
900007fc:	e8730044 	lwi	r3, r19, 68
90000800:	e863048c 	lwi	r3, r3, 1164
90000804:	30930030 	addik	r4, r19, 48
90000808:	10a30000 	addk	r5, r3, r0
9000080c:	10c40000 	addk	r6, r4, r0
90000810:	30e0000a 	addik	r7, r0, 10
90000814:	b9f41a70 	brlid	r15, 6768	// 90002284 <getUnsignedValue>
90000818:	80000000 	or	r0, r0, r0
9000081c:	bc03001c 	beqi	r3, 28		// 90000838
90000820:	e8730030 	lwi	r3, r19, 48
90000824:	bc030050 	beqi	r3, 80		// 90000874
90000828:	e8930030 	lwi	r4, r19, 48
9000082c:	e8730028 	lwi	r3, r19, 40
90000830:	16441800 	rsubk	r18, r4, r3
90000834:	bc120040 	beqi	r18, 64		// 90000874
       (pktCrc != 0 && calcCrc != pktCrc))
    {
        // CRC parameter not correct
        printf("Invalid Cmd Pkt CRC (%lu): '%s %s' \n", calcCrc, cmdPkt->buf, cmdPkt->crc);
90000838:	e8730044 	lwi	r3, r19, 68
9000083c:	30830004 	addik	r4, r3, 4
90000840:	e8730044 	lwi	r3, r19, 68
90000844:	e863048c 	lwi	r3, r3, 1164
90000848:	b0009002 	imm	-28670
9000084c:	30a00838 	addik	r5, r0, 2104
90000850:	e8d30028 	lwi	r6, r19, 40
90000854:	10e40000 	addk	r7, r4, r0
90000858:	11030000 	addk	r8, r3, r0
9000085c:	b0000000 	imm	0
90000860:	b9f4f5e4 	brlid	r15, -2588	// 9000fe44 <printf>
90000864:	80000000 	or	r0, r0, r0
        return false;
90000868:	10600000 	addk	r3, r0, r0
9000086c:	f8730034 	swi	r3, r19, 52
90000870:	b80001e0 	bri	480		// 90000a50
    }




    unsigned i;
    bool     startOfParam = true;
90000874:	30600001 	addik	r3, r0, 1
90000878:	f8730020 	swi	r3, r19, 32
    char*    bufPtr;

    for(i = 0, bufPtr = cmdPkt->buf;
9000087c:	f8130024 	swi	r0, r19, 36
90000880:	e8730044 	lwi	r3, r19, 68
90000884:	30630004 	addik	r3, r3, 4
90000888:	f873001c 	swi	r3, r19, 28
        *bufPtr && i < cmdPkt->bufByteCount;
9000088c:	b8000128 	bri	296		// 900009b4
        i++, bufPtr++)
    {
        if(!isprint(*bufPtr))
90000890:	e873001c 	lwi	r3, r19, 28
90000894:	e0630000 	lbui	r3, r3, 0
90000898:	90630060 	sext8	r3, r3
9000089c:	10830000 	addk	r4, r3, r0
900008a0:	b0009002 	imm	-28670
900008a4:	e8603b5c 	lwi	r3, r0, 15196
900008a8:	10641800 	addk	r3, r4, r3
900008ac:	e0630000 	lbui	r3, r3, 0
900008b0:	90630060 	sext8	r3, r3
900008b4:	a4630097 	andi	r3, r3, 151
900008b8:	bc230010 	bnei	r3, 16		// 900008c8
        {
            // Invalid character
            return false;
900008bc:	10600000 	addk	r3, r0, r0
900008c0:	f8730034 	swi	r3, r19, 52
900008c4:	b800018c 	bri	396		// 90000a50
        }

        if(*bufPtr == paramDelimiter)
900008c8:	e873001c 	lwi	r3, r19, 28
900008cc:	e0630000 	lbui	r3, r3, 0
900008d0:	90630060 	sext8	r3, r3
900008d4:	aa430020 	xori	r18, r3, 32
900008d8:	bc320018 	bnei	r18, 24		// 900008f0
        {
            //Null terminate parameter
            *bufPtr = 0;
900008dc:	e873001c 	lwi	r3, r19, 28
900008e0:	f0030000 	sbi	r0, r3, 0

            startOfParam = true;
900008e4:	30600001 	addik	r3, r0, 1
900008e8:	f8730020 	swi	r3, r19, 32
900008ec:	b80000b0 	bri	176		// 9000099c
        }
        else
        {
            if(startOfParam)
900008f0:	e8730020 	lwi	r3, r19, 32
900008f4:	bc0300a8 	beqi	r3, 168		// 9000099c
            {
                startOfParam = false;
900008f8:	f8130020 	swi	r0, r19, 32

                if(!cmdPkt->dstSrc)
900008fc:	e8730044 	lwi	r3, r19, 68
90000900:	e8630404 	lwi	r3, r3, 1028
90000904:	bc230014 	bnei	r3, 20		// 90000918
                {
                    cmdPkt->dstSrc = bufPtr;
90000908:	e8930044 	lwi	r4, r19, 68
9000090c:	e873001c 	lwi	r3, r19, 28
90000910:	f8640404 	swi	r3, r4, 1028
90000914:	b8000088 	bri	136		// 9000099c
                }
                else if(!cmdPkt->seqNum)
90000918:	e8730044 	lwi	r3, r19, 68
9000091c:	e8630408 	lwi	r3, r3, 1032
90000920:	bc230014 	bnei	r3, 20		// 90000934
                {
                    cmdPkt->seqNum = bufPtr;
90000924:	e8930044 	lwi	r4, r19, 68
90000928:	e873001c 	lwi	r3, r19, 28
9000092c:	f8640408 	swi	r3, r4, 1032
90000930:	b800006c 	bri	108		// 9000099c
                }
                else if(!cmdPkt->cmd)
90000934:	e8730044 	lwi	r3, r19, 68
90000938:	e863040c 	lwi	r3, r3, 1036
9000093c:	bc230014 	bnei	r3, 20		// 90000950
                {
                    cmdPkt->cmd = bufPtr;
90000940:	e8930044 	lwi	r4, r19, 68
90000944:	e873001c 	lwi	r3, r19, 28
90000948:	f864040c 	swi	r3, r4, 1036
9000094c:	b8000050 	bri	80		// 9000099c
                }
                else
                {
                    if(cmdPkt->paramCount >= MAX_PARAMS_COUNT)
90000950:	e8730044 	lwi	r3, r19, 68
90000954:	e8630410 	lwi	r3, r3, 1040
90000958:	2240001d 	addi	r18, r0, 29
9000095c:	16439003 	cmpu	r18, r3, r18
90000960:	bcb20010 	bgei	r18, 16		// 90000970
                    {
                        // Too many parameters
                        return false;
90000964:	10600000 	addk	r3, r0, r0
90000968:	f8730034 	swi	r3, r19, 52
9000096c:	b80000e4 	bri	228		// 90000a50
                    }

                    cmdPkt->params[cmdPkt->paramCount++] = bufPtr;
90000970:	e8730044 	lwi	r3, r19, 68
90000974:	e8a30410 	lwi	r5, r3, 1040
90000978:	e8930044 	lwi	r4, r19, 68
9000097c:	64650402 	bslli	r3, r5, 2
90000980:	10632000 	addk	r3, r3, r4
90000984:	30830414 	addik	r4, r3, 1044
90000988:	e873001c 	lwi	r3, r19, 28
9000098c:	f8640000 	swi	r3, r4, 0
90000990:	30850001 	addik	r4, r5, 1
90000994:	e8730044 	lwi	r3, r19, 68
90000998:	f8830410 	swi	r4, r3, 1040
9000099c:	e8730024 	lwi	r3, r19, 36
900009a0:	30630001 	addik	r3, r3, 1
900009a4:	f8730024 	swi	r3, r19, 36
900009a8:	e873001c 	lwi	r3, r19, 28
900009ac:	30630001 	addik	r3, r3, 1
900009b0:	f873001c 	swi	r3, r19, 28
900009b4:	e873001c 	lwi	r3, r19, 28
900009b8:	e0630000 	lbui	r3, r3, 0
900009bc:	90630060 	sext8	r3, r3
900009c0:	bc030018 	beqi	r3, 24		// 900009d8
900009c4:	e8730044 	lwi	r3, r19, 68
900009c8:	e8830000 	lwi	r4, r3, 0
900009cc:	e8730024 	lwi	r3, r19, 36
900009d0:	16441803 	cmpu	r18, r4, r3
900009d4:	bc52febc 	blti	r18, -324		// 90000890
                }
            }
        }
    }

    //Null terminate last parameter
    *bufPtr = 0;
900009d8:	e873001c 	lwi	r3, r19, 28
900009dc:	f0030000 	sbi	r0, r3, 0

    if(!cmdPkt->dstSrc || strcmp(cmdPkt->dstSrc, TO_MASTER_FROM_HOST_KEY) != 0 ||
900009e0:	e8730044 	lwi	r3, r19, 68
900009e4:	e8630404 	lwi	r3, r3, 1028
900009e8:	bc030040 	beqi	r3, 64		// 90000a28
900009ec:	e8730044 	lwi	r3, r19, 68
900009f0:	e8630404 	lwi	r3, r3, 1028
900009f4:	10a30000 	addk	r5, r3, r0
900009f8:	b0009002 	imm	-28670
900009fc:	30c00860 	addik	r6, r0, 2144
90000a00:	b0000001 	imm	1
90000a04:	b9f4398c 	brlid	r15, 14732	// 90014390 <strcmp>
90000a08:	80000000 	or	r0, r0, r0
90000a0c:	bc23001c 	bnei	r3, 28		// 90000a28
90000a10:	e8730044 	lwi	r3, r19, 68
90000a14:	e8630408 	lwi	r3, r3, 1032
90000a18:	bc030010 	beqi	r3, 16		// 90000a28
90000a1c:	e8730044 	lwi	r3, r19, 68
90000a20:	e863040c 	lwi	r3, r3, 1036
90000a24:	bc230024 	bnei	r3, 36		// 90000a48
       !cmdPkt->seqNum || !cmdPkt->cmd)
    {
        printf("Cmd Pkt header invalid\n");
90000a28:	b0009002 	imm	-28670
90000a2c:	30a00864 	addik	r5, r0, 2148
90000a30:	b0000000 	imm	0
90000a34:	b9f4f504 	brlid	r15, -2812	// 9000ff38 <puts>
90000a38:	80000000 	or	r0, r0, r0
        return false;
90000a3c:	10600000 	addk	r3, r0, r0
90000a40:	f8730034 	swi	r3, r19, 52
90000a44:	b800000c 	bri	12		// 90000a50
    }

    #if DISPLAY_CMD_PKTS
        printf("Cmd Pkt:\n");
        printf("  Dst/Src   = %s\n", cmdPkt->dstSrc);
        printf("  Seq Num   = %s\n", cmdPkt->seqNum);
        printf("  Cmd       = %s\n", cmdPkt->cmd);
        printf("  Param Cnt = %d\n", cmdPkt->paramCount);
        printf("  Params:\n");
        for(i = 0; i < cmdPkt->paramCount; i++)
        {
            printf("    Param %d = %s\n", i, cmdPkt->params[i]);
        }
        printf("  CRC       = %s\n", cmdPkt->crc);
    #endif

    return true;
90000a48:	30600001 	addik	r3, r0, 1
90000a4c:	f8730034 	swi	r3, r19, 52
90000a50:	e8730034 	lwi	r3, r19, 52
}
90000a54:	e9e10000 	lwi	r15, r1, 0
90000a58:	10330000 	addk	r1, r19, r0
90000a5c:	ea610038 	lwi	r19, r1, 56
90000a60:	eac1003c 	lwi	r22, r1, 60
90000a64:	30210040 	addik	r1, r1, 64
90000a68:	b60f0008 	rtsd	r15, 8
90000a6c:	80000000 	or	r0, r0, r0

90000a70 <processCmdPkt>:



static void processCmdPkt(CmdPkt* cmdPkt)
{
90000a70:	3021ffdc 	addik	r1, r1, -36
90000a74:	f9e10000 	swi	r15, r1, 0
90000a78:	fa610020 	swi	r19, r1, 32
90000a7c:	12610000 	addk	r19, r1, r0
90000a80:	f8b30028 	swi	r5, r19, 40
    const CommCommand* commCommandIterator = commCommands;
90000a84:	b0009002 	imm	-28670
90000a88:	306005e8 	addik	r3, r0, 1512
90000a8c:	f873001c 	swi	r3, r19, 28

    while(commCommandIterator->cmd)
90000a90:	b80000a8 	bri	168		// 90000b38
    {
        if(strcmp(cmdPkt->cmd, commCommandIterator->cmd) == 0)
90000a94:	e8730028 	lwi	r3, r19, 40
90000a98:	e883040c 	lwi	r4, r3, 1036
90000a9c:	e873001c 	lwi	r3, r19, 28
90000aa0:	e8630000 	lwi	r3, r3, 0
90000aa4:	10a40000 	addk	r5, r4, r0
90000aa8:	10c30000 	addk	r6, r3, r0
90000aac:	b0000001 	imm	1
90000ab0:	b9f438e0 	brlid	r15, 14560	// 90014390 <strcmp>
90000ab4:	80000000 	or	r0, r0, r0
90000ab8:	bc230074 	bnei	r3, 116		// 90000b2c
        {
            if((int)cmdPkt->paramCount == commCommandIterator->paramCount ||
90000abc:	e8730028 	lwi	r3, r19, 40
90000ac0:	e8630410 	lwi	r3, r3, 1040
90000ac4:	10830000 	addk	r4, r3, r0
90000ac8:	e873001c 	lwi	r3, r19, 28
90000acc:	e8630004 	lwi	r3, r3, 4
90000ad0:	16432000 	rsubk	r18, r3, r4
90000ad4:	bc120014 	beqi	r18, 20		// 90000ae8
90000ad8:	e873001c 	lwi	r3, r19, 28
90000adc:	e8630004 	lwi	r3, r3, 4
90000ae0:	aa43ffff 	xori	r18, r3, -1
90000ae4:	bc32001c 	bnei	r18, 28		// 90000b00
               commCommandIterator->paramCount == VAR_PARAM_COUNT)
            {
                commCommandIterator->cmdHandler(cmdPkt);
90000ae8:	e873001c 	lwi	r3, r19, 28
90000aec:	e8630008 	lwi	r3, r3, 8
90000af0:	e8b30028 	lwi	r5, r19, 40
90000af4:	99fc1800 	brald	r15, r3
90000af8:	80000000 	or	r0, r0, r0
90000afc:	b8000054 	bri	84		// 90000b50
            }
            else
            {
                sendRspStatusInvalidParameterCount(cmdPkt, commCommandIterator->paramCount, commCommandIterator->paramCount);
90000b00:	e873001c 	lwi	r3, r19, 28
90000b04:	e8630004 	lwi	r3, r3, 4
90000b08:	10830000 	addk	r4, r3, r0
90000b0c:	e873001c 	lwi	r3, r19, 28
90000b10:	e8630004 	lwi	r3, r3, 4
90000b14:	e8b30028 	lwi	r5, r19, 40
90000b18:	10c40000 	addk	r6, r4, r0
90000b1c:	10e30000 	addk	r7, r3, r0
90000b20:	b9f41418 	brlid	r15, 5144	// 90001f38 <sendRspStatusInvalidParameterCount>
90000b24:	80000000 	or	r0, r0, r0
            }

            return;
90000b28:	b8000028 	bri	40		// 90000b50
        }

        commCommandIterator++;
90000b2c:	e873001c 	lwi	r3, r19, 28
90000b30:	3063000c 	addik	r3, r3, 12
90000b34:	f873001c 	swi	r3, r19, 28
90000b38:	e873001c 	lwi	r3, r19, 28
90000b3c:	e8630000 	lwi	r3, r3, 0
90000b40:	bc23ff54 	bnei	r3, -172		// 90000a94
    }

    sendRspStatusUnknownCommand(cmdPkt);
90000b44:	e8b30028 	lwi	r5, r19, 40
90000b48:	b9f41588 	brlid	r15, 5512	// 900020d0 <sendRspStatusUnknownCommand>
90000b4c:	80000000 	or	r0, r0, r0
}
90000b50:	e9e10000 	lwi	r15, r1, 0
90000b54:	10330000 	addk	r1, r19, r0
90000b58:	ea610020 	lwi	r19, r1, 32
90000b5c:	30210024 	addik	r1, r1, 36
90000b60:	b60f0008 	rtsd	r15, 8
90000b64:	80000000 	or	r0, r0, r0

90000b68 <addParamDelimiter>:



void addParamDelimiter(RspPkt* rspPkt)
{
90000b68:	3021fff8 	addik	r1, r1, -8
90000b6c:	fa610004 	swi	r19, r1, 4
90000b70:	12610000 	addk	r19, r1, r0
90000b74:	f8b3000c 	swi	r5, r19, 12
    if(rspPkt->paramCount > 0 && rspPkt->bufByteCount < COMM_RSP_BUF_SIZE - 1)
90000b78:	e873000c 	lwi	r3, r19, 12
90000b7c:	e8630004 	lwi	r3, r3, 4
90000b80:	bc030048 	beqi	r3, 72		// 90000bc8
90000b84:	e873000c 	lwi	r3, r19, 12
90000b88:	e8630000 	lwi	r3, r3, 0
90000b8c:	224003fe 	addi	r18, r0, 1022
90000b90:	16439003 	cmpu	r18, r3, r18
90000b94:	bc520034 	blti	r18, 52		// 90000bc8
    {
        *rspPkt->bufPtr++ = paramDelimiter;
90000b98:	e873000c 	lwi	r3, r19, 12
90000b9c:	e8830008 	lwi	r4, r3, 8
90000ba0:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
90000ba4:	f0640000 	sbi	r3, r4, 0
90000ba8:	30840001 	addik	r4, r4, 1
90000bac:	e873000c 	lwi	r3, r19, 12
90000bb0:	f8830008 	swi	r4, r3, 8
        rspPkt->bufByteCount++;
90000bb4:	e873000c 	lwi	r3, r19, 12
90000bb8:	e8630000 	lwi	r3, r3, 0
90000bbc:	30830001 	addik	r4, r3, 1
90000bc0:	e873000c 	lwi	r3, r19, 12
90000bc4:	f8830000 	swi	r4, r3, 0
    }
}
90000bc8:	10330000 	addk	r1, r19, r0
90000bcc:	ea610004 	lwi	r19, r1, 4
90000bd0:	30210008 	addik	r1, r1, 8
90000bd4:	b60f0008 	rtsd	r15, 8
90000bd8:	80000000 	or	r0, r0, r0

90000bdc <addParamToRspPkt>:


void addParamToRspPkt(RspPkt* rspPkt, const char *format, ...)
{
90000bdc:	f8c10008 	swi	r6, r1, 8
90000be0:	f8e1000c 	swi	r7, r1, 12
90000be4:	f9010010 	swi	r8, r1, 16
90000be8:	f9210014 	swi	r9, r1, 20
90000bec:	f9410018 	swi	r10, r1, 24
90000bf0:	3021ffd8 	addik	r1, r1, -40
90000bf4:	f9e10000 	swi	r15, r1, 0
90000bf8:	fa610024 	swi	r19, r1, 36
90000bfc:	12610000 	addk	r19, r1, r0
90000c00:	f8b3002c 	swi	r5, r19, 44
90000c04:	f8d30030 	swi	r6, r19, 48
    addParamDelimiter(rspPkt);
90000c08:	e8b3002c 	lwi	r5, r19, 44
90000c0c:	b9f4ff5c 	brlid	r15, -164	// 90000b68 <addParamDelimiter>
90000c10:	80000000 	or	r0, r0, r0

    int     count;
    va_list argp;

    va_start (argp, format);
90000c14:	30730034 	addik	r3, r19, 52
90000c18:	f8730020 	swi	r3, r19, 32

    count = vsnprintf(rspPkt->bufPtr, COMM_RSP_BUF_SIZE - rspPkt->bufByteCount, format, argp);
90000c1c:	e873002c 	lwi	r3, r19, 44
90000c20:	e8830008 	lwi	r4, r3, 8
90000c24:	e873002c 	lwi	r3, r19, 44
90000c28:	e8630000 	lwi	r3, r3, 0
90000c2c:	34630400 	rsubik	r3, r3, 1024
90000c30:	e9130020 	lwi	r8, r19, 32
90000c34:	10a40000 	addk	r5, r4, r0
90000c38:	10c30000 	addk	r6, r3, r0
90000c3c:	e8f30030 	lwi	r7, r19, 48
90000c40:	b0000001 	imm	1
90000c44:	b9f46564 	brlid	r15, 25956	// 900171a8 <vsnprintf>
90000c48:	80000000 	or	r0, r0, r0
90000c4c:	f873001c 	swi	r3, r19, 28
    va_end (argp);

    rspPkt->bufPtr    += count;
90000c50:	e873002c 	lwi	r3, r19, 44
90000c54:	e8830008 	lwi	r4, r3, 8
90000c58:	e873001c 	lwi	r3, r19, 28
90000c5c:	10841800 	addk	r4, r4, r3
90000c60:	e873002c 	lwi	r3, r19, 44
90000c64:	f8830008 	swi	r4, r3, 8
    rspPkt->bufByteCount += count;
90000c68:	e873002c 	lwi	r3, r19, 44
90000c6c:	e8830000 	lwi	r4, r3, 0
90000c70:	e873001c 	lwi	r3, r19, 28
90000c74:	10841800 	addk	r4, r4, r3
90000c78:	e873002c 	lwi	r3, r19, 44
90000c7c:	f8830000 	swi	r4, r3, 0

    ASSERT(rspPkt->bufByteCount <= COMM_RSP_BUF_SIZE);
90000c80:	e873002c 	lwi	r3, r19, 44
90000c84:	e8630000 	lwi	r3, r3, 0
90000c88:	22400400 	addi	r18, r0, 1024
90000c8c:	16439003 	cmpu	r18, r3, r18
90000c90:	bcb2002c 	bgei	r18, 44		// 90000cbc
90000c94:	94110002 	msrclr	r0, 2
90000c98:	b0009002 	imm	-28670
90000c9c:	30a0087c 	addik	r5, r0, 2172
90000ca0:	b0009002 	imm	-28670
90000ca4:	30c00780 	addik	r6, r0, 1920
90000ca8:	30e002ab 	addik	r7, r0, 683
90000cac:	b0000000 	imm	0
90000cb0:	b9f4b774 	brlid	r15, -18572	// 9000c424 <printAssert>
90000cb4:	80000000 	or	r0, r0, r0
90000cb8:	b8000000 	bri	0		// 90000cb8

    rspPkt->paramCount++;
90000cbc:	e873002c 	lwi	r3, r19, 44
90000cc0:	e8630004 	lwi	r3, r3, 4
90000cc4:	30830001 	addik	r4, r3, 1
90000cc8:	e873002c 	lwi	r3, r19, 44
90000ccc:	f8830004 	swi	r4, r3, 4
}
90000cd0:	e9e10000 	lwi	r15, r1, 0
90000cd4:	10330000 	addk	r1, r19, r0
90000cd8:	ea610024 	lwi	r19, r1, 36
90000cdc:	30210028 	addik	r1, r1, 40
90000ce0:	b60f0008 	rtsd	r15, 8
90000ce4:	80000000 	or	r0, r0, r0

90000ce8 <addStringParamToRspPkt>:


void addStringParamToRspPkt(RspPkt* rspPkt, const char* str)
{
90000ce8:	3021ffe0 	addik	r1, r1, -32
90000cec:	f9e10000 	swi	r15, r1, 0
90000cf0:	fa61001c 	swi	r19, r1, 28
90000cf4:	12610000 	addk	r19, r1, r0
90000cf8:	f8b30024 	swi	r5, r19, 36
90000cfc:	f8d30028 	swi	r6, r19, 40
    addParamDelimiter(rspPkt);
90000d00:	e8b30024 	lwi	r5, r19, 36
90000d04:	b9f4fe64 	brlid	r15, -412	// 90000b68 <addParamDelimiter>
90000d08:	80000000 	or	r0, r0, r0

    while(*str && rspPkt->bufByteCount < COMM_RSP_BUF_SIZE - 1)
90000d0c:	b8000048 	bri	72		// 90000d54
    {
        *rspPkt->bufPtr++ = *str++;
90000d10:	e8730024 	lwi	r3, r19, 36
90000d14:	e8830008 	lwi	r4, r3, 8
90000d18:	e8730028 	lwi	r3, r19, 40
90000d1c:	e0630000 	lbui	r3, r3, 0
90000d20:	90630060 	sext8	r3, r3
90000d24:	f0640000 	sbi	r3, r4, 0
90000d28:	30840001 	addik	r4, r4, 1
90000d2c:	e8730024 	lwi	r3, r19, 36
90000d30:	f8830008 	swi	r4, r3, 8
90000d34:	e8730028 	lwi	r3, r19, 40
90000d38:	30630001 	addik	r3, r3, 1
90000d3c:	f8730028 	swi	r3, r19, 40
        rspPkt->bufByteCount++;
90000d40:	e8730024 	lwi	r3, r19, 36
90000d44:	e8630000 	lwi	r3, r3, 0
90000d48:	30830001 	addik	r4, r3, 1
90000d4c:	e8730024 	lwi	r3, r19, 36
90000d50:	f8830000 	swi	r4, r3, 0
90000d54:	e8730028 	lwi	r3, r19, 40
90000d58:	e0630000 	lbui	r3, r3, 0
90000d5c:	90630060 	sext8	r3, r3
90000d60:	bc030018 	beqi	r3, 24		// 90000d78
90000d64:	e8730024 	lwi	r3, r19, 36
90000d68:	e8630000 	lwi	r3, r3, 0
90000d6c:	224003fe 	addi	r18, r0, 1022
90000d70:	16439003 	cmpu	r18, r3, r18
90000d74:	bcb2ff9c 	bgei	r18, -100		// 90000d10
    }

    *rspPkt->bufPtr = '\0';
90000d78:	e8730024 	lwi	r3, r19, 36
90000d7c:	e8630008 	lwi	r3, r3, 8
90000d80:	f0030000 	sbi	r0, r3, 0

    rspPkt->paramCount++;
90000d84:	e8730024 	lwi	r3, r19, 36
90000d88:	e8630004 	lwi	r3, r3, 4
90000d8c:	30830001 	addik	r4, r3, 1
90000d90:	e8730024 	lwi	r3, r19, 36
90000d94:	f8830004 	swi	r4, r3, 4
}
90000d98:	e9e10000 	lwi	r15, r1, 0
90000d9c:	10330000 	addk	r1, r19, r0
90000da0:	ea61001c 	lwi	r19, r1, 28
90000da4:	30210020 	addik	r1, r1, 32
90000da8:	b60f0008 	rtsd	r15, 8
90000dac:	80000000 	or	r0, r0, r0

90000db0 <sendRspPkt>:



void sendRspPkt(RspPkt* rspPkt)
{
90000db0:	3021ffdc 	addik	r1, r1, -36
90000db4:	f9e10000 	swi	r15, r1, 0
90000db8:	fa610020 	swi	r19, r1, 32
90000dbc:	12610000 	addk	r19, r1, r0
90000dc0:	f8b30028 	swi	r5, r19, 40
    uint16 crc = calcCRC16(INITIAL_CRC16_VALUE, rspPkt->buf, rspPkt->bufByteCount);
90000dc4:	e8730028 	lwi	r3, r19, 40
90000dc8:	3083000c 	addik	r4, r3, 12
90000dcc:	e8730028 	lwi	r3, r19, 40
90000dd0:	e8630000 	lwi	r3, r3, 0
90000dd4:	30a0ffff 	addik	r5, r0, -1
90000dd8:	10c40000 	addk	r6, r4, r0
90000ddc:	10e30000 	addk	r7, r3, r0
90000de0:	b0000000 	imm	0
90000de4:	b9f4cb14 	brlid	r15, -13548	// 9000d8f8 <calcCRC16>
90000de8:	80000000 	or	r0, r0, r0
90000dec:	f473001c 	shi	r3, r19, 28

    addParamToRspPkt(rspPkt, "%u", crc);
90000df0:	e473001c 	lhui	r3, r19, 28
90000df4:	e8b30028 	lwi	r5, r19, 40
90000df8:	b0009002 	imm	-28670
90000dfc:	30c008a8 	addik	r6, r0, 2216
90000e00:	10e30000 	addk	r7, r3, r0
90000e04:	b9f4fdd8 	brlid	r15, -552	// 90000bdc <addParamToRspPkt>
90000e08:	80000000 	or	r0, r0, r0

    #if DISPLAY_RX_TX
        printf("TX: %s\n", rspPkt->buf);
    #endif

    if(!strncmp(rspPkt->status, RSP_ERROR, 2))
90000e0c:	e8730028 	lwi	r3, r19, 40
90000e10:	e8630414 	lwi	r3, r3, 1044
90000e14:	10a30000 	addk	r5, r3, r0
90000e18:	b0009002 	imm	-28670
90000e1c:	30c008ac 	addik	r6, r0, 2220
90000e20:	30e00002 	addik	r7, r0, 2
90000e24:	b0000001 	imm	1
90000e28:	b9f43674 	brlid	r15, 13940	// 9001449c <strncmp>
90000e2c:	80000000 	or	r0, r0, r0
90000e30:	bc230024 	bnei	r3, 36		// 90000e54
    {
        printf("Error: %s\n", rspPkt->cmd);
90000e34:	e8730028 	lwi	r3, r19, 40
90000e38:	e8630410 	lwi	r3, r3, 1040
90000e3c:	b0009002 	imm	-28670
90000e40:	30a008b0 	addik	r5, r0, 2224
90000e44:	10c30000 	addk	r6, r3, r0
90000e48:	b0000000 	imm	0
90000e4c:	b9f4eff8 	brlid	r15, -4104	// 9000fe44 <printf>
90000e50:	80000000 	or	r0, r0, r0
    }

    if(!serialSendPkt(HOST_INTERFACE_PORT, (uint8*)rspPkt->buf, rspPkt->bufByteCount, TX_TIMEOUT_us))
90000e54:	e8730028 	lwi	r3, r19, 40
90000e58:	3063000c 	addik	r3, r3, 12
90000e5c:	10830000 	addk	r4, r3, r0
90000e60:	e8730028 	lwi	r3, r19, 40
90000e64:	e8630000 	lwi	r3, r3, 0
90000e68:	10a00000 	addk	r5, r0, r0
90000e6c:	10c40000 	addk	r6, r4, r0
90000e70:	10e30000 	addk	r7, r3, r0
90000e74:	31002710 	addik	r8, r0, 10000
90000e78:	b0000000 	imm	0
90000e7c:	b9f48334 	brlid	r15, -31948	// 900091b0 <serialSendPkt>
90000e80:	80000000 	or	r0, r0, r0
90000e84:	bc230024 	bnei	r3, 36		// 90000ea8
    {
        printf("TX packet send timeout: %s\n", rspPkt->buf);
90000e88:	e8730028 	lwi	r3, r19, 40
90000e8c:	3063000c 	addik	r3, r3, 12
90000e90:	b0009002 	imm	-28670
90000e94:	30a008bc 	addik	r5, r0, 2236
90000e98:	10c30000 	addk	r6, r3, r0
90000e9c:	b0000000 	imm	0
90000ea0:	b9f4efa4 	brlid	r15, -4188	// 9000fe44 <printf>
90000ea4:	80000000 	or	r0, r0, r0
    }
}
90000ea8:	e9e10000 	lwi	r15, r1, 0
90000eac:	10330000 	addk	r1, r19, r0
90000eb0:	ea610020 	lwi	r19, r1, 32
90000eb4:	30210024 	addik	r1, r1, 36
90000eb8:	b60f0008 	rtsd	r15, 8
90000ebc:	80000000 	or	r0, r0, r0

90000ec0 <checkPendingCmds>:



bool checkPendingCmds(CmdPkt* cmdPkt,  uint32 offlineCmdIndex, uint32 ignoreMask)
{
90000ec0:	3021ffd8 	addik	r1, r1, -40
90000ec4:	f9e10000 	swi	r15, r1, 0
90000ec8:	fa610024 	swi	r19, r1, 36
90000ecc:	12610000 	addk	r19, r1, r0
90000ed0:	f8b3002c 	swi	r5, r19, 44
90000ed4:	f8d30030 	swi	r6, r19, 48
90000ed8:	f8f30034 	swi	r7, r19, 52
    ASSERT(offlineCmdIndex < OfflineCommand_count);
90000edc:	e8730030 	lwi	r3, r19, 48
90000ee0:	22400001 	addi	r18, r0, 1
90000ee4:	16439003 	cmpu	r18, r3, r18
90000ee8:	bcb2002c 	bgei	r18, 44		// 90000f14
90000eec:	94110002 	msrclr	r0, 2
90000ef0:	b0009002 	imm	-28670
90000ef4:	30a008d8 	addik	r5, r0, 2264
90000ef8:	b0009002 	imm	-28670
90000efc:	30c00780 	addik	r6, r0, 1920
90000f00:	30e002db 	addik	r7, r0, 731
90000f04:	b0000000 	imm	0
90000f08:	b9f4b51c 	brlid	r15, -19172	// 9000c424 <printAssert>
90000f0c:	80000000 	or	r0, r0, r0
90000f10:	b8000000 	bri	0		// 90000f10


    // Check for matching offline cmd already pending
    if(commData.pendingCommands[offlineCmdIndex].active &&
90000f14:	e8930030 	lwi	r4, r19, 48
90000f18:	306000cc 	addik	r3, r0, 204
90000f1c:	40841800 	mul	r4, r4, r3
90000f20:	b0009002 	imm	-28670
90000f24:	3060fe48 	addik	r3, r0, -440
90000f28:	10641800 	addk	r3, r4, r3
90000f2c:	e8630000 	lwi	r3, r3, 0
90000f30:	bc030058 	beqi	r3, 88		// 90000f88
90000f34:	e8930030 	lwi	r4, r19, 48
90000f38:	306000cc 	addik	r3, r0, 204
90000f3c:	40641800 	mul	r3, r4, r3
90000f40:	30830030 	addik	r4, r3, 48
90000f44:	b0009002 	imm	-28670
90000f48:	3060fe1c 	addik	r3, r0, -484
90000f4c:	10841800 	addk	r4, r4, r3
90000f50:	e873002c 	lwi	r3, r19, 44
90000f54:	e8630408 	lwi	r3, r3, 1032
90000f58:	10a40000 	addk	r5, r4, r0
90000f5c:	10c30000 	addk	r6, r3, r0
90000f60:	b0000001 	imm	1
90000f64:	b9f4342c 	brlid	r15, 13356	// 90014390 <strcmp>
90000f68:	80000000 	or	r0, r0, r0
90000f6c:	bc23001c 	bnei	r3, 28		// 90000f88
       strcmp(commData.pendingCommands[offlineCmdIndex].seqNum, cmdPkt->seqNum) == 0)
    {
        // Resend pending rsp
        sendRspPending(cmdPkt);
90000f70:	e8b3002c 	lwi	r5, r19, 44
90000f74:	b9f40c48 	brlid	r15, 3144	// 90001bbc <sendRspPending>
90000f78:	80000000 	or	r0, r0, r0
        return false;
90000f7c:	10600000 	addk	r3, r0, r0
90000f80:	f8730020 	swi	r3, r19, 32
90000f84:	b80000a0 	bri	160		// 90001024
    }


    // Check for any pending cmds (except ignoreMask)
    int i;
    for(i = 0; i < OfflineCommand_count; i++)
90000f88:	f813001c 	swi	r0, r19, 28
90000f8c:	b8000080 	bri	128		// 9000100c
    {
        if(commData.pendingCommands[i].active && (!(ignoreMask & (1 << i))))
90000f90:	e893001c 	lwi	r4, r19, 28
90000f94:	306000cc 	addik	r3, r0, 204
90000f98:	40841800 	mul	r4, r4, r3
90000f9c:	b0009002 	imm	-28670
90000fa0:	3060fe48 	addik	r3, r0, -440
90000fa4:	10641800 	addk	r3, r4, r3
90000fa8:	e8630000 	lwi	r3, r3, 0
90000fac:	bc030054 	beqi	r3, 84		// 90001000
90000fb0:	30800001 	addik	r4, r0, 1
90000fb4:	e873001c 	lwi	r3, r19, 28
90000fb8:	44641c00 	bsll	r3, r4, r3
90000fbc:	10830000 	addk	r4, r3, r0
90000fc0:	e8730034 	lwi	r3, r19, 52
90000fc4:	84641800 	and	r3, r4, r3
90000fc8:	bc230038 	bnei	r3, 56		// 90001000
        {
            sendRspStatusSystemBusy(cmdPkt, OfflineCommandNames[i]);
90000fcc:	e873001c 	lwi	r3, r19, 28
90000fd0:	64830402 	bslli	r4, r3, 2
90000fd4:	b0009002 	imm	-28670
90000fd8:	30603694 	addik	r3, r0, 13972
90000fdc:	10641800 	addk	r3, r4, r3
90000fe0:	e8630000 	lwi	r3, r3, 0
90000fe4:	e8b3002c 	lwi	r5, r19, 44
90000fe8:	10c30000 	addk	r6, r3, r0
90000fec:	b9f41124 	brlid	r15, 4388	// 90002110 <sendRspStatusSystemBusy>
90000ff0:	80000000 	or	r0, r0, r0
            return false;
90000ff4:	10600000 	addk	r3, r0, r0
90000ff8:	f8730020 	swi	r3, r19, 32
90000ffc:	b8000028 	bri	40		// 90001024
90001000:	e873001c 	lwi	r3, r19, 28
90001004:	30630001 	addik	r3, r3, 1
90001008:	f873001c 	swi	r3, r19, 28
9000100c:	e873001c 	lwi	r3, r19, 28
90001010:	32400001 	addik	r18, r0, 1
90001014:	16439001 	cmp	r18, r3, r18
90001018:	bcb2ff78 	bgei	r18, -136		// 90000f90
        }
    }

    // Okay to continue
    return true;
9000101c:	30600001 	addik	r3, r0, 1
90001020:	f8730020 	swi	r3, r19, 32
90001024:	e8730020 	lwi	r3, r19, 32
}
90001028:	e9e10000 	lwi	r15, r1, 0
9000102c:	10330000 	addk	r1, r19, r0
90001030:	ea610024 	lwi	r19, r1, 36
90001034:	30210028 	addik	r1, r1, 40
90001038:	b60f0008 	rtsd	r15, 8
9000103c:	80000000 	or	r0, r0, r0

90001040 <registerPendingCmd>:



static void registerPendingCmd(uint32 offlineCmdIndex, CmdPkt* cmdPkt)
{
90001040:	3021ffe0 	addik	r1, r1, -32
90001044:	f9e10000 	swi	r15, r1, 0
90001048:	fa61001c 	swi	r19, r1, 28
9000104c:	12610000 	addk	r19, r1, r0
90001050:	f8b30024 	swi	r5, r19, 36
90001054:	f8d30028 	swi	r6, r19, 40
    ASSERT(offlineCmdIndex < OfflineCommand_count);
90001058:	e8730024 	lwi	r3, r19, 36
9000105c:	22400001 	addi	r18, r0, 1
90001060:	16439003 	cmpu	r18, r3, r18
90001064:	bcb2002c 	bgei	r18, 44		// 90001090
90001068:	94110002 	msrclr	r0, 2
9000106c:	b0009002 	imm	-28670
90001070:	30a008d8 	addik	r5, r0, 2264
90001074:	b0009002 	imm	-28670
90001078:	30c00780 	addik	r6, r0, 1920
9000107c:	30e002fb 	addik	r7, r0, 763
90001080:	b0000000 	imm	0
90001084:	b9f4b3a0 	brlid	r15, -19552	// 9000c424 <printAssert>
90001088:	80000000 	or	r0, r0, r0
9000108c:	b8000000 	bri	0		// 9000108c
    ASSERT(!commData.pendingCommands[offlineCmdIndex].active);
90001090:	e8930024 	lwi	r4, r19, 36
90001094:	306000cc 	addik	r3, r0, 204
90001098:	40841800 	mul	r4, r4, r3
9000109c:	b0009002 	imm	-28670
900010a0:	3060fe48 	addik	r3, r0, -440
900010a4:	10641800 	addk	r3, r4, r3
900010a8:	e8630000 	lwi	r3, r3, 0
900010ac:	bc03002c 	beqi	r3, 44		// 900010d8
900010b0:	94110002 	msrclr	r0, 2
900010b4:	b0009002 	imm	-28670
900010b8:	30a00900 	addik	r5, r0, 2304
900010bc:	b0009002 	imm	-28670
900010c0:	30c00780 	addik	r6, r0, 1920
900010c4:	30e002fc 	addik	r7, r0, 764
900010c8:	b0000000 	imm	0
900010cc:	b9f4b358 	brlid	r15, -19624	// 9000c424 <printAssert>
900010d0:	80000000 	or	r0, r0, r0
900010d4:	b8000000 	bri	0		// 900010d4
    ASSERT(cmdPkt);
900010d8:	e8730028 	lwi	r3, r19, 40
900010dc:	bc23002c 	bnei	r3, 44		// 90001108
900010e0:	94110002 	msrclr	r0, 2
900010e4:	b0009002 	imm	-28670
900010e8:	30a00800 	addik	r5, r0, 2048
900010ec:	b0009002 	imm	-28670
900010f0:	30c00780 	addik	r6, r0, 1920
900010f4:	30e002fd 	addik	r7, r0, 765
900010f8:	b0000000 	imm	0
900010fc:	b9f4b328 	brlid	r15, -19672	// 9000c424 <printAssert>
90001100:	80000000 	or	r0, r0, r0
90001104:	b8000000 	bri	0		// 90001104

    commData.pendingCommands[offlineCmdIndex].active = true;
90001108:	e8930024 	lwi	r4, r19, 36
9000110c:	306000cc 	addik	r3, r0, 204
90001110:	40841800 	mul	r4, r4, r3
90001114:	b0009002 	imm	-28670
90001118:	3060fe48 	addik	r3, r0, -440
9000111c:	10841800 	addk	r4, r4, r3
90001120:	30600001 	addik	r3, r0, 1
90001124:	f8640000 	swi	r3, r4, 0

    strncpy(commData.pendingCommands[offlineCmdIndex].seqNum,
90001128:	e8930024 	lwi	r4, r19, 36
9000112c:	306000cc 	addik	r3, r0, 204
90001130:	40641800 	mul	r3, r4, r3
90001134:	30830030 	addik	r4, r3, 48
90001138:	b0009002 	imm	-28670
9000113c:	3060fe1c 	addik	r3, r0, -484
90001140:	10841800 	addk	r4, r4, r3
90001144:	e8730028 	lwi	r3, r19, 40
90001148:	e8630408 	lwi	r3, r3, 1032
9000114c:	10a40000 	addk	r5, r4, r0
90001150:	10c30000 	addk	r6, r3, r0
90001154:	30e00064 	addik	r7, r0, 100
90001158:	b0000001 	imm	1
9000115c:	b9f43464 	brlid	r15, 13412	// 900145c0 <strncpy>
90001160:	80000000 	or	r0, r0, r0
            cmdPkt->seqNum, sizeof(commData.pendingCommands[offlineCmdIndex].seqNum));
    commData.pendingCommands[offlineCmdIndex].
90001164:	e8930024 	lwi	r4, r19, 36
90001168:	306000cc 	addik	r3, r0, 204
9000116c:	40841800 	mul	r4, r4, r3
90001170:	b0009002 	imm	-28670
90001174:	3060feaf 	addik	r3, r0, -337
90001178:	10641800 	addk	r3, r4, r3
9000117c:	f0030000 	sbi	r0, r3, 0
        seqNum[sizeof(commData.pendingCommands[offlineCmdIndex].seqNum)-1] = '\0';

    strncpy(commData.pendingCommands[offlineCmdIndex].cmd,
90001180:	e8930024 	lwi	r4, r19, 36
90001184:	306000cc 	addik	r3, r0, 204
90001188:	40641800 	mul	r3, r4, r3
9000118c:	30830094 	addik	r4, r3, 148
90001190:	b0009002 	imm	-28670
90001194:	3060fe1c 	addik	r3, r0, -484
90001198:	10841800 	addk	r4, r4, r3
9000119c:	e8730028 	lwi	r3, r19, 40
900011a0:	e863040c 	lwi	r3, r3, 1036
900011a4:	10a40000 	addk	r5, r4, r0
900011a8:	10c30000 	addk	r6, r3, r0
900011ac:	30e00064 	addik	r7, r0, 100
900011b0:	b0000001 	imm	1
900011b4:	b9f4340c 	brlid	r15, 13324	// 900145c0 <strncpy>
900011b8:	80000000 	or	r0, r0, r0
            cmdPkt->cmd, sizeof(commData.pendingCommands[offlineCmdIndex].cmd));
    commData.pendingCommands[offlineCmdIndex].
900011bc:	e8930024 	lwi	r4, r19, 36
900011c0:	306000cc 	addik	r3, r0, 204
900011c4:	40841800 	mul	r4, r4, r3
900011c8:	b0009002 	imm	-28670
900011cc:	3060ff13 	addik	r3, r0, -237
900011d0:	10641800 	addk	r3, r4, r3
900011d4:	f0030000 	sbi	r0, r3, 0
        cmd[sizeof(commData.pendingCommands[offlineCmdIndex].cmd)-1] = '\0';
}
900011d8:	e9e10000 	lwi	r15, r1, 0
900011dc:	10330000 	addk	r1, r19, r0
900011e0:	ea61001c 	lwi	r19, r1, 28
900011e4:	30210020 	addik	r1, r1, 32
900011e8:	b60f0008 	rtsd	r15, 8
900011ec:	80000000 	or	r0, r0, r0

900011f0 <sendOfflineRspOk>:



static void sendOfflineRspOk(uint32 offlineCmdIndex, const char* extraParams)
{
900011f0:	3021fbc4 	addik	r1, r1, -1084
900011f4:	f9e10000 	swi	r15, r1, 0
900011f8:	fa610438 	swi	r19, r1, 1080
900011fc:	12610000 	addk	r19, r1, r0
90001200:	f8b30440 	swi	r5, r19, 1088
90001204:	f8d30444 	swi	r6, r19, 1092
    RspPkt rspPkt;

    if(initOfflineRsp(&rspPkt, offlineCmdIndex, true))
90001208:	3073001c 	addik	r3, r19, 28
9000120c:	10a30000 	addk	r5, r3, r0
90001210:	e8d30440 	lwi	r6, r19, 1088
90001214:	30e00001 	addik	r7, r0, 1
90001218:	b9f40530 	brlid	r15, 1328	// 90001748 <initOfflineRsp>
9000121c:	80000000 	or	r0, r0, r0
90001220:	bc030048 	beqi	r3, 72		// 90001268
    {
        addStringParamToRspPkt(&rspPkt, RSP_OK);
90001224:	3073001c 	addik	r3, r19, 28
90001228:	10a30000 	addk	r5, r3, r0
9000122c:	b0009002 	imm	-28670
90001230:	30c00934 	addik	r6, r0, 2356
90001234:	b9f4fab4 	brlid	r15, -1356	// 90000ce8 <addStringParamToRspPkt>
90001238:	80000000 	or	r0, r0, r0
        if(extraParams)
9000123c:	e8730444 	lwi	r3, r19, 1092
90001240:	bc030018 	beqi	r3, 24		// 90001258
        {
            addStringParamToRspPkt(&rspPkt, extraParams);
90001244:	3073001c 	addik	r3, r19, 28
90001248:	10a30000 	addk	r5, r3, r0
9000124c:	e8d30444 	lwi	r6, r19, 1092
90001250:	b9f4fa98 	brlid	r15, -1384	// 90000ce8 <addStringParamToRspPkt>
90001254:	80000000 	or	r0, r0, r0
        }
        sendRspPkt(&rspPkt);
90001258:	3073001c 	addik	r3, r19, 28
9000125c:	10a30000 	addk	r5, r3, r0
90001260:	b9f4fb50 	brlid	r15, -1200	// 90000db0 <sendRspPkt>
90001264:	80000000 	or	r0, r0, r0
    }
}
90001268:	e9e10000 	lwi	r15, r1, 0
9000126c:	10330000 	addk	r1, r19, r0
90001270:	ea610438 	lwi	r19, r1, 1080
90001274:	3021043c 	addik	r1, r1, 1084
90001278:	b60f0008 	rtsd	r15, 8
9000127c:	80000000 	or	r0, r0, r0

90001280 <sendOfflineRspError>:



static void sendOfflineRspError(uint32 offlineCmdIndex, ErrorCodes errorCode, const char* errorDesc)
{
90001280:	3021fbc4 	addik	r1, r1, -1084
90001284:	f9e10000 	swi	r15, r1, 0
90001288:	fa610438 	swi	r19, r1, 1080
9000128c:	12610000 	addk	r19, r1, r0
90001290:	f8b30440 	swi	r5, r19, 1088
90001294:	f8d30444 	swi	r6, r19, 1092
90001298:	f8f30448 	swi	r7, r19, 1096
    ASSERT(errorCode < num_errors);
9000129c:	e8730444 	lwi	r3, r19, 1092
900012a0:	22400053 	addi	r18, r0, 83
900012a4:	16439003 	cmpu	r18, r3, r18
900012a8:	bcb2002c 	bgei	r18, 44		// 900012d4
900012ac:	94110002 	msrclr	r0, 2
900012b0:	b0009002 	imm	-28670
900012b4:	30a00768 	addik	r5, r0, 1896
900012b8:	b0009002 	imm	-28670
900012bc:	30c00780 	addik	r6, r0, 1920
900012c0:	30e00321 	addik	r7, r0, 801
900012c4:	b0000000 	imm	0
900012c8:	b9f4b15c 	brlid	r15, -20132	// 9000c424 <printAssert>
900012cc:	80000000 	or	r0, r0, r0
900012d0:	b8000000 	bri	0		// 900012d0

    RspPkt rspPkt;

    if(initOfflineRsp(&rspPkt, offlineCmdIndex, true))
900012d4:	3073001c 	addik	r3, r19, 28
900012d8:	10a30000 	addk	r5, r3, r0
900012dc:	e8d30440 	lwi	r6, r19, 1088
900012e0:	30e00001 	addik	r7, r0, 1
900012e4:	b9f40464 	brlid	r15, 1124	// 90001748 <initOfflineRsp>
900012e8:	80000000 	or	r0, r0, r0
900012ec:	bc0300b8 	beqi	r3, 184		// 900013a4
    {
        addStringParamToRspPkt(&rspPkt, RSP_ERROR);
900012f0:	3073001c 	addik	r3, r19, 28
900012f4:	10a30000 	addk	r5, r3, r0
900012f8:	b0009002 	imm	-28670
900012fc:	30c008ac 	addik	r6, r0, 2220
90001300:	b9f4f9e8 	brlid	r15, -1560	// 90000ce8 <addStringParamToRspPkt>
90001304:	80000000 	or	r0, r0, r0
        addParamToRspPkt(&rspPkt, "%03d", errorCode);
90001308:	3073001c 	addik	r3, r19, 28
9000130c:	10a30000 	addk	r5, r3, r0
90001310:	b0009002 	imm	-28670
90001314:	30c00938 	addik	r6, r0, 2360
90001318:	e8f30444 	lwi	r7, r19, 1092
9000131c:	b9f4f8c0 	brlid	r15, -1856	// 90000bdc <addParamToRspPkt>
90001320:	80000000 	or	r0, r0, r0
        addStringParamToRspPkt(&rspPkt, error_strings[errorCode]);
90001324:	e8730444 	lwi	r3, r19, 1092
90001328:	64830402 	bslli	r4, r3, 2
9000132c:	b0009002 	imm	-28670
90001330:	3060259c 	addik	r3, r0, 9628
90001334:	10641800 	addk	r3, r4, r3
90001338:	e8830000 	lwi	r4, r3, 0
9000133c:	3073001c 	addik	r3, r19, 28
90001340:	10a30000 	addk	r5, r3, r0
90001344:	10c40000 	addk	r6, r4, r0
90001348:	b9f4f9a0 	brlid	r15, -1632	// 90000ce8 <addStringParamToRspPkt>
9000134c:	80000000 	or	r0, r0, r0

        if(errorDesc && strlen(errorDesc) > 0)
90001350:	e8730448 	lwi	r3, r19, 1096
90001354:	bc030040 	beqi	r3, 64		// 90001394
90001358:	e8730448 	lwi	r3, r19, 1096
9000135c:	e0630000 	lbui	r3, r3, 0
90001360:	90630060 	sext8	r3, r3
90001364:	bc030030 	beqi	r3, 48		// 90001394
        {
            addStringParamToRspPkt(&rspPkt, "-");
90001368:	3073001c 	addik	r3, r19, 28
9000136c:	10a30000 	addk	r5, r3, r0
90001370:	b0009002 	imm	-28670
90001374:	30c0078c 	addik	r6, r0, 1932
90001378:	b9f4f970 	brlid	r15, -1680	// 90000ce8 <addStringParamToRspPkt>
9000137c:	80000000 	or	r0, r0, r0
            addStringParamToRspPkt(&rspPkt, errorDesc);
90001380:	3073001c 	addik	r3, r19, 28
90001384:	10a30000 	addk	r5, r3, r0
90001388:	e8d30448 	lwi	r6, r19, 1096
9000138c:	b9f4f95c 	brlid	r15, -1700	// 90000ce8 <addStringParamToRspPkt>
90001390:	80000000 	or	r0, r0, r0
        }

        sendRspPkt(&rspPkt);
90001394:	3073001c 	addik	r3, r19, 28
90001398:	10a30000 	addk	r5, r3, r0
9000139c:	b9f4fa14 	brlid	r15, -1516	// 90000db0 <sendRspPkt>
900013a0:	80000000 	or	r0, r0, r0
    }
}
900013a4:	e9e10000 	lwi	r15, r1, 0
900013a8:	10330000 	addk	r1, r19, r0
900013ac:	ea610438 	lwi	r19, r1, 1080
900013b0:	3021043c 	addik	r1, r1, 1084
900013b4:	b60f0008 	rtsd	r15, 8
900013b8:	80000000 	or	r0, r0, r0

900013bc <sendOfflineRspAborted>:



static void sendOfflineRspAborted(uint32 offlineCmdIndex)
{
900013bc:	3021fbc4 	addik	r1, r1, -1084
900013c0:	f9e10000 	swi	r15, r1, 0
900013c4:	fa610438 	swi	r19, r1, 1080
900013c8:	12610000 	addk	r19, r1, r0
900013cc:	f8b30440 	swi	r5, r19, 1088
    ASSERT(offlineCmdIndex < OfflineCommand_count);
900013d0:	e8730440 	lwi	r3, r19, 1088
900013d4:	22400001 	addi	r18, r0, 1
900013d8:	16439003 	cmpu	r18, r3, r18
900013dc:	bcb2002c 	bgei	r18, 44		// 90001408
900013e0:	94110002 	msrclr	r0, 2
900013e4:	b0009002 	imm	-28670
900013e8:	30a008d8 	addik	r5, r0, 2264
900013ec:	b0009002 	imm	-28670
900013f0:	30c00780 	addik	r6, r0, 1920
900013f4:	30e00339 	addik	r7, r0, 825
900013f8:	b0000000 	imm	0
900013fc:	b9f4b028 	brlid	r15, -20440	// 9000c424 <printAssert>
90001400:	80000000 	or	r0, r0, r0
90001404:	b8000000 	bri	0		// 90001404

    RspPkt rspPkt;

    if(initOfflineRsp(&rspPkt, offlineCmdIndex, true))
90001408:	3073001c 	addik	r3, r19, 28
9000140c:	10a30000 	addk	r5, r3, r0
90001410:	e8d30440 	lwi	r6, r19, 1088
90001414:	30e00001 	addik	r7, r0, 1
90001418:	b9f40330 	brlid	r15, 816	// 90001748 <initOfflineRsp>
9000141c:	80000000 	or	r0, r0, r0
90001420:	bc030064 	beqi	r3, 100		// 90001484
    {
        addStringParamToRspPkt(&rspPkt, RSP_ERROR);
90001424:	3073001c 	addik	r3, r19, 28
90001428:	10a30000 	addk	r5, r3, r0
9000142c:	b0009002 	imm	-28670
90001430:	30c008ac 	addik	r6, r0, 2220
90001434:	b9f4f8b4 	brlid	r15, -1868	// 90000ce8 <addStringParamToRspPkt>
90001438:	80000000 	or	r0, r0, r0
        addParamToRspPkt(&rspPkt, "%03d", err_operationAborted);
9000143c:	3073001c 	addik	r3, r19, 28
90001440:	10a30000 	addk	r5, r3, r0
90001444:	b0009002 	imm	-28670
90001448:	30c00938 	addik	r6, r0, 2360
9000144c:	30e00007 	addik	r7, r0, 7
90001450:	b9f4f78c 	brlid	r15, -2164	// 90000bdc <addParamToRspPkt>
90001454:	80000000 	or	r0, r0, r0
        addStringParamToRspPkt(&rspPkt, error_strings[err_operationAborted]);
90001458:	b0009002 	imm	-28670
9000145c:	e88025b8 	lwi	r4, r0, 9656
90001460:	3073001c 	addik	r3, r19, 28
90001464:	10a30000 	addk	r5, r3, r0
90001468:	10c40000 	addk	r6, r4, r0
9000146c:	b9f4f87c 	brlid	r15, -1924	// 90000ce8 <addStringParamToRspPkt>
90001470:	80000000 	or	r0, r0, r0
        sendRspPkt(&rspPkt);
90001474:	3073001c 	addik	r3, r19, 28
90001478:	10a30000 	addk	r5, r3, r0
9000147c:	b9f4f934 	brlid	r15, -1740	// 90000db0 <sendRspPkt>
90001480:	80000000 	or	r0, r0, r0
    }
}
90001484:	e9e10000 	lwi	r15, r1, 0
90001488:	10330000 	addk	r1, r19, r0
9000148c:	ea610438 	lwi	r19, r1, 1080
90001490:	3021043c 	addik	r1, r1, 1084
90001494:	b60f0008 	rtsd	r15, 8
90001498:	80000000 	or	r0, r0, r0

9000149c <initRspPkt>:



void initRspPkt(RspPkt* rspPkt, CmdPkt* cmdPkt, const char* status)
{
9000149c:	3021ffe0 	addik	r1, r1, -32
900014a0:	f9e10000 	swi	r15, r1, 0
900014a4:	fa61001c 	swi	r19, r1, 28
900014a8:	12610000 	addk	r19, r1, r0
900014ac:	f8b30024 	swi	r5, r19, 36
900014b0:	f8d30028 	swi	r6, r19, 40
900014b4:	f8f3002c 	swi	r7, r19, 44
    ASSERT(rspPkt);
900014b8:	e8730024 	lwi	r3, r19, 36
900014bc:	bc23002c 	bnei	r3, 44		// 900014e8
900014c0:	94110002 	msrclr	r0, 2
900014c4:	b0009002 	imm	-28670
900014c8:	30a00940 	addik	r5, r0, 2368
900014cc:	b0009002 	imm	-28670
900014d0:	30c00780 	addik	r6, r0, 1920
900014d4:	30e0034a 	addik	r7, r0, 842
900014d8:	b0000000 	imm	0
900014dc:	b9f4af48 	brlid	r15, -20664	// 9000c424 <printAssert>
900014e0:	80000000 	or	r0, r0, r0
900014e4:	b8000000 	bri	0		// 900014e4
    ASSERT(cmdPkt);
900014e8:	e8730028 	lwi	r3, r19, 40
900014ec:	bc23002c 	bnei	r3, 44		// 90001518
900014f0:	94110002 	msrclr	r0, 2
900014f4:	b0009002 	imm	-28670
900014f8:	30a00800 	addik	r5, r0, 2048
900014fc:	b0009002 	imm	-28670
90001500:	30c00780 	addik	r6, r0, 1920
90001504:	30e0034b 	addik	r7, r0, 843
90001508:	b0000000 	imm	0
9000150c:	b9f4af18 	brlid	r15, -20712	// 9000c424 <printAssert>
90001510:	80000000 	or	r0, r0, r0
90001514:	b8000000 	bri	0		// 90001514
    ASSERT(status);
90001518:	e873002c 	lwi	r3, r19, 44
9000151c:	bc23002c 	bnei	r3, 44		// 90001548
90001520:	94110002 	msrclr	r0, 2
90001524:	b0009002 	imm	-28670
90001528:	30a00948 	addik	r5, r0, 2376
9000152c:	b0009002 	imm	-28670
90001530:	30c00780 	addik	r6, r0, 1920
90001534:	30e0034c 	addik	r7, r0, 844
90001538:	b0000000 	imm	0
9000153c:	b9f4aee8 	brlid	r15, -20760	// 9000c424 <printAssert>
90001540:	80000000 	or	r0, r0, r0
90001544:	b8000000 	bri	0		// 90001544

    rspPkt->bufByteCount = 0;
90001548:	e8730024 	lwi	r3, r19, 36
9000154c:	f8030000 	swi	r0, r3, 0
    rspPkt->paramCount   = 0;
90001550:	e8730024 	lwi	r3, r19, 36
90001554:	f8030004 	swi	r0, r3, 4
    rspPkt->bufPtr       = rspPkt->buf;
90001558:	e8730024 	lwi	r3, r19, 36
9000155c:	3083000c 	addik	r4, r3, 12
90001560:	e8730024 	lwi	r3, r19, 36
90001564:	f8830008 	swi	r4, r3, 8

    addStringParamToRspPkt(rspPkt, TO_HOST_FROM_MASTER_KEY);
90001568:	e8b30024 	lwi	r5, r19, 36
9000156c:	b0009002 	imm	-28670
90001570:	30c00950 	addik	r6, r0, 2384
90001574:	b9f4f774 	brlid	r15, -2188	// 90000ce8 <addStringParamToRspPkt>
90001578:	80000000 	or	r0, r0, r0
    rspPkt->seqNum = rspPkt->bufPtr + 1;
9000157c:	e8730024 	lwi	r3, r19, 36
90001580:	e8630008 	lwi	r3, r3, 8
90001584:	30830001 	addik	r4, r3, 1
90001588:	e8730024 	lwi	r3, r19, 36
9000158c:	f883040c 	swi	r4, r3, 1036
    addStringParamToRspPkt(rspPkt, cmdPkt->seqNum);
90001590:	e8730028 	lwi	r3, r19, 40
90001594:	e8630408 	lwi	r3, r3, 1032
90001598:	e8b30024 	lwi	r5, r19, 36
9000159c:	10c30000 	addk	r6, r3, r0
900015a0:	b9f4f748 	brlid	r15, -2232	// 90000ce8 <addStringParamToRspPkt>
900015a4:	80000000 	or	r0, r0, r0
    rspPkt->cmd = rspPkt->bufPtr + 1;
900015a8:	e8730024 	lwi	r3, r19, 36
900015ac:	e8630008 	lwi	r3, r3, 8
900015b0:	30830001 	addik	r4, r3, 1
900015b4:	e8730024 	lwi	r3, r19, 36
900015b8:	f8830410 	swi	r4, r3, 1040
    addStringParamToRspPkt(rspPkt, cmdPkt->cmd);
900015bc:	e8730028 	lwi	r3, r19, 40
900015c0:	e863040c 	lwi	r3, r3, 1036
900015c4:	e8b30024 	lwi	r5, r19, 36
900015c8:	10c30000 	addk	r6, r3, r0
900015cc:	b9f4f71c 	brlid	r15, -2276	// 90000ce8 <addStringParamToRspPkt>
900015d0:	80000000 	or	r0, r0, r0
    rspPkt->status = rspPkt->bufPtr + 1;
900015d4:	e8730024 	lwi	r3, r19, 36
900015d8:	e8630008 	lwi	r3, r3, 8
900015dc:	30830001 	addik	r4, r3, 1
900015e0:	e8730024 	lwi	r3, r19, 36
900015e4:	f8830414 	swi	r4, r3, 1044
    addStringParamToRspPkt(rspPkt, status);
900015e8:	e8b30024 	lwi	r5, r19, 36
900015ec:	e8d3002c 	lwi	r6, r19, 44
900015f0:	b9f4f6f8 	brlid	r15, -2312	// 90000ce8 <addStringParamToRspPkt>
900015f4:	80000000 	or	r0, r0, r0
    rspPkt->payload = rspPkt->bufPtr + 1;
900015f8:	e8730024 	lwi	r3, r19, 36
900015fc:	e8630008 	lwi	r3, r3, 8
90001600:	30830001 	addik	r4, r3, 1
90001604:	e8730024 	lwi	r3, r19, 36
90001608:	f8830418 	swi	r4, r3, 1048
}
9000160c:	e9e10000 	lwi	r15, r1, 0
90001610:	10330000 	addk	r1, r19, r0
90001614:	ea61001c 	lwi	r19, r1, 28
90001618:	30210020 	addik	r1, r1, 32
9000161c:	b60f0008 	rtsd	r15, 8
90001620:	80000000 	or	r0, r0, r0

90001624 <initErrorRspPkt>:



static void initErrorRspPkt(RspPkt* rspPkt, CmdPkt* cmdPkt, ErrorCodes errorCode)
{
90001624:	3021ffe0 	addik	r1, r1, -32
90001628:	f9e10000 	swi	r15, r1, 0
9000162c:	fa61001c 	swi	r19, r1, 28
90001630:	12610000 	addk	r19, r1, r0
90001634:	f8b30024 	swi	r5, r19, 36
90001638:	f8d30028 	swi	r6, r19, 40
9000163c:	f8f3002c 	swi	r7, r19, 44
    ASSERT(rspPkt);
90001640:	e8730024 	lwi	r3, r19, 36
90001644:	bc23002c 	bnei	r3, 44		// 90001670
90001648:	94110002 	msrclr	r0, 2
9000164c:	b0009002 	imm	-28670
90001650:	30a00940 	addik	r5, r0, 2368
90001654:	b0009002 	imm	-28670
90001658:	30c00780 	addik	r6, r0, 1920
9000165c:	30e00360 	addik	r7, r0, 864
90001660:	b0000000 	imm	0
90001664:	b9f4adc0 	brlid	r15, -21056	// 9000c424 <printAssert>
90001668:	80000000 	or	r0, r0, r0
9000166c:	b8000000 	bri	0		// 9000166c
    ASSERT(cmdPkt);
90001670:	e8730028 	lwi	r3, r19, 40
90001674:	bc23002c 	bnei	r3, 44		// 900016a0
90001678:	94110002 	msrclr	r0, 2
9000167c:	b0009002 	imm	-28670
90001680:	30a00800 	addik	r5, r0, 2048
90001684:	b0009002 	imm	-28670
90001688:	30c00780 	addik	r6, r0, 1920
9000168c:	30e00361 	addik	r7, r0, 865
90001690:	b0000000 	imm	0
90001694:	b9f4ad90 	brlid	r15, -21104	// 9000c424 <printAssert>
90001698:	80000000 	or	r0, r0, r0
9000169c:	b8000000 	bri	0		// 9000169c
    ASSERT(errorCode < num_errors);
900016a0:	e873002c 	lwi	r3, r19, 44
900016a4:	22400053 	addi	r18, r0, 83
900016a8:	16439003 	cmpu	r18, r3, r18
900016ac:	bcb2002c 	bgei	r18, 44		// 900016d8
900016b0:	94110002 	msrclr	r0, 2
900016b4:	b0009002 	imm	-28670
900016b8:	30a00768 	addik	r5, r0, 1896
900016bc:	b0009002 	imm	-28670
900016c0:	30c00780 	addik	r6, r0, 1920
900016c4:	30e00362 	addik	r7, r0, 866
900016c8:	b0000000 	imm	0
900016cc:	b9f4ad58 	brlid	r15, -21160	// 9000c424 <printAssert>
900016d0:	80000000 	or	r0, r0, r0
900016d4:	b8000000 	bri	0		// 900016d4

    initRspPkt(rspPkt, cmdPkt, RSP_ERROR);
900016d8:	e8b30024 	lwi	r5, r19, 36
900016dc:	e8d30028 	lwi	r6, r19, 40
900016e0:	b0009002 	imm	-28670
900016e4:	30e008ac 	addik	r7, r0, 2220
900016e8:	b9f4fdb4 	brlid	r15, -588	// 9000149c <initRspPkt>
900016ec:	80000000 	or	r0, r0, r0
    addParamToRspPkt(rspPkt, "%03d", errorCode);
900016f0:	e8b30024 	lwi	r5, r19, 36
900016f4:	b0009002 	imm	-28670
900016f8:	30c00938 	addik	r6, r0, 2360
900016fc:	e8f3002c 	lwi	r7, r19, 44
90001700:	b9f4f4dc 	brlid	r15, -2852	// 90000bdc <addParamToRspPkt>
90001704:	80000000 	or	r0, r0, r0
    addStringParamToRspPkt(rspPkt, error_strings[errorCode]);
90001708:	e873002c 	lwi	r3, r19, 44
9000170c:	64830402 	bslli	r4, r3, 2
90001710:	b0009002 	imm	-28670
90001714:	3060259c 	addik	r3, r0, 9628
90001718:	10641800 	addk	r3, r4, r3
9000171c:	e8630000 	lwi	r3, r3, 0
90001720:	e8b30024 	lwi	r5, r19, 36
90001724:	10c30000 	addk	r6, r3, r0
90001728:	b9f4f5c0 	brlid	r15, -2624	// 90000ce8 <addStringParamToRspPkt>
9000172c:	80000000 	or	r0, r0, r0
}
90001730:	e9e10000 	lwi	r15, r1, 0
90001734:	10330000 	addk	r1, r19, r0
90001738:	ea61001c 	lwi	r19, r1, 28
9000173c:	30210020 	addik	r1, r1, 32
90001740:	b60f0008 	rtsd	r15, 8
90001744:	80000000 	or	r0, r0, r0

90001748 <initOfflineRsp>:



static bool initOfflineRsp(RspPkt* rspPkt, uint32 offlineCmdIndex, bool clear)
{
90001748:	3021ffdc 	addik	r1, r1, -36
9000174c:	f9e10000 	swi	r15, r1, 0
90001750:	fa610020 	swi	r19, r1, 32
90001754:	12610000 	addk	r19, r1, r0
90001758:	f8b30028 	swi	r5, r19, 40
9000175c:	f8d3002c 	swi	r6, r19, 44
90001760:	f8f30030 	swi	r7, r19, 48
    ASSERT(offlineCmdIndex < OfflineCommand_count);
90001764:	e873002c 	lwi	r3, r19, 44
90001768:	22400001 	addi	r18, r0, 1
9000176c:	16439003 	cmpu	r18, r3, r18
90001770:	bcb2002c 	bgei	r18, 44		// 9000179c
90001774:	94110002 	msrclr	r0, 2
90001778:	b0009002 	imm	-28670
9000177c:	30a008d8 	addik	r5, r0, 2264
90001780:	b0009002 	imm	-28670
90001784:	30c00780 	addik	r6, r0, 1920
90001788:	30e0036d 	addik	r7, r0, 877
9000178c:	b0000000 	imm	0
90001790:	b9f4ac94 	brlid	r15, -21356	// 9000c424 <printAssert>
90001794:	80000000 	or	r0, r0, r0
90001798:	b8000000 	bri	0		// 90001798
    ASSERT(rspPkt);
9000179c:	e8730028 	lwi	r3, r19, 40
900017a0:	bc23002c 	bnei	r3, 44		// 900017cc
900017a4:	94110002 	msrclr	r0, 2
900017a8:	b0009002 	imm	-28670
900017ac:	30a00940 	addik	r5, r0, 2368
900017b0:	b0009002 	imm	-28670
900017b4:	30c00780 	addik	r6, r0, 1920
900017b8:	30e0036e 	addik	r7, r0, 878
900017bc:	b0000000 	imm	0
900017c0:	b9f4ac64 	brlid	r15, -21404	// 9000c424 <printAssert>
900017c4:	80000000 	or	r0, r0, r0
900017c8:	b8000000 	bri	0		// 900017c8

    if(commData.pendingCommands[offlineCmdIndex].active)
900017cc:	e893002c 	lwi	r4, r19, 44
900017d0:	306000cc 	addik	r3, r0, 204
900017d4:	40841800 	mul	r4, r4, r3
900017d8:	b0009002 	imm	-28670
900017dc:	3060fe48 	addik	r3, r0, -440
900017e0:	10641800 	addk	r3, r4, r3
900017e4:	e8630000 	lwi	r3, r3, 0
900017e8:	bc0300fc 	beqi	r3, 252		// 900018e4
    {
        if(clear)
900017ec:	e8730030 	lwi	r3, r19, 48
900017f0:	bc030020 	beqi	r3, 32		// 90001810
        {
            commData.pendingCommands[offlineCmdIndex].active = false;
900017f4:	e893002c 	lwi	r4, r19, 44
900017f8:	306000cc 	addik	r3, r0, 204
900017fc:	40841800 	mul	r4, r4, r3
90001800:	b0009002 	imm	-28670
90001804:	3060fe48 	addik	r3, r0, -440
90001808:	10641800 	addk	r3, r4, r3
9000180c:	f8030000 	swi	r0, r3, 0
        }

        rspPkt->bufByteCount = 0;
90001810:	e8730028 	lwi	r3, r19, 40
90001814:	f8030000 	swi	r0, r3, 0
        rspPkt->paramCount   = 0;
90001818:	e8730028 	lwi	r3, r19, 40
9000181c:	f8030004 	swi	r0, r3, 4
        rspPkt->bufPtr       = rspPkt->buf;
90001820:	e8730028 	lwi	r3, r19, 40
90001824:	3083000c 	addik	r4, r3, 12
90001828:	e8730028 	lwi	r3, r19, 40
9000182c:	f8830008 	swi	r4, r3, 8

        addStringParamToRspPkt(rspPkt, TO_HOST_FROM_MASTER_KEY);
90001830:	e8b30028 	lwi	r5, r19, 40
90001834:	b0009002 	imm	-28670
90001838:	30c00950 	addik	r6, r0, 2384
9000183c:	b9f4f4ac 	brlid	r15, -2900	// 90000ce8 <addStringParamToRspPkt>
90001840:	80000000 	or	r0, r0, r0
        rspPkt->seqNum = rspPkt->bufPtr + 1;
90001844:	e8730028 	lwi	r3, r19, 40
90001848:	e8630008 	lwi	r3, r3, 8
9000184c:	30830001 	addik	r4, r3, 1
90001850:	e8730028 	lwi	r3, r19, 40
90001854:	f883040c 	swi	r4, r3, 1036
        addStringParamToRspPkt(rspPkt, commData.pendingCommands[offlineCmdIndex].seqNum);
90001858:	e893002c 	lwi	r4, r19, 44
9000185c:	306000cc 	addik	r3, r0, 204
90001860:	40641800 	mul	r3, r4, r3
90001864:	30830030 	addik	r4, r3, 48
90001868:	b0009002 	imm	-28670
9000186c:	3060fe1c 	addik	r3, r0, -484
90001870:	10641800 	addk	r3, r4, r3
90001874:	e8b30028 	lwi	r5, r19, 40
90001878:	10c30000 	addk	r6, r3, r0
9000187c:	b9f4f46c 	brlid	r15, -2964	// 90000ce8 <addStringParamToRspPkt>
90001880:	80000000 	or	r0, r0, r0
        rspPkt->cmd = rspPkt->bufPtr + 1;
90001884:	e8730028 	lwi	r3, r19, 40
90001888:	e8630008 	lwi	r3, r3, 8
9000188c:	30830001 	addik	r4, r3, 1
90001890:	e8730028 	lwi	r3, r19, 40
90001894:	f8830410 	swi	r4, r3, 1040
        addStringParamToRspPkt(rspPkt, commData.pendingCommands[offlineCmdIndex].cmd);
90001898:	e893002c 	lwi	r4, r19, 44
9000189c:	306000cc 	addik	r3, r0, 204
900018a0:	40641800 	mul	r3, r4, r3
900018a4:	30830094 	addik	r4, r3, 148
900018a8:	b0009002 	imm	-28670
900018ac:	3060fe1c 	addik	r3, r0, -484
900018b0:	10641800 	addk	r3, r4, r3
900018b4:	e8b30028 	lwi	r5, r19, 40
900018b8:	10c30000 	addk	r6, r3, r0
900018bc:	b9f4f42c 	brlid	r15, -3028	// 90000ce8 <addStringParamToRspPkt>
900018c0:	80000000 	or	r0, r0, r0
        rspPkt->status = rspPkt->bufPtr + 1;
900018c4:	e8730028 	lwi	r3, r19, 40
900018c8:	e8630008 	lwi	r3, r3, 8
900018cc:	30830001 	addik	r4, r3, 1
900018d0:	e8730028 	lwi	r3, r19, 40
900018d4:	f8830414 	swi	r4, r3, 1044

        return true;
900018d8:	30600001 	addik	r3, r0, 1
900018dc:	f873001c 	swi	r3, r19, 28
900018e0:	b800000c 	bri	12		// 900018ec
    }

    return false;
900018e4:	10600000 	addk	r3, r0, r0
900018e8:	f873001c 	swi	r3, r19, 28
900018ec:	e873001c 	lwi	r3, r19, 28
}
900018f0:	e9e10000 	lwi	r15, r1, 0
900018f4:	10330000 	addk	r1, r19, r0
900018f8:	ea610020 	lwi	r19, r1, 32
900018fc:	30210024 	addik	r1, r1, 36
90001900:	b60f0008 	rtsd	r15, 8
90001904:	80000000 	or	r0, r0, r0

90001908 <initIpPkt>:



static void initIpPkt(RspPkt* rspPkt, const char* cmd)
{
90001908:	3021ffe0 	addik	r1, r1, -32
9000190c:	f9e10000 	swi	r15, r1, 0
90001910:	fa61001c 	swi	r19, r1, 28
90001914:	12610000 	addk	r19, r1, r0
90001918:	f8b30024 	swi	r5, r19, 36
9000191c:	f8d30028 	swi	r6, r19, 40
    ASSERT(rspPkt);
90001920:	e8730024 	lwi	r3, r19, 36
90001924:	bc23002c 	bnei	r3, 44		// 90001950
90001928:	94110002 	msrclr	r0, 2
9000192c:	b0009002 	imm	-28670
90001930:	30a00940 	addik	r5, r0, 2368
90001934:	b0009002 	imm	-28670
90001938:	30c00780 	addik	r6, r0, 1920
9000193c:	30e0038c 	addik	r7, r0, 908
90001940:	b0000000 	imm	0
90001944:	b9f4aae0 	brlid	r15, -21792	// 9000c424 <printAssert>
90001948:	80000000 	or	r0, r0, r0
9000194c:	b8000000 	bri	0		// 9000194c
    ASSERT(cmd);
90001950:	e8730028 	lwi	r3, r19, 40
90001954:	bc23002c 	bnei	r3, 44		// 90001980
90001958:	94110002 	msrclr	r0, 2
9000195c:	b0009002 	imm	-28670
90001960:	30a00954 	addik	r5, r0, 2388
90001964:	b0009002 	imm	-28670
90001968:	30c00780 	addik	r6, r0, 1920
9000196c:	30e0038d 	addik	r7, r0, 909
90001970:	b0000000 	imm	0
90001974:	b9f4aab0 	brlid	r15, -21840	// 9000c424 <printAssert>
90001978:	80000000 	or	r0, r0, r0
9000197c:	b8000000 	bri	0		// 9000197c

    rspPkt->bufByteCount = 0;
90001980:	e8730024 	lwi	r3, r19, 36
90001984:	f8030000 	swi	r0, r3, 0
    rspPkt->paramCount   = 0;
90001988:	e8730024 	lwi	r3, r19, 36
9000198c:	f8030004 	swi	r0, r3, 4
    rspPkt->bufPtr       = rspPkt->buf;
90001990:	e8730024 	lwi	r3, r19, 36
90001994:	3083000c 	addik	r4, r3, 12
90001998:	e8730024 	lwi	r3, r19, 36
9000199c:	f8830008 	swi	r4, r3, 8

    addStringParamToRspPkt(rspPkt, TO_HOST_FROM_MASTER_KEY);
900019a0:	e8b30024 	lwi	r5, r19, 36
900019a4:	b0009002 	imm	-28670
900019a8:	30c00950 	addik	r6, r0, 2384
900019ac:	b9f4f33c 	brlid	r15, -3268	// 90000ce8 <addStringParamToRspPkt>
900019b0:	80000000 	or	r0, r0, r0
    rspPkt->seqNum = rspPkt->bufPtr + 1;
900019b4:	e8730024 	lwi	r3, r19, 36
900019b8:	e8630008 	lwi	r3, r3, 8
900019bc:	30830001 	addik	r4, r3, 1
900019c0:	e8730024 	lwi	r3, r19, 36
900019c4:	f883040c 	swi	r4, r3, 1036
    addStringParamToRspPkt(rspPkt, "00");
900019c8:	e8b30024 	lwi	r5, r19, 36
900019cc:	b0009002 	imm	-28670
900019d0:	30c00958 	addik	r6, r0, 2392
900019d4:	b9f4f314 	brlid	r15, -3308	// 90000ce8 <addStringParamToRspPkt>
900019d8:	80000000 	or	r0, r0, r0
    rspPkt->cmd = rspPkt->bufPtr + 1;
900019dc:	e8730024 	lwi	r3, r19, 36
900019e0:	e8630008 	lwi	r3, r3, 8
900019e4:	30830001 	addik	r4, r3, 1
900019e8:	e8730024 	lwi	r3, r19, 36
900019ec:	f8830410 	swi	r4, r3, 1040
    addStringParamToRspPkt(rspPkt, cmd);
900019f0:	e8b30024 	lwi	r5, r19, 36
900019f4:	e8d30028 	lwi	r6, r19, 40
900019f8:	b9f4f2f0 	brlid	r15, -3344	// 90000ce8 <addStringParamToRspPkt>
900019fc:	80000000 	or	r0, r0, r0
    rspPkt->status = rspPkt->bufPtr + 1;
90001a00:	e8730024 	lwi	r3, r19, 36
90001a04:	e8630008 	lwi	r3, r3, 8
90001a08:	30830001 	addik	r4, r3, 1
90001a0c:	e8730024 	lwi	r3, r19, 36
90001a10:	f8830414 	swi	r4, r3, 1044
    addStringParamToRspPkt(rspPkt, RSP_INFORMATION_PKT);
90001a14:	e8b30024 	lwi	r5, r19, 36
90001a18:	b0009002 	imm	-28670
90001a1c:	30c0095c 	addik	r6, r0, 2396
90001a20:	b9f4f2c8 	brlid	r15, -3384	// 90000ce8 <addStringParamToRspPkt>
90001a24:	80000000 	or	r0, r0, r0
    rspPkt->payload = rspPkt->bufPtr + 1;
90001a28:	e8730024 	lwi	r3, r19, 36
90001a2c:	e8630008 	lwi	r3, r3, 8
90001a30:	30830001 	addik	r4, r3, 1
90001a34:	e8730024 	lwi	r3, r19, 36
90001a38:	f8830418 	swi	r4, r3, 1048
}
90001a3c:	e9e10000 	lwi	r15, r1, 0
90001a40:	10330000 	addk	r1, r19, r0
90001a44:	ea61001c 	lwi	r19, r1, 28
90001a48:	30210020 	addik	r1, r1, 32
90001a4c:	b60f0008 	rtsd	r15, 8
90001a50:	80000000 	or	r0, r0, r0

90001a54 <initIpErrorPkt>:



static void initIpErrorPkt(RspPkt* rspPkt, int errorCode)
{
90001a54:	3021ffe0 	addik	r1, r1, -32
90001a58:	f9e10000 	swi	r15, r1, 0
90001a5c:	fa61001c 	swi	r19, r1, 28
90001a60:	12610000 	addk	r19, r1, r0
90001a64:	f8b30024 	swi	r5, r19, 36
90001a68:	f8d30028 	swi	r6, r19, 40
    initIpPkt(rspPkt, ERROR_MSG_KEY);
90001a6c:	e8b30024 	lwi	r5, r19, 36
90001a70:	b0009002 	imm	-28670
90001a74:	30c00960 	addik	r6, r0, 2400
90001a78:	b9f4fe90 	brlid	r15, -368	// 90001908 <initIpPkt>
90001a7c:	80000000 	or	r0, r0, r0
    addParamToRspPkt(rspPkt, "%03d", errorCode);
90001a80:	e8b30024 	lwi	r5, r19, 36
90001a84:	b0009002 	imm	-28670
90001a88:	30c00938 	addik	r6, r0, 2360
90001a8c:	e8f30028 	lwi	r7, r19, 40
90001a90:	b9f4f14c 	brlid	r15, -3764	// 90000bdc <addParamToRspPkt>
90001a94:	80000000 	or	r0, r0, r0
    addStringParamToRspPkt(rspPkt, error_strings[errorCode]);
90001a98:	e8730028 	lwi	r3, r19, 40
90001a9c:	64830402 	bslli	r4, r3, 2
90001aa0:	b0009002 	imm	-28670
90001aa4:	3060259c 	addik	r3, r0, 9628
90001aa8:	10641800 	addk	r3, r4, r3
90001aac:	e8630000 	lwi	r3, r3, 0
90001ab0:	e8b30024 	lwi	r5, r19, 36
90001ab4:	10c30000 	addk	r6, r3, r0
90001ab8:	b9f4f230 	brlid	r15, -3536	// 90000ce8 <addStringParamToRspPkt>
90001abc:	80000000 	or	r0, r0, r0
}
90001ac0:	e9e10000 	lwi	r15, r1, 0
90001ac4:	10330000 	addk	r1, r19, r0
90001ac8:	ea61001c 	lwi	r19, r1, 28
90001acc:	30210020 	addik	r1, r1, 32
90001ad0:	b60f0008 	rtsd	r15, 8
90001ad4:	80000000 	or	r0, r0, r0

90001ad8 <initIpLogPkt>:



static void initIpLogPkt(RspPkt* rspPkt)
{
90001ad8:	3021ffe0 	addik	r1, r1, -32
90001adc:	f9e10000 	swi	r15, r1, 0
90001ae0:	fa61001c 	swi	r19, r1, 28
90001ae4:	12610000 	addk	r19, r1, r0
90001ae8:	f8b30024 	swi	r5, r19, 36
    initIpPkt(rspPkt, LOG_MSG_KEY);
90001aec:	e8b30024 	lwi	r5, r19, 36
90001af0:	b0009002 	imm	-28670
90001af4:	30c00968 	addik	r6, r0, 2408
90001af8:	b9f4fe10 	brlid	r15, -496	// 90001908 <initIpPkt>
90001afc:	80000000 	or	r0, r0, r0
}
90001b00:	e9e10000 	lwi	r15, r1, 0
90001b04:	10330000 	addk	r1, r19, r0
90001b08:	ea61001c 	lwi	r19, r1, 28
90001b0c:	30210020 	addik	r1, r1, 32
90001b10:	b60f0008 	rtsd	r15, 8
90001b14:	80000000 	or	r0, r0, r0

90001b18 <sendRspOk>:



void sendRspOk(CmdPkt* cmdPkt)
{
90001b18:	3021fbc4 	addik	r1, r1, -1084
90001b1c:	f9e10000 	swi	r15, r1, 0
90001b20:	fa610438 	swi	r19, r1, 1080
90001b24:	12610000 	addk	r19, r1, r0
90001b28:	f8b30440 	swi	r5, r19, 1088
    RspPkt rspPkt;

    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90001b2c:	3073001c 	addik	r3, r19, 28
90001b30:	10a30000 	addk	r5, r3, r0
90001b34:	e8d30440 	lwi	r6, r19, 1088
90001b38:	b0009002 	imm	-28670
90001b3c:	30e00934 	addik	r7, r0, 2356
90001b40:	b9f4f95c 	brlid	r15, -1700	// 9000149c <initRspPkt>
90001b44:	80000000 	or	r0, r0, r0
    sendRspPkt(&rspPkt);
90001b48:	3073001c 	addik	r3, r19, 28
90001b4c:	10a30000 	addk	r5, r3, r0
90001b50:	b9f4f260 	brlid	r15, -3488	// 90000db0 <sendRspPkt>
90001b54:	80000000 	or	r0, r0, r0
}
90001b58:	e9e10000 	lwi	r15, r1, 0
90001b5c:	10330000 	addk	r1, r19, r0
90001b60:	ea610438 	lwi	r19, r1, 1080
90001b64:	3021043c 	addik	r1, r1, 1084
90001b68:	b60f0008 	rtsd	r15, 8
90001b6c:	80000000 	or	r0, r0, r0

90001b70 <registerAndSendRspPending>:



static void registerAndSendRspPending(uint32 offlineCmdIndex, CmdPkt* cmdPkt)
{
90001b70:	3021ffe0 	addik	r1, r1, -32
90001b74:	f9e10000 	swi	r15, r1, 0
90001b78:	fa61001c 	swi	r19, r1, 28
90001b7c:	12610000 	addk	r19, r1, r0
90001b80:	f8b30024 	swi	r5, r19, 36
90001b84:	f8d30028 	swi	r6, r19, 40
    registerPendingCmd(offlineCmdIndex, cmdPkt);
90001b88:	e8b30024 	lwi	r5, r19, 36
90001b8c:	e8d30028 	lwi	r6, r19, 40
90001b90:	b9f4f4b0 	brlid	r15, -2896	// 90001040 <registerPendingCmd>
90001b94:	80000000 	or	r0, r0, r0
    sendRspPending(cmdPkt);
90001b98:	e8b30028 	lwi	r5, r19, 40
90001b9c:	b9f40020 	brlid	r15, 32	// 90001bbc <sendRspPending>
90001ba0:	80000000 	or	r0, r0, r0
}
90001ba4:	e9e10000 	lwi	r15, r1, 0
90001ba8:	10330000 	addk	r1, r19, r0
90001bac:	ea61001c 	lwi	r19, r1, 28
90001bb0:	30210020 	addik	r1, r1, 32
90001bb4:	b60f0008 	rtsd	r15, 8
90001bb8:	80000000 	or	r0, r0, r0

90001bbc <sendRspPending>:



static void sendRspPending(CmdPkt* cmdPkt)
{
90001bbc:	3021fbc4 	addik	r1, r1, -1084
90001bc0:	f9e10000 	swi	r15, r1, 0
90001bc4:	fa610438 	swi	r19, r1, 1080
90001bc8:	12610000 	addk	r19, r1, r0
90001bcc:	f8b30440 	swi	r5, r19, 1088
    RspPkt rspPkt;

    initRspPkt(&rspPkt, cmdPkt, RSP_PENDING);
90001bd0:	3073001c 	addik	r3, r19, 28
90001bd4:	10a30000 	addk	r5, r3, r0
90001bd8:	e8d30440 	lwi	r6, r19, 1088
90001bdc:	b0009002 	imm	-28670
90001be0:	30e0096c 	addik	r7, r0, 2412
90001be4:	b9f4f8b8 	brlid	r15, -1864	// 9000149c <initRspPkt>
90001be8:	80000000 	or	r0, r0, r0
    sendRspPkt(&rspPkt);
90001bec:	3073001c 	addik	r3, r19, 28
90001bf0:	10a30000 	addk	r5, r3, r0
90001bf4:	b9f4f1bc 	brlid	r15, -3652	// 90000db0 <sendRspPkt>
90001bf8:	80000000 	or	r0, r0, r0
}
90001bfc:	e9e10000 	lwi	r15, r1, 0
90001c00:	10330000 	addk	r1, r19, r0
90001c04:	ea610438 	lwi	r19, r1, 1080
90001c08:	3021043c 	addik	r1, r1, 1084
90001c0c:	b60f0008 	rtsd	r15, 8
90001c10:	80000000 	or	r0, r0, r0

90001c14 <sendRspError>:



void sendRspError(CmdPkt* cmdPkt, ErrorCodes errorCode, const char* errorDesc)
{
90001c14:	3021fbc4 	addik	r1, r1, -1084
90001c18:	f9e10000 	swi	r15, r1, 0
90001c1c:	fa610438 	swi	r19, r1, 1080
90001c20:	12610000 	addk	r19, r1, r0
90001c24:	f8b30440 	swi	r5, r19, 1088
90001c28:	f8d30444 	swi	r6, r19, 1092
90001c2c:	f8f30448 	swi	r7, r19, 1096
    ASSERT(errorCode < num_errors);
90001c30:	e8730444 	lwi	r3, r19, 1092
90001c34:	22400053 	addi	r18, r0, 83
90001c38:	16439003 	cmpu	r18, r3, r18
90001c3c:	bcb2002c 	bgei	r18, 44		// 90001c68
90001c40:	94110002 	msrclr	r0, 2
90001c44:	b0009002 	imm	-28670
90001c48:	30a00768 	addik	r5, r0, 1896
90001c4c:	b0009002 	imm	-28670
90001c50:	30c00780 	addik	r6, r0, 1920
90001c54:	30e003cd 	addik	r7, r0, 973
90001c58:	b0000000 	imm	0
90001c5c:	b9f4a7c8 	brlid	r15, -22584	// 9000c424 <printAssert>
90001c60:	80000000 	or	r0, r0, r0
90001c64:	b8000000 	bri	0		// 90001c64

    RspPkt rspPkt;

    initErrorRspPkt(&rspPkt, cmdPkt, errorCode);
90001c68:	3073001c 	addik	r3, r19, 28
90001c6c:	10a30000 	addk	r5, r3, r0
90001c70:	e8d30440 	lwi	r6, r19, 1088
90001c74:	e8f30444 	lwi	r7, r19, 1092
90001c78:	b9f4f9ac 	brlid	r15, -1620	// 90001624 <initErrorRspPkt>
90001c7c:	80000000 	or	r0, r0, r0

    if(errorDesc)
90001c80:	e8730448 	lwi	r3, r19, 1096
90001c84:	bc030030 	beqi	r3, 48		// 90001cb4
    {
        addStringParamToRspPkt(&rspPkt, "-");
90001c88:	3073001c 	addik	r3, r19, 28
90001c8c:	10a30000 	addk	r5, r3, r0
90001c90:	b0009002 	imm	-28670
90001c94:	30c0078c 	addik	r6, r0, 1932
90001c98:	b9f4f050 	brlid	r15, -4016	// 90000ce8 <addStringParamToRspPkt>
90001c9c:	80000000 	or	r0, r0, r0
        addStringParamToRspPkt(&rspPkt, errorDesc);
90001ca0:	3073001c 	addik	r3, r19, 28
90001ca4:	10a30000 	addk	r5, r3, r0
90001ca8:	e8d30448 	lwi	r6, r19, 1096
90001cac:	b9f4f03c 	brlid	r15, -4036	// 90000ce8 <addStringParamToRspPkt>
90001cb0:	80000000 	or	r0, r0, r0
    }

    sendRspPkt(&rspPkt);
90001cb4:	3073001c 	addik	r3, r19, 28
90001cb8:	10a30000 	addk	r5, r3, r0
90001cbc:	b9f4f0f4 	brlid	r15, -3852	// 90000db0 <sendRspPkt>
90001cc0:	80000000 	or	r0, r0, r0
}
90001cc4:	e9e10000 	lwi	r15, r1, 0
90001cc8:	10330000 	addk	r1, r19, r0
90001ccc:	ea610438 	lwi	r19, r1, 1080
90001cd0:	3021043c 	addik	r1, r1, 1084
90001cd4:	b60f0008 	rtsd	r15, 8
90001cd8:	80000000 	or	r0, r0, r0

90001cdc <sendRspStatusOutOfRange>:



static void sendRspStatusOutOfRange(CmdPkt* cmdPkt, const char* min, const char* max, const char* value)
{
90001cdc:	3021fbc4 	addik	r1, r1, -1084
90001ce0:	f9e10000 	swi	r15, r1, 0
90001ce4:	fa610438 	swi	r19, r1, 1080
90001ce8:	12610000 	addk	r19, r1, r0
90001cec:	f8b30440 	swi	r5, r19, 1088
90001cf0:	f8d30444 	swi	r6, r19, 1092
90001cf4:	f8f30448 	swi	r7, r19, 1096
90001cf8:	f913044c 	swi	r8, r19, 1100
    ASSERT(min);
90001cfc:	e8730444 	lwi	r3, r19, 1092
90001d00:	bc23002c 	bnei	r3, 44		// 90001d2c
90001d04:	94110002 	msrclr	r0, 2
90001d08:	b0009002 	imm	-28670
90001d0c:	30a00970 	addik	r5, r0, 2416
90001d10:	b0009002 	imm	-28670
90001d14:	30c00780 	addik	r6, r0, 1920
90001d18:	30e003e0 	addik	r7, r0, 992
90001d1c:	b0000000 	imm	0
90001d20:	b9f4a704 	brlid	r15, -22780	// 9000c424 <printAssert>
90001d24:	80000000 	or	r0, r0, r0
90001d28:	b8000000 	bri	0		// 90001d28
    ASSERT(max);
90001d2c:	e8730448 	lwi	r3, r19, 1096
90001d30:	bc23002c 	bnei	r3, 44		// 90001d5c
90001d34:	94110002 	msrclr	r0, 2
90001d38:	b0009002 	imm	-28670
90001d3c:	30a00974 	addik	r5, r0, 2420
90001d40:	b0009002 	imm	-28670
90001d44:	30c00780 	addik	r6, r0, 1920
90001d48:	30e003e1 	addik	r7, r0, 993
90001d4c:	b0000000 	imm	0
90001d50:	b9f4a6d4 	brlid	r15, -22828	// 9000c424 <printAssert>
90001d54:	80000000 	or	r0, r0, r0
90001d58:	b8000000 	bri	0		// 90001d58
    ASSERT(value);
90001d5c:	e873044c 	lwi	r3, r19, 1100
90001d60:	bc23002c 	bnei	r3, 44		// 90001d8c
90001d64:	94110002 	msrclr	r0, 2
90001d68:	b0009002 	imm	-28670
90001d6c:	30a00978 	addik	r5, r0, 2424
90001d70:	b0009002 	imm	-28670
90001d74:	30c00780 	addik	r6, r0, 1920
90001d78:	30e003e2 	addik	r7, r0, 994
90001d7c:	b0000000 	imm	0
90001d80:	b9f4a6a4 	brlid	r15, -22876	// 9000c424 <printAssert>
90001d84:	80000000 	or	r0, r0, r0
90001d88:	b8000000 	bri	0		// 90001d88

    RspPkt rspPkt;

    initErrorRspPkt(&rspPkt, cmdPkt, err_parameterOutOfRange);
90001d8c:	3073001c 	addik	r3, r19, 28
90001d90:	10a30000 	addk	r5, r3, r0
90001d94:	e8d30440 	lwi	r6, r19, 1088
90001d98:	30e00004 	addik	r7, r0, 4
90001d9c:	b9f4f888 	brlid	r15, -1912	// 90001624 <initErrorRspPkt>
90001da0:	80000000 	or	r0, r0, r0

    addParamToRspPkt(&rspPkt, "%s to %s, value %s", min, max, value);
90001da4:	3073001c 	addik	r3, r19, 28
90001da8:	10a30000 	addk	r5, r3, r0
90001dac:	b0009002 	imm	-28670
90001db0:	30c00980 	addik	r6, r0, 2432
90001db4:	e8f30444 	lwi	r7, r19, 1092
90001db8:	e9130448 	lwi	r8, r19, 1096
90001dbc:	e933044c 	lwi	r9, r19, 1100
90001dc0:	b9f4ee1c 	brlid	r15, -4580	// 90000bdc <addParamToRspPkt>
90001dc4:	80000000 	or	r0, r0, r0

    sendRspPkt(&rspPkt);
90001dc8:	3073001c 	addik	r3, r19, 28
90001dcc:	10a30000 	addk	r5, r3, r0
90001dd0:	b9f4efe0 	brlid	r15, -4128	// 90000db0 <sendRspPkt>
90001dd4:	80000000 	or	r0, r0, r0
}
90001dd8:	e9e10000 	lwi	r15, r1, 0
90001ddc:	10330000 	addk	r1, r19, r0
90001de0:	ea610438 	lwi	r19, r1, 1080
90001de4:	3021043c 	addik	r1, r1, 1084
90001de8:	b60f0008 	rtsd	r15, 8
90001dec:	80000000 	or	r0, r0, r0

90001df0 <sendRspStatusIntOutOfRange>:



static void sendRspStatusIntOutOfRange(CmdPkt* cmdPkt, int min, int max, int value)
{
90001df0:	3021fbc4 	addik	r1, r1, -1084
90001df4:	f9e10000 	swi	r15, r1, 0
90001df8:	fa610438 	swi	r19, r1, 1080
90001dfc:	12610000 	addk	r19, r1, r0
90001e00:	f8b30440 	swi	r5, r19, 1088
90001e04:	f8d30444 	swi	r6, r19, 1092
90001e08:	f8f30448 	swi	r7, r19, 1096
90001e0c:	f913044c 	swi	r8, r19, 1100
    RspPkt rspPkt;

    initErrorRspPkt(&rspPkt, cmdPkt, err_parameterOutOfRange);
90001e10:	3073001c 	addik	r3, r19, 28
90001e14:	10a30000 	addk	r5, r3, r0
90001e18:	e8d30440 	lwi	r6, r19, 1088
90001e1c:	30e00004 	addik	r7, r0, 4
90001e20:	b9f4f804 	brlid	r15, -2044	// 90001624 <initErrorRspPkt>
90001e24:	80000000 	or	r0, r0, r0

    addParamToRspPkt(&rspPkt, "%d to %d, value %d", min, max, value);
90001e28:	3073001c 	addik	r3, r19, 28
90001e2c:	10a30000 	addk	r5, r3, r0
90001e30:	b0009002 	imm	-28670
90001e34:	30c00994 	addik	r6, r0, 2452
90001e38:	e8f30444 	lwi	r7, r19, 1092
90001e3c:	e9130448 	lwi	r8, r19, 1096
90001e40:	e933044c 	lwi	r9, r19, 1100
90001e44:	b9f4ed98 	brlid	r15, -4712	// 90000bdc <addParamToRspPkt>
90001e48:	80000000 	or	r0, r0, r0

    sendRspPkt(&rspPkt);
90001e4c:	3073001c 	addik	r3, r19, 28
90001e50:	10a30000 	addk	r5, r3, r0
90001e54:	b9f4ef5c 	brlid	r15, -4260	// 90000db0 <sendRspPkt>
90001e58:	80000000 	or	r0, r0, r0
}
90001e5c:	e9e10000 	lwi	r15, r1, 0
90001e60:	10330000 	addk	r1, r19, r0
90001e64:	ea610438 	lwi	r19, r1, 1080
90001e68:	3021043c 	addik	r1, r1, 1084
90001e6c:	b60f0008 	rtsd	r15, 8
90001e70:	80000000 	or	r0, r0, r0

90001e74 <sendRspStatusHexOutOfRange>:



static void sendRspStatusHexOutOfRange(CmdPkt* cmdPkt, uint32 min, uint32 max, uint32 value)
{
90001e74:	3021fbc4 	addik	r1, r1, -1084
90001e78:	f9e10000 	swi	r15, r1, 0
90001e7c:	fa610438 	swi	r19, r1, 1080
90001e80:	12610000 	addk	r19, r1, r0
90001e84:	f8b30440 	swi	r5, r19, 1088
90001e88:	f8d30444 	swi	r6, r19, 1092
90001e8c:	f8f30448 	swi	r7, r19, 1096
90001e90:	f913044c 	swi	r8, r19, 1100
    RspPkt rspPkt;

    initErrorRspPkt(&rspPkt, cmdPkt, err_parameterOutOfRange);
90001e94:	3073001c 	addik	r3, r19, 28
90001e98:	10a30000 	addk	r5, r3, r0
90001e9c:	e8d30440 	lwi	r6, r19, 1088
90001ea0:	30e00004 	addik	r7, r0, 4
90001ea4:	b9f4f780 	brlid	r15, -2176	// 90001624 <initErrorRspPkt>
90001ea8:	80000000 	or	r0, r0, r0

    addParamToRspPkt(&rspPkt, "0x%X to 0x%X, value 0x%X", min, max, value);
90001eac:	3073001c 	addik	r3, r19, 28
90001eb0:	10a30000 	addk	r5, r3, r0
90001eb4:	b0009002 	imm	-28670
90001eb8:	30c009a8 	addik	r6, r0, 2472
90001ebc:	e8f30444 	lwi	r7, r19, 1092
90001ec0:	e9130448 	lwi	r8, r19, 1096
90001ec4:	e933044c 	lwi	r9, r19, 1100
90001ec8:	b9f4ed14 	brlid	r15, -4844	// 90000bdc <addParamToRspPkt>
90001ecc:	80000000 	or	r0, r0, r0

    sendRspPkt(&rspPkt);
90001ed0:	3073001c 	addik	r3, r19, 28
90001ed4:	10a30000 	addk	r5, r3, r0
90001ed8:	b9f4eed8 	brlid	r15, -4392	// 90000db0 <sendRspPkt>
90001edc:	80000000 	or	r0, r0, r0
}
90001ee0:	e9e10000 	lwi	r15, r1, 0
90001ee4:	10330000 	addk	r1, r19, r0
90001ee8:	ea610438 	lwi	r19, r1, 1080
90001eec:	3021043c 	addik	r1, r1, 1084
90001ef0:	b60f0008 	rtsd	r15, 8
90001ef4:	80000000 	or	r0, r0, r0

90001ef8 <sendRspStatusInvalidParameter>:



static void sendRspStatusInvalidParameter(CmdPkt* cmdPkt)
{
90001ef8:	3021ffe0 	addik	r1, r1, -32
90001efc:	f9e10000 	swi	r15, r1, 0
90001f00:	fa61001c 	swi	r19, r1, 28
90001f04:	12610000 	addk	r19, r1, r0
90001f08:	f8b30024 	swi	r5, r19, 36
    sendRspError(cmdPkt, err_invalidParameter, NULL);
90001f0c:	e8b30024 	lwi	r5, r19, 36
90001f10:	30c00002 	addik	r6, r0, 2
90001f14:	10e00000 	addk	r7, r0, r0
90001f18:	b9f4fcfc 	brlid	r15, -772	// 90001c14 <sendRspError>
90001f1c:	80000000 	or	r0, r0, r0
}
90001f20:	e9e10000 	lwi	r15, r1, 0
90001f24:	10330000 	addk	r1, r19, r0
90001f28:	ea61001c 	lwi	r19, r1, 28
90001f2c:	30210020 	addik	r1, r1, 32
90001f30:	b60f0008 	rtsd	r15, 8
90001f34:	80000000 	or	r0, r0, r0

90001f38 <sendRspStatusInvalidParameterCount>:



static void sendRspStatusInvalidParameterCount(CmdPkt* cmdPkt, unsigned minExpectedParamCount, unsigned maxExpectedParamCount)
{
90001f38:	3021fbb8 	addik	r1, r1, -1096
90001f3c:	f9e10000 	swi	r15, r1, 0
90001f40:	fa610444 	swi	r19, r1, 1092
90001f44:	12610000 	addk	r19, r1, r0
90001f48:	f8b3044c 	swi	r5, r19, 1100
90001f4c:	f8d30450 	swi	r6, r19, 1104
90001f50:	f8f30454 	swi	r7, r19, 1108
    RspPkt rspPkt;

    initErrorRspPkt(&rspPkt, cmdPkt, err_invalidParameterCount);
90001f54:	30730020 	addik	r3, r19, 32
90001f58:	10a30000 	addk	r5, r3, r0
90001f5c:	e8d3044c 	lwi	r6, r19, 1100
90001f60:	30e00003 	addik	r7, r0, 3
90001f64:	b9f4f6c0 	brlid	r15, -2368	// 90001624 <initErrorRspPkt>
90001f68:	80000000 	or	r0, r0, r0

    if(minExpectedParamCount == maxExpectedParamCount)
90001f6c:	e8930450 	lwi	r4, r19, 1104
90001f70:	e8730454 	lwi	r3, r19, 1108
90001f74:	16432000 	rsubk	r18, r3, r4
90001f78:	bc32005c 	bnei	r18, 92		// 90001fd4
    {
        addParamToRspPkt(&rspPkt, "- Expected %d parameter%s, received %d",
90001f7c:	e8730454 	lwi	r3, r19, 1108
90001f80:	aa430001 	xori	r18, r3, 1
90001f84:	bc320014 	bnei	r18, 20		// 90001f98
90001f88:	b0009002 	imm	-28670
90001f8c:	306009c4 	addik	r3, r0, 2500
90001f90:	f8730440 	swi	r3, r19, 1088
90001f94:	b8000010 	bri	16		// 90001fa4
90001f98:	b0009002 	imm	-28670
90001f9c:	306009c8 	addik	r3, r0, 2504
90001fa0:	f8730440 	swi	r3, r19, 1088
90001fa4:	e873044c 	lwi	r3, r19, 1100
90001fa8:	e8830410 	lwi	r4, r3, 1040
90001fac:	30730020 	addik	r3, r19, 32
90001fb0:	10a30000 	addk	r5, r3, r0
90001fb4:	b0009002 	imm	-28670
90001fb8:	30c009cc 	addik	r6, r0, 2508
90001fbc:	e8f30454 	lwi	r7, r19, 1108
90001fc0:	e9130440 	lwi	r8, r19, 1088
90001fc4:	11240000 	addk	r9, r4, r0
90001fc8:	b9f4ec14 	brlid	r15, -5100	// 90000bdc <addParamToRspPkt>
90001fcc:	80000000 	or	r0, r0, r0
90001fd0:	b800005c 	bri	92		// 9000202c
                         maxExpectedParamCount, maxExpectedParamCount == 1 ? "" : "s", cmdPkt->paramCount);
    }
    else
    {
        addParamToRspPkt(&rspPkt, "- Expected %d to %d parameter%s, received %d",
90001fd4:	e8730454 	lwi	r3, r19, 1108
90001fd8:	aa430001 	xori	r18, r3, 1
90001fdc:	bc320014 	bnei	r18, 20		// 90001ff0
90001fe0:	b0009002 	imm	-28670
90001fe4:	306009c4 	addik	r3, r0, 2500
90001fe8:	f873043c 	swi	r3, r19, 1084
90001fec:	b8000010 	bri	16		// 90001ffc
90001ff0:	b0009002 	imm	-28670
90001ff4:	306009c8 	addik	r3, r0, 2504
90001ff8:	f873043c 	swi	r3, r19, 1084
90001ffc:	e873044c 	lwi	r3, r19, 1100
90002000:	e8830410 	lwi	r4, r3, 1040
90002004:	30730020 	addik	r3, r19, 32
90002008:	10a30000 	addk	r5, r3, r0
9000200c:	b0009002 	imm	-28670
90002010:	30c009f4 	addik	r6, r0, 2548
90002014:	e8f30450 	lwi	r7, r19, 1104
90002018:	e9130454 	lwi	r8, r19, 1108
9000201c:	e933043c 	lwi	r9, r19, 1084
90002020:	11440000 	addk	r10, r4, r0
90002024:	b9f4ebb8 	brlid	r15, -5192	// 90000bdc <addParamToRspPkt>
90002028:	80000000 	or	r0, r0, r0
                         minExpectedParamCount, maxExpectedParamCount,
                         maxExpectedParamCount == 1 ? "" : "s", cmdPkt->paramCount);
    }

    if(cmdPkt->paramCount > 0)
9000202c:	e873044c 	lwi	r3, r19, 1100
90002030:	e8630410 	lwi	r3, r3, 1040
90002034:	bc03001c 	beqi	r3, 28		// 90002050
    {
        addStringParamToRspPkt(&rspPkt, "-");
90002038:	30730020 	addik	r3, r19, 32
9000203c:	10a30000 	addk	r5, r3, r0
90002040:	b0009002 	imm	-28670
90002044:	30c0078c 	addik	r6, r0, 1932
90002048:	b9f4eca0 	brlid	r15, -4960	// 90000ce8 <addStringParamToRspPkt>
9000204c:	80000000 	or	r0, r0, r0
    }

    int paramIndex;
    for(paramIndex = 0; paramIndex < (int)cmdPkt->paramCount; ++paramIndex)
90002050:	f813001c 	swi	r0, r19, 28
90002054:	b800003c 	bri	60		// 90002090
    {
        addStringParamToRspPkt(&rspPkt, cmdPkt->params[paramIndex]);
90002058:	e873001c 	lwi	r3, r19, 28
9000205c:	e893044c 	lwi	r4, r19, 1100
90002060:	64630402 	bslli	r3, r3, 2
90002064:	10632000 	addk	r3, r3, r4
90002068:	30630414 	addik	r3, r3, 1044
9000206c:	e8830000 	lwi	r4, r3, 0
90002070:	30730020 	addik	r3, r19, 32
90002074:	10a30000 	addk	r5, r3, r0
90002078:	10c40000 	addk	r6, r4, r0
9000207c:	b9f4ec6c 	brlid	r15, -5012	// 90000ce8 <addStringParamToRspPkt>
90002080:	80000000 	or	r0, r0, r0
90002084:	e873001c 	lwi	r3, r19, 28
90002088:	30630001 	addik	r3, r3, 1
9000208c:	f873001c 	swi	r3, r19, 28
90002090:	e873044c 	lwi	r3, r19, 1100
90002094:	e8630410 	lwi	r3, r3, 1040
90002098:	10830000 	addk	r4, r3, r0
9000209c:	e873001c 	lwi	r3, r19, 28
900020a0:	16441801 	cmp	r18, r4, r3
900020a4:	bc52ffb4 	blti	r18, -76		// 90002058
    }

    sendRspPkt(&rspPkt);
900020a8:	30730020 	addik	r3, r19, 32
900020ac:	10a30000 	addk	r5, r3, r0
900020b0:	b9f4ed00 	brlid	r15, -4864	// 90000db0 <sendRspPkt>
900020b4:	80000000 	or	r0, r0, r0
}
900020b8:	e9e10000 	lwi	r15, r1, 0
900020bc:	10330000 	addk	r1, r19, r0
900020c0:	ea610444 	lwi	r19, r1, 1092
900020c4:	30210448 	addik	r1, r1, 1096
900020c8:	b60f0008 	rtsd	r15, 8
900020cc:	80000000 	or	r0, r0, r0

900020d0 <sendRspStatusUnknownCommand>:



static void sendRspStatusUnknownCommand(CmdPkt* cmdPkt)
{
900020d0:	3021ffe0 	addik	r1, r1, -32
900020d4:	f9e10000 	swi	r15, r1, 0
900020d8:	fa61001c 	swi	r19, r1, 28
900020dc:	12610000 	addk	r19, r1, r0
900020e0:	f8b30024 	swi	r5, r19, 36
    sendRspError(cmdPkt, err_unknownCommand, NULL);
900020e4:	e8b30024 	lwi	r5, r19, 36
900020e8:	30c00001 	addik	r6, r0, 1
900020ec:	10e00000 	addk	r7, r0, r0
900020f0:	b9f4fb24 	brlid	r15, -1244	// 90001c14 <sendRspError>
900020f4:	80000000 	or	r0, r0, r0
}
900020f8:	e9e10000 	lwi	r15, r1, 0
900020fc:	10330000 	addk	r1, r19, r0
90002100:	ea61001c 	lwi	r19, r1, 28
90002104:	30210020 	addik	r1, r1, 32
90002108:	b60f0008 	rtsd	r15, 8
9000210c:	80000000 	or	r0, r0, r0

90002110 <sendRspStatusSystemBusy>:



static void sendRspStatusSystemBusy(CmdPkt* cmdPkt, const char* errorDesc)
{
90002110:	3021ffe0 	addik	r1, r1, -32
90002114:	f9e10000 	swi	r15, r1, 0
90002118:	fa61001c 	swi	r19, r1, 28
9000211c:	12610000 	addk	r19, r1, r0
90002120:	f8b30024 	swi	r5, r19, 36
90002124:	f8d30028 	swi	r6, r19, 40
    sendRspError(cmdPkt, err_systemBusy, errorDesc);
90002128:	e8b30024 	lwi	r5, r19, 36
9000212c:	30c00006 	addik	r6, r0, 6
90002130:	e8f30028 	lwi	r7, r19, 40
90002134:	b9f4fae0 	brlid	r15, -1312	// 90001c14 <sendRspError>
90002138:	80000000 	or	r0, r0, r0
}
9000213c:	e9e10000 	lwi	r15, r1, 0
90002140:	10330000 	addk	r1, r19, r0
90002144:	ea61001c 	lwi	r19, r1, 28
90002148:	30210020 	addik	r1, r1, 32
9000214c:	b60f0008 	rtsd	r15, 8
90002150:	80000000 	or	r0, r0, r0

90002154 <sendRspStatusInvalidImage>:



static void sendRspStatusInvalidImage(CmdPkt* cmdPkt, const char* errorDesc)
{
90002154:	3021ffe0 	addik	r1, r1, -32
90002158:	f9e10000 	swi	r15, r1, 0
9000215c:	fa61001c 	swi	r19, r1, 28
90002160:	12610000 	addk	r19, r1, r0
90002164:	f8b30024 	swi	r5, r19, 36
90002168:	f8d30028 	swi	r6, r19, 40
    sendRspError(cmdPkt, err_invalidUpgradeImage, errorDesc);
9000216c:	e8b30024 	lwi	r5, r19, 36
90002170:	30c00008 	addik	r6, r0, 8	// 8 <_vector_sw_exception>
90002174:	e8f30028 	lwi	r7, r19, 40
90002178:	b9f4fa9c 	brlid	r15, -1380	// 90001c14 <sendRspError>
9000217c:	80000000 	or	r0, r0, r0
}
90002180:	e9e10000 	lwi	r15, r1, 0
90002184:	10330000 	addk	r1, r19, r0
90002188:	ea61001c 	lwi	r19, r1, 28
9000218c:	30210020 	addik	r1, r1, 32
90002190:	b60f0008 	rtsd	r15, 8
90002194:	80000000 	or	r0, r0, r0

90002198 <sendRspStatusMissingFileData>:



static void sendRspStatusMissingFileData(CmdPkt* cmdPkt)
{
90002198:	3021ffe0 	addik	r1, r1, -32
9000219c:	f9e10000 	swi	r15, r1, 0
900021a0:	fa61001c 	swi	r19, r1, 28
900021a4:	12610000 	addk	r19, r1, r0
900021a8:	f8b30024 	swi	r5, r19, 36
    sendRspError(cmdPkt, err_missingFileData, NULL);
900021ac:	e8b30024 	lwi	r5, r19, 36
900021b0:	30c00009 	addik	r6, r0, 9
900021b4:	10e00000 	addk	r7, r0, r0
900021b8:	b9f4fa5c 	brlid	r15, -1444	// 90001c14 <sendRspError>
900021bc:	80000000 	or	r0, r0, r0
}
900021c0:	e9e10000 	lwi	r15, r1, 0
900021c4:	10330000 	addk	r1, r19, r0
900021c8:	ea61001c 	lwi	r19, r1, 28
900021cc:	30210020 	addik	r1, r1, 32
900021d0:	b60f0008 	rtsd	r15, 8
900021d4:	80000000 	or	r0, r0, r0

900021d8 <sendRspStatusInvalidFileData>:



static void sendRspStatusInvalidFileData(CmdPkt* cmdPkt)
{
900021d8:	3021ffe0 	addik	r1, r1, -32
900021dc:	f9e10000 	swi	r15, r1, 0
900021e0:	fa61001c 	swi	r19, r1, 28
900021e4:	12610000 	addk	r19, r1, r0
900021e8:	f8b30024 	swi	r5, r19, 36
    sendRspError(cmdPkt, err_invalidFileData, NULL);
900021ec:	e8b30024 	lwi	r5, r19, 36
900021f0:	30c0000a 	addik	r6, r0, 10
900021f4:	10e00000 	addk	r7, r0, r0
900021f8:	b9f4fa1c 	brlid	r15, -1508	// 90001c14 <sendRspError>
900021fc:	80000000 	or	r0, r0, r0
}
90002200:	e9e10000 	lwi	r15, r1, 0
90002204:	10330000 	addk	r1, r19, r0
90002208:	ea61001c 	lwi	r19, r1, 28
9000220c:	30210020 	addik	r1, r1, 32
90002210:	b60f0008 	rtsd	r15, 8
90002214:	80000000 	or	r0, r0, r0

90002218 <getIntValue>:



static bool getIntValue(const char* str, int* value, int base)
{
90002218:	3021ffdc 	addik	r1, r1, -36
9000221c:	f9e10000 	swi	r15, r1, 0
90002220:	fa610020 	swi	r19, r1, 32
90002224:	12610000 	addk	r19, r1, r0
90002228:	f8b30028 	swi	r5, r19, 40
9000222c:	f8d3002c 	swi	r6, r19, 44
90002230:	f8f30030 	swi	r7, r19, 48
    char* endPtr;

    *value = strtol(str, &endPtr, base);
90002234:	e8b30028 	lwi	r5, r19, 40
90002238:	3073001c 	addik	r3, r19, 28
9000223c:	10c30000 	addk	r6, r3, r0
90002240:	e8f30030 	lwi	r7, r19, 48
90002244:	b0000001 	imm	1
90002248:	b9f4272c 	brlid	r15, 10028	// 90014974 <strtol>
9000224c:	80000000 	or	r0, r0, r0
90002250:	10830000 	addk	r4, r3, r0
90002254:	e873002c 	lwi	r3, r19, 44
90002258:	f8830000 	swi	r4, r3, 0

    return !(*endPtr);
9000225c:	e873001c 	lwi	r3, r19, 28
90002260:	e0630000 	lbui	r3, r3, 0
90002264:	90630060 	sext8	r3, r3
90002268:	88630400 	pcmpeq	r3, r3, r0
}
9000226c:	e9e10000 	lwi	r15, r1, 0
90002270:	10330000 	addk	r1, r19, r0
90002274:	ea610020 	lwi	r19, r1, 32
90002278:	30210024 	addik	r1, r1, 36
9000227c:	b60f0008 	rtsd	r15, 8
90002280:	80000000 	or	r0, r0, r0

90002284 <getUnsignedValue>:



static bool getUnsignedValue(const char* str, uint32* value, int base)
{
90002284:	3021ffdc 	addik	r1, r1, -36
90002288:	f9e10000 	swi	r15, r1, 0
9000228c:	fa610020 	swi	r19, r1, 32
90002290:	12610000 	addk	r19, r1, r0
90002294:	f8b30028 	swi	r5, r19, 40
90002298:	f8d3002c 	swi	r6, r19, 44
9000229c:	f8f30030 	swi	r7, r19, 48
    char* endPtr;

    *value = strtoul(str, &endPtr, base);
900022a0:	e8b30028 	lwi	r5, r19, 40
900022a4:	3073001c 	addik	r3, r19, 28
900022a8:	10c30000 	addk	r6, r3, r0
900022ac:	e8f30030 	lwi	r7, r19, 48
900022b0:	b0000001 	imm	1
900022b4:	b9f42934 	brlid	r15, 10548	// 90014be8 <strtoul>
900022b8:	80000000 	or	r0, r0, r0
900022bc:	10830000 	addk	r4, r3, r0
900022c0:	e873002c 	lwi	r3, r19, 44
900022c4:	f8830000 	swi	r4, r3, 0

    return !(*endPtr);
900022c8:	e873001c 	lwi	r3, r19, 28
900022cc:	e0630000 	lbui	r3, r3, 0
900022d0:	90630060 	sext8	r3, r3
900022d4:	88630400 	pcmpeq	r3, r3, r0
}
900022d8:	e9e10000 	lwi	r15, r1, 0
900022dc:	10330000 	addk	r1, r19, r0
900022e0:	ea610020 	lwi	r19, r1, 32
900022e4:	30210024 	addik	r1, r1, 36
900022e8:	b60f0008 	rtsd	r15, 8
900022ec:	80000000 	or	r0, r0, r0

900022f0 <validateIntValue>:


static bool validateIntValue(CmdPkt* cmdPkt, const char* str, int* value)
{
900022f0:	3021ffdc 	addik	r1, r1, -36
900022f4:	f9e10000 	swi	r15, r1, 0
900022f8:	fa610020 	swi	r19, r1, 32
900022fc:	12610000 	addk	r19, r1, r0
90002300:	f8b30028 	swi	r5, r19, 40
90002304:	f8d3002c 	swi	r6, r19, 44
90002308:	f8f30030 	swi	r7, r19, 48
    if(!getIntValue(str, value, 10))
9000230c:	e8b3002c 	lwi	r5, r19, 44
90002310:	e8d30030 	lwi	r6, r19, 48
90002314:	30e0000a 	addik	r7, r0, 10
90002318:	b9f4ff00 	brlid	r15, -256	// 90002218 <getIntValue>
9000231c:	80000000 	or	r0, r0, r0
90002320:	bc23001c 	bnei	r3, 28		// 9000233c
    {
        sendRspStatusInvalidParameter(cmdPkt);
90002324:	e8b30028 	lwi	r5, r19, 40
90002328:	b9f4fbd0 	brlid	r15, -1072	// 90001ef8 <sendRspStatusInvalidParameter>
9000232c:	80000000 	or	r0, r0, r0
        return false;
90002330:	10600000 	addk	r3, r0, r0
90002334:	f873001c 	swi	r3, r19, 28
90002338:	b800000c 	bri	12		// 90002344
    }

    return true;
9000233c:	30600001 	addik	r3, r0, 1
90002340:	f873001c 	swi	r3, r19, 28
90002344:	e873001c 	lwi	r3, r19, 28
}
90002348:	e9e10000 	lwi	r15, r1, 0
9000234c:	10330000 	addk	r1, r19, r0
90002350:	ea610020 	lwi	r19, r1, 32
90002354:	30210024 	addik	r1, r1, 36
90002358:	b60f0008 	rtsd	r15, 8
9000235c:	80000000 	or	r0, r0, r0

90002360 <validateUnsignedValue>:



static bool validateUnsignedValue(CmdPkt* cmdPkt, const char* str, uint32* value)
{
90002360:	3021ffdc 	addik	r1, r1, -36
90002364:	f9e10000 	swi	r15, r1, 0
90002368:	fa610020 	swi	r19, r1, 32
9000236c:	12610000 	addk	r19, r1, r0
90002370:	f8b30028 	swi	r5, r19, 40
90002374:	f8d3002c 	swi	r6, r19, 44
90002378:	f8f30030 	swi	r7, r19, 48
    if(!getUnsignedValue(str, value, 10))
9000237c:	e8b3002c 	lwi	r5, r19, 44
90002380:	e8d30030 	lwi	r6, r19, 48
90002384:	30e0000a 	addik	r7, r0, 10
90002388:	b9f4fefc 	brlid	r15, -260	// 90002284 <getUnsignedValue>
9000238c:	80000000 	or	r0, r0, r0
90002390:	bc23001c 	bnei	r3, 28		// 900023ac
    {
        sendRspStatusInvalidParameter(cmdPkt);
90002394:	e8b30028 	lwi	r5, r19, 40
90002398:	b9f4fb60 	brlid	r15, -1184	// 90001ef8 <sendRspStatusInvalidParameter>
9000239c:	80000000 	or	r0, r0, r0
        return false;
900023a0:	10600000 	addk	r3, r0, r0
900023a4:	f873001c 	swi	r3, r19, 28
900023a8:	b800000c 	bri	12		// 900023b4
    }

    return true;
900023ac:	30600001 	addik	r3, r0, 1
900023b0:	f873001c 	swi	r3, r19, 28
900023b4:	e873001c 	lwi	r3, r19, 28
}
900023b8:	e9e10000 	lwi	r15, r1, 0
900023bc:	10330000 	addk	r1, r19, r0
900023c0:	ea610020 	lwi	r19, r1, 32
900023c4:	30210024 	addik	r1, r1, 36
900023c8:	b60f0008 	rtsd	r15, 8
900023cc:	80000000 	or	r0, r0, r0

900023d0 <validateHexValue>:



static bool validateHexValue(CmdPkt* cmdPkt, const char* str, uint32* value)
{
900023d0:	3021ffdc 	addik	r1, r1, -36
900023d4:	f9e10000 	swi	r15, r1, 0
900023d8:	fa610020 	swi	r19, r1, 32
900023dc:	12610000 	addk	r19, r1, r0
900023e0:	f8b30028 	swi	r5, r19, 40
900023e4:	f8d3002c 	swi	r6, r19, 44
900023e8:	f8f30030 	swi	r7, r19, 48
    if(!getUnsignedValue(str, value, 16))
900023ec:	e8b3002c 	lwi	r5, r19, 44
900023f0:	e8d30030 	lwi	r6, r19, 48
900023f4:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
900023f8:	b9f4fe8c 	brlid	r15, -372	// 90002284 <getUnsignedValue>
900023fc:	80000000 	or	r0, r0, r0
90002400:	bc23001c 	bnei	r3, 28		// 9000241c
    {
        sendRspStatusInvalidParameter(cmdPkt);
90002404:	e8b30028 	lwi	r5, r19, 40
90002408:	b9f4faf0 	brlid	r15, -1296	// 90001ef8 <sendRspStatusInvalidParameter>
9000240c:	80000000 	or	r0, r0, r0
        return false;
90002410:	10600000 	addk	r3, r0, r0
90002414:	f873001c 	swi	r3, r19, 28
90002418:	b800000c 	bri	12		// 90002424
    }

    return true;
9000241c:	30600001 	addik	r3, r0, 1
90002420:	f873001c 	swi	r3, r19, 28
90002424:	e873001c 	lwi	r3, r19, 28
}
90002428:	e9e10000 	lwi	r15, r1, 0
9000242c:	10330000 	addk	r1, r19, r0
90002430:	ea610020 	lwi	r19, r1, 32
90002434:	30210024 	addik	r1, r1, 36
90002438:	b60f0008 	rtsd	r15, 8
9000243c:	80000000 	or	r0, r0, r0

90002440 <validateIntParameterRange>:


static bool validateIntParameterRange(CmdPkt* cmdPkt, int paramIndex, int minValue, int maxValue, int* value)
{
90002440:	3021ffdc 	addik	r1, r1, -36
90002444:	f9e10000 	swi	r15, r1, 0
90002448:	fa610020 	swi	r19, r1, 32
9000244c:	12610000 	addk	r19, r1, r0
90002450:	f8b30028 	swi	r5, r19, 40
90002454:	f8d3002c 	swi	r6, r19, 44
90002458:	f8f30030 	swi	r7, r19, 48
9000245c:	f9130034 	swi	r8, r19, 52
90002460:	f9330038 	swi	r9, r19, 56
    ASSERT(cmdPkt);
90002464:	e8730028 	lwi	r3, r19, 40
90002468:	bc23002c 	bnei	r3, 44		// 90002494
9000246c:	94110002 	msrclr	r0, 2
90002470:	b0009002 	imm	-28670
90002474:	30a00800 	addik	r5, r0, 2048
90002478:	b0009002 	imm	-28670
9000247c:	30c00780 	addik	r6, r0, 1920
90002480:	30e00492 	addik	r7, r0, 1170
90002484:	b0000000 	imm	0
90002488:	b9f49f9c 	brlid	r15, -24676	// 9000c424 <printAssert>
9000248c:	80000000 	or	r0, r0, r0
90002490:	b8000000 	bri	0		// 90002490
    ASSERT(value);
90002494:	e8730038 	lwi	r3, r19, 56
90002498:	bc23002c 	bnei	r3, 44		// 900024c4
9000249c:	94110002 	msrclr	r0, 2
900024a0:	b0009002 	imm	-28670
900024a4:	30a00978 	addik	r5, r0, 2424
900024a8:	b0009002 	imm	-28670
900024ac:	30c00780 	addik	r6, r0, 1920
900024b0:	30e00493 	addik	r7, r0, 1171
900024b4:	b0000000 	imm	0
900024b8:	b9f49f6c 	brlid	r15, -24724	// 9000c424 <printAssert>
900024bc:	80000000 	or	r0, r0, r0
900024c0:	b8000000 	bri	0		// 900024c0
    ASSERT(paramIndex < (int)cmdPkt->paramCount && paramIndex >= 0);
900024c4:	e8730028 	lwi	r3, r19, 40
900024c8:	e8630410 	lwi	r3, r3, 1040
900024cc:	10830000 	addk	r4, r3, r0
900024d0:	e873002c 	lwi	r3, r19, 44
900024d4:	16441801 	cmp	r18, r4, r3
900024d8:	bcb2000c 	bgei	r18, 12		// 900024e4
900024dc:	e873002c 	lwi	r3, r19, 44
900024e0:	bca3002c 	bgei	r3, 44		// 9000250c
900024e4:	94110002 	msrclr	r0, 2
900024e8:	b0009002 	imm	-28670
900024ec:	30a00a24 	addik	r5, r0, 2596
900024f0:	b0009002 	imm	-28670
900024f4:	30c00780 	addik	r6, r0, 1920
900024f8:	30e00494 	addik	r7, r0, 1172
900024fc:	b0000000 	imm	0
90002500:	b9f49f24 	brlid	r15, -24796	// 9000c424 <printAssert>
90002504:	80000000 	or	r0, r0, r0
90002508:	b8000000 	bri	0		// 90002508

    if(!(validateIntValue(cmdPkt, cmdPkt->params[paramIndex], value)))
9000250c:	e873002c 	lwi	r3, r19, 44
90002510:	e8930028 	lwi	r4, r19, 40
90002514:	64630402 	bslli	r3, r3, 2
90002518:	10632000 	addk	r3, r3, r4
9000251c:	30630414 	addik	r3, r3, 1044
90002520:	e8630000 	lwi	r3, r3, 0
90002524:	e8b30028 	lwi	r5, r19, 40
90002528:	10c30000 	addk	r6, r3, r0
9000252c:	e8f30038 	lwi	r7, r19, 56
90002530:	b9f4fdc0 	brlid	r15, -576	// 900022f0 <validateIntValue>
90002534:	80000000 	or	r0, r0, r0
90002538:	bc230010 	bnei	r3, 16		// 90002548
    {
        return false;
9000253c:	10600000 	addk	r3, r0, r0
90002540:	f873001c 	swi	r3, r19, 28
90002544:	b8000060 	bri	96		// 900025a4
    }

    if(*value < minValue || *value > maxValue)
90002548:	e8730038 	lwi	r3, r19, 56
9000254c:	e8830000 	lwi	r4, r3, 0
90002550:	e8730030 	lwi	r3, r19, 48
90002554:	16432001 	cmp	r18, r3, r4
90002558:	bc520018 	blti	r18, 24		// 90002570
9000255c:	e8730038 	lwi	r3, r19, 56
90002560:	e8830000 	lwi	r4, r3, 0
90002564:	e8730034 	lwi	r3, r19, 52
90002568:	16441801 	cmp	r18, r4, r3
9000256c:	bcb20030 	bgei	r18, 48		// 9000259c
    {
        sendRspStatusIntOutOfRange(cmdPkt, minValue, maxValue, *value);
90002570:	e8730038 	lwi	r3, r19, 56
90002574:	e8630000 	lwi	r3, r3, 0
90002578:	e8b30028 	lwi	r5, r19, 40
9000257c:	e8d30030 	lwi	r6, r19, 48
90002580:	e8f30034 	lwi	r7, r19, 52
90002584:	11030000 	addk	r8, r3, r0
90002588:	b9f4f868 	brlid	r15, -1944	// 90001df0 <sendRspStatusIntOutOfRange>
9000258c:	80000000 	or	r0, r0, r0
        return false;
90002590:	10600000 	addk	r3, r0, r0
90002594:	f873001c 	swi	r3, r19, 28
90002598:	b800000c 	bri	12		// 900025a4
    }

    return true;
9000259c:	30600001 	addik	r3, r0, 1
900025a0:	f873001c 	swi	r3, r19, 28
900025a4:	e873001c 	lwi	r3, r19, 28
}
900025a8:	e9e10000 	lwi	r15, r1, 0
900025ac:	10330000 	addk	r1, r19, r0
900025b0:	ea610020 	lwi	r19, r1, 32
900025b4:	30210024 	addik	r1, r1, 36
900025b8:	b60f0008 	rtsd	r15, 8
900025bc:	80000000 	or	r0, r0, r0

900025c0 <validateHexParameterRange>:

static bool validateHexParameterRange(CmdPkt* cmdPkt, int paramIndex, uint32 minValue, uint32 maxValue, uint32* value)
{
900025c0:	3021ffdc 	addik	r1, r1, -36
900025c4:	f9e10000 	swi	r15, r1, 0
900025c8:	fa610020 	swi	r19, r1, 32
900025cc:	12610000 	addk	r19, r1, r0
900025d0:	f8b30028 	swi	r5, r19, 40
900025d4:	f8d3002c 	swi	r6, r19, 44
900025d8:	f8f30030 	swi	r7, r19, 48
900025dc:	f9130034 	swi	r8, r19, 52
900025e0:	f9330038 	swi	r9, r19, 56
    ASSERT(cmdPkt);
900025e4:	e8730028 	lwi	r3, r19, 40
900025e8:	bc23002c 	bnei	r3, 44		// 90002614
900025ec:	94110002 	msrclr	r0, 2
900025f0:	b0009002 	imm	-28670
900025f4:	30a00800 	addik	r5, r0, 2048
900025f8:	b0009002 	imm	-28670
900025fc:	30c00780 	addik	r6, r0, 1920
90002600:	30e004a6 	addik	r7, r0, 1190
90002604:	b0000000 	imm	0
90002608:	b9f49e1c 	brlid	r15, -25060	// 9000c424 <printAssert>
9000260c:	80000000 	or	r0, r0, r0
90002610:	b8000000 	bri	0		// 90002610
    ASSERT(value);
90002614:	e8730038 	lwi	r3, r19, 56
90002618:	bc23002c 	bnei	r3, 44		// 90002644
9000261c:	94110002 	msrclr	r0, 2
90002620:	b0009002 	imm	-28670
90002624:	30a00978 	addik	r5, r0, 2424
90002628:	b0009002 	imm	-28670
9000262c:	30c00780 	addik	r6, r0, 1920
90002630:	30e004a7 	addik	r7, r0, 1191
90002634:	b0000000 	imm	0
90002638:	b9f49dec 	brlid	r15, -25108	// 9000c424 <printAssert>
9000263c:	80000000 	or	r0, r0, r0
90002640:	b8000000 	bri	0		// 90002640
    ASSERT(paramIndex < (int)cmdPkt->paramCount && paramIndex >= 0);
90002644:	e8730028 	lwi	r3, r19, 40
90002648:	e8630410 	lwi	r3, r3, 1040
9000264c:	10830000 	addk	r4, r3, r0
90002650:	e873002c 	lwi	r3, r19, 44
90002654:	16441801 	cmp	r18, r4, r3
90002658:	bcb2000c 	bgei	r18, 12		// 90002664
9000265c:	e873002c 	lwi	r3, r19, 44
90002660:	bca3002c 	bgei	r3, 44		// 9000268c
90002664:	94110002 	msrclr	r0, 2
90002668:	b0009002 	imm	-28670
9000266c:	30a00a24 	addik	r5, r0, 2596
90002670:	b0009002 	imm	-28670
90002674:	30c00780 	addik	r6, r0, 1920
90002678:	30e004a8 	addik	r7, r0, 1192
9000267c:	b0000000 	imm	0
90002680:	b9f49da4 	brlid	r15, -25180	// 9000c424 <printAssert>
90002684:	80000000 	or	r0, r0, r0
90002688:	b8000000 	bri	0		// 90002688

    if(!(validateHexValue(cmdPkt, cmdPkt->params[paramIndex], value)))
9000268c:	e873002c 	lwi	r3, r19, 44
90002690:	e8930028 	lwi	r4, r19, 40
90002694:	64630402 	bslli	r3, r3, 2
90002698:	10632000 	addk	r3, r3, r4
9000269c:	30630414 	addik	r3, r3, 1044
900026a0:	e8630000 	lwi	r3, r3, 0
900026a4:	e8b30028 	lwi	r5, r19, 40
900026a8:	10c30000 	addk	r6, r3, r0
900026ac:	e8f30038 	lwi	r7, r19, 56
900026b0:	b9f4fd20 	brlid	r15, -736	// 900023d0 <validateHexValue>
900026b4:	80000000 	or	r0, r0, r0
900026b8:	bc230010 	bnei	r3, 16		// 900026c8
    {
        return false;
900026bc:	10600000 	addk	r3, r0, r0
900026c0:	f873001c 	swi	r3, r19, 28
900026c4:	b8000060 	bri	96		// 90002724
    }

    if(*value < minValue || *value > maxValue)
900026c8:	e8730038 	lwi	r3, r19, 56
900026cc:	e8830000 	lwi	r4, r3, 0
900026d0:	e8730030 	lwi	r3, r19, 48
900026d4:	16432003 	cmpu	r18, r3, r4
900026d8:	bc520018 	blti	r18, 24		// 900026f0
900026dc:	e8730038 	lwi	r3, r19, 56
900026e0:	e8830000 	lwi	r4, r3, 0
900026e4:	e8730034 	lwi	r3, r19, 52
900026e8:	16441803 	cmpu	r18, r4, r3
900026ec:	bcb20030 	bgei	r18, 48		// 9000271c
    {
        sendRspStatusHexOutOfRange(cmdPkt, minValue, maxValue, *value);
900026f0:	e8730038 	lwi	r3, r19, 56
900026f4:	e8630000 	lwi	r3, r3, 0
900026f8:	e8b30028 	lwi	r5, r19, 40
900026fc:	e8d30030 	lwi	r6, r19, 48
90002700:	e8f30034 	lwi	r7, r19, 52
90002704:	11030000 	addk	r8, r3, r0
90002708:	b9f4f76c 	brlid	r15, -2196	// 90001e74 <sendRspStatusHexOutOfRange>
9000270c:	80000000 	or	r0, r0, r0
        return false;
90002710:	10600000 	addk	r3, r0, r0
90002714:	f873001c 	swi	r3, r19, 28
90002718:	b800000c 	bri	12		// 90002724
    }

    return true;
9000271c:	30600001 	addik	r3, r0, 1
90002720:	f873001c 	swi	r3, r19, 28
90002724:	e873001c 	lwi	r3, r19, 28
}
90002728:	e9e10000 	lwi	r15, r1, 0
9000272c:	10330000 	addk	r1, r19, r0
90002730:	ea610020 	lwi	r19, r1, 32
90002734:	30210024 	addik	r1, r1, 36
90002738:	b60f0008 	rtsd	r15, 8
9000273c:	80000000 	or	r0, r0, r0

90002740 <validateMotorParameter>:


static bool validateMotorParameter(CmdPkt* cmdPkt, int paramIndex, StepperMotor *motor)
{
90002740:	3021ffdc 	addik	r1, r1, -36
90002744:	f9e10000 	swi	r15, r1, 0
90002748:	fa610020 	swi	r19, r1, 32
9000274c:	12610000 	addk	r19, r1, r0
90002750:	f8b30028 	swi	r5, r19, 40
90002754:	f8d3002c 	swi	r6, r19, 44
90002758:	f8f30030 	swi	r7, r19, 48
    if(strcmp(U_MOTOR_KEY, cmdPkt->params[paramIndex]) == 0)
9000275c:	e873002c 	lwi	r3, r19, 44
90002760:	e8930028 	lwi	r4, r19, 40
90002764:	64630402 	bslli	r3, r3, 2
90002768:	10632000 	addk	r3, r3, r4
9000276c:	30630414 	addik	r3, r3, 1044
90002770:	e8630000 	lwi	r3, r3, 0
90002774:	b0009002 	imm	-28670
90002778:	30a00a5c 	addik	r5, r0, 2652
9000277c:	10c30000 	addk	r6, r3, r0
90002780:	b0000001 	imm	1
90002784:	b9f41c0c 	brlid	r15, 7180	// 90014390 <strcmp>
90002788:	80000000 	or	r0, r0, r0
9000278c:	bc230010 	bnei	r3, 16		// 9000279c
    {
        *motor = stepperU;
90002790:	e8730030 	lwi	r3, r19, 48
90002794:	f8030000 	swi	r0, r3, 0
90002798:	b80000a4 	bri	164		// 9000283c
    }
    else if(strcmp(F_MOTOR_KEY, cmdPkt->params[paramIndex]) == 0)
9000279c:	e873002c 	lwi	r3, r19, 44
900027a0:	e8930028 	lwi	r4, r19, 40
900027a4:	64630402 	bslli	r3, r3, 2
900027a8:	10632000 	addk	r3, r3, r4
900027ac:	30630414 	addik	r3, r3, 1044
900027b0:	e8630000 	lwi	r3, r3, 0
900027b4:	b0009002 	imm	-28670
900027b8:	30a00a60 	addik	r5, r0, 2656
900027bc:	10c30000 	addk	r6, r3, r0
900027c0:	b0000001 	imm	1
900027c4:	b9f41bcc 	brlid	r15, 7116	// 90014390 <strcmp>
900027c8:	80000000 	or	r0, r0, r0
900027cc:	bc230014 	bnei	r3, 20		// 900027e0
    {
        *motor = stepperF;
900027d0:	e8930030 	lwi	r4, r19, 48
900027d4:	30600001 	addik	r3, r0, 1
900027d8:	f8640000 	swi	r3, r4, 0
900027dc:	b8000060 	bri	96		// 9000283c
    }
    else if(strcmp(R_MOTOR_KEY, cmdPkt->params[paramIndex]) == 0)
900027e0:	e873002c 	lwi	r3, r19, 44
900027e4:	e8930028 	lwi	r4, r19, 40
900027e8:	64630402 	bslli	r3, r3, 2
900027ec:	10632000 	addk	r3, r3, r4
900027f0:	30630414 	addik	r3, r3, 1044
900027f4:	e8630000 	lwi	r3, r3, 0
900027f8:	b0009002 	imm	-28670
900027fc:	30a00a64 	addik	r5, r0, 2660
90002800:	10c30000 	addk	r6, r3, r0
90002804:	b0000001 	imm	1
90002808:	b9f41b88 	brlid	r15, 7048	// 90014390 <strcmp>
9000280c:	80000000 	or	r0, r0, r0
90002810:	bc230014 	bnei	r3, 20		// 90002824
    {
        *motor = stepperR;
90002814:	e8930030 	lwi	r4, r19, 48
90002818:	30600002 	addik	r3, r0, 2
9000281c:	f8640000 	swi	r3, r4, 0
90002820:	b800001c 	bri	28		// 9000283c
    }
    else
    {
        sendRspStatusInvalidParameter(cmdPkt);
90002824:	e8b30028 	lwi	r5, r19, 40
90002828:	b9f4f6d0 	brlid	r15, -2352	// 90001ef8 <sendRspStatusInvalidParameter>
9000282c:	80000000 	or	r0, r0, r0
        return false;
90002830:	10600000 	addk	r3, r0, r0
90002834:	f873001c 	swi	r3, r19, 28
90002838:	b800000c 	bri	12		// 90002844
    }
    return true;
9000283c:	30600001 	addik	r3, r0, 1
90002840:	f873001c 	swi	r3, r19, 28
90002844:	e873001c 	lwi	r3, r19, 28
}
90002848:	e9e10000 	lwi	r15, r1, 0
9000284c:	10330000 	addk	r1, r19, r0
90002850:	ea610020 	lwi	r19, r1, 32
90002854:	30210024 	addik	r1, r1, 36
90002858:	b60f0008 	rtsd	r15, 8
9000285c:	80000000 	or	r0, r0, r0

90002860 <validateStepperParameter>:


static bool validateStepperParameter(CmdPkt* cmdPkt, int paramIndex, StepperParameter *stepperParam)
{
90002860:	3021ffdc 	addik	r1, r1, -36
90002864:	f9e10000 	swi	r15, r1, 0
90002868:	fa610020 	swi	r19, r1, 32
9000286c:	12610000 	addk	r19, r1, r0
90002870:	f8b30028 	swi	r5, r19, 40
90002874:	f8d3002c 	swi	r6, r19, 44
90002878:	f8f30030 	swi	r7, r19, 48
    if(strcmp(FAST_STEPPER_KEY, cmdPkt->params[paramIndex]) == 0)
9000287c:	e873002c 	lwi	r3, r19, 44
90002880:	e8930028 	lwi	r4, r19, 40
90002884:	64630402 	bslli	r3, r3, 2
90002888:	10632000 	addk	r3, r3, r4
9000288c:	30630414 	addik	r3, r3, 1044
90002890:	e8630000 	lwi	r3, r3, 0
90002894:	b0009002 	imm	-28670
90002898:	30a00a68 	addik	r5, r0, 2664
9000289c:	10c30000 	addk	r6, r3, r0
900028a0:	b0000001 	imm	1
900028a4:	b9f41aec 	brlid	r15, 6892	// 90014390 <strcmp>
900028a8:	80000000 	or	r0, r0, r0
900028ac:	bc230010 	bnei	r3, 16		// 900028bc
    {
        *stepperParam = stepperFastFrequency;
900028b0:	e8730030 	lwi	r3, r19, 48
900028b4:	f8030000 	swi	r0, r3, 0
900028b8:	b80000a4 	bri	164		// 9000295c
    }
    else if(strcmp(SLOW_STEPPER_KEY, cmdPkt->params[paramIndex]) == 0)
900028bc:	e873002c 	lwi	r3, r19, 44
900028c0:	e8930028 	lwi	r4, r19, 40
900028c4:	64630402 	bslli	r3, r3, 2
900028c8:	10632000 	addk	r3, r3, r4
900028cc:	30630414 	addik	r3, r3, 1044
900028d0:	e8630000 	lwi	r3, r3, 0
900028d4:	b0009002 	imm	-28670
900028d8:	30a00a70 	addik	r5, r0, 2672
900028dc:	10c30000 	addk	r6, r3, r0
900028e0:	b0000001 	imm	1
900028e4:	b9f41aac 	brlid	r15, 6828	// 90014390 <strcmp>
900028e8:	80000000 	or	r0, r0, r0
900028ec:	bc230014 	bnei	r3, 20		// 90002900
    {
        *stepperParam = stepperSlowFrequency;
900028f0:	e8930030 	lwi	r4, r19, 48
900028f4:	30600001 	addik	r3, r0, 1
900028f8:	f8640000 	swi	r3, r4, 0
900028fc:	b8000060 	bri	96		// 9000295c
    }
    else if(strcmp(RAMP_STEPS_STEPPER_KEY, cmdPkt->params[paramIndex]) == 0)
90002900:	e873002c 	lwi	r3, r19, 44
90002904:	e8930028 	lwi	r4, r19, 40
90002908:	64630402 	bslli	r3, r3, 2
9000290c:	10632000 	addk	r3, r3, r4
90002910:	30630414 	addik	r3, r3, 1044
90002914:	e8630000 	lwi	r3, r3, 0
90002918:	b0009002 	imm	-28670
9000291c:	30a00a78 	addik	r5, r0, 2680
90002920:	10c30000 	addk	r6, r3, r0
90002924:	b0000001 	imm	1
90002928:	b9f41a68 	brlid	r15, 6760	// 90014390 <strcmp>
9000292c:	80000000 	or	r0, r0, r0
90002930:	bc230014 	bnei	r3, 20		// 90002944
    {
        *stepperParam = stepperRampSteps;
90002934:	e8930030 	lwi	r4, r19, 48
90002938:	30600002 	addik	r3, r0, 2
9000293c:	f8640000 	swi	r3, r4, 0
90002940:	b800001c 	bri	28		// 9000295c
    }
    else
    {
        sendRspStatusInvalidParameter(cmdPkt);
90002944:	e8b30028 	lwi	r5, r19, 40
90002948:	b9f4f5b0 	brlid	r15, -2640	// 90001ef8 <sendRspStatusInvalidParameter>
9000294c:	80000000 	or	r0, r0, r0
        return false;
90002950:	10600000 	addk	r3, r0, r0
90002954:	f873001c 	swi	r3, r19, 28
90002958:	b800000c 	bri	12		// 90002964
    }
    return true;
9000295c:	30600001 	addik	r3, r0, 1
90002960:	f873001c 	swi	r3, r19, 28
90002964:	e873001c 	lwi	r3, r19, 28
}
90002968:	e9e10000 	lwi	r15, r1, 0
9000296c:	10330000 	addk	r1, r19, r0
90002970:	ea610020 	lwi	r19, r1, 32
90002974:	30210024 	addik	r1, r1, 36
90002978:	b60f0008 	rtsd	r15, 8
9000297c:	80000000 	or	r0, r0, r0

90002980 <systemAbort>:







// static void addLidPositionParameter(RspPkt* rspPkt)
// {
//     ASSERT(rspPkt);

//     switch(getLidPosition())
//     {
//         case lid_raised:
//             addStringParamToRspPkt(rspPkt, "Raised");
//             break;

//         case lid_lowered:
//             addStringParamToRspPkt(rspPkt, "Lowered");
//             break;

//         case lid_raising:
//             addStringParamToRspPkt(rspPkt, "Raising");
//             break;

//         case lid_lowering:
//             addStringParamToRspPkt(rspPkt, "Lowering");
//             break;

//         case lid_unknownPosition:
//             addStringParamToRspPkt(rspPkt, "Unknown");
//             break;

//         default:
//             ASSERT(false);
//     }
// }


static void systemAbort()
{
90002980:	3021ffdc 	addik	r1, r1, -36
90002984:	f9e10000 	swi	r15, r1, 0
90002988:	fa610020 	swi	r19, r1, 32
9000298c:	12610000 	addk	r19, r1, r0
    commData.monitoringConnection = false;
90002990:	b0009002 	imm	-28670
90002994:	f800fe34 	swi	r0, r0, -460

    motionAbort();
90002998:	b9f41554 	brlid	r15, 5460	// 90003eec <motionAbort>
9000299c:	80000000 	or	r0, r0, r0
    disableMotors();
900029a0:	b0000000 	imm	0
900029a4:	b9f47e04 	brlid	r15, 32260	// 9000a7a8 <disableMotors>
900029a8:	80000000 	or	r0, r0, r0

    int i;
    for(i = 0; i < OfflineCommand_count; i++)
900029ac:	f813001c 	swi	r0, r19, 28
900029b0:	b8000020 	bri	32		// 900029d0
    {
        sendOfflineRspAborted(i);
900029b4:	e873001c 	lwi	r3, r19, 28
900029b8:	10a30000 	addk	r5, r3, r0
900029bc:	b9f4ea00 	brlid	r15, -5632	// 900013bc <sendOfflineRspAborted>
900029c0:	80000000 	or	r0, r0, r0
900029c4:	e873001c 	lwi	r3, r19, 28
900029c8:	30630001 	addik	r3, r3, 1
900029cc:	f873001c 	swi	r3, r19, 28
900029d0:	e873001c 	lwi	r3, r19, 28
900029d4:	32400001 	addik	r18, r0, 1
900029d8:	16439001 	cmp	r18, r3, r18
900029dc:	bcb2ffd8 	bgei	r18, -40		// 900029b4
    }

    printf("System Abort\n");
900029e0:	b0009002 	imm	-28670
900029e4:	30a00a84 	addik	r5, r0, 2692
900029e8:	b0000000 	imm	0
900029ec:	b9f4d54c 	brlid	r15, -10932	// 9000ff38 <puts>
900029f0:	80000000 	or	r0, r0, r0
}
900029f4:	e9e10000 	lwi	r15, r1, 0
900029f8:	10330000 	addk	r1, r19, r0
900029fc:	ea610020 	lwi	r19, r1, 32
90002a00:	30210024 	addik	r1, r1, 36
90002a04:	b60f0008 	rtsd	r15, 8
90002a08:	80000000 	or	r0, r0, r0

90002a0c <chGetStatus>:


///////////////////////////////////////////////////
// Command handler functions

static void chGetStatus(CmdPkt* cmdPkt)
{
90002a0c:	3021fbc0 	addik	r1, r1, -1088
90002a10:	f9e10000 	swi	r15, r1, 0
90002a14:	fa61043c 	swi	r19, r1, 1084
90002a18:	12610000 	addk	r19, r1, r0
90002a1c:	f8b30444 	swi	r5, r19, 1092
    RspPkt rspPkt;
    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90002a20:	30730020 	addik	r3, r19, 32
90002a24:	10a30000 	addk	r5, r3, r0
90002a28:	e8d30444 	lwi	r6, r19, 1092
90002a2c:	b0009002 	imm	-28670
90002a30:	30e00934 	addik	r7, r0, 2356
90002a34:	b9f4ea68 	brlid	r15, -5528	// 9000149c <initRspPkt>
90002a38:	80000000 	or	r0, r0, r0


    int i;

    for(i = 0; i < OfflineCommand_count; i++)
90002a3c:	f813001c 	swi	r0, r19, 28
90002a40:	b800005c 	bri	92		// 90002a9c
    {
        if(commData.pendingCommands[i].active)
90002a44:	e893001c 	lwi	r4, r19, 28
90002a48:	306000cc 	addik	r3, r0, 204
90002a4c:	40841800 	mul	r4, r4, r3
90002a50:	b0009002 	imm	-28670
90002a54:	3060fe48 	addik	r3, r0, -440
90002a58:	10641800 	addk	r3, r4, r3
90002a5c:	e8630000 	lwi	r3, r3, 0
90002a60:	bc030030 	beqi	r3, 48		// 90002a90
        {
            addStringParamToRspPkt(&rspPkt, OfflineCommandNames[i]);
90002a64:	e873001c 	lwi	r3, r19, 28
90002a68:	64830402 	bslli	r4, r3, 2
90002a6c:	b0009002 	imm	-28670
90002a70:	30603694 	addik	r3, r0, 13972
90002a74:	10641800 	addk	r3, r4, r3
90002a78:	e8830000 	lwi	r4, r3, 0
90002a7c:	30730020 	addik	r3, r19, 32
90002a80:	10a30000 	addk	r5, r3, r0
90002a84:	10c40000 	addk	r6, r4, r0
90002a88:	b9f4e260 	brlid	r15, -7584	// 90000ce8 <addStringParamToRspPkt>
90002a8c:	80000000 	or	r0, r0, r0
90002a90:	e873001c 	lwi	r3, r19, 28
90002a94:	30630001 	addik	r3, r3, 1
90002a98:	f873001c 	swi	r3, r19, 28
90002a9c:	e873001c 	lwi	r3, r19, 28
90002aa0:	32400001 	addik	r18, r0, 1
90002aa4:	16439001 	cmp	r18, r3, r18
90002aa8:	bcb2ff9c 	bgei	r18, -100		// 90002a44
        }
    }

    if(rspPkt.paramCount == MIN_RSP_PARAM_COUNT)
90002aac:	e8730024 	lwi	r3, r19, 36
90002ab0:	aa430004 	xori	r18, r3, 4
90002ab4:	bc32001c 	bnei	r18, 28		// 90002ad0
    {
        addStringParamToRspPkt(&rspPkt, "Idle");
90002ab8:	30730020 	addik	r3, r19, 32
90002abc:	10a30000 	addk	r5, r3, r0
90002ac0:	b0009002 	imm	-28670
90002ac4:	30c00a94 	addik	r6, r0, 2708
90002ac8:	b9f4e220 	brlid	r15, -7648	// 90000ce8 <addStringParamToRspPkt>
90002acc:	80000000 	or	r0, r0, r0
    }

    sendRspPkt(&rspPkt);
90002ad0:	30730020 	addik	r3, r19, 32
90002ad4:	10a30000 	addk	r5, r3, r0
90002ad8:	b9f4e2d8 	brlid	r15, -7464	// 90000db0 <sendRspPkt>
90002adc:	80000000 	or	r0, r0, r0
}
90002ae0:	e9e10000 	lwi	r15, r1, 0
90002ae4:	10330000 	addk	r1, r19, r0
90002ae8:	ea61043c 	lwi	r19, r1, 1084
90002aec:	30210440 	addik	r1, r1, 1088
90002af0:	b60f0008 	rtsd	r15, 8
90002af4:	80000000 	or	r0, r0, r0

90002af8 <chGetActiveState>:


static void chGetActiveState(CmdPkt* cmdPkt)
{
90002af8:	3021fbc0 	addik	r1, r1, -1088
90002afc:	f9e10000 	swi	r15, r1, 0
90002b00:	fa61043c 	swi	r19, r1, 1084
90002b04:	12610000 	addk	r19, r1, r0
90002b08:	f8b30444 	swi	r5, r19, 1092
    RspPkt rspPkt;
    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90002b0c:	30730020 	addik	r3, r19, 32
90002b10:	10a30000 	addk	r5, r3, r0
90002b14:	e8d30444 	lwi	r6, r19, 1092
90002b18:	b0009002 	imm	-28670
90002b1c:	30e00934 	addik	r7, r0, 2356
90002b20:	b9f4e97c 	brlid	r15, -5764	// 9000149c <initRspPkt>
90002b24:	80000000 	or	r0, r0, r0

    int i;

    for(i = 0; i < OfflineCommand_count; i++)
90002b28:	f813001c 	swi	r0, r19, 28
90002b2c:	b800005c 	bri	92		// 90002b88
    {
        if(commData.pendingCommands[i].active)
90002b30:	e893001c 	lwi	r4, r19, 28
90002b34:	306000cc 	addik	r3, r0, 204
90002b38:	40841800 	mul	r4, r4, r3
90002b3c:	b0009002 	imm	-28670
90002b40:	3060fe48 	addik	r3, r0, -440
90002b44:	10641800 	addk	r3, r4, r3
90002b48:	e8630000 	lwi	r3, r3, 0
90002b4c:	bc030030 	beqi	r3, 48		// 90002b7c
        {
            addStringParamToRspPkt(&rspPkt, OfflineCommandNames[i]);
90002b50:	e873001c 	lwi	r3, r19, 28
90002b54:	64830402 	bslli	r4, r3, 2
90002b58:	b0009002 	imm	-28670
90002b5c:	30603694 	addik	r3, r0, 13972
90002b60:	10641800 	addk	r3, r4, r3
90002b64:	e8830000 	lwi	r4, r3, 0
90002b68:	30730020 	addik	r3, r19, 32
90002b6c:	10a30000 	addk	r5, r3, r0
90002b70:	10c40000 	addk	r6, r4, r0
90002b74:	b9f4e174 	brlid	r15, -7820	// 90000ce8 <addStringParamToRspPkt>
90002b78:	80000000 	or	r0, r0, r0
90002b7c:	e873001c 	lwi	r3, r19, 28
90002b80:	30630001 	addik	r3, r3, 1
90002b84:	f873001c 	swi	r3, r19, 28
90002b88:	e873001c 	lwi	r3, r19, 28
90002b8c:	32400001 	addik	r18, r0, 1
90002b90:	16439001 	cmp	r18, r3, r18
90002b94:	bcb2ff9c 	bgei	r18, -100		// 90002b30
        }
    }

    if(rspPkt.paramCount == MIN_RSP_PARAM_COUNT)
90002b98:	e8730024 	lwi	r3, r19, 36
90002b9c:	aa430004 	xori	r18, r3, 4
90002ba0:	bc32001c 	bnei	r18, 28		// 90002bbc
    {
        addStringParamToRspPkt(&rspPkt, "Idle");
90002ba4:	30730020 	addik	r3, r19, 32
90002ba8:	10a30000 	addk	r5, r3, r0
90002bac:	b0009002 	imm	-28670
90002bb0:	30c00a94 	addik	r6, r0, 2708
90002bb4:	b9f4e134 	brlid	r15, -7884	// 90000ce8 <addStringParamToRspPkt>
90002bb8:	80000000 	or	r0, r0, r0
    }

    sendRspPkt(&rspPkt);
90002bbc:	30730020 	addik	r3, r19, 32
90002bc0:	10a30000 	addk	r5, r3, r0
90002bc4:	b9f4e1ec 	brlid	r15, -7700	// 90000db0 <sendRspPkt>
90002bc8:	80000000 	or	r0, r0, r0
}
90002bcc:	e9e10000 	lwi	r15, r1, 0
90002bd0:	10330000 	addk	r1, r19, r0
90002bd4:	ea61043c 	lwi	r19, r1, 1084
90002bd8:	30210440 	addik	r1, r1, 1088
90002bdc:	b60f0008 	rtsd	r15, 8
90002be0:	80000000 	or	r0, r0, r0

90002be4 <chAbort>:


static void chAbort(CmdPkt* cmdPkt)
{
90002be4:	3021ffe0 	addik	r1, r1, -32
90002be8:	f9e10000 	swi	r15, r1, 0
90002bec:	fa61001c 	swi	r19, r1, 28
90002bf0:	12610000 	addk	r19, r1, r0
90002bf4:	f8b30024 	swi	r5, r19, 36
    sendRspOk(cmdPkt);
90002bf8:	e8b30024 	lwi	r5, r19, 36
90002bfc:	b9f4ef1c 	brlid	r15, -4324	// 90001b18 <sendRspOk>
90002c00:	80000000 	or	r0, r0, r0
    systemAbort();
90002c04:	b9f4fd7c 	brlid	r15, -644	// 90002980 <systemAbort>
90002c08:	80000000 	or	r0, r0, r0
}
90002c0c:	e9e10000 	lwi	r15, r1, 0
90002c10:	10330000 	addk	r1, r19, r0
90002c14:	ea61001c 	lwi	r19, r1, 28
90002c18:	30210020 	addik	r1, r1, 32
90002c1c:	b60f0008 	rtsd	r15, 8
90002c20:	80000000 	or	r0, r0, r0

90002c24 <chGoToIdle>:



static void chGoToIdle(CmdPkt* cmdPkt)
{
90002c24:	3021ffe0 	addik	r1, r1, -32
90002c28:	f9e10000 	swi	r15, r1, 0
90002c2c:	fa61001c 	swi	r19, r1, 28
90002c30:	12610000 	addk	r19, r1, r0
90002c34:	f8b30024 	swi	r5, r19, 36
    sendRspOk(cmdPkt);
90002c38:	e8b30024 	lwi	r5, r19, 36
90002c3c:	b9f4eedc 	brlid	r15, -4388	// 90001b18 <sendRspOk>
90002c40:	80000000 	or	r0, r0, r0
}
90002c44:	e9e10000 	lwi	r15, r1, 0
90002c48:	10330000 	addk	r1, r19, r0
90002c4c:	ea61001c 	lwi	r19, r1, 28
90002c50:	30210020 	addik	r1, r1, 32
90002c54:	b60f0008 	rtsd	r15, 8
90002c58:	80000000 	or	r0, r0, r0

90002c5c <chReset>:



static void chReset(CmdPkt* cmdPkt)
{
90002c5c:	3021ffe0 	addik	r1, r1, -32
90002c60:	f9e10000 	swi	r15, r1, 0
90002c64:	fa61001c 	swi	r19, r1, 28
90002c68:	12610000 	addk	r19, r1, r0
90002c6c:	f8b30024 	swi	r5, r19, 36
    sendRspOk(cmdPkt);
90002c70:	e8b30024 	lwi	r5, r19, 36
90002c74:	b9f4eea4 	brlid	r15, -4444	// 90001b18 <sendRspOk>
90002c78:	80000000 	or	r0, r0, r0
}
90002c7c:	e9e10000 	lwi	r15, r1, 0
90002c80:	10330000 	addk	r1, r19, r0
90002c84:	ea61001c 	lwi	r19, r1, 28
90002c88:	30210020 	addik	r1, r1, 32
90002c8c:	b60f0008 	rtsd	r15, 8
90002c90:	80000000 	or	r0, r0, r0

90002c94 <chGetMotorPositions>:

static void chGetMotorPositions(CmdPkt* cmdPkt)
{
90002c94:	3021fbc4 	addik	r1, r1, -1084
90002c98:	f9e10000 	swi	r15, r1, 0
90002c9c:	fa610438 	swi	r19, r1, 1080
90002ca0:	12610000 	addk	r19, r1, r0
90002ca4:	f8b30440 	swi	r5, r19, 1088
    RspPkt rspPkt;

    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90002ca8:	3073001c 	addik	r3, r19, 28
90002cac:	10a30000 	addk	r5, r3, r0
90002cb0:	e8d30440 	lwi	r6, r19, 1088
90002cb4:	b0009002 	imm	-28670
90002cb8:	30e00934 	addik	r7, r0, 2356
90002cbc:	b9f4e7e0 	brlid	r15, -6176	// 9000149c <initRspPkt>
90002cc0:	80000000 	or	r0, r0, r0

    // addDoorPositionParameter(&rspPkt);
    // addLidPositionParameter(&rspPkt);
    // addFilterPositionParameter(&rspPkt);

    sendRspPkt(&rspPkt);
90002cc4:	3073001c 	addik	r3, r19, 28
90002cc8:	10a30000 	addk	r5, r3, r0
90002ccc:	b9f4e0e4 	brlid	r15, -7964	// 90000db0 <sendRspPkt>
90002cd0:	80000000 	or	r0, r0, r0
}
90002cd4:	e9e10000 	lwi	r15, r1, 0
90002cd8:	10330000 	addk	r1, r19, r0
90002cdc:	ea610438 	lwi	r19, r1, 1080
90002ce0:	3021043c 	addik	r1, r1, 1084
90002ce4:	b60f0008 	rtsd	r15, 8
90002ce8:	80000000 	or	r0, r0, r0

90002cec <chInitSystem>:



// static void chGetFilter(CmdPkt* cmdPkt)
// {
//     RspPkt rspPkt;

//     initRspPkt(&rspPkt, cmdPkt, RSP_OK);

//     addFilterPositionParameter(&rspPkt);

//     sendRspPkt(&rspPkt);
// }



// static void chSetFilter(CmdPkt* cmdPkt)
// {
//     Filters filter;

//     if(strcmp("CL", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_clear;
//     }
//     else if(strcmp("B", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_blue;
//     }
//     else if(strcmp("G", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_green;
//     }
//     else if(strcmp("O", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_orange;
//     }
//     else if(strcmp("R", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_red;
//     }
//     else if(strcmp("C", cmdPkt->params[0]) == 0)
//     {
//         filter = filter_crimson;
//     }
//     else
//     {
//         sendRspStatusInvalidParameter(cmdPkt);
//         return;
//     }


//     if(!checkPendingCmds(cmdPkt, OfflineCommand_SetFilter,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_SetFilter, cmdPkt);
//     setFilter(filter, signalOfflineTaskCompleteCallback, OfflineCommand_SetFilter);
// }



// static void chGetDoorPosition(CmdPkt* cmdPkt)
// {
//     RspPkt rspPkt;

//     initRspPkt(&rspPkt, cmdPkt, RSP_OK);

//     addDoorPositionParameter(&rspPkt);

//     sendRspPkt(&rspPkt);
// }



// static void chOpenDoor(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_OpenDoor,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_OpenDoor, cmdPkt);
//     openDoor(signalOfflineTaskCompleteCallback, OfflineCommand_OpenDoor);
// }



// static void chCloseDoor(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_CloseDoor,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_CloseDoor, cmdPkt);
//     closeDoor(signalOfflineTaskCompleteCallback, OfflineCommand_CloseDoor);
// }



// static void chDisableDoor(CmdPkt* cmdPkt)
// {
//     disableDoor();
//     sendRspOk(cmdPkt);
// }



// static void chGetLidPosition(CmdPkt* cmdPkt)
// {
//     RspPkt rspPkt;

//     initRspPkt(&rspPkt, cmdPkt, RSP_OK);

//     addLidPositionParameter(&rspPkt);

//     sendRspPkt(&rspPkt);
// }



// static void chRaiseLid(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_RaiseLid,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_RaiseLid, cmdPkt);
//     raiseLid(signalOfflineTaskCompleteCallback, OfflineCommand_RaiseLid);
// }



// static void chLowerLid(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_LowerLid,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_LowerLid, cmdPkt);
//     lowerLid(signalOfflineTaskCompleteCallback, OfflineCommand_LowerLid);
// }



// static void chOpenCavity(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_OpenCavity,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_OpenCavity, cmdPkt);
//     openCavity(signalOfflineTaskCompleteCallback, OfflineCommand_OpenCavity);
// }



// static void chCloseCavity(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_CloseCavity,
//                          SET_TEMPERATURE_OFFLINE_CMD_MASK   |
//                          SET_ILLUMINATION_OFFLINE_CMD_MASK)) return;

//     registerAndSendRspPending(OfflineCommand_CloseCavity, cmdPkt);
//     closeCavity(signalOfflineTaskCompleteCallback, OfflineCommand_CloseCavity);
// }



static void chInitSystem(CmdPkt* cmdPkt)
{
90002cec:	3021ffe0 	addik	r1, r1, -32
90002cf0:	f9e10000 	swi	r15, r1, 0
90002cf4:	fa61001c 	swi	r19, r1, 28
90002cf8:	12610000 	addk	r19, r1, r0
90002cfc:	f8b30024 	swi	r5, r19, 36
    if(!checkPendingCmds(cmdPkt, OfflineCommand_InitializeSystem, 0)) return;
90002d00:	e8b30024 	lwi	r5, r19, 36
90002d04:	30c00001 	addik	r6, r0, 1
90002d08:	10e00000 	addk	r7, r0, r0
90002d0c:	b9f4e1b4 	brlid	r15, -7756	// 90000ec0 <checkPendingCmds>
90002d10:	80000000 	or	r0, r0, r0
90002d14:	bc030030 	beqi	r3, 48		// 90002d44

    registerAndSendRspPending(OfflineCommand_InitializeSystem, cmdPkt);
90002d18:	30a00001 	addik	r5, r0, 1
90002d1c:	e8d30024 	lwi	r6, r19, 36
90002d20:	b9f4ee50 	brlid	r15, -4528	// 90001b70 <registerAndSendRspPending>
90002d24:	80000000 	or	r0, r0, r0
    startSystemInitialization(signalOfflineTaskCompleteCallback, NULL, OfflineCommand_InitializeSystem, true);
90002d28:	b0009000 	imm	-28672
90002d2c:	30a00590 	addik	r5, r0, 1424
90002d30:	10c00000 	addk	r6, r0, r0
90002d34:	30e00001 	addik	r7, r0, 1
90002d38:	31000001 	addik	r8, r0, 1
90002d3c:	b9f40bb0 	brlid	r15, 2992	// 900038ec <startSystemInitialization>
90002d40:	80000000 	or	r0, r0, r0
}
90002d44:	e9e10000 	lwi	r15, r1, 0
90002d48:	10330000 	addk	r1, r19, r0
90002d4c:	ea61001c 	lwi	r19, r1, 28
90002d50:	30210020 	addik	r1, r1, 32
90002d54:	b60f0008 	rtsd	r15, 8
90002d58:	80000000 	or	r0, r0, r0

90002d5c <chFileSend>:



// static void chInitFilter(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_InitializeFilter, 0)) return;

//     registerAndSendRspPending(OfflineCommand_InitializeFilter, cmdPkt);
//     startFilterInitialization(signalOfflineTaskCompleteCallback, OfflineCommand_InitializeFilter);
// }



// static void chInitLid(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_InitializeLid, 0)) return;

//     registerAndSendRspPending(OfflineCommand_InitializeLid, cmdPkt);
//     startLidInitialization(signalOfflineTaskCompleteCallback, OfflineCommand_InitializeLid);
// }



// static void chInitDoor(CmdPkt* cmdPkt)
// {
//     if(!checkPendingCmds(cmdPkt, OfflineCommand_InitializeDoor, 0)) return;

//     registerAndSendRspPending(OfflineCommand_InitializeDoor, cmdPkt);
//     startDoorInitialization(signalOfflineTaskCompleteCallback, OfflineCommand_InitializeDoor);
// }



static void chFileSend(CmdPkt* cmdPkt)
{
90002d5c:	3021ffcc 	addik	r1, r1, -52
90002d60:	f9e10000 	swi	r15, r1, 0
90002d64:	fa610030 	swi	r19, r1, 48
90002d68:	12610000 	addk	r19, r1, r0
90002d6c:	f8b30038 	swi	r5, r19, 56
    int fileOffset;

    if(!validateIntParameterRange(cmdPkt, 0, 0, MAX_FILE_SIZE, &fileOffset)) return;
90002d70:	30730028 	addik	r3, r19, 40
90002d74:	e8b30038 	lwi	r5, r19, 56
90002d78:	10c00000 	addk	r6, r0, r0
90002d7c:	10e00000 	addk	r7, r0, r0
90002d80:	b0000098 	imm	152
90002d84:	31009680 	addik	r8, r0, -27008
90002d88:	11230000 	addk	r9, r3, r0
90002d8c:	b9f4f6b4 	brlid	r15, -2380	// 90002440 <validateIntParameterRange>
90002d90:	80000000 	or	r0, r0, r0
90002d94:	bc0301c8 	beqi	r3, 456		// 90002f5c


    char* fileData = cmdPkt->params[1];
90002d98:	e8730038 	lwi	r3, r19, 56
90002d9c:	e8630418 	lwi	r3, r3, 1048
90002da0:	f8730024 	swi	r3, r19, 36

    ASSERT(fileData);
90002da4:	e8730024 	lwi	r3, r19, 36
90002da8:	bc230198 	bnei	r3, 408		// 90002f40
90002dac:	94110002 	msrclr	r0, 2
90002db0:	b0009002 	imm	-28670
90002db4:	30a00a9c 	addik	r5, r0, 2716
90002db8:	b0009002 	imm	-28670
90002dbc:	30c00780 	addik	r6, r0, 1920
90002dc0:	30e00649 	addik	r7, r0, 1609
90002dc4:	b0000000 	imm	0
90002dc8:	b9f4965c 	brlid	r15, -27044	// 9000c424 <printAssert>
90002dcc:	80000000 	or	r0, r0, r0
90002dd0:	b8000000 	bri	0		// 90002dd0

    while(*fileData)
    {
        int   i;
        uint8 byte = 0;
90002dd4:	f013001c 	sbi	r0, r19, 28

        for(i = 0; i < 2; i++)
90002dd8:	f8130020 	swi	r0, r19, 32
90002ddc:	b800011c 	bri	284		// 90002ef8
        {
            if(!*fileData)
90002de0:	e8730024 	lwi	r3, r19, 36
90002de4:	e0630000 	lbui	r3, r3, 0
90002de8:	90630060 	sext8	r3, r3
90002dec:	bc230014 	bnei	r3, 20		// 90002e00
            {
                sendRspStatusMissingFileData(cmdPkt);
90002df0:	e8b30038 	lwi	r5, r19, 56
90002df4:	b9f4f3a4 	brlid	r15, -3164	// 90002198 <sendRspStatusMissingFileData>
90002df8:	80000000 	or	r0, r0, r0
                return;
90002dfc:	b8000160 	bri	352		// 90002f5c
            }

            if((*fileData < '0' || *fileData > '9') &&
90002e00:	e8730024 	lwi	r3, r19, 36
90002e04:	e0630000 	lbui	r3, r3, 0
90002e08:	90630060 	sext8	r3, r3
90002e0c:	3240002f 	addik	r18, r0, 47
90002e10:	16439001 	cmp	r18, r3, r18
90002e14:	bcb2001c 	bgei	r18, 28		// 90002e30
90002e18:	e8730024 	lwi	r3, r19, 36
90002e1c:	e0630000 	lbui	r3, r3, 0
90002e20:	90630060 	sext8	r3, r3
90002e24:	32400039 	addik	r18, r0, 57
90002e28:	16439001 	cmp	r18, r3, r18
90002e2c:	bcb20044 	bgei	r18, 68		// 90002e70
90002e30:	e8730024 	lwi	r3, r19, 36
90002e34:	e0630000 	lbui	r3, r3, 0
90002e38:	90630060 	sext8	r3, r3
90002e3c:	32400040 	addik	r18, r0, 64
90002e40:	16439001 	cmp	r18, r3, r18
90002e44:	bcb2001c 	bgei	r18, 28		// 90002e60
90002e48:	e8730024 	lwi	r3, r19, 36
90002e4c:	e0630000 	lbui	r3, r3, 0
90002e50:	90630060 	sext8	r3, r3
90002e54:	32400046 	addik	r18, r0, 70
90002e58:	16439001 	cmp	r18, r3, r18
90002e5c:	bcb20014 	bgei	r18, 20		// 90002e70
               (*fileData < 'A' || *fileData > 'F'))
            {
                sendRspStatusInvalidFileData(cmdPkt);
90002e60:	e8b30038 	lwi	r5, r19, 56
90002e64:	b9f4f374 	brlid	r15, -3212	// 900021d8 <sendRspStatusInvalidFileData>
90002e68:	80000000 	or	r0, r0, r0
                return;
90002e6c:	b80000f0 	bri	240		// 90002f5c
            }

            byte <<= 4;
90002e70:	e073001c 	lbui	r3, r19, 28
90002e74:	64630404 	bslli	r3, r3, 4
90002e78:	f073001c 	sbi	r3, r19, 28
            byte += (*fileData >= 'A') ? (*fileData - 'A' + 10) : (*fileData - '0');
90002e7c:	e8730024 	lwi	r3, r19, 36
90002e80:	e0630000 	lbui	r3, r3, 0
90002e84:	90630060 	sext8	r3, r3
90002e88:	32400040 	addik	r18, r0, 64
90002e8c:	16439001 	cmp	r18, r3, r18
90002e90:	bcb20024 	bgei	r18, 36		// 90002eb4
90002e94:	e8730024 	lwi	r3, r19, 36
90002e98:	e0630000 	lbui	r3, r3, 0
90002e9c:	90630060 	sext8	r3, r3
90002ea0:	a46300ff 	andi	r3, r3, 255
90002ea4:	3063ffc9 	addik	r3, r3, -55
90002ea8:	a46300ff 	andi	r3, r3, 255
90002eac:	f873002c 	swi	r3, r19, 44
90002eb0:	b8000020 	bri	32		// 90002ed0
90002eb4:	e8730024 	lwi	r3, r19, 36
90002eb8:	e0630000 	lbui	r3, r3, 0
90002ebc:	90630060 	sext8	r3, r3
90002ec0:	a46300ff 	andi	r3, r3, 255
90002ec4:	3063ffd0 	addik	r3, r3, -48
90002ec8:	a46300ff 	andi	r3, r3, 255
90002ecc:	f873002c 	swi	r3, r19, 44
90002ed0:	e073001c 	lbui	r3, r19, 28
90002ed4:	e893002c 	lwi	r4, r19, 44
90002ed8:	10641800 	addk	r3, r4, r3
90002edc:	f073001c 	sbi	r3, r19, 28

            fileData++;
90002ee0:	e8730024 	lwi	r3, r19, 36
90002ee4:	30630001 	addik	r3, r3, 1
90002ee8:	f8730024 	swi	r3, r19, 36
90002eec:	e8730020 	lwi	r3, r19, 32
90002ef0:	30630001 	addik	r3, r3, 1
90002ef4:	f8730020 	swi	r3, r19, 32
90002ef8:	e8730020 	lwi	r3, r19, 32
90002efc:	32400001 	addik	r18, r0, 1
90002f00:	16439001 	cmp	r18, r3, r18
90002f04:	bcb2fedc 	bgei	r18, -292		// 90002de0
        }


        if(!storeFileData(fileOffset, byte))
90002f08:	e8730028 	lwi	r3, r19, 40
90002f0c:	10a30000 	addk	r5, r3, r0
90002f10:	e0d3001c 	lbui	r6, r19, 28
90002f14:	b0000000 	imm	0
90002f18:	b9f4e380 	brlid	r15, -7296	// 90011298 <storeFileData>
90002f1c:	80000000 	or	r0, r0, r0
90002f20:	bc230014 	bnei	r3, 20		// 90002f34
        {
            sendRspStatusMissingFileData(cmdPkt);
90002f24:	e8b30038 	lwi	r5, r19, 56
90002f28:	b9f4f270 	brlid	r15, -3472	// 90002198 <sendRspStatusMissingFileData>
90002f2c:	80000000 	or	r0, r0, r0
            return;
90002f30:	b800002c 	bri	44		// 90002f5c
        }

        fileOffset++;
90002f34:	e8730028 	lwi	r3, r19, 40
90002f38:	30630001 	addik	r3, r3, 1
90002f3c:	f8730028 	swi	r3, r19, 40
90002f40:	e8730024 	lwi	r3, r19, 36
90002f44:	e0630000 	lbui	r3, r3, 0
90002f48:	90630060 	sext8	r3, r3
90002f4c:	bc23fe88 	bnei	r3, -376		// 90002dd4
    }

    sendRspOk(cmdPkt);
90002f50:	e8b30038 	lwi	r5, r19, 56
90002f54:	b9f4ebc4 	brlid	r15, -5180	// 90001b18 <sendRspOk>
90002f58:	80000000 	or	r0, r0, r0
}
90002f5c:	e9e10000 	lwi	r15, r1, 0
90002f60:	10330000 	addk	r1, r19, r0
90002f64:	ea610030 	lwi	r19, r1, 48
90002f68:	30210034 	addik	r1, r1, 52
90002f6c:	b60f0008 	rtsd	r15, 8
90002f70:	80000000 	or	r0, r0, r0

90002f74 <chUpgradeFirmware>:



static void chUpgradeFirmware(CmdPkt* cmdPkt)
{
90002f74:	3021ffd8 	addik	r1, r1, -40
90002f78:	f9e10000 	swi	r15, r1, 0
90002f7c:	fa610024 	swi	r19, r1, 36
90002f80:	12610000 	addk	r19, r1, r0
90002f84:	f8b3002c 	swi	r5, r19, 44
    uint32 fileSize;
    uint32 fileCRC;

    if(!validateUnsignedValue(cmdPkt, cmdPkt->params[0], &fileSize))
90002f88:	e873002c 	lwi	r3, r19, 44
90002f8c:	e8630414 	lwi	r3, r3, 1044
90002f90:	e8b3002c 	lwi	r5, r19, 44
90002f94:	10c30000 	addk	r6, r3, r0
90002f98:	3073001c 	addik	r3, r19, 28
90002f9c:	10e30000 	addk	r7, r3, r0
90002fa0:	b9f4f3c0 	brlid	r15, -3136	// 90002360 <validateUnsignedValue>
90002fa4:	80000000 	or	r0, r0, r0
90002fa8:	bc0300a4 	beqi	r3, 164		// 9000304c
    {
        return;
    }

    if(!validateUnsignedValue(cmdPkt, cmdPkt->params[1], &fileCRC))
90002fac:	e873002c 	lwi	r3, r19, 44
90002fb0:	e8630418 	lwi	r3, r3, 1048
90002fb4:	30930020 	addik	r4, r19, 32
90002fb8:	e8b3002c 	lwi	r5, r19, 44
90002fbc:	10c30000 	addk	r6, r3, r0
90002fc0:	10e40000 	addk	r7, r4, r0
90002fc4:	b9f4f39c 	brlid	r15, -3172	// 90002360 <validateUnsignedValue>
90002fc8:	80000000 	or	r0, r0, r0
90002fcc:	bc030080 	beqi	r3, 128		// 9000304c
    {
        return;
    }


    // Stop system Processing
    systemStop();
90002fd0:	b9f47180 	brlid	r15, 29056	// 9000a150 <systemStop>
90002fd4:	80000000 	or	r0, r0, r0


    // Verify image and upgrade
    if(verifyFirmwareImage(fileSize, fileCRC))
90002fd8:	e873001c 	lwi	r3, r19, 28
90002fdc:	e8930020 	lwi	r4, r19, 32
90002fe0:	10a30000 	addk	r5, r3, r0
90002fe4:	10c40000 	addk	r6, r4, r0
90002fe8:	b0000000 	imm	0
90002fec:	b9f4e3ac 	brlid	r15, -7252	// 90011398 <verifyFirmwareImage>
90002ff0:	80000000 	or	r0, r0, r0
90002ff4:	bc030040 	beqi	r3, 64		// 90003034
    {
        sendRspOk(cmdPkt);
90002ff8:	e8b3002c 	lwi	r5, r19, 44
90002ffc:	b9f4eb1c 	brlid	r15, -5348	// 90001b18 <sendRspOk>
90003000:	80000000 	or	r0, r0, r0
        mdelay(1000);
90003004:	30a003e8 	addik	r5, r0, 1000
90003008:	b0000000 	imm	0
9000300c:	b9f490f8 	brlid	r15, -28424	// 9000c104 <mdelay>
90003010:	80000000 	or	r0, r0, r0
        updateFirmware(fileSize, fileCRC);
90003014:	e873001c 	lwi	r3, r19, 28
90003018:	e8930020 	lwi	r4, r19, 32
9000301c:	10a30000 	addk	r5, r3, r0
90003020:	10c40000 	addk	r6, r4, r0
90003024:	b0000000 	imm	0
90003028:	b9f4e480 	brlid	r15, -7040	// 900114a8 <updateFirmware>
9000302c:	80000000 	or	r0, r0, r0
90003030:	b8000014 	bri	20		// 90003044
    }
    else
    {
        sendRspStatusInvalidImage(cmdPkt, NULL);
90003034:	e8b3002c 	lwi	r5, r19, 44
90003038:	10c00000 	addk	r6, r0, r0
9000303c:	b9f4f118 	brlid	r15, -3816	// 90002154 <sendRspStatusInvalidImage>
90003040:	80000000 	or	r0, r0, r0
    }


    // Restart system processing - if upgrade failed
    systemStart();
90003044:	b9f470ec 	brlid	r15, 28908	// 9000a130 <systemStart>
90003048:	80000000 	or	r0, r0, r0
}
9000304c:	e9e10000 	lwi	r15, r1, 0
90003050:	10330000 	addk	r1, r19, r0
90003054:	ea610024 	lwi	r19, r1, 36
90003058:	30210028 	addik	r1, r1, 40
9000305c:	b60f0008 	rtsd	r15, 8
90003060:	80000000 	or	r0, r0, r0

90003064 <chUpgradeFPGA>:



static void chUpgradeFPGA(CmdPkt* cmdPkt)
{
90003064:	3021ffd8 	addik	r1, r1, -40
90003068:	f9e10000 	swi	r15, r1, 0
9000306c:	fa610024 	swi	r19, r1, 36
90003070:	12610000 	addk	r19, r1, r0
90003074:	f8b3002c 	swi	r5, r19, 44
    uint32 fileSize;
    uint32 fileCRC;

    if(!validateUnsignedValue(cmdPkt, cmdPkt->params[0], &fileSize))
90003078:	e873002c 	lwi	r3, r19, 44
9000307c:	e8630414 	lwi	r3, r3, 1044
90003080:	e8b3002c 	lwi	r5, r19, 44
90003084:	10c30000 	addk	r6, r3, r0
90003088:	3073001c 	addik	r3, r19, 28
9000308c:	10e30000 	addk	r7, r3, r0
90003090:	b9f4f2d0 	brlid	r15, -3376	// 90002360 <validateUnsignedValue>
90003094:	80000000 	or	r0, r0, r0
90003098:	bc0300a4 	beqi	r3, 164		// 9000313c
    {
        return;
    }

    if(!validateUnsignedValue(cmdPkt, cmdPkt->params[1], &fileCRC))
9000309c:	e873002c 	lwi	r3, r19, 44
900030a0:	e8630418 	lwi	r3, r3, 1048
900030a4:	30930020 	addik	r4, r19, 32
900030a8:	e8b3002c 	lwi	r5, r19, 44
900030ac:	10c30000 	addk	r6, r3, r0
900030b0:	10e40000 	addk	r7, r4, r0
900030b4:	b9f4f2ac 	brlid	r15, -3412	// 90002360 <validateUnsignedValue>
900030b8:	80000000 	or	r0, r0, r0
900030bc:	bc030080 	beqi	r3, 128		// 9000313c
    {
        return;
    }


    // Stop system Processing
    systemStop();
900030c0:	b9f47090 	brlid	r15, 28816	// 9000a150 <systemStop>
900030c4:	80000000 	or	r0, r0, r0


    // Verify image and upgrade
    if(verifyFPGAImage(fileSize, fileCRC))
900030c8:	e873001c 	lwi	r3, r19, 28
900030cc:	e8930020 	lwi	r4, r19, 32
900030d0:	10a30000 	addk	r5, r3, r0
900030d4:	10c40000 	addk	r6, r4, r0
900030d8:	b0000000 	imm	0
900030dc:	b9f4e4d4 	brlid	r15, -6956	// 900115b0 <verifyFPGAImage>
900030e0:	80000000 	or	r0, r0, r0
900030e4:	bc030040 	beqi	r3, 64		// 90003124
    {
        sendRspOk(cmdPkt);
900030e8:	e8b3002c 	lwi	r5, r19, 44
900030ec:	b9f4ea2c 	brlid	r15, -5588	// 90001b18 <sendRspOk>
900030f0:	80000000 	or	r0, r0, r0
        mdelay(1000);
900030f4:	30a003e8 	addik	r5, r0, 1000
900030f8:	b0000000 	imm	0
900030fc:	b9f49008 	brlid	r15, -28664	// 9000c104 <mdelay>
90003100:	80000000 	or	r0, r0, r0
        updateFPGA(fileSize, fileCRC);
90003104:	e873001c 	lwi	r3, r19, 28
90003108:	e8930020 	lwi	r4, r19, 32
9000310c:	10a30000 	addk	r5, r3, r0
90003110:	10c40000 	addk	r6, r4, r0
90003114:	b0000000 	imm	0
90003118:	b9f4e57c 	brlid	r15, -6788	// 90011694 <updateFPGA>
9000311c:	80000000 	or	r0, r0, r0
90003120:	b8000014 	bri	20		// 90003134
    }
    else
    {
        sendRspStatusInvalidImage(cmdPkt, NULL);
90003124:	e8b3002c 	lwi	r5, r19, 44
90003128:	10c00000 	addk	r6, r0, r0
9000312c:	b9f4f028 	brlid	r15, -4056	// 90002154 <sendRspStatusInvalidImage>
90003130:	80000000 	or	r0, r0, r0
    }


    // Restart system processing - if upgrade failed
    systemStart();
90003134:	b9f46ffc 	brlid	r15, 28668	// 9000a130 <systemStart>
90003138:	80000000 	or	r0, r0, r0
}
9000313c:	e9e10000 	lwi	r15, r1, 0
90003140:	10330000 	addk	r1, r19, r0
90003144:	ea610024 	lwi	r19, r1, 36
90003148:	30210028 	addik	r1, r1, 40
9000314c:	b60f0008 	rtsd	r15, 8
90003150:	80000000 	or	r0, r0, r0

90003154 <chFirmwareVersion>:


static void chFirmwareVersion(CmdPkt* cmdPkt)
{
90003154:	3021fbc4 	addik	r1, r1, -1084
90003158:	f9e10000 	swi	r15, r1, 0
9000315c:	fa610438 	swi	r19, r1, 1080
90003160:	12610000 	addk	r19, r1, r0
90003164:	f8b30440 	swi	r5, r19, 1088
    RspPkt rspPkt;

    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90003168:	3073001c 	addik	r3, r19, 28
9000316c:	10a30000 	addk	r5, r3, r0
90003170:	e8d30440 	lwi	r6, r19, 1088
90003174:	b0009002 	imm	-28670
90003178:	30e00934 	addik	r7, r0, 2356
9000317c:	b9f4e320 	brlid	r15, -7392	// 9000149c <initRspPkt>
90003180:	80000000 	or	r0, r0, r0
    addParamToRspPkt(&rspPkt, "%s", FW_VER_APP);
90003184:	3073001c 	addik	r3, r19, 28
90003188:	10a30000 	addk	r5, r3, r0
9000318c:	b0009002 	imm	-28670
90003190:	30c00aa8 	addik	r6, r0, 2728
90003194:	b0009002 	imm	-28670
90003198:	30e00aac 	addik	r7, r0, 2732
9000319c:	b9f4da40 	brlid	r15, -9664	// 90000bdc <addParamToRspPkt>
900031a0:	80000000 	or	r0, r0, r0
    addParamToRspPkt(&rspPkt, "%s", __DATE__);
900031a4:	3073001c 	addik	r3, r19, 28
900031a8:	10a30000 	addk	r5, r3, r0
900031ac:	b0009002 	imm	-28670
900031b0:	30c00aa8 	addik	r6, r0, 2728
900031b4:	b0009002 	imm	-28670
900031b8:	30e00ab4 	addik	r7, r0, 2740
900031bc:	b9f4da20 	brlid	r15, -9696	// 90000bdc <addParamToRspPkt>
900031c0:	80000000 	or	r0, r0, r0
    addParamToRspPkt(&rspPkt, "%s", __TIME__);
900031c4:	3073001c 	addik	r3, r19, 28
900031c8:	10a30000 	addk	r5, r3, r0
900031cc:	b0009002 	imm	-28670
900031d0:	30c00aa8 	addik	r6, r0, 2728
900031d4:	b0009002 	imm	-28670
900031d8:	30e00ac0 	addik	r7, r0, 2752
900031dc:	b9f4da00 	brlid	r15, -9728	// 90000bdc <addParamToRspPkt>
900031e0:	80000000 	or	r0, r0, r0
    sendRspPkt(&rspPkt);
900031e4:	3073001c 	addik	r3, r19, 28
900031e8:	10a30000 	addk	r5, r3, r0
900031ec:	b9f4dbc4 	brlid	r15, -9276	// 90000db0 <sendRspPkt>
900031f0:	80000000 	or	r0, r0, r0
}
900031f4:	e9e10000 	lwi	r15, r1, 0
900031f8:	10330000 	addk	r1, r19, r0
900031fc:	ea610438 	lwi	r19, r1, 1080
90003200:	3021043c 	addik	r1, r1, 1084
90003204:	b60f0008 	rtsd	r15, 8
90003208:	80000000 	or	r0, r0, r0

9000320c <chFPGAVersion>:



static void chFPGAVersion(CmdPkt* cmdPkt)
{
9000320c:	3021fbc4 	addik	r1, r1, -1084
90003210:	f9e10000 	swi	r15, r1, 0
90003214:	fa610438 	swi	r19, r1, 1080
90003218:	12610000 	addk	r19, r1, r0
9000321c:	f8b30440 	swi	r5, r19, 1088
    RspPkt rspPkt;

    initRspPkt(&rspPkt, cmdPkt, RSP_OK);
90003220:	3073001c 	addik	r3, r19, 28
90003224:	10a30000 	addk	r5, r3, r0
90003228:	e8d30440 	lwi	r6, r19, 1088
9000322c:	b0009002 	imm	-28670
90003230:	30e00934 	addik	r7, r0, 2356
90003234:	b9f4e268 	brlid	r15, -7576	// 9000149c <initRspPkt>
90003238:	80000000 	or	r0, r0, r0
    addParamToRspPkt(&rspPkt, "%lu.%lu", FPGA_MAJOR_VER(), FPGA_MINOR_VER());
9000323c:	b000c540 	imm	-15040
90003240:	30600000 	addik	r3, r0, 0
90003244:	e8630000 	lwi	r3, r3, 0
90003248:	b000ffff 	imm	-1
9000324c:	a4630000 	andi	r3, r3, 0
90003250:	64e30010 	bsrli	r7, r3, 16
90003254:	b000c540 	imm	-15040
90003258:	30600000 	addik	r3, r0, 0
9000325c:	e8630000 	lwi	r3, r3, 0
90003260:	b0000000 	imm	0
90003264:	a483ffff 	andi	r4, r3, -1
90003268:	3073001c 	addik	r3, r19, 28
9000326c:	10a30000 	addk	r5, r3, r0
90003270:	b0009002 	imm	-28670
90003274:	30c00acc 	addik	r6, r0, 2764
90003278:	11040000 	addk	r8, r4, r0
9000327c:	b9f4d960 	brlid	r15, -9888	// 90000bdc <addParamToRspPkt>
90003280:	80000000 	or	r0, r0, r0
    sendRspPkt(&rspPkt);
90003284:	3073001c 	addik	r3, r19, 28
90003288:	10a30000 	addk	r5, r3, r0
9000328c:	b9f4db24 	brlid	r15, -9436	// 90000db0 <sendRspPkt>
90003290:	80000000 	or	r0, r0, r0
}
90003294:	e9e10000 	lwi	r15, r1, 0
90003298:	10330000 	addk	r1, r19, r0
9000329c:	ea610438 	lwi	r19, r1, 1080
900032a0:	3021043c 	addik	r1, r1, 1084
900032a4:	b60f0008 	rtsd	r15, 8
900032a8:	80000000 	or	r0, r0, r0

900032ac <chMoveRelative>:


static void chMoveRelative(CmdPkt* cmdPkt)
{
900032ac:	3021ffd8 	addik	r1, r1, -40
900032b0:	f9e10000 	swi	r15, r1, 0
900032b4:	fa610024 	swi	r19, r1, 36
900032b8:	12610000 	addk	r19, r1, r0
900032bc:	f8b3002c 	swi	r5, r19, 44
    StepperMotor motor;
    int steps;

    // Check Motor Parameter
    if(!validateMotorParameter(cmdPkt, 0, &motor))
900032c0:	e8b3002c 	lwi	r5, r19, 44
900032c4:	10c00000 	addk	r6, r0, r0
900032c8:	3073001c 	addik	r3, r19, 28
900032cc:	10e30000 	addk	r7, r3, r0
900032d0:	b9f4f470 	brlid	r15, -2960	// 90002740 <validateMotorParameter>
900032d4:	80000000 	or	r0, r0, r0
900032d8:	bc030050 	beqi	r3, 80		// 90003328
    {
        return;
    }

    // Check steps parameter
    if(!validateIntValue(cmdPkt, cmdPkt->params[1], &steps))
900032dc:	e873002c 	lwi	r3, r19, 44
900032e0:	e8630418 	lwi	r3, r3, 1048
900032e4:	30930020 	addik	r4, r19, 32
900032e8:	e8b3002c 	lwi	r5, r19, 44
900032ec:	10c30000 	addk	r6, r3, r0
900032f0:	10e40000 	addk	r7, r4, r0
900032f4:	b9f4effc 	brlid	r15, -4100	// 900022f0 <validateIntValue>
900032f8:	80000000 	or	r0, r0, r0
900032fc:	bc03002c 	beqi	r3, 44		// 90003328
    {
        return;
    }

    // Move Motor
    stepper_move_relative( motor, steps );
90003300:	e873001c 	lwi	r3, r19, 28
90003304:	e8930020 	lwi	r4, r19, 32
90003308:	10a30000 	addk	r5, r3, r0
9000330c:	10c40000 	addk	r6, r4, r0
90003310:	b0000000 	imm	0
90003314:	b9f47b04 	brlid	r15, 31492	// 9000ae18 <stepper_move_relative>
90003318:	80000000 	or	r0, r0, r0
    sendRspOk(cmdPkt);
9000331c:	e8b3002c 	lwi	r5, r19, 44
90003320:	b9f4e7f8 	brlid	r15, -6152	// 90001b18 <sendRspOk>
90003324:	80000000 	or	r0, r0, r0
}
90003328:	e9e10000 	lwi	r15, r1, 0
9000332c:	10330000 	addk	r1, r19, r0
90003330:	ea610024 	lwi	r19, r1, 36
90003334:	30210028 	addik	r1, r1, 40
90003338:	b60f0008 	rtsd	r15, 8
9000333c:	80000000 	or	r0, r0, r0

90003340 <chReboot>:



// static void chSetMotorCalibration(CmdPkt* cmdPkt)
// {
//     if(cmdPkt->paramCount == 1)
//     {
//         if(strcmp("DOOR_CLOSED", cmdPkt->params[0]) == 0)
//         {
//             setCurrentDoorClosedPosition();
//         }
//         else if(strcmp("LID_LOWERED", cmdPkt->params[0]) == 0)
//         {
//             setCurrentLidLoweredPosition();
//         }
//         else
//         {
//             sendRspStatusInvalidParameter(cmdPkt);
//             return;
//         }

//         sendRspOk(cmdPkt);
//     }
//     else if(cmdPkt->paramCount == 2)
//     {
//         int position;

//         if(!validateIntValue(cmdPkt, cmdPkt->params[1], &position)) return;

//         if(strcmp("DOOR_CLOSED", cmdPkt->params[0]) == 0)
//         {
//             setDoorClosedPosition(position);
//         }
//         else if(strcmp("LID_LOWERED", cmdPkt->params[0]) == 0)
//         {
//             setLidLoweredPosition(position);
//         }
//         else
//         {
//             sendRspStatusInvalidParameter(cmdPkt);
//             return;
//         }

//         sendRspOk(cmdPkt);
//     }
//     else
//     {
//         sendRspStatusInvalidParameterCount(cmdPkt, 1, 2);
//     }

// }



// static void chGetMotorCalibration(CmdPkt* cmdPkt)
// {
//     int position;
//     bool error;

//     if(strcmp("DOOR_CLOSED", cmdPkt->params[0]) == 0)
//     {
//         error = !getDoorClosedPosition(&position);
//     }
//     else if(strcmp("LID_LOWERED", cmdPkt->params[0]) == 0)
//     {
//         error = !getLidLoweredPosition(&position);
//     }
//     else
//     {
//         sendRspStatusInvalidParameter(cmdPkt);
//         return;
//     }

//     RspPkt rspPkt;

//     if(!error)
//     {
//         initRspPkt(&rspPkt, cmdPkt, RSP_OK);
//     }
//     else
//     {
//         initErrorRspPkt(&rspPkt, cmdPkt, err_motorNotCalibrated);
//         addStringParamToRspPkt(&rspPkt, "- using default:");
//     }

//     addParamToRspPkt(&rspPkt, "%d", position);
//     sendRspPkt(&rspPkt);
// }



// static void chGetMotorSensors(CmdPkt* cmdPkt)
// {
//     RspPkt rspPkt;
//     initRspPkt(&rspPkt, cmdPkt, RSP_OK);

//     addParamToRspPkt(&rspPkt, "Door-Home %d", stepper_is_at_home_position(stepperF));
//     addParamToRspPkt(&rspPkt, "Door-Alt %d", stepper_is_at_alt_position(stepperF));

//     addParamToRspPkt(&rspPkt, "Lid-Home %d", stepper_is_at_home_position(stepperU));
//     addParamToRspPkt(&rspPkt, "Lid-Alt %d", stepper_is_at_alt_position(stepperU));

//     addParamToRspPkt(&rspPkt, "Filter-Home %d", stepper_is_at_home_position(stepperR));
//     addParamToRspPkt(&rspPkt, "Filter-Alt %d", stepper_is_at_alt_position(stepperR));

//     sendRspPkt(&rspPkt);
// }



static void chReboot(CmdPkt* cmdPkt)
{
90003340:	3021ffe0 	addik	r1, r1, -32
90003344:	f9e10000 	swi	r15, r1, 0
90003348:	fa61001c 	swi	r19, r1, 28
9000334c:	12610000 	addk	r19, r1, r0
90003350:	f8b30024 	swi	r5, r19, 36
    sendRspOk(cmdPkt);
90003354:	e8b30024 	lwi	r5, r19, 36
90003358:	b9f4e7c0 	brlid	r15, -6208	// 90001b18 <sendRspOk>
9000335c:	80000000 	or	r0, r0, r0
    mdelay(100);
90003360:	30a00064 	addik	r5, r0, 100
90003364:	b0000000 	imm	0
90003368:	b9f48d9c 	brlid	r15, -29284	// 9000c104 <mdelay>
9000336c:	80000000 	or	r0, r0, r0

    reboot();
90003370:	b0000000 	imm	0
90003374:	b9f4ccf4 	brlid	r15, -13068	// 90010068 <reboot>
90003378:	80000000 	or	r0, r0, r0
}
9000337c:	e9e10000 	lwi	r15, r1, 0
90003380:	10330000 	addk	r1, r19, r0
90003384:	ea61001c 	lwi	r19, r1, 28
90003388:	30210020 	addik	r1, r1, 32
9000338c:	b60f0008 	rtsd	r15, 8
90003390:	80000000 	or	r0, r0, r0

90003394 <chRestoreDefaults>:


static void chRestoreDefaults(CmdPkt* cmdPkt)
{
90003394:	3021ffe0 	addik	r1, r1, -32
90003398:	f9e10000 	swi	r15, r1, 0
9000339c:	fa61001c 	swi	r19, r1, 28
900033a0:	12610000 	addk	r19, r1, r0
900033a4:	f8b30024 	swi	r5, r19, 36
    resetSystemToDefaults();
900033a8:	b9f40524 	brlid	r15, 1316	// 900038cc <resetSystemToDefaults>
900033ac:	80000000 	or	r0, r0, r0
    sendRspOk(cmdPkt);
900033b0:	e8b30024 	lwi	r5, r19, 36
900033b4:	b9f4e764 	brlid	r15, -6300	// 90001b18 <sendRspOk>
900033b8:	80000000 	or	r0, r0, r0
}
900033bc:	e9e10000 	lwi	r15, r1, 0
900033c0:	10330000 	addk	r1, r19, r0
900033c4:	ea61001c 	lwi	r19, r1, 28
900033c8:	30210020 	addik	r1, r1, 32
900033cc:	b60f0008 	rtsd	r15, 8
900033d0:	80000000 	or	r0, r0, r0

900033d4 <chSendErrorMessage>:


static void chSendErrorMessage(CmdPkt* cmdPkt)
{
900033d4:	3021fbbc 	addik	r1, r1, -1092
900033d8:	f9e10000 	swi	r15, r1, 0
900033dc:	fa610440 	swi	r19, r1, 1088
900033e0:	12610000 	addk	r19, r1, r0
900033e4:	f8b30448 	swi	r5, r19, 1096
    if(cmdPkt->paramCount < 1)
900033e8:	e8730448 	lwi	r3, r19, 1096
900033ec:	e8630410 	lwi	r3, r3, 1040
900033f0:	bc23001c 	bnei	r3, 28		// 9000340c
    {
        sendRspStatusInvalidParameterCount(cmdPkt, 1, MAX_PARAMS_COUNT);
900033f4:	e8b30448 	lwi	r5, r19, 1096
900033f8:	30c00001 	addik	r6, r0, 1
900033fc:	30e0001e 	addik	r7, r0, 30
90003400:	b9f4eb38 	brlid	r15, -5320	// 90001f38 <sendRspStatusInvalidParameterCount>
90003404:	80000000 	or	r0, r0, r0
        return;
90003408:	b80000e0 	bri	224		// 900034e8
    }

    int errorCode;
    if(!validateIntParameterRange(cmdPkt, 0, 0, num_errors - 1, &errorCode)) return;
9000340c:	30730020 	addik	r3, r19, 32
90003410:	e8b30448 	lwi	r5, r19, 1096
90003414:	10c00000 	addk	r6, r0, r0
90003418:	10e00000 	addk	r7, r0, r0
9000341c:	31000053 	addik	r8, r0, 83
90003420:	11230000 	addk	r9, r3, r0
90003424:	b9f4f01c 	brlid	r15, -4068	// 90002440 <validateIntParameterRange>
90003428:	80000000 	or	r0, r0, r0
9000342c:	bc0300bc 	beqi	r3, 188		// 900034e8

    sendRspOk(cmdPkt);
90003430:	e8b30448 	lwi	r5, r19, 1096
90003434:	b9f4e6e4 	brlid	r15, -6428	// 90001b18 <sendRspOk>
90003438:	80000000 	or	r0, r0, r0

    RspPkt errorPkt;
    initIpErrorPkt(&errorPkt, errorCode);
9000343c:	e8930020 	lwi	r4, r19, 32
90003440:	30730024 	addik	r3, r19, 36
90003444:	10a30000 	addk	r5, r3, r0
90003448:	10c40000 	addk	r6, r4, r0
9000344c:	b9f4e608 	brlid	r15, -6648	// 90001a54 <initIpErrorPkt>
90003450:	80000000 	or	r0, r0, r0

    if(cmdPkt->paramCount > 1)
90003454:	e8730448 	lwi	r3, r19, 1096
90003458:	e8630410 	lwi	r3, r3, 1040
9000345c:	22400001 	addi	r18, r0, 1
90003460:	16439003 	cmpu	r18, r3, r18
90003464:	bcb20074 	bgei	r18, 116		// 900034d8
    {
        addStringParamToRspPkt(&errorPkt, "-");
90003468:	30730024 	addik	r3, r19, 36
9000346c:	10a30000 	addk	r5, r3, r0
90003470:	b0009002 	imm	-28670
90003474:	30c0078c 	addik	r6, r0, 1932
90003478:	b9f4d870 	brlid	r15, -10128	// 90000ce8 <addStringParamToRspPkt>
9000347c:	80000000 	or	r0, r0, r0

        unsigned i;
        for(i = 1; i < cmdPkt->paramCount; ++i)
90003480:	30600001 	addik	r3, r0, 1
90003484:	f873001c 	swi	r3, r19, 28
90003488:	b800003c 	bri	60		// 900034c4
        {
            addStringParamToRspPkt(&errorPkt, cmdPkt->params[i]);
9000348c:	e873001c 	lwi	r3, r19, 28
90003490:	e8930448 	lwi	r4, r19, 1096
90003494:	64630402 	bslli	r3, r3, 2
90003498:	10632000 	addk	r3, r3, r4
9000349c:	30630414 	addik	r3, r3, 1044
900034a0:	e8830000 	lwi	r4, r3, 0
900034a4:	30730024 	addik	r3, r19, 36
900034a8:	10a30000 	addk	r5, r3, r0
900034ac:	10c40000 	addk	r6, r4, r0
900034b0:	b9f4d838 	brlid	r15, -10184	// 90000ce8 <addStringParamToRspPkt>
900034b4:	80000000 	or	r0, r0, r0
900034b8:	e873001c 	lwi	r3, r19, 28
900034bc:	30630001 	addik	r3, r3, 1
900034c0:	f873001c 	swi	r3, r19, 28
900034c4:	e8730448 	lwi	r3, r19, 1096
900034c8:	e8830410 	lwi	r4, r3, 1040
900034cc:	e873001c 	lwi	r3, r19, 28
900034d0:	16441803 	cmpu	r18, r4, r3
900034d4:	bc52ffb8 	blti	r18, -72		// 9000348c
        }
    }

    sendRspPkt(&errorPkt);
900034d8:	30730024 	addik	r3, r19, 36
900034dc:	10a30000 	addk	r5, r3, r0
900034e0:	b9f4d8d0 	brlid	r15, -10032	// 90000db0 <sendRspPkt>
900034e4:	80000000 	or	r0, r0, r0
}
900034e8:	e9e10000 	lwi	r15, r1, 0
900034ec:	10330000 	addk	r1, r19, r0
900034f0:	ea610440 	lwi	r19, r1, 1088
900034f4:	30210444 	addik	r1, r1, 1092
900034f8:	b60f0008 	rtsd	r15, 8
900034fc:	80000000 	or	r0, r0, r0

90003500 <chSendLogMessage>:

static void chSendLogMessage(CmdPkt* cmdPkt)
{
90003500:	3021fbc0 	addik	r1, r1, -1088
90003504:	f9e10000 	swi	r15, r1, 0
90003508:	fa61043c 	swi	r19, r1, 1084
9000350c:	12610000 	addk	r19, r1, r0
90003510:	f8b30444 	swi	r5, r19, 1092
    sendRspOk(cmdPkt);
90003514:	e8b30444 	lwi	r5, r19, 1092
90003518:	b9f4e600 	brlid	r15, -6656	// 90001b18 <sendRspOk>
9000351c:	80000000 	or	r0, r0, r0

    RspPkt logPkt;
    initIpLogPkt(&logPkt);
90003520:	30730020 	addik	r3, r19, 32
90003524:	10a30000 	addk	r5, r3, r0
90003528:	b9f4e5b0 	brlid	r15, -6736	// 90001ad8 <initIpLogPkt>
9000352c:	80000000 	or	r0, r0, r0

    unsigned i;
    for(i = 0; i < cmdPkt->paramCount; ++i)
90003530:	f813001c 	swi	r0, r19, 28
90003534:	b800003c 	bri	60		// 90003570
    {
        addStringParamToRspPkt(&logPkt, cmdPkt->params[i]);
90003538:	e873001c 	lwi	r3, r19, 28
9000353c:	e8930444 	lwi	r4, r19, 1092
90003540:	64630402 	bslli	r3, r3, 2
90003544:	10632000 	addk	r3, r3, r4
90003548:	30630414 	addik	r3, r3, 1044
9000354c:	e8830000 	lwi	r4, r3, 0
90003550:	30730020 	addik	r3, r19, 32
90003554:	10a30000 	addk	r5, r3, r0
90003558:	10c40000 	addk	r6, r4, r0
9000355c:	b9f4d78c 	brlid	r15, -10356	// 90000ce8 <addStringParamToRspPkt>
90003560:	80000000 	or	r0, r0, r0
90003564:	e873001c 	lwi	r3, r19, 28
90003568:	30630001 	addik	r3, r3, 1
9000356c:	f873001c 	swi	r3, r19, 28
90003570:	e8730444 	lwi	r3, r19, 1092
90003574:	e8830410 	lwi	r4, r3, 1040
90003578:	e873001c 	lwi	r3, r19, 28
9000357c:	16441803 	cmpu	r18, r4, r3
90003580:	bc52ffb8 	blti	r18, -72		// 90003538
    }

    sendRspPkt(&logPkt);
90003584:	30730020 	addik	r3, r19, 32
90003588:	10a30000 	addk	r5, r3, r0
9000358c:	b9f4d824 	brlid	r15, -10204	// 90000db0 <sendRspPkt>
90003590:	80000000 	or	r0, r0, r0
}
90003594:	e9e10000 	lwi	r15, r1, 0
90003598:	10330000 	addk	r1, r19, r0
9000359c:	ea61043c 	lwi	r19, r1, 1084
900035a0:	30210440 	addik	r1, r1, 1088
900035a4:	b60f0008 	rtsd	r15, 8
900035a8:	80000000 	or	r0, r0, r0

900035ac <chDisableCommWatchdog>:

static void chDisableCommWatchdog(CmdPkt* cmdPkt)
{
900035ac:	3021ffe0 	addik	r1, r1, -32
900035b0:	f9e10000 	swi	r15, r1, 0
900035b4:	fa61001c 	swi	r19, r1, 28
900035b8:	12610000 	addk	r19, r1, r0
900035bc:	f8b30024 	swi	r5, r19, 36
    commData.commWatchdogDisabled = true;
900035c0:	30600001 	addik	r3, r0, 1
900035c4:	b0009002 	imm	-28670
900035c8:	f860ffe0 	swi	r3, r0, -32
    sendRspOk(cmdPkt);
900035cc:	e8b30024 	lwi	r5, r19, 36
900035d0:	b9f4e548 	brlid	r15, -6840	// 90001b18 <sendRspOk>
900035d4:	80000000 	or	r0, r0, r0
}
900035d8:	e9e10000 	lwi	r15, r1, 0
900035dc:	10330000 	addk	r1, r19, r0
900035e0:	ea61001c 	lwi	r19, r1, 28
900035e4:	30210020 	addik	r1, r1, 32
900035e8:	b60f0008 	rtsd	r15, 8
900035ec:	80000000 	or	r0, r0, r0

900035f0 <chActuateArm>:

static void chActuateArm(CmdPkt* cmdPkt)
{
900035f0:	3021ffe0 	addik	r1, r1, -32
900035f4:	f9e10000 	swi	r15, r1, 0
900035f8:	fa61001c 	swi	r19, r1, 28
900035fc:	12610000 	addk	r19, r1, r0
90003600:	f8b30024 	swi	r5, r19, 36
    printf("Actuating Arm %s\n", cmdPkt->params[0]);
90003604:	e8730024 	lwi	r3, r19, 36
90003608:	e8630414 	lwi	r3, r3, 1044
9000360c:	b0009002 	imm	-28670
90003610:	30a00ad4 	addik	r5, r0, 2772
90003614:	10c30000 	addk	r6, r3, r0
90003618:	b0000000 	imm	0
9000361c:	b9f4c828 	brlid	r15, -14296	// 9000fe44 <printf>
90003620:	80000000 	or	r0, r0, r0
    if      (strcmp("O", cmdPkt->params[0]) == 0) {ActuateArmsOut();} 
90003624:	e8730024 	lwi	r3, r19, 36
90003628:	e8630414 	lwi	r3, r3, 1044
9000362c:	b0009002 	imm	-28670
90003630:	30a00ae8 	addik	r5, r0, 2792
90003634:	10c30000 	addk	r6, r3, r0
90003638:	b0000001 	imm	1
9000363c:	b9f40d54 	brlid	r15, 3412	// 90014390 <strcmp>
90003640:	80000000 	or	r0, r0, r0
90003644:	bc230010 	bnei	r3, 16		// 90003654
90003648:	b9f4594c 	brlid	r15, 22860	// 90008f94 <ActuateArmsOut>
9000364c:	80000000 	or	r0, r0, r0
90003650:	b8000150 	bri	336		// 900037a0
    else if (strcmp("U", cmdPkt->params[0]) == 0) {ActuateArmIn('U');} 
90003654:	e8730024 	lwi	r3, r19, 36
90003658:	e8630414 	lwi	r3, r3, 1044
9000365c:	b0009002 	imm	-28670
90003660:	30a00a5c 	addik	r5, r0, 2652
90003664:	10c30000 	addk	r6, r3, r0
90003668:	b0000001 	imm	1
9000366c:	b9f40d24 	brlid	r15, 3364	// 90014390 <strcmp>
90003670:	80000000 	or	r0, r0, r0
90003674:	bc230014 	bnei	r3, 20		// 90003688
90003678:	30a00055 	addik	r5, r0, 85
9000367c:	b9f45828 	brlid	r15, 22568	// 90008ea4 <ActuateArmIn>
90003680:	80000000 	or	r0, r0, r0
90003684:	b800011c 	bri	284		// 900037a0
    else if (strcmp("F", cmdPkt->params[0]) == 0) {ActuateArmIn('F');} 
90003688:	e8730024 	lwi	r3, r19, 36
9000368c:	e8630414 	lwi	r3, r3, 1044
90003690:	b0009002 	imm	-28670
90003694:	30a00a60 	addik	r5, r0, 2656
90003698:	10c30000 	addk	r6, r3, r0
9000369c:	b0000001 	imm	1
900036a0:	b9f40cf0 	brlid	r15, 3312	// 90014390 <strcmp>
900036a4:	80000000 	or	r0, r0, r0
900036a8:	bc230014 	bnei	r3, 20		// 900036bc
900036ac:	30a00046 	addik	r5, r0, 70
900036b0:	b9f457f4 	brlid	r15, 22516	// 90008ea4 <ActuateArmIn>
900036b4:	80000000 	or	r0, r0, r0
900036b8:	b80000e8 	bri	232		// 900037a0
    else if (strcmp("R", cmdPkt->params[0]) == 0) {ActuateArmIn('R');} 
900036bc:	e8730024 	lwi	r3, r19, 36
900036c0:	e8630414 	lwi	r3, r3, 1044
900036c4:	b0009002 	imm	-28670
900036c8:	30a00a64 	addik	r5, r0, 2660
900036cc:	10c30000 	addk	r6, r3, r0
900036d0:	b0000001 	imm	1
900036d4:	b9f40cbc 	brlid	r15, 3260	// 90014390 <strcmp>
900036d8:	80000000 	or	r0, r0, r0
900036dc:	bc230014 	bnei	r3, 20		// 900036f0
900036e0:	30a00052 	addik	r5, r0, 82
900036e4:	b9f457c0 	brlid	r15, 22464	// 90008ea4 <ActuateArmIn>
900036e8:	80000000 	or	r0, r0, r0
900036ec:	b80000b4 	bri	180		// 900037a0
    else if (strcmp("D", cmdPkt->params[0]) == 0) {ActuateArmIn('D');} 
900036f0:	e8730024 	lwi	r3, r19, 36
900036f4:	e8630414 	lwi	r3, r3, 1044
900036f8:	b0009002 	imm	-28670
900036fc:	30a00aec 	addik	r5, r0, 2796
90003700:	10c30000 	addk	r6, r3, r0
90003704:	b0000001 	imm	1
90003708:	b9f40c88 	brlid	r15, 3208	// 90014390 <strcmp>
9000370c:	80000000 	or	r0, r0, r0
90003710:	bc230014 	bnei	r3, 20		// 90003724
90003714:	30a00044 	addik	r5, r0, 68
90003718:	b9f4578c 	brlid	r15, 22412	// 90008ea4 <ActuateArmIn>
9000371c:	80000000 	or	r0, r0, r0
90003720:	b8000080 	bri	128		// 900037a0
    else if (strcmp("B", cmdPkt->params[0]) == 0) {ActuateArmIn('B');} 
90003724:	e8730024 	lwi	r3, r19, 36
90003728:	e8630414 	lwi	r3, r3, 1044
9000372c:	b0009002 	imm	-28670
90003730:	30a00af0 	addik	r5, r0, 2800
90003734:	10c30000 	addk	r6, r3, r0
90003738:	b0000001 	imm	1
9000373c:	b9f40c54 	brlid	r15, 3156	// 90014390 <strcmp>
90003740:	80000000 	or	r0, r0, r0
90003744:	bc230014 	bnei	r3, 20		// 90003758
90003748:	30a00042 	addik	r5, r0, 66
9000374c:	b9f45758 	brlid	r15, 22360	// 90008ea4 <ActuateArmIn>
90003750:	80000000 	or	r0, r0, r0
90003754:	b800004c 	bri	76		// 900037a0
    else if (strcmp("L", cmdPkt->params[0]) == 0) {ActuateArmIn('L');} 
90003758:	e8730024 	lwi	r3, r19, 36
9000375c:	e8630414 	lwi	r3, r3, 1044
90003760:	b0009002 	imm	-28670
90003764:	30a00af4 	addik	r5, r0, 2804
90003768:	10c30000 	addk	r6, r3, r0
9000376c:	b0000001 	imm	1
90003770:	b9f40c20 	brlid	r15, 3104	// 90014390 <strcmp>
90003774:	80000000 	or	r0, r0, r0
90003778:	bc230014 	bnei	r3, 20		// 9000378c
9000377c:	30a0004c 	addik	r5, r0, 76
90003780:	b9f45724 	brlid	r15, 22308	// 90008ea4 <ActuateArmIn>
90003784:	80000000 	or	r0, r0, r0
90003788:	b8000018 	bri	24		// 900037a0
    else
    {
        printf("Uh Oh\n");
9000378c:	b0009002 	imm	-28670
90003790:	30a00af8 	addik	r5, r0, 2808
90003794:	b0000000 	imm	0
90003798:	b9f4c7a0 	brlid	r15, -14432	// 9000ff38 <puts>
9000379c:	80000000 	or	r0, r0, r0
        // Do Nothing
    }

    sendRspOk(cmdPkt);
900037a0:	e8b30024 	lwi	r5, r19, 36
900037a4:	b9f4e374 	brlid	r15, -7308	// 90001b18 <sendRspOk>
900037a8:	80000000 	or	r0, r0, r0

}
900037ac:	e9e10000 	lwi	r15, r1, 0
900037b0:	10330000 	addk	r1, r19, r0
900037b4:	ea61001c 	lwi	r19, r1, 28
900037b8:	30210020 	addik	r1, r1, 32
900037bc:	b60f0008 	rtsd	r15, 8
900037c0:	80000000 	or	r0, r0, r0

900037c4 <chDisableMotors>:

static void chDisableMotors(CmdPkt* cmdPkt)
{
900037c4:	3021ffe0 	addik	r1, r1, -32
900037c8:	f9e10000 	swi	r15, r1, 0
900037cc:	fa61001c 	swi	r19, r1, 28
900037d0:	12610000 	addk	r19, r1, r0
900037d4:	f8b30024 	swi	r5, r19, 36
    disableMotors();
900037d8:	b9f46fd0 	brlid	r15, 28624	// 9000a7a8 <disableMotors>
900037dc:	80000000 	or	r0, r0, r0
    sendRspOk(cmdPkt);
900037e0:	e8b30024 	lwi	r5, r19, 36
900037e4:	b9f4e334 	brlid	r15, -7372	// 90001b18 <sendRspOk>
900037e8:	80000000 	or	r0, r0, r0
}
900037ec:	e9e10000 	lwi	r15, r1, 0
900037f0:	10330000 	addk	r1, r19, r0
900037f4:	ea61001c 	lwi	r19, r1, 28
900037f8:	30210020 	addik	r1, r1, 32
900037fc:	b60f0008 	rtsd	r15, 8
90003800:	80000000 	or	r0, r0, r0

90003804 <chTimingTest>:

static void chTimingTest(CmdPkt* cmdPkt)
{
90003804:	3021ffe0 	addik	r1, r1, -32
90003808:	f9e10000 	swi	r15, r1, 0
9000380c:	fa61001c 	swi	r19, r1, 28
90003810:	12610000 	addk	r19, r1, r0
90003814:	f8b30024 	swi	r5, r19, 36
    RotateArm(stepperR, rotation_clockwise, turn_half, 22);
90003818:	30a00002 	addik	r5, r0, 2
9000381c:	10c00000 	addk	r6, r0, r0
90003820:	30e00001 	addik	r7, r0, 1
90003824:	31000016 	addik	r8, r0, 22
90003828:	b9f44a88 	brlid	r15, 19080	// 900082b0 <RotateArm>
9000382c:	80000000 	or	r0, r0, r0
    sendRspOk(cmdPkt);
90003830:	e8b30024 	lwi	r5, r19, 36
90003834:	b9f4e2e4 	brlid	r15, -7452	// 90001b18 <sendRspOk>
90003838:	80000000 	or	r0, r0, r0
}
9000383c:	e9e10000 	lwi	r15, r1, 0
90003840:	10330000 	addk	r1, r19, r0
90003844:	ea61001c 	lwi	r19, r1, 28
90003848:	30210020 	addik	r1, r1, 32
9000384c:	b60f0008 	rtsd	r15, 8
90003850:	80000000 	or	r0, r0, r0

90003854 <chTestGetSwitch>:

static void chTestGetSwitch(CmdPkt* cmdPkt)
{
90003854:	3021ffe0 	addik	r1, r1, -32
90003858:	f9e10000 	swi	r15, r1, 0
9000385c:	fa61001c 	swi	r19, r1, 28
90003860:	12610000 	addk	r19, r1, r0
90003864:	f8b30024 	swi	r5, r19, 36
    IsSwitchTriggered(LInSwitch);
90003868:	10a00000 	addk	r5, r0, r0
9000386c:	b0000000 	imm	0
90003870:	b9f4851c 	brlid	r15, -31460	// 9000bd8c <IsSwitchTriggered>
90003874:	80000000 	or	r0, r0, r0
    sendRspOk(cmdPkt);
90003878:	e8b30024 	lwi	r5, r19, 36
9000387c:	b9f4e29c 	brlid	r15, -7524	// 90001b18 <sendRspOk>
90003880:	80000000 	or	r0, r0, r0
}
90003884:	e9e10000 	lwi	r15, r1, 0
90003888:	10330000 	addk	r1, r19, r0
9000388c:	ea61001c 	lwi	r19, r1, 28
90003890:	30210020 	addik	r1, r1, 32
90003894:	b60f0008 	rtsd	r15, 8
90003898:	80000000 	or	r0, r0, r0

9000389c <initializationInit>:
///////////////////////////////////////////////////
// Interface functions

void initializationInit()
{
9000389c:	3021fff8 	addik	r1, r1, -8
900038a0:	fa610004 	swi	r19, r1, 4
900038a4:	12610000 	addk	r19, r1, r0
    initData.callback.completedCallbackFunc = NULL;
900038a8:	b0009002 	imm	-28670
900038ac:	f80040b4 	swi	r0, r0, 16564
    initData.callback.infoCallbackFunc      = NULL;
900038b0:	b0009002 	imm	-28670
900038b4:	f80040b8 	swi	r0, r0, 16568
}
900038b8:	10330000 	addk	r1, r19, r0
900038bc:	ea610004 	lwi	r19, r1, 4
900038c0:	30210008 	addik	r1, r1, 8
900038c4:	b60f0008 	rtsd	r15, 8
900038c8:	80000000 	or	r0, r0, r0

900038cc <resetSystemToDefaults>:



void resetSystemToDefaults()
{
900038cc:	3021fff8 	addik	r1, r1, -8
900038d0:	fa610004 	swi	r19, r1, 4
900038d4:	12610000 	addk	r19, r1, r0
    // set defaults
}
900038d8:	10330000 	addk	r1, r19, r0
900038dc:	ea610004 	lwi	r19, r1, 4
900038e0:	30210008 	addik	r1, r1, 8
900038e4:	b60f0008 	rtsd	r15, 8
900038e8:	80000000 	or	r0, r0, r0

900038ec <startSystemInitialization>:



void startSystemInitialization(OfflineTaskCompleteCallback completedCallbackFunc,
                               OfflineTaskInfoCallback     infoCallbackFunc,
                               int                         callbackRef,
                               bool                        haltOnError)
{
900038ec:	3021ffe0 	addik	r1, r1, -32
900038f0:	f9e10000 	swi	r15, r1, 0
900038f4:	fa61001c 	swi	r19, r1, 28
900038f8:	12610000 	addk	r19, r1, r0
900038fc:	f8b30024 	swi	r5, r19, 36
90003900:	f8d30028 	swi	r6, r19, 40
90003904:	f8f3002c 	swi	r7, r19, 44
90003908:	f9130030 	swi	r8, r19, 48
    ASSERT(completedCallbackFunc);
9000390c:	e8730024 	lwi	r3, r19, 36
90003910:	bc23002c 	bnei	r3, 44		// 9000393c
90003914:	94110002 	msrclr	r0, 2
90003918:	b0009002 	imm	-28670
9000391c:	30a00b00 	addik	r5, r0, 2816
90003920:	b0009002 	imm	-28670
90003924:	30c00b18 	addik	r6, r0, 2840
90003928:	30e00076 	addik	r7, r0, 118
9000392c:	b0000000 	imm	0
90003930:	b9f48af4 	brlid	r15, -29964	// 9000c424 <printAssert>
90003934:	80000000 	or	r0, r0, r0
90003938:	b8000000 	bri	0		// 90003938

    if(initData.callback.completedCallbackFunc)
9000393c:	b0009002 	imm	-28670
90003940:	e86040b4 	lwi	r3, r0, 16564
90003944:	bc030024 	beqi	r3, 36		// 90003968
    {
        completedCallbackFunc(callbackRef, err_systemBusy, "Init system busy");
90003948:	e8730024 	lwi	r3, r19, 36
9000394c:	e8b3002c 	lwi	r5, r19, 44
90003950:	30c00006 	addik	r6, r0, 6
90003954:	b0009002 	imm	-28670
90003958:	30e00b30 	addik	r7, r0, 2864
9000395c:	99fc1800 	brald	r15, r3
90003960:	80000000 	or	r0, r0, r0
        return;
90003964:	b800004c 	bri	76		// 900039b0
    }
    
    initData.callback.completedCallbackFunc = completedCallbackFunc;
90003968:	e8730024 	lwi	r3, r19, 36
9000396c:	b0009002 	imm	-28670
90003970:	f86040b4 	swi	r3, r0, 16564
    initData.callback.infoCallbackFunc      = infoCallbackFunc;
90003974:	e8730028 	lwi	r3, r19, 40
90003978:	b0009002 	imm	-28670
9000397c:	f86040b8 	swi	r3, r0, 16568
    initData.callback.reference             = callbackRef;
90003980:	e873002c 	lwi	r3, r19, 44
90003984:	b0009002 	imm	-28670
90003988:	f86040bc 	swi	r3, r0, 16572
    initData.haltOnError                    = haltOnError;
9000398c:	e8730030 	lwi	r3, r19, 48
90003990:	b0009002 	imm	-28670
90003994:	f86040c0 	swi	r3, r0, 16576

    scheduleTask(startInitTask, NULL, false);
90003998:	b0009000 	imm	-28672
9000399c:	30a03a28 	addik	r5, r0, 14888
900039a0:	10c00000 	addk	r6, r0, r0
900039a4:	10e00000 	addk	r7, r0, r0
900039a8:	b9f450d4 	brlid	r15, 20692	// 90008a7c <scheduleTask>
900039ac:	80000000 	or	r0, r0, r0
}
900039b0:	e9e10000 	lwi	r15, r1, 0
900039b4:	10330000 	addk	r1, r19, r0
900039b8:	ea61001c 	lwi	r19, r1, 28
900039bc:	30210020 	addik	r1, r1, 32
900039c0:	b60f0008 	rtsd	r15, 8
900039c4:	80000000 	or	r0, r0, r0

900039c8 <initializationAbort>:


void initializationAbort()
{
900039c8:	3021ffe0 	addik	r1, r1, -32
900039cc:	f9e10000 	swi	r15, r1, 0
900039d0:	fa61001c 	swi	r19, r1, 28
900039d4:	12610000 	addk	r19, r1, r0
    if(initData.callback.completedCallbackFunc)
900039d8:	b0009002 	imm	-28670
900039dc:	e86040b4 	lwi	r3, r0, 16564
900039e0:	bc030030 	beqi	r3, 48		// 90003a10
    {
        initData.callback.completedCallbackFunc = NULL;
900039e4:	b0009002 	imm	-28670
900039e8:	f80040b4 	swi	r0, r0, 16564
        initData.callback.infoCallbackFunc      = NULL;
900039ec:	b0009002 	imm	-28670
900039f0:	f80040b8 	swi	r0, r0, 16568
        initData.motion.state                   = MotionState_Idle;
900039f4:	b0009002 	imm	-28670
900039f8:	f80040ac 	swi	r0, r0, 16556

        printf("System Init Aborted\n");
900039fc:	b0009002 	imm	-28670
90003a00:	30a00b44 	addik	r5, r0, 2884
90003a04:	b0000000 	imm	0
90003a08:	b9f4c530 	brlid	r15, -15056	// 9000ff38 <puts>
90003a0c:	80000000 	or	r0, r0, r0
    }
}
90003a10:	e9e10000 	lwi	r15, r1, 0
90003a14:	10330000 	addk	r1, r19, r0
90003a18:	ea61001c 	lwi	r19, r1, 28
90003a1c:	30210020 	addik	r1, r1, 32
90003a20:	b60f0008 	rtsd	r15, 8
90003a24:	80000000 	or	r0, r0, r0

90003a28 <startInitTask>:





///////////////////////////////////////////////////
// Local functions

static bool startInitTask(void* unused)
{
90003a28:	3021fff8 	addik	r1, r1, -8
90003a2c:	fa610004 	swi	r19, r1, 4
90003a30:	12610000 	addk	r19, r1, r0
90003a34:	f8b3000c 	swi	r5, r19, 12
    // Kick off all parallel initializations
    //motionInitStart();

    return false;
90003a38:	10600000 	addk	r3, r0, r0
}
90003a3c:	10330000 	addk	r1, r19, r0
90003a40:	ea610004 	lwi	r19, r1, 4
90003a44:	30210008 	addik	r1, r1, 8
90003a48:	b60f0008 	rtsd	r15, 8
90003a4c:	80000000 	or	r0, r0, r0

90003a50 <sendTaskInfo>:


static void sendTaskInfo(int reference, ErrorCodes error, const char* errorDesc)
{
90003a50:	3021ffe0 	addik	r1, r1, -32
90003a54:	f9e10000 	swi	r15, r1, 0
90003a58:	fa61001c 	swi	r19, r1, 28
90003a5c:	12610000 	addk	r19, r1, r0
90003a60:	f8b30024 	swi	r5, r19, 36
90003a64:	f8d30028 	swi	r6, r19, 40
90003a68:	f8f3002c 	swi	r7, r19, 44
    if(initData.callback.infoCallbackFunc)
90003a6c:	b0009002 	imm	-28670
90003a70:	e86040b8 	lwi	r3, r0, 16568
90003a74:	bc030020 	beqi	r3, 32		// 90003a94
    {
        initData.callback.infoCallbackFunc(reference, error, errorDesc);
90003a78:	b0009002 	imm	-28670
90003a7c:	e86040b8 	lwi	r3, r0, 16568
90003a80:	e8b30024 	lwi	r5, r19, 36
90003a84:	e8d30028 	lwi	r6, r19, 40
90003a88:	e8f3002c 	lwi	r7, r19, 44
90003a8c:	99fc1800 	brald	r15, r3
90003a90:	80000000 	or	r0, r0, r0
    }
}
90003a94:	e9e10000 	lwi	r15, r1, 0
90003a98:	10330000 	addk	r1, r19, r0
90003a9c:	ea61001c 	lwi	r19, r1, 28
90003aa0:	30210020 	addik	r1, r1, 32
90003aa4:	b60f0008 	rtsd	r15, 8
90003aa8:	80000000 	or	r0, r0, r0

90003aac <finishInitTask>:


static void finishInitTask(ErrorCodes error, const char* errorDesc)
{
90003aac:	3021ffe0 	addik	r1, r1, -32
90003ab0:	f9e10000 	swi	r15, r1, 0
90003ab4:	fa61001c 	swi	r19, r1, 28
90003ab8:	12610000 	addk	r19, r1, r0
90003abc:	f8b30024 	swi	r5, r19, 36
90003ac0:	f8d30028 	swi	r6, r19, 40
    if(initData.callback.completedCallbackFunc)
90003ac4:	b0009002 	imm	-28670
90003ac8:	e86040b4 	lwi	r3, r0, 16564
90003acc:	bc030030 	beqi	r3, 48		// 90003afc
    {
        initData.callback.completedCallbackFunc(initData.callback.reference, error, errorDesc);
90003ad0:	b0009002 	imm	-28670
90003ad4:	e88040b4 	lwi	r4, r0, 16564
90003ad8:	b0009002 	imm	-28670
90003adc:	e86040bc 	lwi	r3, r0, 16572
90003ae0:	10a30000 	addk	r5, r3, r0
90003ae4:	e8d30024 	lwi	r6, r19, 36
90003ae8:	e8f30028 	lwi	r7, r19, 40
90003aec:	99fc2000 	brald	r15, r4
90003af0:	80000000 	or	r0, r0, r0
        initData.callback.completedCallbackFunc = NULL;
90003af4:	b0009002 	imm	-28670
90003af8:	f80040b4 	swi	r0, r0, 16564
    }
}
90003afc:	e9e10000 	lwi	r15, r1, 0
90003b00:	10330000 	addk	r1, r19, r0
90003b04:	ea61001c 	lwi	r19, r1, 28
90003b08:	30210020 	addik	r1, r1, 32
90003b0c:	b60f0008 	rtsd	r15, 8
90003b10:	80000000 	or	r0, r0, r0

90003b14 <motionInitStart>:



///////////////////////////////////////////////////
// Motion Init Functions - Sequential Init Steps

static void motionInitStart()
{
90003b14:	3021ffe0 	addik	r1, r1, -32
90003b18:	f9e10000 	swi	r15, r1, 0
90003b1c:	fa61001c 	swi	r19, r1, 28
90003b20:	12610000 	addk	r19, r1, r0
    motionInitProcess();
90003b24:	b9f40020 	brlid	r15, 32	// 90003b44 <motionInitProcess>
90003b28:	80000000 	or	r0, r0, r0
}
90003b2c:	e9e10000 	lwi	r15, r1, 0
90003b30:	10330000 	addk	r1, r19, r0
90003b34:	ea61001c 	lwi	r19, r1, 28
90003b38:	30210020 	addik	r1, r1, 32
90003b3c:	b60f0008 	rtsd	r15, 8
90003b40:	80000000 	or	r0, r0, r0

90003b44 <motionInitProcess>:

static void motionInitProcess()
{
90003b44:	3021ffdc 	addik	r1, r1, -36
90003b48:	f9e10000 	swi	r15, r1, 0
90003b4c:	fa610020 	swi	r19, r1, 32
90003b50:	12610000 	addk	r19, r1, r0
    initData.motion.state = MotionState_Complete;
90003b54:	30600004 	addik	r3, r0, 4
90003b58:	b0009002 	imm	-28670
90003b5c:	f86040ac 	swi	r3, r0, 16556
    switch(initData.motion.state)
90003b60:	b0009002 	imm	-28670
90003b64:	e86040ac 	lwi	r3, r0, 16556
90003b68:	f873001c 	swi	r3, r19, 28
90003b6c:	e873001c 	lwi	r3, r19, 28
90003b70:	22400004 	addi	r18, r0, 4
90003b74:	16439003 	cmpu	r18, r3, r18
90003b78:	bc52009c 	blti	r18, 156		// 90003c14
90003b7c:	e873001c 	lwi	r3, r19, 28
90003b80:	64830402 	bslli	r4, r3, 2
90003b84:	b0009002 	imm	-28670
90003b88:	30600b8c 	addik	r3, r0, 2956
90003b8c:	10641800 	addk	r3, r4, r3
90003b90:	e8630000 	lwi	r3, r3, 0
90003b94:	98081800 	bra	r3
    {
        case MotionState_Idle:
            initData.motion.state = MotionState_Complete;
90003b98:	30600004 	addik	r3, r0, 4
90003b9c:	b0009002 	imm	-28670
90003ba0:	f86040ac 	swi	r3, r0, 16556
            break;
90003ba4:	b8000098 	bri	152		// 90003c3c

        case MotionState_FilterInit:
            printf("Filter init...\n");
90003ba8:	b0009002 	imm	-28670
90003bac:	30a00b58 	addik	r5, r0, 2904
90003bb0:	b0000000 	imm	0
90003bb4:	b9f4c384 	brlid	r15, -15484	// 9000ff38 <puts>
90003bb8:	80000000 	or	r0, r0, r0
        
            break;
90003bbc:	b8000080 	bri	128		// 90003c3c

        case MotionState_LidInit:
            printf("Lid init...\n");
90003bc0:	b0009002 	imm	-28670
90003bc4:	30a00b68 	addik	r5, r0, 2920
90003bc8:	b0000000 	imm	0
90003bcc:	b9f4c36c 	brlid	r15, -15508	// 9000ff38 <puts>
90003bd0:	80000000 	or	r0, r0, r0

            break;
90003bd4:	b8000068 	bri	104		// 90003c3c

        case MotionState_DoorInit:
            printf("Door init...\n");
90003bd8:	b0009002 	imm	-28670
90003bdc:	30a00b74 	addik	r5, r0, 2932
90003be0:	b0000000 	imm	0
90003be4:	b9f4c354 	brlid	r15, -15532	// 9000ff38 <puts>
90003be8:	80000000 	or	r0, r0, r0

            break;
90003bec:	b8000050 	bri	80		// 90003c3c

        case MotionState_Complete:
            initData.motion.state = MotionState_Idle;
90003bf0:	b0009002 	imm	-28670
90003bf4:	f80040ac 	swi	r0, r0, 16556
            finishInitTask(initData.motion.error, NULL);
90003bf8:	b0009002 	imm	-28670
90003bfc:	e86040b0 	lwi	r3, r0, 16560
90003c00:	10a30000 	addk	r5, r3, r0
90003c04:	10c00000 	addk	r6, r0, r0
90003c08:	b9f4fea4 	brlid	r15, -348	// 90003aac <finishInitTask>
90003c0c:	80000000 	or	r0, r0, r0
            break;
90003c10:	b800002c 	bri	44		// 90003c3c
            
        default:
            ASSERT(false);
90003c14:	94110002 	msrclr	r0, 2
90003c18:	b0009002 	imm	-28670
90003c1c:	30a00b84 	addik	r5, r0, 2948
90003c20:	b0009002 	imm	-28670
90003c24:	30c00b18 	addik	r6, r0, 2840
90003c28:	30e000dd 	addik	r7, r0, 221
90003c2c:	b0000000 	imm	0
90003c30:	b9f487f4 	brlid	r15, -30732	// 9000c424 <printAssert>
90003c34:	80000000 	or	r0, r0, r0
90003c38:	b8000000 	bri	0		// 90003c38
    }
}
90003c3c:	e9e10000 	lwi	r15, r1, 0
90003c40:	10330000 	addk	r1, r19, r0
90003c44:	ea610020 	lwi	r19, r1, 32
90003c48:	30210024 	addik	r1, r1, 36
90003c4c:	b60f0008 	rtsd	r15, 8
90003c50:	80000000 	or	r0, r0, r0

90003c54 <motionInitCallback>:

static void motionInitCallback(int reference, ErrorCodes error, const char* errorDesc)
{
90003c54:	3021ffdc 	addik	r1, r1, -36
90003c58:	f9e10000 	swi	r15, r1, 0
90003c5c:	fa610020 	swi	r19, r1, 32
90003c60:	12610000 	addk	r19, r1, r0
90003c64:	f8b30028 	swi	r5, r19, 40
90003c68:	f8d3002c 	swi	r6, r19, 44
90003c6c:	f8f30030 	swi	r7, r19, 48
     switch(initData.motion.state)
90003c70:	b0009002 	imm	-28670
90003c74:	e86040ac 	lwi	r3, r0, 16556
90003c78:	f873001c 	swi	r3, r19, 28
90003c7c:	e873001c 	lwi	r3, r19, 28
90003c80:	22400004 	addi	r18, r0, 4
90003c84:	16439003 	cmpu	r18, r3, r18
90003c88:	bc520020 	blti	r18, 32		// 90003ca8
90003c8c:	e873001c 	lwi	r3, r19, 28
90003c90:	64830402 	bslli	r4, r3, 2
90003c94:	b0009002 	imm	-28670
90003c98:	30600ba0 	addik	r3, r0, 2976
90003c9c:	10641800 	addk	r3, r4, r3
90003ca0:	e8630000 	lwi	r3, r3, 0
90003ca4:	98081800 	bra	r3
    {
        case MotionState_Idle:
            break;

        case MotionState_FilterInit:


            break;


        case MotionState_LidInit:


            break;

        case MotionState_DoorInit:

            break;

        case MotionState_Complete:
            break;
            
        default:
            ASSERT(false);
90003ca8:	94110002 	msrclr	r0, 2
90003cac:	b0009002 	imm	-28670
90003cb0:	30a00b84 	addik	r5, r0, 2948
90003cb4:	b0009002 	imm	-28670
90003cb8:	30c00b18 	addik	r6, r0, 2840
90003cbc:	30e000fb 	addik	r7, r0, 251
90003cc0:	b0000000 	imm	0
90003cc4:	b9f48760 	brlid	r15, -30880	// 9000c424 <printAssert>
90003cc8:	80000000 	or	r0, r0, r0
90003ccc:	b8000000 	bri	0		// 90003ccc
    }

    motionInitProcess();
90003cd0:	b9f4fe74 	brlid	r15, -396	// 90003b44 <motionInitProcess>
90003cd4:	80000000 	or	r0, r0, r0
}
90003cd8:	e9e10000 	lwi	r15, r1, 0
90003cdc:	10330000 	addk	r1, r19, r0
90003ce0:	ea610020 	lwi	r19, r1, 32
90003ce4:	30210024 	addik	r1, r1, 36
90003ce8:	b60f0008 	rtsd	r15, 8
90003cec:	80000000 	or	r0, r0, r0

90003cf0 <main>:
#include <assert.h>


int main (void)
{
90003cf0:	3021ffe0 	addik	r1, r1, -32
90003cf4:	f9e10000 	swi	r15, r1, 0
90003cf8:	fa61001c 	swi	r19, r1, 28
90003cfc:	12610000 	addk	r19, r1, r0
    // Start up system - never returns
    systemStartup();
90003d00:	b9f4626c 	brlid	r15, 25196	// 90009f6c <systemStartup>
90003d04:	80000000 	or	r0, r0, r0

    // Catch errors
    ASSERT(false);    
90003d08:	94110002 	msrclr	r0, 2
90003d0c:	b0009002 	imm	-28670
90003d10:	30a00bb4 	addik	r5, r0, 2996
90003d14:	b0009002 	imm	-28670
90003d18:	30c00bbc 	addik	r6, r0, 3004
90003d1c:	30e00014 	addik	r7, r0, 20
90003d20:	b0000000 	imm	0
90003d24:	b9f48700 	brlid	r15, -30976	// 9000c424 <printAssert>
90003d28:	80000000 	or	r0, r0, r0
90003d2c:	b8000000 	bri	0		// 90003d2c

90003d30 <motionInit>:
///////////////////////////////////////////////////
// Interface functions

void motionInit()
{
90003d30:	3021ffd8 	addik	r1, r1, -40
90003d34:	f9e10000 	swi	r15, r1, 0
90003d38:	fa610024 	swi	r19, r1, 36
90003d3c:	12610000 	addk	r19, r1, r0
    memset(&motionData, 0, sizeof(motionData));
90003d40:	b0009002 	imm	-28670
90003d44:	306040c4 	addik	r3, r0, 16580
90003d48:	30800d88 	addik	r4, r0, 3464
90003d4c:	10a30000 	addk	r5, r3, r0
90003d50:	10c00000 	addk	r6, r0, r0
90003d54:	10e40000 	addk	r7, r4, r0
90003d58:	b0000001 	imm	1
90003d5c:	b9f40274 	brlid	r15, 628	// 90013fd0 <memset>
90003d60:	80000000 	or	r0, r0, r0

    motionData.state = state_idle;
90003d64:	b0009002 	imm	-28670
90003d68:	f8004d74 	swi	r0, r0, 19828


    printf("\nMotion Init...\n");
90003d6c:	b0009002 	imm	-28670
90003d70:	30a00bc8 	addik	r5, r0, 3016
90003d74:	b0000000 	imm	0
90003d78:	b9f4c1c0 	brlid	r15, -15936	// 9000ff38 <puts>
90003d7c:	80000000 	or	r0, r0, r0

    motionRestoreDefaults();
90003d80:	b9f400e0 	brlid	r15, 224	// 90003e60 <motionRestoreDefaults>
90003d84:	80000000 	or	r0, r0, r0


    // Filter Init
    motionData.filter.initialized   = false;
90003d88:	b0009002 	imm	-28670
90003d8c:	f80040d8 	swi	r0, r0, 16600



    // Door Init
    int doorClosedPosition;

    if(doorClosedPosition < door_min_closed_position ||
90003d90:	e8730020 	lwi	r3, r19, 32
90003d94:	3240270f 	addik	r18, r0, 9999
90003d98:	16439001 	cmp	r18, r3, r18
90003d9c:	bcb20014 	bgei	r18, 20		// 90003db0
90003da0:	e8730020 	lwi	r3, r19, 32
90003da4:	32402ee0 	addik	r18, r0, 12000
90003da8:	16439001 	cmp	r18, r3, r18
90003dac:	bcb20020 	bgei	r18, 32		// 90003dcc
       doorClosedPosition > door_max_closed_position)
    {
        sendErrorMsg( err_deviceFault, "Error reading door closed position!" );
90003db0:	30a0000b 	addik	r5, r0, 11
90003db4:	b0009002 	imm	-28670
90003db8:	30c00bd8 	addik	r6, r0, 3032
90003dbc:	b9f4c668 	brlid	r15, -14744	// 90000424 <sendErrorMsg>
90003dc0:	80000000 	or	r0, r0, r0
        doorClosedPosition = door_default_closed_position;
90003dc4:	30602b5c 	addik	r3, r0, 11100
90003dc8:	f8730020 	swi	r3, r19, 32
    }

    motionData.door.initialized    = false;
90003dcc:	b0009002 	imm	-28670
90003dd0:	f8004d08 	swi	r0, r0, 19720
    motionData.door.disabled       = false;
90003dd4:	b0009002 	imm	-28670
90003dd8:	f8004d0c 	swi	r0, r0, 19724
    motionData.door.closedPosition = doorClosedPosition;
90003ddc:	e8730020 	lwi	r3, r19, 32
90003de0:	b0009002 	imm	-28670
90003de4:	f8604d10 	swi	r3, r0, 19728



    // Lid Init
    int lidCompressedPosition;

    if(lidCompressedPosition < lid_min_compressed_position ||
90003de8:	e873001c 	lwi	r3, r19, 28
90003dec:	32403e7f 	addik	r18, r0, 15999
90003df0:	16439001 	cmp	r18, r3, r18
90003df4:	bcb20014 	bgei	r18, 20		// 90003e08
90003df8:	e873001c 	lwi	r3, r19, 28
90003dfc:	32404a38 	addik	r18, r0, 19000
90003e00:	16439001 	cmp	r18, r3, r18
90003e04:	bcb20020 	bgei	r18, 32		// 90003e24
       lidCompressedPosition > lid_max_compressed_position)
    {
        sendErrorMsg( err_deviceFault, "Error reading lid PCR position!" );
90003e08:	30a0000b 	addik	r5, r0, 11
90003e0c:	b0009002 	imm	-28670
90003e10:	30c00bfc 	addik	r6, r0, 3068
90003e14:	b9f4c610 	brlid	r15, -14832	// 90000424 <sendErrorMsg>
90003e18:	80000000 	or	r0, r0, r0
        lidCompressedPosition = lid_default_compressed_position;
90003e1c:	30604268 	addik	r3, r0, 17000
90003e20:	f873001c 	swi	r3, r19, 28
    }

    motionData.lid.initialized        = false;
90003e24:	b0009002 	imm	-28670
90003e28:	f8004d34 	swi	r0, r0, 19764
    motionData.lid.compressedPosition = lidCompressedPosition;
90003e2c:	e873001c 	lwi	r3, r19, 28
90003e30:	b0009002 	imm	-28670
90003e34:	f8604d3c 	swi	r3, r0, 19772
    motionData.lid.plateType          = plateType_unknown;
90003e38:	b0009002 	imm	-28670
90003e3c:	f8004d64 	swi	r0, r0, 19812


    // Low-level Init
    stepper_init();
90003e40:	b9f469a0 	brlid	r15, 27040	// 9000a7e0 <stepper_init>
90003e44:	80000000 	or	r0, r0, r0
}
90003e48:	e9e10000 	lwi	r15, r1, 0
90003e4c:	10330000 	addk	r1, r19, r0
90003e50:	ea610024 	lwi	r19, r1, 36
90003e54:	30210028 	addik	r1, r1, 40
90003e58:	b60f0008 	rtsd	r15, 8
90003e5c:	80000000 	or	r0, r0, r0

90003e60 <motionRestoreDefaults>:


void motionRestoreDefaults(void)
{
90003e60:	3021fff8 	addik	r1, r1, -8
90003e64:	fa610004 	swi	r19, r1, 4
90003e68:	12610000 	addk	r19, r1, r0
    motionData.filter.slowFrequency = defaultSlowFrequency;
90003e6c:	30600064 	addik	r3, r0, 100
90003e70:	b0009002 	imm	-28670
90003e74:	f8604cfc 	swi	r3, r0, 19708
    motionData.filter.fastFrequency = defaultFastFrequency;
90003e78:	306005dc 	addik	r3, r0, 1500
90003e7c:	b0009002 	imm	-28670
90003e80:	f8604d00 	swi	r3, r0, 19712
    motionData.filter.rampSteps     = defaultRampSteps;
90003e84:	3060000a 	addik	r3, r0, 10
90003e88:	b0009002 	imm	-28670
90003e8c:	f8604d04 	swi	r3, r0, 19716

    motionData.door.slowFrequency   = defaultSlowFrequency;
90003e90:	30600064 	addik	r3, r0, 100
90003e94:	b0009002 	imm	-28670
90003e98:	f8604d28 	swi	r3, r0, 19752
    motionData.door.fastFrequency   = defaultFastFrequency;
90003e9c:	306005dc 	addik	r3, r0, 1500
90003ea0:	b0009002 	imm	-28670
90003ea4:	f8604d2c 	swi	r3, r0, 19756
    motionData.door.rampSteps       = defaultRampSteps;
90003ea8:	3060000a 	addik	r3, r0, 10
90003eac:	b0009002 	imm	-28670
90003eb0:	f8604d30 	swi	r3, r0, 19760

    motionData.lid.slowFrequency    = defaultSlowFrequency;
90003eb4:	30600064 	addik	r3, r0, 100
90003eb8:	b0009002 	imm	-28670
90003ebc:	f8604d68 	swi	r3, r0, 19816
    motionData.lid.fastFrequency    = defaultFastFrequency;
90003ec0:	306005dc 	addik	r3, r0, 1500
90003ec4:	b0009002 	imm	-28670
90003ec8:	f8604d6c 	swi	r3, r0, 19820
    motionData.lid.rampSteps        = defaultRampSteps;
90003ecc:	3060000a 	addik	r3, r0, 10
90003ed0:	b0009002 	imm	-28670
90003ed4:	f8604d70 	swi	r3, r0, 19824
}
90003ed8:	10330000 	addk	r1, r19, r0
90003edc:	ea610004 	lwi	r19, r1, 4
90003ee0:	30210008 	addik	r1, r1, 8
90003ee4:	b60f0008 	rtsd	r15, 8
90003ee8:	80000000 	or	r0, r0, r0

90003eec <motionAbort>:



void motionAbort()
{
90003eec:	3021ffe0 	addik	r1, r1, -32
90003ef0:	f9e10000 	swi	r15, r1, 0
90003ef4:	fa61001c 	swi	r19, r1, 28
90003ef8:	12610000 	addk	r19, r1, r0
    stepper_abort();
90003efc:	b9f46988 	brlid	r15, 27016	// 9000a884 <stepper_abort>
90003f00:	80000000 	or	r0, r0, r0
    motionData.state = state_aborting;
90003f04:	3060000c 	addik	r3, r0, 12
90003f08:	b0009002 	imm	-28670
90003f0c:	f8604d74 	swi	r3, r0, 19828
}
90003f10:	e9e10000 	lwi	r15, r1, 0
90003f14:	10330000 	addk	r1, r19, r0
90003f18:	ea61001c 	lwi	r19, r1, 28
90003f1c:	30210020 	addik	r1, r1, 32
90003f20:	b60f0008 	rtsd	r15, 8
90003f24:	80000000 	or	r0, r0, r0

90003f28 <motionInitFilter>:



bool motionInitFilter(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90003f28:	3021ffdc 	addik	r1, r1, -36
90003f2c:	f9e10000 	swi	r15, r1, 0
90003f30:	fa610020 	swi	r19, r1, 32
90003f34:	12610000 	addk	r19, r1, r0
90003f38:	f8b30028 	swi	r5, r19, 40
90003f3c:	f8d3002c 	swi	r6, r19, 44
    ASSERT(callbackFunc);
90003f40:	e8730028 	lwi	r3, r19, 40
90003f44:	bc23002c 	bnei	r3, 44		// 90003f70
90003f48:	94110002 	msrclr	r0, 2
90003f4c:	b0009002 	imm	-28670
90003f50:	30a00c1c 	addik	r5, r0, 3100
90003f54:	b0009002 	imm	-28670
90003f58:	30c00c2c 	addik	r6, r0, 3116
90003f5c:	30e00175 	addik	r7, r0, 373
90003f60:	b0000000 	imm	0
90003f64:	b9f484c0 	brlid	r15, -31552	// 9000c424 <printAssert>
90003f68:	80000000 	or	r0, r0, r0
90003f6c:	b8000000 	bri	0		// 90003f6c

    if(motionData.state == state_aborting)
90003f70:	b0009002 	imm	-28670
90003f74:	e8604d74 	lwi	r3, r0, 19828
90003f78:	aa43000c 	xori	r18, r3, 12
90003f7c:	bc320024 	bnei	r18, 36		// 90003fa0
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90003f80:	e8730028 	lwi	r3, r19, 40
90003f84:	e8b3002c 	lwi	r5, r19, 44
90003f88:	30c00006 	addik	r6, r0, 6
90003f8c:	b0009002 	imm	-28670
90003f90:	30e00c3c 	addik	r7, r0, 3132
90003f94:	99fc1800 	brald	r15, r3
90003f98:	80000000 	or	r0, r0, r0
90003f9c:	b8000038 	bri	56		// 90003fd4
    }
    else if(motionData.state != state_idle)
90003fa0:	b0009002 	imm	-28670
90003fa4:	e8604d74 	lwi	r3, r0, 19828
90003fa8:	bc03002c 	beqi	r3, 44		// 90003fd4
    {
        callbackFunc(callbackRef, err_filterInitializationFailure, "Can't init filter - steppers busy");
90003fac:	e8730028 	lwi	r3, r19, 40
90003fb0:	e8b3002c 	lwi	r5, r19, 44
90003fb4:	30c00010 	addik	r6, r0, 16	// 10 <_vector_interrupt>
90003fb8:	b0009002 	imm	-28670
90003fbc:	30e00c58 	addik	r7, r0, 3160
90003fc0:	99fc1800 	brald	r15, r3
90003fc4:	80000000 	or	r0, r0, r0
        return false;
90003fc8:	10600000 	addk	r3, r0, r0
90003fcc:	f873001c 	swi	r3, r19, 28
90003fd0:	b8000034 	bri	52		// 90004004
    }

    motionData.callback.function  = callbackFunc;
90003fd4:	e8730028 	lwi	r3, r19, 40
90003fd8:	b0009002 	imm	-28670
90003fdc:	f8604d78 	swi	r3, r0, 19832
    motionData.callback.reference = callbackRef;
90003fe0:	e873002c 	lwi	r3, r19, 44
90003fe4:	b0009002 	imm	-28670
90003fe8:	f8604d7c 	swi	r3, r0, 19836
    motionData.state = state_initializing;
90003fec:	30600001 	addik	r3, r0, 1
90003ff0:	b0009002 	imm	-28670
90003ff4:	f8604d74 	swi	r3, r0, 19828

    return filterInitStart();
90003ff8:	b9f42834 	brlid	r15, 10292	// 9000682c <filterInitStart>
90003ffc:	80000000 	or	r0, r0, r0
90004000:	f873001c 	swi	r3, r19, 28
90004004:	e873001c 	lwi	r3, r19, 28
}
90004008:	e9e10000 	lwi	r15, r1, 0
9000400c:	10330000 	addk	r1, r19, r0
90004010:	ea610020 	lwi	r19, r1, 32
90004014:	30210024 	addik	r1, r1, 36
90004018:	b60f0008 	rtsd	r15, 8
9000401c:	80000000 	or	r0, r0, r0

90004020 <motionInitLid>:



bool motionInitLid(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90004020:	3021ffdc 	addik	r1, r1, -36
90004024:	f9e10000 	swi	r15, r1, 0
90004028:	fa610020 	swi	r19, r1, 32
9000402c:	12610000 	addk	r19, r1, r0
90004030:	f8b30028 	swi	r5, r19, 40
90004034:	f8d3002c 	swi	r6, r19, 44
    ASSERT(callbackFunc);
90004038:	e8730028 	lwi	r3, r19, 40
9000403c:	bc23002c 	bnei	r3, 44		// 90004068
90004040:	94110002 	msrclr	r0, 2
90004044:	b0009002 	imm	-28670
90004048:	30a00c1c 	addik	r5, r0, 3100
9000404c:	b0009002 	imm	-28670
90004050:	30c00c2c 	addik	r6, r0, 3116
90004054:	30e0018c 	addik	r7, r0, 396
90004058:	b0000000 	imm	0
9000405c:	b9f483c8 	brlid	r15, -31800	// 9000c424 <printAssert>
90004060:	80000000 	or	r0, r0, r0
90004064:	b8000000 	bri	0		// 90004064

    if(motionData.state == state_aborting)
90004068:	b0009002 	imm	-28670
9000406c:	e8604d74 	lwi	r3, r0, 19828
90004070:	aa43000c 	xori	r18, r3, 12
90004074:	bc320024 	bnei	r18, 36		// 90004098
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90004078:	e8730028 	lwi	r3, r19, 40
9000407c:	e8b3002c 	lwi	r5, r19, 44
90004080:	30c00006 	addik	r6, r0, 6
90004084:	b0009002 	imm	-28670
90004088:	30e00c3c 	addik	r7, r0, 3132
9000408c:	99fc1800 	brald	r15, r3
90004090:	80000000 	or	r0, r0, r0
90004094:	b8000038 	bri	56		// 900040cc
    }
    else if(motionData.state != state_idle)
90004098:	b0009002 	imm	-28670
9000409c:	e8604d74 	lwi	r3, r0, 19828
900040a0:	bc03002c 	beqi	r3, 44		// 900040cc
    {
        callbackFunc(callbackRef, err_lidInitializationFailure, "Can't init lid - steppers busy");
900040a4:	e8730028 	lwi	r3, r19, 40
900040a8:	e8b3002c 	lwi	r5, r19, 44
900040ac:	30c00014 	addik	r6, r0, 20
900040b0:	b0009002 	imm	-28670
900040b4:	30e00c7c 	addik	r7, r0, 3196
900040b8:	99fc1800 	brald	r15, r3
900040bc:	80000000 	or	r0, r0, r0
        return false;
900040c0:	10600000 	addk	r3, r0, r0
900040c4:	f873001c 	swi	r3, r19, 28
900040c8:	b8000038 	bri	56		// 90004100
    }

    motionData.callback.function  = callbackFunc;
900040cc:	e8730028 	lwi	r3, r19, 40
900040d0:	b0009002 	imm	-28670
900040d4:	f8604d78 	swi	r3, r0, 19832
    motionData.callback.reference = callbackRef;
900040d8:	e873002c 	lwi	r3, r19, 44
900040dc:	b0009002 	imm	-28670
900040e0:	f8604d7c 	swi	r3, r0, 19836
    motionData.state = state_initializing;
900040e4:	30600001 	addik	r3, r0, 1
900040e8:	b0009002 	imm	-28670
900040ec:	f8604d74 	swi	r3, r0, 19828
    lidInitStart();
900040f0:	b9f42ef8 	brlid	r15, 12024	// 90006fe8 <lidInitStart>
900040f4:	80000000 	or	r0, r0, r0

    return true;
900040f8:	30600001 	addik	r3, r0, 1
900040fc:	f873001c 	swi	r3, r19, 28
90004100:	e873001c 	lwi	r3, r19, 28
}
90004104:	e9e10000 	lwi	r15, r1, 0
90004108:	10330000 	addk	r1, r19, r0
9000410c:	ea610020 	lwi	r19, r1, 32
90004110:	30210024 	addik	r1, r1, 36
90004114:	b60f0008 	rtsd	r15, 8
90004118:	80000000 	or	r0, r0, r0

9000411c <motionInitDoor>:



bool motionInitDoor(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
9000411c:	3021ffdc 	addik	r1, r1, -36
90004120:	f9e10000 	swi	r15, r1, 0
90004124:	fa610020 	swi	r19, r1, 32
90004128:	12610000 	addk	r19, r1, r0
9000412c:	f8b30028 	swi	r5, r19, 40
90004130:	f8d3002c 	swi	r6, r19, 44
    ASSERT(callbackFunc);
90004134:	e8730028 	lwi	r3, r19, 40
90004138:	bc23002c 	bnei	r3, 44		// 90004164
9000413c:	94110002 	msrclr	r0, 2
90004140:	b0009002 	imm	-28670
90004144:	30a00c1c 	addik	r5, r0, 3100
90004148:	b0009002 	imm	-28670
9000414c:	30c00c2c 	addik	r6, r0, 3116
90004150:	30e001a4 	addik	r7, r0, 420
90004154:	b0000000 	imm	0
90004158:	b9f482cc 	brlid	r15, -32052	// 9000c424 <printAssert>
9000415c:	80000000 	or	r0, r0, r0
90004160:	b8000000 	bri	0		// 90004160

    if(motionData.state == state_aborting)
90004164:	b0009002 	imm	-28670
90004168:	e8604d74 	lwi	r3, r0, 19828
9000416c:	aa43000c 	xori	r18, r3, 12
90004170:	bc320024 	bnei	r18, 36		// 90004194
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90004174:	e8730028 	lwi	r3, r19, 40
90004178:	e8b3002c 	lwi	r5, r19, 44
9000417c:	30c00006 	addik	r6, r0, 6
90004180:	b0009002 	imm	-28670
90004184:	30e00c3c 	addik	r7, r0, 3132
90004188:	99fc1800 	brald	r15, r3
9000418c:	80000000 	or	r0, r0, r0
90004190:	b8000038 	bri	56		// 900041c8
    }
    else if(motionData.state != state_idle)
90004194:	b0009002 	imm	-28670
90004198:	e8604d74 	lwi	r3, r0, 19828
9000419c:	bc03002c 	beqi	r3, 44		// 900041c8
    {
        callbackFunc(callbackRef, err_doorInitializationFailure, "Can't init door - steppers busy");
900041a0:	e8730028 	lwi	r3, r19, 40
900041a4:	e8b3002c 	lwi	r5, r19, 44
900041a8:	30c0001b 	addik	r6, r0, 27
900041ac:	b0009002 	imm	-28670
900041b0:	30e00c9c 	addik	r7, r0, 3228
900041b4:	99fc1800 	brald	r15, r3
900041b8:	80000000 	or	r0, r0, r0
        return false;
900041bc:	10600000 	addk	r3, r0, r0
900041c0:	f873001c 	swi	r3, r19, 28
900041c4:	b8000034 	bri	52		// 900041f8
    }

    motionData.callback.function  = callbackFunc;
900041c8:	e8730028 	lwi	r3, r19, 40
900041cc:	b0009002 	imm	-28670
900041d0:	f8604d78 	swi	r3, r0, 19832
    motionData.callback.reference = callbackRef;
900041d4:	e873002c 	lwi	r3, r19, 44
900041d8:	b0009002 	imm	-28670
900041dc:	f8604d7c 	swi	r3, r0, 19836
    motionData.state = state_initializing;
900041e0:	30600001 	addik	r3, r0, 1
900041e4:	b0009002 	imm	-28670
900041e8:	f8604d74 	swi	r3, r0, 19828
    return doorInitStart();
900041ec:	b9f439e4 	brlid	r15, 14820	// 90007bd0 <doorInitStart>
900041f0:	80000000 	or	r0, r0, r0
900041f4:	f873001c 	swi	r3, r19, 28
900041f8:	e873001c 	lwi	r3, r19, 28
}
900041fc:	e9e10000 	lwi	r15, r1, 0
90004200:	10330000 	addk	r1, r19, r0
90004204:	ea610020 	lwi	r19, r1, 32
90004208:	30210024 	addik	r1, r1, 36
9000420c:	b60f0008 	rtsd	r15, 8
90004210:	80000000 	or	r0, r0, r0

90004214 <motionProcess>:



bool motionProcess(void* unused)
{
90004214:	3021ffd0 	addik	r1, r1, -48
90004218:	f9e10000 	swi	r15, r1, 0
9000421c:	fa61002c 	swi	r19, r1, 44
90004220:	12610000 	addk	r19, r1, r0
90004224:	f8b30034 	swi	r5, r19, 52
    // Handle special state cases first
    if(motionData.state == state_idle)
90004228:	b0009002 	imm	-28670
9000422c:	e8604d74 	lwi	r3, r0, 19828
90004230:	bc230010 	bnei	r3, 16		// 90004240
    {
        motionData.callback.function = NULL;
90004234:	b0009002 	imm	-28670
90004238:	f8004d78 	swi	r0, r0, 19832
9000423c:	b8000560 	bri	1376		// 9000479c
    }
    else if(motionData.state == state_initializing)
90004240:	b0009002 	imm	-28670
90004244:	e8604d74 	lwi	r3, r0, 19828
90004248:	aa430001 	xori	r18, r3, 1
9000424c:	bc32001c 	bnei	r18, 28		// 90004268
    {
        if(initProcess())
90004250:	b9f41e94 	brlid	r15, 7828	// 900060e4 <initProcess>
90004254:	80000000 	or	r0, r0, r0
90004258:	bc030544 	beqi	r3, 1348		// 9000479c
        {
            motionData.state = state_idle;
9000425c:	b0009002 	imm	-28670
90004260:	f8004d74 	swi	r0, r0, 19828
90004264:	b8000538 	bri	1336		// 9000479c
        }
    }
    else if(!stepper_busy())
90004268:	b9f46968 	brlid	r15, 26984	// 9000abd0 <stepper_busy>
9000426c:	80000000 	or	r0, r0, r0
90004270:	bc23052c 	bnei	r3, 1324		// 9000479c
    {
        switch(motionData.state)
90004274:	b0009002 	imm	-28670
90004278:	e8604d74 	lwi	r3, r0, 19828
9000427c:	f8730028 	swi	r3, r19, 40
90004280:	e8730028 	lwi	r3, r19, 40
90004284:	22400011 	addi	r18, r0, 17
90004288:	16439003 	cmpu	r18, r3, r18
9000428c:	bc5204e8 	blti	r18, 1256		// 90004774
90004290:	e8730028 	lwi	r3, r19, 40
90004294:	64830402 	bslli	r4, r3, 2
90004298:	b0009002 	imm	-28670
9000429c:	30600de8 	addik	r3, r0, 3560
900042a0:	10641800 	addk	r3, r4, r3
900042a4:	e8630000 	lwi	r3, r3, 0
900042a8:	98081800 	bra	r3
        {
        case state_settingFilter:
            finishMotorMove(err_noError, NULL);
900042ac:	10a00000 	addk	r5, r0, r0
900042b0:	10c00000 	addk	r6, r0, r0
900042b4:	b9f41cec 	brlid	r15, 7404	// 90005fa0 <finishMotorMove>
900042b8:	80000000 	or	r0, r0, r0
            break;
900042bc:	b80004e0 	bri	1248		// 9000479c

        case state_closingDoor:
        case state_closingCavityDoor:
            // Fall through - Handle these states together
            if(!verifyDoorPosition(motionData.door.closedPosition))
900042c0:	b0009002 	imm	-28670
900042c4:	e8604d10 	lwi	r3, r0, 19728
900042c8:	10a30000 	addk	r5, r3, r0
900042cc:	b9f41954 	brlid	r15, 6484	// 90005c20 <verifyDoorPosition>
900042d0:	80000000 	or	r0, r0, r0
900042d4:	bc230020 	bnei	r3, 32		// 900042f4
            {
                disableAndFinishMotorMove(stepperF, err_doorCloseFailure, "Door not closed");
900042d8:	30a00001 	addik	r5, r0, 1
900042dc:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
900042e0:	b0009002 	imm	-28670
900042e4:	30e00cbc 	addik	r7, r0, 3260
900042e8:	b9f41c5c 	brlid	r15, 7260	// 90005f44 <disableAndFinishMotorMove>
900042ec:	80000000 	or	r0, r0, r0
900042f0:	b80004ac 	bri	1196		// 9000479c
            }
            else if(!verifyDoorClosedSensor())
900042f4:	b9f41a40 	brlid	r15, 6720	// 90005d34 <verifyDoorClosedSensor>
900042f8:	80000000 	or	r0, r0, r0
900042fc:	bc230020 	bnei	r3, 32		// 9000431c
            {
                disableAndFinishMotorMove(stepperF, err_doorCloseFailure, "Door closed sensor failed");
90004300:	30a00001 	addik	r5, r0, 1
90004304:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
90004308:	b0009002 	imm	-28670
9000430c:	30e00ccc 	addik	r7, r0, 3276
90004310:	b9f41c34 	brlid	r15, 7220	// 90005f44 <disableAndFinishMotorMove>
90004314:	80000000 	or	r0, r0, r0
90004318:	b8000484 	bri	1156		// 9000479c
            }
            else if(stepper_is_at_home_position(stepperF))
9000431c:	30a00001 	addik	r5, r0, 1
90004320:	b9f470a0 	brlid	r15, 28832	// 9000b3c0 <stepper_is_at_home_position>
90004324:	80000000 	or	r0, r0, r0
90004328:	bc030020 	beqi	r3, 32		// 90004348
            {
                disableAndFinishMotorMove(stepperF, err_doorCloseFailure, "Door closed but open sensor also triggered");
9000432c:	30a00001 	addik	r5, r0, 1
90004330:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
90004334:	b0009002 	imm	-28670
90004338:	30e00ce8 	addik	r7, r0, 3304
9000433c:	b9f41c08 	brlid	r15, 7176	// 90005f44 <disableAndFinishMotorMove>
90004340:	80000000 	or	r0, r0, r0
90004344:	b8000458 	bri	1112		// 9000479c
            }
            else
            {
                if(motionData.state == state_closingDoor)
90004348:	b0009002 	imm	-28670
9000434c:	e8604d74 	lwi	r3, r0, 19828
90004350:	aa430004 	xori	r18, r3, 4
90004354:	bc320018 	bnei	r18, 24		// 9000436c
                {
                    finishMotorMove(err_noError, NULL);
90004358:	10a00000 	addk	r5, r0, r0
9000435c:	10c00000 	addk	r6, r0, r0
90004360:	b9f41c40 	brlid	r15, 7232	// 90005fa0 <finishMotorMove>
90004364:	80000000 	or	r0, r0, r0
90004368:	b8000434 	bri	1076		// 9000479c
                }
                else
                {
                    if(startLowerLid())
9000436c:	b9f430ec 	brlid	r15, 12524	// 90007458 <startLowerLid>
90004370:	80000000 	or	r0, r0, r0
90004374:	bc030014 	beqi	r3, 20		// 90004388
                    {
                        motionData.state = state_closingCavityLid;
90004378:	3060000a 	addik	r3, r0, 10
9000437c:	b0009002 	imm	-28670
90004380:	f8604d74 	swi	r3, r0, 19828
90004384:	b8000418 	bri	1048		// 9000479c
                    }
                    else
                    {
                        finishMotorMove(err_lidCannotMoveStepperBusy, "Stepper system busy");
90004388:	30a00017 	addik	r5, r0, 23
9000438c:	b0009002 	imm	-28670
90004390:	30c00d14 	addik	r6, r0, 3348
90004394:	b9f41c0c 	brlid	r15, 7180	// 90005fa0 <finishMotorMove>
90004398:	80000000 	or	r0, r0, r0
                    }
                }
            }
            break;
9000439c:	b8000400 	bri	1024		// 9000479c

        case state_openingDoor:
        case state_openingCavityDoor:
            // Fall through - Handle these states the same
            if(!verifyDoorOpenedSensor())
900043a0:	b9f41908 	brlid	r15, 6408	// 90005ca8 <verifyDoorOpenedSensor>
900043a4:	80000000 	or	r0, r0, r0
900043a8:	bc230020 	bnei	r3, 32		// 900043c8
            {
                disableAndFinishMotorMove(stepperF, err_doorOpenFailure, "Door open sensor failed");
900043ac:	30a00001 	addik	r5, r0, 1
900043b0:	30c0001f 	addik	r6, r0, 31
900043b4:	b0009002 	imm	-28670
900043b8:	30e00d28 	addik	r7, r0, 3368
900043bc:	b9f41b88 	brlid	r15, 7048	// 90005f44 <disableAndFinishMotorMove>
900043c0:	80000000 	or	r0, r0, r0
900043c4:	b80003d8 	bri	984		// 9000479c
            }
            else if(stepper_is_at_alt_position(stepperF))
900043c8:	30a00001 	addik	r5, r0, 1
900043cc:	b9f47090 	brlid	r15, 28816	// 9000b45c <stepper_is_at_alt_position>
900043d0:	80000000 	or	r0, r0, r0
900043d4:	bc030020 	beqi	r3, 32		// 900043f4
            {
                disableAndFinishMotorMove(stepperF, err_doorOpenFailure, "Door open but closed sensor also triggered");
900043d8:	30a00001 	addik	r5, r0, 1
900043dc:	30c0001f 	addik	r6, r0, 31
900043e0:	b0009002 	imm	-28670
900043e4:	30e00d40 	addik	r7, r0, 3392
900043e8:	b9f41b5c 	brlid	r15, 7004	// 90005f44 <disableAndFinishMotorMove>
900043ec:	80000000 	or	r0, r0, r0
900043f0:	b80003ac 	bri	940		// 9000479c
            }
            else
            {
                finishMotorMove(err_noError, NULL);
900043f4:	10a00000 	addk	r5, r0, r0
900043f8:	10c00000 	addk	r6, r0, r0
900043fc:	b9f41ba4 	brlid	r15, 7076	// 90005fa0 <finishMotorMove>
90004400:	80000000 	or	r0, r0, r0
            }
            break;
90004404:	b8000398 	bri	920		// 9000479c

        case state_raisingLid:
            if(!verifyLidRaisedSensors())
90004408:	b9f419c8 	brlid	r15, 6600	// 90005dd0 <verifyLidRaisedSensors>
9000440c:	80000000 	or	r0, r0, r0
90004410:	bc23001c 	bnei	r3, 28		// 9000442c
            {
                finishMotorMove(err_lidRaiseFailure, "Lid raise not detected");
90004414:	30a00018 	addik	r5, r0, 24
90004418:	b0009002 	imm	-28670
9000441c:	30c00d6c 	addik	r6, r0, 3436
90004420:	b9f41b80 	brlid	r15, 7040	// 90005fa0 <finishMotorMove>
90004424:	80000000 	or	r0, r0, r0
90004428:	b8000374 	bri	884		// 9000479c
            }
            else
            {
                finishMotorMove(err_noError, NULL);
9000442c:	10a00000 	addk	r5, r0, r0
90004430:	10c00000 	addk	r6, r0, r0
90004434:	b9f41b6c 	brlid	r15, 7020	// 90005fa0 <finishMotorMove>
90004438:	80000000 	or	r0, r0, r0
            }
            break;
9000443c:	b8000360 	bri	864		// 9000479c

        case state_loweringLid:
        case state_closingCavityLid:
            // Fall through - Handle these states the same
            if(motionData.lid.loweringState == lidLoweringState_lowering)
90004440:	b0009002 	imm	-28670
90004444:	e8604d38 	lwi	r3, r0, 19768
90004448:	bc230028 	bnei	r3, 40		// 90004470
            {
                if(!startCompressLid())
9000444c:	b9f431cc 	brlid	r15, 12748	// 90007618 <startCompressLid>
90004450:	80000000 	or	r0, r0, r0
90004454:	bc230348 	bnei	r3, 840		// 9000479c
                {
                    finishMotorMove(err_lidLowerFailure, "Compress lid failed");
90004458:	30a00019 	addik	r5, r0, 25
9000445c:	b0009002 	imm	-28670
90004460:	30c00d84 	addik	r6, r0, 3460
90004464:	b9f41b3c 	brlid	r15, 6972	// 90005fa0 <finishMotorMove>
90004468:	80000000 	or	r0, r0, r0
9000446c:	b8000330 	bri	816		// 9000479c
                }
            }
            else
            {
                if(!verifyLidLoweredSensors())
90004470:	b9f419ec 	brlid	r15, 6636	// 90005e5c <verifyLidLoweredSensors>
90004474:	80000000 	or	r0, r0, r0
90004478:	bc23001c 	bnei	r3, 28		// 90004494
                {
                    finishMotorMove(err_lidLowerFailure, "Lid lower not detected");
9000447c:	30a00019 	addik	r5, r0, 25
90004480:	b0009002 	imm	-28670
90004484:	30c00d98 	addik	r6, r0, 3480
90004488:	b9f41b18 	brlid	r15, 6936	// 90005fa0 <finishMotorMove>
9000448c:	80000000 	or	r0, r0, r0
90004490:	b800030c 	bri	780		// 9000479c
                }
                else
                {
                    finishMotorMove(err_noError, getPlateTypeName());
90004494:	b9f416f8 	brlid	r15, 5880	// 90005b8c <getPlateTypeName>
90004498:	80000000 	or	r0, r0, r0
9000449c:	10a00000 	addk	r5, r0, r0
900044a0:	10c30000 	addk	r6, r3, r0
900044a4:	b9f41afc 	brlid	r15, 6908	// 90005fa0 <finishMotorMove>
900044a8:	80000000 	or	r0, r0, r0
                }
            }
            break;
900044ac:	b80002f0 	bri	752		// 9000479c

        case state_openingCavityLid:
            if(!verifyLidPosition(lid_raised_position))
900044b0:	10a00000 	addk	r5, r0, r0
900044b4:	b9f417b0 	brlid	r15, 6064	// 90005c64 <verifyLidPosition>
900044b8:	80000000 	or	r0, r0, r0
900044bc:	bc23001c 	bnei	r3, 28		// 900044d8
            {
                finishMotorMove(err_lidRaiseFailure, "Lid not raised");
900044c0:	30a00018 	addik	r5, r0, 24
900044c4:	b0009002 	imm	-28670
900044c8:	30c00db0 	addik	r6, r0, 3504
900044cc:	b9f41ad4 	brlid	r15, 6868	// 90005fa0 <finishMotorMove>
900044d0:	80000000 	or	r0, r0, r0
900044d4:	b80002c8 	bri	712		// 9000479c
            }
            else if(!verifyLidRaisedSensors())
900044d8:	b9f418f8 	brlid	r15, 6392	// 90005dd0 <verifyLidRaisedSensors>
900044dc:	80000000 	or	r0, r0, r0
900044e0:	bc23001c 	bnei	r3, 28		// 900044fc
            {
                finishMotorMove(err_lidRaiseFailure, "Lid raised sensor failed");
900044e4:	30a00018 	addik	r5, r0, 24
900044e8:	b0009002 	imm	-28670
900044ec:	30c00dc0 	addik	r6, r0, 3520
900044f0:	b9f41ab0 	brlid	r15, 6832	// 90005fa0 <finishMotorMove>
900044f4:	80000000 	or	r0, r0, r0
900044f8:	b80002a4 	bri	676		// 9000479c
            }
            else if(startOpenDoor())
900044fc:	b9f43980 	brlid	r15, 14720	// 90007e7c <startOpenDoor>
90004500:	80000000 	or	r0, r0, r0
90004504:	bc030014 	beqi	r3, 20		// 90004518
            {
                motionData.state = state_openingCavityDoor;
90004508:	30600007 	addik	r3, r0, 7
9000450c:	b0009002 	imm	-28670
90004510:	f8604d74 	swi	r3, r0, 19828
90004514:	b8000288 	bri	648		// 9000479c
            }
            else
            {
                finishMotorMove(err_doorCannotMoveStepperBusy, "Stepper system busy");
90004518:	30a0001e 	addik	r5, r0, 30
9000451c:	b0009002 	imm	-28670
90004520:	30c00d14 	addik	r6, r0, 3348
90004524:	b9f41a7c 	brlid	r15, 6780	// 90005fa0 <finishMotorMove>
90004528:	80000000 	or	r0, r0, r0
            }
            break;
9000452c:	b8000270 	bri	624		// 9000479c

        case state_error:
            finishMotorMove(motionData.error, motionData.errorDesc);
90004530:	b0009002 	imm	-28670
90004534:	e8604d80 	lwi	r3, r0, 19840
90004538:	10a30000 	addk	r5, r3, r0
9000453c:	b0009002 	imm	-28670
90004540:	30c04d84 	addik	r6, r0, 19844
90004544:	b9f41a5c 	brlid	r15, 6748	// 90005fa0 <finishMotorMove>
90004548:	80000000 	or	r0, r0, r0
            break;
9000454c:	b8000250 	bri	592		// 9000479c

        case state_aborting:
            motionData.state = state_idle;
90004550:	b0009002 	imm	-28670
90004554:	f8004d74 	swi	r0, r0, 19828
            break;
90004558:	b8000244 	bri	580		// 9000479c

        case state_actuatingArmIn:
            if(timerExpired(&armMotionData.actuateTimer))
9000455c:	b0009002 	imm	-28670
90004560:	30a04e70 	addik	r5, r0, 20080
90004564:	b9f479f0 	brlid	r15, 31216	// 9000bf54 <timerExpired>
90004568:	80000000 	or	r0, r0, r0
9000456c:	bc030230 	beqi	r3, 560		// 9000479c
            {
                motionData.state = state_armActuatedIn;
90004570:	3060000e 	addik	r3, r0, 14
90004574:	b0009002 	imm	-28670
90004578:	f8604d74 	swi	r3, r0, 19828
            }
            break;
9000457c:	b8000220 	bri	544		// 9000479c

        case state_armActuatedIn:
            switch(armMotionData.turnSize)
90004580:	b0009002 	imm	-28670
90004584:	e8604e50 	lwi	r3, r0, 20048
90004588:	f8730024 	swi	r3, r19, 36
9000458c:	e8730024 	lwi	r3, r19, 36
90004590:	bc030030 	beqi	r3, 48		// 900045c0
90004594:	e8730024 	lwi	r3, r19, 36
90004598:	aa430001 	xori	r18, r3, 1
9000459c:	bc120008 	beqi	r18, 8		// 900045a4
900045a0:	b8000078 	bri	120		// 90004618
            {
                case turn_half:
                    stepper_move_relative(armMotionData.motor, halfTurnSteps);
900045a4:	b0009002 	imm	-28670
900045a8:	e8604e4c 	lwi	r3, r0, 20044
900045ac:	10a30000 	addk	r5, r3, r0
900045b0:	30c000c8 	addik	r6, r0, 200
900045b4:	b9f46864 	brlid	r15, 26724	// 9000ae18 <stepper_move_relative>
900045b8:	80000000 	or	r0, r0, r0
                    break;
900045bc:	b800005c 	bri	92		// 90004618

                case turn_quarter:
                    switch(armMotionData.direction)
900045c0:	b0009002 	imm	-28670
900045c4:	e8604e54 	lwi	r3, r0, 20052
900045c8:	f8730020 	swi	r3, r19, 32
900045cc:	e8730020 	lwi	r3, r19, 32
900045d0:	bc030014 	beqi	r3, 20		// 900045e4
900045d4:	e8730020 	lwi	r3, r19, 32
900045d8:	aa430001 	xori	r18, r3, 1
900045dc:	bc120024 	beqi	r18, 36		// 90004600
900045e0:	b8000038 	bri	56		// 90004618
                    {
                        case rotation_clockwise:
                            stepper_move_relative(armMotionData.motor, quarterTurnStepsClockwise);
900045e4:	b0009002 	imm	-28670
900045e8:	e8604e4c 	lwi	r3, r0, 20044
900045ec:	10a30000 	addk	r5, r3, r0
900045f0:	30c00064 	addik	r6, r0, 100
900045f4:	b9f46824 	brlid	r15, 26660	// 9000ae18 <stepper_move_relative>
900045f8:	80000000 	or	r0, r0, r0
                            break;
900045fc:	b800001c 	bri	28		// 90004618

                        case rotation_counterClockwise:
                            stepper_move_relative(armMotionData.motor, quarterTurnStepsCounterClockwise);
90004600:	b0009002 	imm	-28670
90004604:	e8604e4c 	lwi	r3, r0, 20044
90004608:	10a30000 	addk	r5, r3, r0
9000460c:	30c0ff9c 	addik	r6, r0, -100
90004610:	b9f46808 	brlid	r15, 26632	// 9000ae18 <stepper_move_relative>
90004614:	80000000 	or	r0, r0, r0
                            break;
                    }    
                    break;  
            }
            motionData.state = state_armSpinning;
90004618:	3060000f 	addik	r3, r0, 15
9000461c:	b0009002 	imm	-28670
90004620:	f8604d74 	swi	r3, r0, 19828
            break;
90004624:	b8000178 	bri	376		// 9000479c

        case state_armSpinning:
            if(!stepper_busy())
90004628:	b9f465a8 	brlid	r15, 26024	// 9000abd0 <stepper_busy>
9000462c:	80000000 	or	r0, r0, r0
90004630:	bc23016c 	bnei	r3, 364		// 9000479c
                motionData.state = state_armDoneSpinning;
90004634:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
90004638:	b0009002 	imm	-28670
9000463c:	f8604d74 	swi	r3, r0, 19828
            break;
90004640:	b800015c 	bri	348		// 9000479c

        case state_armDoneSpinning:
            ActuateArmsOut();
90004644:	b9f44950 	brlid	r15, 18768	// 90008f94 <ActuateArmsOut>
90004648:	80000000 	or	r0, r0, r0
            startTimer(&armMotionData.actuateTimer, MSEC_TO_TICKS(actuateTimeout_ms));
9000464c:	b0009002 	imm	-28670
90004650:	30a04e70 	addik	r5, r0, 20080
90004654:	30c00000 	addik	r6, r0, 0
90004658:	b00003f9 	imm	1017
9000465c:	30e03e10 	addik	r7, r0, 15888
90004660:	b9f47890 	brlid	r15, 30864	// 9000bef0 <startTimer>
90004664:	80000000 	or	r0, r0, r0
            motionData.state = state_actuatingArmOut;
90004668:	30600011 	addik	r3, r0, 17
9000466c:	b0009002 	imm	-28670
90004670:	f8604d74 	swi	r3, r0, 19828
            break;            
90004674:	b8000128 	bri	296		// 9000479c

        case state_actuatingArmOut:
            if(timerExpired(&armMotionData.actuateTimer))
90004678:	b0009002 	imm	-28670
9000467c:	30a04e70 	addik	r5, r0, 20080
90004680:	b9f478d4 	brlid	r15, 30932	// 9000bf54 <timerExpired>
90004684:	80000000 	or	r0, r0, r0
90004688:	bc030114 	beqi	r3, 276		// 9000479c
            {
                if(armMotionData.currentRotation < armMotionData.totalRotations)
9000468c:	b0009002 	imm	-28670
90004690:	e8804e5c 	lwi	r4, r0, 20060
90004694:	b0009002 	imm	-28670
90004698:	e8604e58 	lwi	r3, r0, 20056
9000469c:	16432001 	cmp	r18, r3, r4
900046a0:	bcb2008c 	bgei	r18, 140		// 9000472c
                {            
                        switch(armMotionData.motor)
900046a4:	b0009002 	imm	-28670
900046a8:	e8604e4c 	lwi	r3, r0, 20044
900046ac:	f873001c 	swi	r3, r19, 28
900046b0:	e873001c 	lwi	r3, r19, 28
900046b4:	aa430001 	xori	r18, r3, 1
900046b8:	bc120034 	beqi	r18, 52		// 900046ec
900046bc:	e873001c 	lwi	r3, r19, 28
900046c0:	22400001 	addi	r18, r0, 1
900046c4:	16521803 	cmpu	r18, r18, r3
900046c8:	bc520014 	blti	r18, 20		// 900046dc
900046cc:	e873001c 	lwi	r3, r19, 28
900046d0:	aa430002 	xori	r18, r3, 2
900046d4:	bc120028 	beqi	r18, 40		// 900046fc
900046d8:	b8000030 	bri	48		// 90004708
                        {
                            case stepperU:
                                ActuateArmIn('U');
900046dc:	30a00055 	addik	r5, r0, 85
900046e0:	b9f447c4 	brlid	r15, 18372	// 90008ea4 <ActuateArmIn>
900046e4:	80000000 	or	r0, r0, r0
                                break;
900046e8:	b8000020 	bri	32		// 90004708

                            case stepperF:
                                ActuateArmIn('F');
900046ec:	30a00046 	addik	r5, r0, 70
900046f0:	b9f447b4 	brlid	r15, 18356	// 90008ea4 <ActuateArmIn>
900046f4:	80000000 	or	r0, r0, r0
                                break;
900046f8:	b8000010 	bri	16		// 90004708

                            case stepperR:
                                ActuateArmIn('R');
900046fc:	30a00052 	addik	r5, r0, 82
90004700:	b9f447a4 	brlid	r15, 18340	// 90008ea4 <ActuateArmIn>
90004704:	80000000 	or	r0, r0, r0
                                break;

                            default:
                                break;
                        }

                        motionData.state = state_actuatingArmIn;
90004708:	3060000d 	addik	r3, r0, 13
9000470c:	b0009002 	imm	-28670
90004710:	f8604d74 	swi	r3, r0, 19828
                        armMotionData.currentRotation++;
90004714:	b0009002 	imm	-28670
90004718:	e8604e5c 	lwi	r3, r0, 20060
9000471c:	30630001 	addik	r3, r3, 1
90004720:	b0009002 	imm	-28670
90004724:	f8604e5c 	swi	r3, r0, 20060
90004728:	b8000074 	bri	116		// 9000479c
                }
                else
                {
                    printf("%d\n", (int)getTimer_ms(&armMotionData.timer));
9000472c:	b0009002 	imm	-28670
90004730:	30a04e60 	addik	r5, r0, 20064
90004734:	b9f478d0 	brlid	r15, 30928	// 9000c004 <getTimer_ms>
90004738:	80000000 	or	r0, r0, r0
9000473c:	10a40000 	addk	r5, r4, r0
90004740:	10830000 	addk	r4, r3, r0
90004744:	10650000 	addk	r3, r5, r0
90004748:	b0009002 	imm	-28670
9000474c:	30a00ddc 	addik	r5, r0, 3548
90004750:	10c30000 	addk	r6, r3, r0
90004754:	b0000000 	imm	0
90004758:	b9f4b6ec 	brlid	r15, -18708	// 9000fe44 <printf>
9000475c:	80000000 	or	r0, r0, r0
                    disableMotors();
90004760:	b9f46048 	brlid	r15, 24648	// 9000a7a8 <disableMotors>
90004764:	80000000 	or	r0, r0, r0
                    motionData.state = state_idle;
90004768:	b0009002 	imm	-28670
9000476c:	f8004d74 	swi	r0, r0, 19828
                }
            }
            break;
90004770:	b800002c 	bri	44		// 9000479c

        default:
            ASSERT(false);
90004774:	94110002 	msrclr	r0, 2
90004778:	b0009002 	imm	-28670
9000477c:	30a00de0 	addik	r5, r0, 3552
90004780:	b0009002 	imm	-28670
90004784:	30c00c2c 	addik	r6, r0, 3116
90004788:	30e0028c 	addik	r7, r0, 652
9000478c:	b0000000 	imm	0
90004790:	b9f47c94 	brlid	r15, 31892	// 9000c424 <printAssert>
90004794:	80000000 	or	r0, r0, r0
90004798:	b8000000 	bri	0		// 90004798
        }
    }

    return true;
9000479c:	30600001 	addik	r3, r0, 1
}
900047a0:	e9e10000 	lwi	r15, r1, 0
900047a4:	10330000 	addk	r1, r19, r0
900047a8:	ea61002c 	lwi	r19, r1, 44
900047ac:	30210030 	addik	r1, r1, 48
900047b0:	b60f0008 	rtsd	r15, 8
900047b4:	80000000 	or	r0, r0, r0

900047b8 <getFilterPosition>:



Filters getFilterPosition()
{
900047b8:	3021ffd4 	addik	r1, r1, -44
900047bc:	f9e10000 	swi	r15, r1, 0
900047c0:	fa610028 	swi	r19, r1, 40
900047c4:	12610000 	addk	r19, r1, r0
    if(!motionData.filter.initialized)
900047c8:	b0009002 	imm	-28670
900047cc:	e86040d8 	lwi	r3, r0, 16600
900047d0:	bc230010 	bnei	r3, 16		// 900047e0
    {
        return filter_unknownPosition;
900047d4:	30600007 	addik	r3, r0, 7
900047d8:	f8730024 	swi	r3, r19, 36
900047dc:	b800008c 	bri	140		// 90004868
    }

    if(motionData.state == state_settingFilter)
900047e0:	b0009002 	imm	-28670
900047e4:	e8604d74 	lwi	r3, r0, 19828
900047e8:	aa430002 	xori	r18, r3, 2
900047ec:	bc320010 	bnei	r18, 16		// 900047fc
    {
        return filter_moving;
900047f0:	30600006 	addik	r3, r0, 6
900047f4:	f8730024 	swi	r3, r19, 36
900047f8:	b8000070 	bri	112		// 90004868
    }

    int pos = get_stepper_position(stepperR);
900047fc:	30a00002 	addik	r5, r0, 2
90004800:	b9f46d18 	brlid	r15, 27928	// 9000b518 <get_stepper_position>
90004804:	80000000 	or	r0, r0, r0
90004808:	f8730020 	swi	r3, r19, 32

    int filter;
    for(filter = 0; filter < num_filters; filter++)
9000480c:	f813001c 	swi	r0, r19, 28
90004810:	b8000040 	bri	64		// 90004850
    {
        if(pos == motionData.filter.filterPositions[filter])
90004814:	e873001c 	lwi	r3, r19, 28
90004818:	64830402 	bslli	r4, r3, 2
9000481c:	b0009002 	imm	-28670
90004820:	306040e0 	addik	r3, r0, 16608
90004824:	10641800 	addk	r3, r4, r3
90004828:	e8830000 	lwi	r4, r3, 0
9000482c:	e8730020 	lwi	r3, r19, 32
90004830:	16432000 	rsubk	r18, r3, r4
90004834:	bc320010 	bnei	r18, 16		// 90004844
        {
            return (Filters)filter;
90004838:	e873001c 	lwi	r3, r19, 28
9000483c:	f8730024 	swi	r3, r19, 36
90004840:	b8000028 	bri	40		// 90004868
90004844:	e873001c 	lwi	r3, r19, 28
90004848:	30630001 	addik	r3, r3, 1
9000484c:	f873001c 	swi	r3, r19, 28
90004850:	e873001c 	lwi	r3, r19, 28
90004854:	32400005 	addik	r18, r0, 5
90004858:	16439001 	cmp	r18, r3, r18
9000485c:	bcb2ffb8 	bgei	r18, -72		// 90004814
        }
    }

    return filter_unknownPosition;
90004860:	30600007 	addik	r3, r0, 7
90004864:	f8730024 	swi	r3, r19, 36
90004868:	e8730024 	lwi	r3, r19, 36
}
9000486c:	e9e10000 	lwi	r15, r1, 0
90004870:	10330000 	addk	r1, r19, r0
90004874:	ea610028 	lwi	r19, r1, 40
90004878:	3021002c 	addik	r1, r1, 44
9000487c:	b60f0008 	rtsd	r15, 8
90004880:	80000000 	or	r0, r0, r0

90004884 <setFilter>:



void setFilter(Filters filter, OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90004884:	3021ff18 	addik	r1, r1, -232
90004888:	f9e10000 	swi	r15, r1, 0
9000488c:	fa6100e4 	swi	r19, r1, 228
90004890:	12610000 	addk	r19, r1, r0
90004894:	f8b300ec 	swi	r5, r19, 236
90004898:	f8d300f0 	swi	r6, r19, 240
9000489c:	f8f300f4 	swi	r7, r19, 244
    ASSERT(filter < (Filters)num_filters);
900048a0:	e87300ec 	lwi	r3, r19, 236
900048a4:	22400005 	addi	r18, r0, 5
900048a8:	16439003 	cmpu	r18, r3, r18
900048ac:	bcb2002c 	bgei	r18, 44		// 900048d8
900048b0:	94110002 	msrclr	r0, 2
900048b4:	b0009002 	imm	-28670
900048b8:	30a00e30 	addik	r5, r0, 3632
900048bc:	b0009002 	imm	-28670
900048c0:	30c00c2c 	addik	r6, r0, 3116
900048c4:	30e002b3 	addik	r7, r0, 691
900048c8:	b0000000 	imm	0
900048cc:	b9f47b58 	brlid	r15, 31576	// 9000c424 <printAssert>
900048d0:	80000000 	or	r0, r0, r0
900048d4:	b8000000 	bri	0		// 900048d4
    ASSERT(callbackFunc);
900048d8:	e87300f0 	lwi	r3, r19, 240
900048dc:	bc23002c 	bnei	r3, 44		// 90004908
900048e0:	94110002 	msrclr	r0, 2
900048e4:	b0009002 	imm	-28670
900048e8:	30a00c1c 	addik	r5, r0, 3100
900048ec:	b0009002 	imm	-28670
900048f0:	30c00c2c 	addik	r6, r0, 3116
900048f4:	30e002b4 	addik	r7, r0, 692
900048f8:	b0000000 	imm	0
900048fc:	b9f47b28 	brlid	r15, 31528	// 9000c424 <printAssert>
90004900:	80000000 	or	r0, r0, r0
90004904:	b8000000 	bri	0		// 90004904

    if(!motionData.filter.initialized || motionData.filter.filterPositions[filter] == invalid_position)
90004908:	b0009002 	imm	-28670
9000490c:	e86040d8 	lwi	r3, r0, 16600
90004910:	bc030028 	beqi	r3, 40		// 90004938
90004914:	e87300ec 	lwi	r3, r19, 236
90004918:	64830402 	bslli	r4, r3, 2
9000491c:	b0009002 	imm	-28670
90004920:	306040e0 	addik	r3, r0, 16608
90004924:	10641800 	addk	r3, r4, r3
90004928:	e8630000 	lwi	r3, r3, 0
9000492c:	b0007fff 	imm	32767
90004930:	aa43ffff 	xori	r18, r3, -1
90004934:	bc320058 	bnei	r18, 88		// 9000498c
    {
        char errorDesc[ERROR_DESC_SIZE];

        snprintf(errorDesc, ERROR_DESC_SIZE, "Filter can't move.  Filter is not initialized.");
90004938:	3073001c 	addik	r3, r19, 28
9000493c:	10a30000 	addk	r5, r3, r0
90004940:	30c000c8 	addik	r6, r0, 200
90004944:	b0009002 	imm	-28670
90004948:	30e00e50 	addik	r7, r0, 3664
9000494c:	b0000000 	imm	0
90004950:	b9f4f8d8 	brlid	r15, -1832	// 90014228 <snprintf>
90004954:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_filterNotInitialized, errorDesc);
90004958:	e89300f0 	lwi	r4, r19, 240
9000495c:	e8b300f4 	lwi	r5, r19, 244
90004960:	30c0000f 	addik	r6, r0, 15
90004964:	3073001c 	addik	r3, r19, 28
90004968:	10e30000 	addk	r7, r3, r0
9000496c:	99fc2000 	brald	r15, r4
90004970:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004974:	3073001c 	addik	r3, r19, 28
90004978:	10a30000 	addk	r5, r3, r0
9000497c:	b0000000 	imm	0
90004980:	b9f4b5b8 	brlid	r15, -19016	// 9000ff38 <puts>
90004984:	80000000 	or	r0, r0, r0
        return;
90004988:	b800010c 	bri	268		// 90004a94
    }

    stepper_set_parameter(stepperR, stepperSlowFrequency, motionData.filter.slowFrequency);
9000498c:	b0009002 	imm	-28670
90004990:	e8604cfc 	lwi	r3, r0, 19708
90004994:	30a00002 	addik	r5, r0, 2
90004998:	30c00001 	addik	r6, r0, 1
9000499c:	10e30000 	addk	r7, r3, r0
900049a0:	b9f46040 	brlid	r15, 24640	// 9000a9e0 <stepper_set_parameter>
900049a4:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperFastFrequency, motionData.filter.fastFrequency);
900049a8:	b0009002 	imm	-28670
900049ac:	e8604d00 	lwi	r3, r0, 19712
900049b0:	30a00002 	addik	r5, r0, 2
900049b4:	10c00000 	addk	r6, r0, r0
900049b8:	10e30000 	addk	r7, r3, r0
900049bc:	b9f46024 	brlid	r15, 24612	// 9000a9e0 <stepper_set_parameter>
900049c0:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperRampSteps,  motionData.filter.rampSteps);
900049c4:	b0009002 	imm	-28670
900049c8:	e8604d04 	lwi	r3, r0, 19716
900049cc:	30a00002 	addik	r5, r0, 2
900049d0:	30c00002 	addik	r6, r0, 2
900049d4:	10e30000 	addk	r7, r3, r0
900049d8:	b9f46008 	brlid	r15, 24584	// 9000a9e0 <stepper_set_parameter>
900049dc:	80000000 	or	r0, r0, r0

    if(motionData.state == state_aborting)
900049e0:	b0009002 	imm	-28670
900049e4:	e8604d74 	lwi	r3, r0, 19828
900049e8:	aa43000c 	xori	r18, r3, 12
900049ec:	bc320024 	bnei	r18, 36		// 90004a10
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
900049f0:	e87300f0 	lwi	r3, r19, 240
900049f4:	e8b300f4 	lwi	r5, r19, 244
900049f8:	30c00006 	addik	r6, r0, 6
900049fc:	b0009002 	imm	-28670
90004a00:	30e00c3c 	addik	r7, r0, 3132
90004a04:	99fc1800 	brald	r15, r3
90004a08:	80000000 	or	r0, r0, r0
90004a0c:	b8000088 	bri	136		// 90004a94
    }
    else if(stepper_move_to_position(stepperR, motionData.filter.filterPositions[filter]))
90004a10:	e87300ec 	lwi	r3, r19, 236
90004a14:	64830402 	bslli	r4, r3, 2
90004a18:	b0009002 	imm	-28670
90004a1c:	306040e0 	addik	r3, r0, 16608
90004a20:	10641800 	addk	r3, r4, r3
90004a24:	e8630000 	lwi	r3, r3, 0
90004a28:	30a00002 	addik	r5, r0, 2
90004a2c:	10c30000 	addk	r6, r3, r0
90004a30:	b9f46480 	brlid	r15, 25728	// 9000aeb0 <stepper_move_to_position>
90004a34:	80000000 	or	r0, r0, r0
90004a38:	bc030040 	beqi	r3, 64		// 90004a78
    {
        motionData.callback.function  = callbackFunc;
90004a3c:	e87300f0 	lwi	r3, r19, 240
90004a40:	b0009002 	imm	-28670
90004a44:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
90004a48:	e87300f4 	lwi	r3, r19, 244
90004a4c:	b0009002 	imm	-28670
90004a50:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_settingFilter;
90004a54:	30600002 	addik	r3, r0, 2
90004a58:	b0009002 	imm	-28670
90004a5c:	f8604d74 	swi	r3, r0, 19828
        printf("Moving Filter...\n");
90004a60:	b0009002 	imm	-28670
90004a64:	30a00e80 	addik	r5, r0, 3712
90004a68:	b0000000 	imm	0
90004a6c:	b9f4b4cc 	brlid	r15, -19252	// 9000ff38 <puts>
90004a70:	80000000 	or	r0, r0, r0
90004a74:	b8000020 	bri	32		// 90004a94
    }
    else
    {
        callbackFunc(callbackRef, err_filterCannotMoveStepperBusy, "Can't move filter.");
90004a78:	e87300f0 	lwi	r3, r19, 240
90004a7c:	e8b300f4 	lwi	r5, r19, 244
90004a80:	30c00011 	addik	r6, r0, 17
90004a84:	b0009002 	imm	-28670
90004a88:	30e00e94 	addik	r7, r0, 3732
90004a8c:	99fc1800 	brald	r15, r3
90004a90:	80000000 	or	r0, r0, r0
    }
}
90004a94:	e9e10000 	lwi	r15, r1, 0
90004a98:	10330000 	addk	r1, r19, r0
90004a9c:	ea6100e4 	lwi	r19, r1, 228
90004aa0:	302100e8 	addik	r1, r1, 232
90004aa4:	b60f0008 	rtsd	r15, 8
90004aa8:	80000000 	or	r0, r0, r0

90004aac <getDoorPosition>:



DoorPosition getDoorPosition()
{
90004aac:	3021ffdc 	addik	r1, r1, -36
90004ab0:	f9e10000 	swi	r15, r1, 0
90004ab4:	fa610020 	swi	r19, r1, 32
90004ab8:	12610000 	addk	r19, r1, r0
    if(!motionData.door.initialized)
90004abc:	b0009002 	imm	-28670
90004ac0:	e8604d08 	lwi	r3, r0, 19720
90004ac4:	bc230010 	bnei	r3, 16		// 90004ad4
    {
        return door_unknownPosition;
90004ac8:	30600004 	addik	r3, r0, 4
90004acc:	f873001c 	swi	r3, r19, 28
90004ad0:	b80000ac 	bri	172		// 90004b7c
    }

    if(motionData.state == state_openingDoor ||
90004ad4:	b0009002 	imm	-28670
90004ad8:	e8604d74 	lwi	r3, r0, 19828
90004adc:	aa430003 	xori	r18, r3, 3
90004ae0:	bc120014 	beqi	r18, 20		// 90004af4
90004ae4:	b0009002 	imm	-28670
90004ae8:	e8604d74 	lwi	r3, r0, 19828
90004aec:	aa430007 	xori	r18, r3, 7
90004af0:	bc320010 	bnei	r18, 16		// 90004b00
       motionData.state == state_openingCavityDoor)
    {
        return door_opening;
90004af4:	30600002 	addik	r3, r0, 2
90004af8:	f873001c 	swi	r3, r19, 28
90004afc:	b8000080 	bri	128		// 90004b7c
    }

    if(motionData.state == state_closingDoor ||
90004b00:	b0009002 	imm	-28670
90004b04:	e8604d74 	lwi	r3, r0, 19828
90004b08:	aa430004 	xori	r18, r3, 4
90004b0c:	bc120014 	beqi	r18, 20		// 90004b20
90004b10:	b0009002 	imm	-28670
90004b14:	e8604d74 	lwi	r3, r0, 19828
90004b18:	aa430009 	xori	r18, r3, 9
90004b1c:	bc320010 	bnei	r18, 16		// 90004b2c
       motionData.state == state_closingCavityDoor)
    {
        return door_closing;
90004b20:	30600003 	addik	r3, r0, 3
90004b24:	f873001c 	swi	r3, r19, 28
90004b28:	b8000054 	bri	84		// 90004b7c
    }

    if(get_stepper_position(stepperF) == motionData.door.closedPosition)
90004b2c:	30a00001 	addik	r5, r0, 1
90004b30:	b9f469e8 	brlid	r15, 27112	// 9000b518 <get_stepper_position>
90004b34:	80000000 	or	r0, r0, r0
90004b38:	10830000 	addk	r4, r3, r0
90004b3c:	b0009002 	imm	-28670
90004b40:	e8604d10 	lwi	r3, r0, 19728
90004b44:	16432000 	rsubk	r18, r3, r4
90004b48:	bc320010 	bnei	r18, 16		// 90004b58
    {
        return door_closed;
90004b4c:	30600001 	addik	r3, r0, 1
90004b50:	f873001c 	swi	r3, r19, 28
90004b54:	b8000028 	bri	40		// 90004b7c
    }

    if(get_stepper_position(stepperF) == door_open_position)
90004b58:	30a00001 	addik	r5, r0, 1
90004b5c:	b9f469bc 	brlid	r15, 27068	// 9000b518 <get_stepper_position>
90004b60:	80000000 	or	r0, r0, r0
90004b64:	bc230010 	bnei	r3, 16		// 90004b74
    {
        return door_opened;
90004b68:	10600000 	addk	r3, r0, r0
90004b6c:	f873001c 	swi	r3, r19, 28
90004b70:	b800000c 	bri	12		// 90004b7c
    }

    return door_unknownPosition;
90004b74:	30600004 	addik	r3, r0, 4
90004b78:	f873001c 	swi	r3, r19, 28
90004b7c:	e873001c 	lwi	r3, r19, 28
}
90004b80:	e9e10000 	lwi	r15, r1, 0
90004b84:	10330000 	addk	r1, r19, r0
90004b88:	ea610020 	lwi	r19, r1, 32
90004b8c:	30210024 	addik	r1, r1, 36
90004b90:	b60f0008 	rtsd	r15, 8
90004b94:	80000000 	or	r0, r0, r0

90004b98 <openDoor>:



void openDoor(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90004b98:	3021ff14 	addik	r1, r1, -236
90004b9c:	f9e10000 	swi	r15, r1, 0
90004ba0:	fa6100e4 	swi	r19, r1, 228
90004ba4:	fac100e8 	swi	r22, r1, 232
90004ba8:	12610000 	addk	r19, r1, r0
90004bac:	f8b300f0 	swi	r5, r19, 240
90004bb0:	f8d300f4 	swi	r6, r19, 244
    ASSERT(callbackFunc);
90004bb4:	e87300f0 	lwi	r3, r19, 240
90004bb8:	bc230028 	bnei	r3, 40		// 90004be0
90004bbc:	94110002 	msrclr	r0, 2
90004bc0:	b0009002 	imm	-28670
90004bc4:	30a00c1c 	addik	r5, r0, 3100
90004bc8:	b0009002 	imm	-28670
90004bcc:	30c00c2c 	addik	r6, r0, 3116
90004bd0:	30e002fb 	addik	r7, r0, 763
90004bd4:	b9f47850 	brlid	r15, 30800	// 9000c424 <printAssert>
90004bd8:	80000000 	or	r0, r0, r0
90004bdc:	b8000000 	bri	0		// 90004bdc

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.door.initialized)
90004be0:	b0009002 	imm	-28670
90004be4:	e8604d08 	lwi	r3, r0, 19720
90004be8:	bc230058 	bnei	r3, 88		// 90004c40
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Door can't open.  Door not initialized.");
90004bec:	3073001c 	addik	r3, r19, 28
90004bf0:	10a30000 	addk	r5, r3, r0
90004bf4:	30c000c8 	addik	r6, r0, 200
90004bf8:	b0009002 	imm	-28670
90004bfc:	30e00ea8 	addik	r7, r0, 3752
90004c00:	b0000000 	imm	0
90004c04:	b9f4f624 	brlid	r15, -2524	// 90014228 <snprintf>
90004c08:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorNotInitialized, errorDesc);
90004c0c:	e89300f0 	lwi	r4, r19, 240
90004c10:	e8b300f4 	lwi	r5, r19, 244
90004c14:	30c0001a 	addik	r6, r0, 26
90004c18:	3073001c 	addik	r3, r19, 28
90004c1c:	10e30000 	addk	r7, r3, r0
90004c20:	99fc2000 	brald	r15, r4
90004c24:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004c28:	3073001c 	addik	r3, r19, 28
90004c2c:	10a30000 	addk	r5, r3, r0
90004c30:	b0000000 	imm	0
90004c34:	b9f4b304 	brlid	r15, -19708	// 9000ff38 <puts>
90004c38:	80000000 	or	r0, r0, r0
        return;
90004c3c:	b80001a0 	bri	416		// 90004ddc
    }

    if(!motionData.lid.initialized)
90004c40:	b0009002 	imm	-28670
90004c44:	e8604d34 	lwi	r3, r0, 19764
90004c48:	bc230058 	bnei	r3, 88		// 90004ca0
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Door can't open.  Lid is not initialized.");
90004c4c:	3073001c 	addik	r3, r19, 28
90004c50:	10a30000 	addk	r5, r3, r0
90004c54:	30c000c8 	addik	r6, r0, 200
90004c58:	b0009002 	imm	-28670
90004c5c:	30e00ed0 	addik	r7, r0, 3792
90004c60:	b0000000 	imm	0
90004c64:	b9f4f5c4 	brlid	r15, -2620	// 90014228 <snprintf>
90004c68:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorCannotMoveLidNotInitialized, errorDesc);
90004c6c:	e89300f0 	lwi	r4, r19, 240
90004c70:	e8b300f4 	lwi	r5, r19, 244
90004c74:	30c0001c 	addik	r6, r0, 28
90004c78:	3073001c 	addik	r3, r19, 28
90004c7c:	10e30000 	addk	r7, r3, r0
90004c80:	99fc2000 	brald	r15, r4
90004c84:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004c88:	3073001c 	addik	r3, r19, 28
90004c8c:	10a30000 	addk	r5, r3, r0
90004c90:	b0000000 	imm	0
90004c94:	b9f4b2a4 	brlid	r15, -19804	// 9000ff38 <puts>
90004c98:	80000000 	or	r0, r0, r0
        return;
90004c9c:	b8000140 	bri	320		// 90004ddc
    }

    if(get_stepper_position(stepperU) != lid_raised_position ||
90004ca0:	10a00000 	addk	r5, r0, r0
90004ca4:	b9f46874 	brlid	r15, 26740	// 9000b518 <get_stepper_position>
90004ca8:	80000000 	or	r0, r0, r0
90004cac:	bc230014 	bnei	r3, 20		// 90004cc0
90004cb0:	10a00000 	addk	r5, r0, r0
90004cb4:	b9f4670c 	brlid	r15, 26380	// 9000b3c0 <stepper_is_at_home_position>
90004cb8:	80000000 	or	r0, r0, r0
90004cbc:	bc230080 	bnei	r3, 128		// 90004d3c
       !stepper_is_at_home_position(stepperU))
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Door can't open.  Lid is not raised (pos = %d, home sensor = %d)",
90004cc0:	10a00000 	addk	r5, r0, r0
90004cc4:	b9f46854 	brlid	r15, 26708	// 9000b518 <get_stepper_position>
90004cc8:	80000000 	or	r0, r0, r0
90004ccc:	12c30000 	addk	r22, r3, r0
90004cd0:	10a00000 	addk	r5, r0, r0
90004cd4:	b9f466ec 	brlid	r15, 26348	// 9000b3c0 <stepper_is_at_home_position>
90004cd8:	80000000 	or	r0, r0, r0
90004cdc:	10830000 	addk	r4, r3, r0
90004ce0:	3073001c 	addik	r3, r19, 28
90004ce4:	10a30000 	addk	r5, r3, r0
90004ce8:	30c000c8 	addik	r6, r0, 200
90004cec:	b0009002 	imm	-28670
90004cf0:	30e00efc 	addik	r7, r0, 3836
90004cf4:	11160000 	addk	r8, r22, r0
90004cf8:	11240000 	addk	r9, r4, r0
90004cfc:	b0000000 	imm	0
90004d00:	b9f4f528 	brlid	r15, -2776	// 90014228 <snprintf>
90004d04:	80000000 	or	r0, r0, r0
                 get_stepper_position(stepperU), stepper_is_at_home_position(stepperU));
        callbackFunc(callbackRef, err_doorCannotMoveLidNotRaised, errorDesc);
90004d08:	e89300f0 	lwi	r4, r19, 240
90004d0c:	e8b300f4 	lwi	r5, r19, 244
90004d10:	30c0001d 	addik	r6, r0, 29
90004d14:	3073001c 	addik	r3, r19, 28
90004d18:	10e30000 	addk	r7, r3, r0
90004d1c:	99fc2000 	brald	r15, r4
90004d20:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004d24:	3073001c 	addik	r3, r19, 28
90004d28:	10a30000 	addk	r5, r3, r0
90004d2c:	b0000000 	imm	0
90004d30:	b9f4b208 	brlid	r15, -19960	// 9000ff38 <puts>
90004d34:	80000000 	or	r0, r0, r0
        return;
90004d38:	b80000a4 	bri	164		// 90004ddc
    }

    if(motionData.state == state_aborting)
90004d3c:	b0009002 	imm	-28670
90004d40:	e8604d74 	lwi	r3, r0, 19828
90004d44:	aa43000c 	xori	r18, r3, 12
90004d48:	bc320024 	bnei	r18, 36		// 90004d6c
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90004d4c:	e87300f0 	lwi	r3, r19, 240
90004d50:	e8b300f4 	lwi	r5, r19, 244
90004d54:	30c00006 	addik	r6, r0, 6
90004d58:	b0009002 	imm	-28670
90004d5c:	30e00c3c 	addik	r7, r0, 3132
90004d60:	99fc1800 	brald	r15, r3
90004d64:	80000000 	or	r0, r0, r0
90004d68:	b8000074 	bri	116		// 90004ddc
    }
    else if(motionData.state == state_idle && startOpenDoor())
90004d6c:	b0009002 	imm	-28670
90004d70:	e8604d74 	lwi	r3, r0, 19828
90004d74:	bc23004c 	bnei	r3, 76		// 90004dc0
90004d78:	b9f43104 	brlid	r15, 12548	// 90007e7c <startOpenDoor>
90004d7c:	80000000 	or	r0, r0, r0
90004d80:	bc030040 	beqi	r3, 64		// 90004dc0
    {
        motionData.callback.function  = callbackFunc;
90004d84:	e87300f0 	lwi	r3, r19, 240
90004d88:	b0009002 	imm	-28670
90004d8c:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
90004d90:	e87300f4 	lwi	r3, r19, 244
90004d94:	b0009002 	imm	-28670
90004d98:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_openingDoor;
90004d9c:	30600003 	addik	r3, r0, 3
90004da0:	b0009002 	imm	-28670
90004da4:	f8604d74 	swi	r3, r0, 19828
        printf("Opening Door...\n");
90004da8:	b0009002 	imm	-28670
90004dac:	30a00f40 	addik	r5, r0, 3904
90004db0:	b0000000 	imm	0
90004db4:	b9f4b184 	brlid	r15, -20092	// 9000ff38 <puts>
90004db8:	80000000 	or	r0, r0, r0
90004dbc:	b8000020 	bri	32		// 90004ddc
    }
    else
    {
        callbackFunc(callbackRef, err_doorCannotMoveStepperBusy, "Can't open door.");
90004dc0:	e87300f0 	lwi	r3, r19, 240
90004dc4:	e8b300f4 	lwi	r5, r19, 244
90004dc8:	30c0001e 	addik	r6, r0, 30
90004dcc:	b0009002 	imm	-28670
90004dd0:	30e00f50 	addik	r7, r0, 3920
90004dd4:	99fc1800 	brald	r15, r3
90004dd8:	80000000 	or	r0, r0, r0
    }
}
90004ddc:	e9e10000 	lwi	r15, r1, 0
90004de0:	10330000 	addk	r1, r19, r0
90004de4:	ea6100e4 	lwi	r19, r1, 228
90004de8:	eac100e8 	lwi	r22, r1, 232
90004dec:	302100ec 	addik	r1, r1, 236
90004df0:	b60f0008 	rtsd	r15, 8
90004df4:	80000000 	or	r0, r0, r0

90004df8 <closeDoor>:



void closeDoor(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90004df8:	3021ff18 	addik	r1, r1, -232
90004dfc:	f9e10000 	swi	r15, r1, 0
90004e00:	fa6100e4 	swi	r19, r1, 228
90004e04:	12610000 	addk	r19, r1, r0
90004e08:	f8b300ec 	swi	r5, r19, 236
90004e0c:	f8d300f0 	swi	r6, r19, 240
    ASSERT(callbackFunc);
90004e10:	e87300ec 	lwi	r3, r19, 236
90004e14:	bc230028 	bnei	r3, 40		// 90004e3c
90004e18:	94110002 	msrclr	r0, 2
90004e1c:	b0009002 	imm	-28670
90004e20:	30a00c1c 	addik	r5, r0, 3100
90004e24:	b0009002 	imm	-28670
90004e28:	30c00c2c 	addik	r6, r0, 3116
90004e2c:	30e0032e 	addik	r7, r0, 814
90004e30:	b9f475f4 	brlid	r15, 30196	// 9000c424 <printAssert>
90004e34:	80000000 	or	r0, r0, r0
90004e38:	b8000000 	bri	0		// 90004e38

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.door.initialized)
90004e3c:	b0009002 	imm	-28670
90004e40:	e8604d08 	lwi	r3, r0, 19720
90004e44:	bc230058 	bnei	r3, 88		// 90004e9c
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Door can't close.  Door not initialized.");
90004e48:	3073001c 	addik	r3, r19, 28
90004e4c:	10a30000 	addk	r5, r3, r0
90004e50:	30c000c8 	addik	r6, r0, 200
90004e54:	b0009002 	imm	-28670
90004e58:	30e00f64 	addik	r7, r0, 3940
90004e5c:	b0000000 	imm	0
90004e60:	b9f4f3c8 	brlid	r15, -3128	// 90014228 <snprintf>
90004e64:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorNotInitialized, errorDesc);
90004e68:	e89300ec 	lwi	r4, r19, 236
90004e6c:	e8b300f0 	lwi	r5, r19, 240
90004e70:	30c0001a 	addik	r6, r0, 26
90004e74:	3073001c 	addik	r3, r19, 28
90004e78:	10e30000 	addk	r7, r3, r0
90004e7c:	99fc2000 	brald	r15, r4
90004e80:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004e84:	3073001c 	addik	r3, r19, 28
90004e88:	10a30000 	addk	r5, r3, r0
90004e8c:	b0000000 	imm	0
90004e90:	b9f4b0a8 	brlid	r15, -20312	// 9000ff38 <puts>
90004e94:	80000000 	or	r0, r0, r0
        return;
90004e98:	b8000104 	bri	260		// 90004f9c
    }

    if(!motionData.lid.initialized)
90004e9c:	b0009002 	imm	-28670
90004ea0:	e8604d34 	lwi	r3, r0, 19764
90004ea4:	bc230058 	bnei	r3, 88		// 90004efc
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Door can't close.  Lid is not initialized.");
90004ea8:	3073001c 	addik	r3, r19, 28
90004eac:	10a30000 	addk	r5, r3, r0
90004eb0:	30c000c8 	addik	r6, r0, 200
90004eb4:	b0009002 	imm	-28670
90004eb8:	30e00f90 	addik	r7, r0, 3984
90004ebc:	b0000000 	imm	0
90004ec0:	b9f4f368 	brlid	r15, -3224	// 90014228 <snprintf>
90004ec4:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorCannotMoveLidNotInitialized, errorDesc);
90004ec8:	e89300ec 	lwi	r4, r19, 236
90004ecc:	e8b300f0 	lwi	r5, r19, 240
90004ed0:	30c0001c 	addik	r6, r0, 28
90004ed4:	3073001c 	addik	r3, r19, 28
90004ed8:	10e30000 	addk	r7, r3, r0
90004edc:	99fc2000 	brald	r15, r4
90004ee0:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90004ee4:	3073001c 	addik	r3, r19, 28
90004ee8:	10a30000 	addk	r5, r3, r0
90004eec:	b0000000 	imm	0
90004ef0:	b9f4b048 	brlid	r15, -20408	// 9000ff38 <puts>
90004ef4:	80000000 	or	r0, r0, r0
        return;
90004ef8:	b80000a4 	bri	164		// 90004f9c
    }

    if(motionData.state == state_aborting)
90004efc:	b0009002 	imm	-28670
90004f00:	e8604d74 	lwi	r3, r0, 19828
90004f04:	aa43000c 	xori	r18, r3, 12
90004f08:	bc320024 	bnei	r18, 36		// 90004f2c
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90004f0c:	e87300ec 	lwi	r3, r19, 236
90004f10:	e8b300f0 	lwi	r5, r19, 240
90004f14:	30c00006 	addik	r6, r0, 6
90004f18:	b0009002 	imm	-28670
90004f1c:	30e00c3c 	addik	r7, r0, 3132
90004f20:	99fc1800 	brald	r15, r3
90004f24:	80000000 	or	r0, r0, r0
90004f28:	b8000074 	bri	116		// 90004f9c
    }
    else if(motionData.state == state_idle && startCloseDoor())
90004f2c:	b0009002 	imm	-28670
90004f30:	e8604d74 	lwi	r3, r0, 19828
90004f34:	bc23004c 	bnei	r3, 76		// 90004f80
90004f38:	b9f43050 	brlid	r15, 12368	// 90007f88 <startCloseDoor>
90004f3c:	80000000 	or	r0, r0, r0
90004f40:	bc030040 	beqi	r3, 64		// 90004f80
    {
        motionData.callback.function  = callbackFunc;
90004f44:	e87300ec 	lwi	r3, r19, 236
90004f48:	b0009002 	imm	-28670
90004f4c:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
90004f50:	e87300f0 	lwi	r3, r19, 240
90004f54:	b0009002 	imm	-28670
90004f58:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_closingDoor;
90004f5c:	30600004 	addik	r3, r0, 4
90004f60:	b0009002 	imm	-28670
90004f64:	f8604d74 	swi	r3, r0, 19828
        printf("Closing Door...\n");
90004f68:	b0009002 	imm	-28670
90004f6c:	30a00fbc 	addik	r5, r0, 4028
90004f70:	b0000000 	imm	0
90004f74:	b9f4afc4 	brlid	r15, -20540	// 9000ff38 <puts>
90004f78:	80000000 	or	r0, r0, r0
90004f7c:	b8000020 	bri	32		// 90004f9c
    }
    else
    {
        callbackFunc(callbackRef, err_doorCannotMoveStepperBusy, "Can't close door.");
90004f80:	e87300ec 	lwi	r3, r19, 236
90004f84:	e8b300f0 	lwi	r5, r19, 240
90004f88:	30c0001e 	addik	r6, r0, 30
90004f8c:	b0009002 	imm	-28670
90004f90:	30e00fcc 	addik	r7, r0, 4044
90004f94:	99fc1800 	brald	r15, r3
90004f98:	80000000 	or	r0, r0, r0
    }
}
90004f9c:	e9e10000 	lwi	r15, r1, 0
90004fa0:	10330000 	addk	r1, r19, r0
90004fa4:	ea6100e4 	lwi	r19, r1, 228
90004fa8:	302100e8 	addik	r1, r1, 232
90004fac:	b60f0008 	rtsd	r15, 8
90004fb0:	80000000 	or	r0, r0, r0

90004fb4 <getLidPosition>:




LidPosition  getLidPosition()
{
90004fb4:	3021ffdc 	addik	r1, r1, -36
90004fb8:	f9e10000 	swi	r15, r1, 0
90004fbc:	fa610020 	swi	r19, r1, 32
90004fc0:	12610000 	addk	r19, r1, r0
    if(!motionData.lid.initialized)
90004fc4:	b0009002 	imm	-28670
90004fc8:	e8604d34 	lwi	r3, r0, 19764
90004fcc:	bc230010 	bnei	r3, 16		// 90004fdc
    {
        return lid_unknownPosition;
90004fd0:	30600004 	addik	r3, r0, 4
90004fd4:	f873001c 	swi	r3, r19, 28
90004fd8:	b80000ac 	bri	172		// 90005084
    }

    if(motionData.state == state_raisingLid ||
90004fdc:	b0009002 	imm	-28670
90004fe0:	e8604d74 	lwi	r3, r0, 19828
90004fe4:	aa430005 	xori	r18, r3, 5
90004fe8:	bc120014 	beqi	r18, 20		// 90004ffc
90004fec:	b0009002 	imm	-28670
90004ff0:	e8604d74 	lwi	r3, r0, 19828
90004ff4:	aa430008 	xori	r18, r3, 8
90004ff8:	bc320010 	bnei	r18, 16		// 90005008
       motionData.state == state_openingCavityLid)
    {
        return lid_raising;
90004ffc:	30600002 	addik	r3, r0, 2
90005000:	f873001c 	swi	r3, r19, 28
90005004:	b8000080 	bri	128		// 90005084
    }

    if(motionData.state == state_loweringLid ||
90005008:	b0009002 	imm	-28670
9000500c:	e8604d74 	lwi	r3, r0, 19828
90005010:	aa430006 	xori	r18, r3, 6
90005014:	bc120014 	beqi	r18, 20		// 90005028
90005018:	b0009002 	imm	-28670
9000501c:	e8604d74 	lwi	r3, r0, 19828
90005020:	aa43000a 	xori	r18, r3, 10
90005024:	bc320010 	bnei	r18, 16		// 90005034
       motionData.state == state_closingCavityLid)
    {
        return lid_lowering;
90005028:	30600003 	addik	r3, r0, 3
9000502c:	f873001c 	swi	r3, r19, 28
90005030:	b8000054 	bri	84		// 90005084
    }

    if(get_stepper_position(stepperU) == motionData.lid.compressedPosition)
90005034:	10a00000 	addk	r5, r0, r0
90005038:	b9f464e0 	brlid	r15, 25824	// 9000b518 <get_stepper_position>
9000503c:	80000000 	or	r0, r0, r0
90005040:	10830000 	addk	r4, r3, r0
90005044:	b0009002 	imm	-28670
90005048:	e8604d3c 	lwi	r3, r0, 19772
9000504c:	16432000 	rsubk	r18, r3, r4
90005050:	bc320010 	bnei	r18, 16		// 90005060
    {
        return lid_lowered;
90005054:	30600001 	addik	r3, r0, 1
90005058:	f873001c 	swi	r3, r19, 28
9000505c:	b8000028 	bri	40		// 90005084
    }

    if(get_stepper_position(stepperU) == lid_raised_position)
90005060:	10a00000 	addk	r5, r0, r0
90005064:	b9f464b4 	brlid	r15, 25780	// 9000b518 <get_stepper_position>
90005068:	80000000 	or	r0, r0, r0
9000506c:	bc230010 	bnei	r3, 16		// 9000507c
    {
        return lid_raised;
90005070:	10600000 	addk	r3, r0, r0
90005074:	f873001c 	swi	r3, r19, 28
90005078:	b800000c 	bri	12		// 90005084
    }

    return lid_unknownPosition;
9000507c:	30600004 	addik	r3, r0, 4
90005080:	f873001c 	swi	r3, r19, 28
90005084:	e873001c 	lwi	r3, r19, 28
}
90005088:	e9e10000 	lwi	r15, r1, 0
9000508c:	10330000 	addk	r1, r19, r0
90005090:	ea610020 	lwi	r19, r1, 32
90005094:	30210024 	addik	r1, r1, 36
90005098:	b60f0008 	rtsd	r15, 8
9000509c:	80000000 	or	r0, r0, r0

900050a0 <raiseLid>:



void raiseLid(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
900050a0:	3021ff18 	addik	r1, r1, -232
900050a4:	f9e10000 	swi	r15, r1, 0
900050a8:	fa6100e4 	swi	r19, r1, 228
900050ac:	12610000 	addk	r19, r1, r0
900050b0:	f8b300ec 	swi	r5, r19, 236
900050b4:	f8d300f0 	swi	r6, r19, 240
    ASSERT(callbackFunc);
900050b8:	e87300ec 	lwi	r3, r19, 236
900050bc:	bc230028 	bnei	r3, 40		// 900050e4
900050c0:	94110002 	msrclr	r0, 2
900050c4:	b0009002 	imm	-28670
900050c8:	30a00c1c 	addik	r5, r0, 3100
900050cc:	b0009002 	imm	-28670
900050d0:	30c00c2c 	addik	r6, r0, 3116
900050d4:	30e0037a 	addik	r7, r0, 890
900050d8:	b9f4734c 	brlid	r15, 29516	// 9000c424 <printAssert>
900050dc:	80000000 	or	r0, r0, r0
900050e0:	b8000000 	bri	0		// 900050e0

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.lid.initialized)
900050e4:	b0009002 	imm	-28670
900050e8:	e8604d34 	lwi	r3, r0, 19764
900050ec:	bc230058 	bnei	r3, 88		// 90005144
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't raise lid - not initialized.");
900050f0:	3073001c 	addik	r3, r19, 28
900050f4:	10a30000 	addk	r5, r3, r0
900050f8:	30c000c8 	addik	r6, r0, 200
900050fc:	b0009002 	imm	-28670
90005100:	30e00fe0 	addik	r7, r0, 4064
90005104:	b0000000 	imm	0
90005108:	b9f4f120 	brlid	r15, -3808	// 90014228 <snprintf>
9000510c:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_lidNotInitialized, errorDesc);
90005110:	e89300ec 	lwi	r4, r19, 236
90005114:	e8b300f0 	lwi	r5, r19, 240
90005118:	30c00013 	addik	r6, r0, 19
9000511c:	3073001c 	addik	r3, r19, 28
90005120:	10e30000 	addk	r7, r3, r0
90005124:	99fc2000 	brald	r15, r4
90005128:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
9000512c:	3073001c 	addik	r3, r19, 28
90005130:	10a30000 	addk	r5, r3, r0
90005134:	b0000000 	imm	0
90005138:	b9f4ae00 	brlid	r15, -20992	// 9000ff38 <puts>
9000513c:	80000000 	or	r0, r0, r0
        return;
90005140:	b80001b8 	bri	440		// 900052f8
    }

    if(!motionData.door.disabled)
90005144:	b0009002 	imm	-28670
90005148:	e8604d0c 	lwi	r3, r0, 19724
9000514c:	bc2300f8 	bnei	r3, 248		// 90005244
    {
        if(!motionData.door.initialized)
90005150:	b0009002 	imm	-28670
90005154:	e8604d08 	lwi	r3, r0, 19720
90005158:	bc230058 	bnei	r3, 88		// 900051b0
        {
            snprintf(errorDesc, ERROR_DESC_SIZE, "Can't raise lid.  Door is not initialized.");
9000515c:	3073001c 	addik	r3, r19, 28
90005160:	10a30000 	addk	r5, r3, r0
90005164:	30c000c8 	addik	r6, r0, 200
90005168:	b0009002 	imm	-28670
9000516c:	30e01004 	addik	r7, r0, 4100
90005170:	b0000000 	imm	0
90005174:	b9f4f0b4 	brlid	r15, -3916	// 90014228 <snprintf>
90005178:	80000000 	or	r0, r0, r0
            callbackFunc(callbackRef, err_lidCannotMoveDoorNotInitialized, errorDesc);
9000517c:	e89300ec 	lwi	r4, r19, 236
90005180:	e8b300f0 	lwi	r5, r19, 240
90005184:	30c00015 	addik	r6, r0, 21
90005188:	3073001c 	addik	r3, r19, 28
9000518c:	10e30000 	addk	r7, r3, r0
90005190:	99fc2000 	brald	r15, r4
90005194:	80000000 	or	r0, r0, r0
            printf("%s\n", errorDesc);
90005198:	3073001c 	addik	r3, r19, 28
9000519c:	10a30000 	addk	r5, r3, r0
900051a0:	b0000000 	imm	0
900051a4:	b9f4ad94 	brlid	r15, -21100	// 9000ff38 <puts>
900051a8:	80000000 	or	r0, r0, r0
            return;
900051ac:	b800014c 	bri	332		// 900052f8
        }

        if((get_stepper_position(stepperF) != motionData.door.closedPosition ||
900051b0:	30a00001 	addik	r5, r0, 1
900051b4:	b9f46364 	brlid	r15, 25444	// 9000b518 <get_stepper_position>
900051b8:	80000000 	or	r0, r0, r0
900051bc:	10830000 	addk	r4, r3, r0
900051c0:	b0009002 	imm	-28670
900051c4:	e8604d10 	lwi	r3, r0, 19728
900051c8:	16432000 	rsubk	r18, r3, r4
900051cc:	bc320014 	bnei	r18, 20		// 900051e0
900051d0:	30a00001 	addik	r5, r0, 1
900051d4:	b9f46288 	brlid	r15, 25224	// 9000b45c <stepper_is_at_alt_position>
900051d8:	80000000 	or	r0, r0, r0
900051dc:	bc23007c 	bnei	r3, 124		// 90005258
900051e0:	10a00000 	addk	r5, r0, r0
900051e4:	b9f46334 	brlid	r15, 25396	// 9000b518 <get_stepper_position>
900051e8:	80000000 	or	r0, r0, r0
900051ec:	bc03006c 	beqi	r3, 108		// 90005258
            !stepper_is_at_alt_position(stepperF))                           &&
           get_stepper_position(stepperU)  != lid_raised_position)
        {
            snprintf(errorDesc, ERROR_DESC_SIZE, "Can't raise lid.  Door is not closed.");
900051f0:	3073001c 	addik	r3, r19, 28
900051f4:	10a30000 	addk	r5, r3, r0
900051f8:	30c000c8 	addik	r6, r0, 200
900051fc:	b0009002 	imm	-28670
90005200:	30e01030 	addik	r7, r0, 4144
90005204:	b0000000 	imm	0
90005208:	b9f4f020 	brlid	r15, -4064	// 90014228 <snprintf>
9000520c:	80000000 	or	r0, r0, r0
            callbackFunc(callbackRef, err_lidCannotMoveDoorNotClosed, errorDesc);
90005210:	e89300ec 	lwi	r4, r19, 236
90005214:	e8b300f0 	lwi	r5, r19, 240
90005218:	30c00016 	addik	r6, r0, 22
9000521c:	3073001c 	addik	r3, r19, 28
90005220:	10e30000 	addk	r7, r3, r0
90005224:	99fc2000 	brald	r15, r4
90005228:	80000000 	or	r0, r0, r0
            printf("%s\n", errorDesc);
9000522c:	3073001c 	addik	r3, r19, 28
90005230:	10a30000 	addk	r5, r3, r0
90005234:	b0000000 	imm	0
90005238:	b9f4ad00 	brlid	r15, -21248	// 9000ff38 <puts>
9000523c:	80000000 	or	r0, r0, r0
            return;
90005240:	b80000b8 	bri	184		// 900052f8
        }
    }
    else
    {
        printf("Warning: moving Lid while Door is disabled\n");
90005244:	b0009002 	imm	-28670
90005248:	30a01058 	addik	r5, r0, 4184
9000524c:	b0000000 	imm	0
90005250:	b9f4ace8 	brlid	r15, -21272	// 9000ff38 <puts>
90005254:	80000000 	or	r0, r0, r0
    }

    if(motionData.state == state_aborting)
90005258:	b0009002 	imm	-28670
9000525c:	e8604d74 	lwi	r3, r0, 19828
90005260:	aa43000c 	xori	r18, r3, 12
90005264:	bc320024 	bnei	r18, 36		// 90005288
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90005268:	e87300ec 	lwi	r3, r19, 236
9000526c:	e8b300f0 	lwi	r5, r19, 240
90005270:	30c00006 	addik	r6, r0, 6
90005274:	b0009002 	imm	-28670
90005278:	30e00c3c 	addik	r7, r0, 3132
9000527c:	99fc1800 	brald	r15, r3
90005280:	80000000 	or	r0, r0, r0
90005284:	b8000074 	bri	116		// 900052f8
    }
    else if(motionData.state == state_idle && startRaiseLid())
90005288:	b0009002 	imm	-28670
9000528c:	e8604d74 	lwi	r3, r0, 19828
90005290:	bc23004c 	bnei	r3, 76		// 900052dc
90005294:	b9f42080 	brlid	r15, 8320	// 90007314 <startRaiseLid>
90005298:	80000000 	or	r0, r0, r0
9000529c:	bc030040 	beqi	r3, 64		// 900052dc
    {
        motionData.callback.function  = callbackFunc;
900052a0:	e87300ec 	lwi	r3, r19, 236
900052a4:	b0009002 	imm	-28670
900052a8:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
900052ac:	e87300f0 	lwi	r3, r19, 240
900052b0:	b0009002 	imm	-28670
900052b4:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_raisingLid;
900052b8:	30600005 	addik	r3, r0, 5
900052bc:	b0009002 	imm	-28670
900052c0:	f8604d74 	swi	r3, r0, 19828
        printf("Raising Lid...\n");
900052c4:	b0009002 	imm	-28670
900052c8:	30a01084 	addik	r5, r0, 4228
900052cc:	b0000000 	imm	0
900052d0:	b9f4ac68 	brlid	r15, -21400	// 9000ff38 <puts>
900052d4:	80000000 	or	r0, r0, r0
900052d8:	b8000020 	bri	32		// 900052f8
    }
    else
    {
        callbackFunc(callbackRef, err_lidCannotMoveStepperBusy, "Can't raise lid.");
900052dc:	e87300ec 	lwi	r3, r19, 236
900052e0:	e8b300f0 	lwi	r5, r19, 240
900052e4:	30c00017 	addik	r6, r0, 23
900052e8:	b0009002 	imm	-28670
900052ec:	30e01094 	addik	r7, r0, 4244
900052f0:	99fc1800 	brald	r15, r3
900052f4:	80000000 	or	r0, r0, r0
    }
}
900052f8:	e9e10000 	lwi	r15, r1, 0
900052fc:	10330000 	addk	r1, r19, r0
90005300:	ea6100e4 	lwi	r19, r1, 228
90005304:	302100e8 	addik	r1, r1, 232
90005308:	b60f0008 	rtsd	r15, 8
9000530c:	80000000 	or	r0, r0, r0

90005310 <lowerLid>:



void lowerLid(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90005310:	3021ff18 	addik	r1, r1, -232
90005314:	f9e10000 	swi	r15, r1, 0
90005318:	fa6100e4 	swi	r19, r1, 228
9000531c:	12610000 	addk	r19, r1, r0
90005320:	f8b300ec 	swi	r5, r19, 236
90005324:	f8d300f0 	swi	r6, r19, 240
    ASSERT(callbackFunc);
90005328:	e87300ec 	lwi	r3, r19, 236
9000532c:	bc230028 	bnei	r3, 40		// 90005354
90005330:	94110002 	msrclr	r0, 2
90005334:	b0009002 	imm	-28670
90005338:	30a00c1c 	addik	r5, r0, 3100
9000533c:	b0009002 	imm	-28670
90005340:	30c00c2c 	addik	r6, r0, 3116
90005344:	30e003b4 	addik	r7, r0, 948
90005348:	b9f470dc 	brlid	r15, 28892	// 9000c424 <printAssert>
9000534c:	80000000 	or	r0, r0, r0
90005350:	b8000000 	bri	0		// 90005350

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.lid.initialized)
90005354:	b0009002 	imm	-28670
90005358:	e8604d34 	lwi	r3, r0, 19764
9000535c:	bc230058 	bnei	r3, 88		// 900053b4
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't lower lid - not initialized.");
90005360:	3073001c 	addik	r3, r19, 28
90005364:	10a30000 	addk	r5, r3, r0
90005368:	30c000c8 	addik	r6, r0, 200
9000536c:	b0009002 	imm	-28670
90005370:	30e010a8 	addik	r7, r0, 4264
90005374:	b0000000 	imm	0
90005378:	b9f4eeb0 	brlid	r15, -4432	// 90014228 <snprintf>
9000537c:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_lidNotInitialized, errorDesc);
90005380:	e89300ec 	lwi	r4, r19, 236
90005384:	e8b300f0 	lwi	r5, r19, 240
90005388:	30c00013 	addik	r6, r0, 19
9000538c:	3073001c 	addik	r3, r19, 28
90005390:	10e30000 	addk	r7, r3, r0
90005394:	99fc2000 	brald	r15, r4
90005398:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
9000539c:	3073001c 	addik	r3, r19, 28
900053a0:	10a30000 	addk	r5, r3, r0
900053a4:	b0000000 	imm	0
900053a8:	b9f4ab90 	brlid	r15, -21616	// 9000ff38 <puts>
900053ac:	80000000 	or	r0, r0, r0
        return;
900053b0:	b80001c8 	bri	456		// 90005578
    }

    if(!motionData.door.disabled)
900053b4:	b0009002 	imm	-28670
900053b8:	e8604d0c 	lwi	r3, r0, 19724
900053bc:	bc230108 	bnei	r3, 264		// 900054c4
    {
        if(!motionData.door.initialized)
900053c0:	b0009002 	imm	-28670
900053c4:	e8604d08 	lwi	r3, r0, 19720
900053c8:	bc230058 	bnei	r3, 88		// 90005420
        {
            snprintf(errorDesc, ERROR_DESC_SIZE, "Can't lower lid.  Door is not initialized.");
900053cc:	3073001c 	addik	r3, r19, 28
900053d0:	10a30000 	addk	r5, r3, r0
900053d4:	30c000c8 	addik	r6, r0, 200
900053d8:	b0009002 	imm	-28670
900053dc:	30e010cc 	addik	r7, r0, 4300
900053e0:	b0000000 	imm	0
900053e4:	b9f4ee44 	brlid	r15, -4540	// 90014228 <snprintf>
900053e8:	80000000 	or	r0, r0, r0
            callbackFunc(callbackRef, err_lidCannotMoveDoorNotInitialized, errorDesc);
900053ec:	e89300ec 	lwi	r4, r19, 236
900053f0:	e8b300f0 	lwi	r5, r19, 240
900053f4:	30c00015 	addik	r6, r0, 21
900053f8:	3073001c 	addik	r3, r19, 28
900053fc:	10e30000 	addk	r7, r3, r0
90005400:	99fc2000 	brald	r15, r4
90005404:	80000000 	or	r0, r0, r0
            printf("%s\n", errorDesc);
90005408:	3073001c 	addik	r3, r19, 28
9000540c:	10a30000 	addk	r5, r3, r0
90005410:	b0000000 	imm	0
90005414:	b9f4ab24 	brlid	r15, -21724	// 9000ff38 <puts>
90005418:	80000000 	or	r0, r0, r0
            return;
9000541c:	b800015c 	bri	348		// 90005578
        }

        if((get_stepper_position(stepperF) != motionData.door.closedPosition ||
90005420:	30a00001 	addik	r5, r0, 1
90005424:	b9f460f4 	brlid	r15, 24820	// 9000b518 <get_stepper_position>
90005428:	80000000 	or	r0, r0, r0
9000542c:	10830000 	addk	r4, r3, r0
90005430:	b0009002 	imm	-28670
90005434:	e8604d10 	lwi	r3, r0, 19728
90005438:	16432000 	rsubk	r18, r3, r4
9000543c:	bc320014 	bnei	r18, 20		// 90005450
90005440:	30a00001 	addik	r5, r0, 1
90005444:	b9f46018 	brlid	r15, 24600	// 9000b45c <stepper_is_at_alt_position>
90005448:	80000000 	or	r0, r0, r0
9000544c:	bc23008c 	bnei	r3, 140		// 900054d8
90005450:	10a00000 	addk	r5, r0, r0
90005454:	b9f460c4 	brlid	r15, 24772	// 9000b518 <get_stepper_position>
90005458:	80000000 	or	r0, r0, r0
9000545c:	10830000 	addk	r4, r3, r0
90005460:	b0009002 	imm	-28670
90005464:	e8604d3c 	lwi	r3, r0, 19772
90005468:	16432000 	rsubk	r18, r3, r4
9000546c:	bc12006c 	beqi	r18, 108		// 900054d8
            !stepper_is_at_alt_position(stepperF))                           &&
           get_stepper_position(stepperU) != motionData.lid.compressedPosition)
        {
            snprintf(errorDesc, ERROR_DESC_SIZE, "Can't lower lid.  Door is not closed.");
90005470:	3073001c 	addik	r3, r19, 28
90005474:	10a30000 	addk	r5, r3, r0
90005478:	30c000c8 	addik	r6, r0, 200
9000547c:	b0009002 	imm	-28670
90005480:	30e010f8 	addik	r7, r0, 4344
90005484:	b0000000 	imm	0
90005488:	b9f4eda0 	brlid	r15, -4704	// 90014228 <snprintf>
9000548c:	80000000 	or	r0, r0, r0
            callbackFunc(callbackRef, err_lidCannotMoveDoorNotClosed, errorDesc);
90005490:	e89300ec 	lwi	r4, r19, 236
90005494:	e8b300f0 	lwi	r5, r19, 240
90005498:	30c00016 	addik	r6, r0, 22
9000549c:	3073001c 	addik	r3, r19, 28
900054a0:	10e30000 	addk	r7, r3, r0
900054a4:	99fc2000 	brald	r15, r4
900054a8:	80000000 	or	r0, r0, r0
            printf("%s\n", errorDesc);
900054ac:	3073001c 	addik	r3, r19, 28
900054b0:	10a30000 	addk	r5, r3, r0
900054b4:	b0000000 	imm	0
900054b8:	b9f4aa80 	brlid	r15, -21888	// 9000ff38 <puts>
900054bc:	80000000 	or	r0, r0, r0
            return;
900054c0:	b80000b8 	bri	184		// 90005578
        }
    }
    else
    {
        printf("Warning: moving Lid while Door is disabled\n");
900054c4:	b0009002 	imm	-28670
900054c8:	30a01058 	addik	r5, r0, 4184
900054cc:	b0000000 	imm	0
900054d0:	b9f4aa68 	brlid	r15, -21912	// 9000ff38 <puts>
900054d4:	80000000 	or	r0, r0, r0
    }

    if(motionData.state == state_aborting)
900054d8:	b0009002 	imm	-28670
900054dc:	e8604d74 	lwi	r3, r0, 19828
900054e0:	aa43000c 	xori	r18, r3, 12
900054e4:	bc320024 	bnei	r18, 36		// 90005508
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
900054e8:	e87300ec 	lwi	r3, r19, 236
900054ec:	e8b300f0 	lwi	r5, r19, 240
900054f0:	30c00006 	addik	r6, r0, 6
900054f4:	b0009002 	imm	-28670
900054f8:	30e00c3c 	addik	r7, r0, 3132
900054fc:	99fc1800 	brald	r15, r3
90005500:	80000000 	or	r0, r0, r0
90005504:	b8000074 	bri	116		// 90005578
    }
    else if(motionData.state == state_idle && startLowerLid())
90005508:	b0009002 	imm	-28670
9000550c:	e8604d74 	lwi	r3, r0, 19828
90005510:	bc23004c 	bnei	r3, 76		// 9000555c
90005514:	b9f41f44 	brlid	r15, 8004	// 90007458 <startLowerLid>
90005518:	80000000 	or	r0, r0, r0
9000551c:	bc030040 	beqi	r3, 64		// 9000555c
    {
        motionData.callback.function  = callbackFunc;
90005520:	e87300ec 	lwi	r3, r19, 236
90005524:	b0009002 	imm	-28670
90005528:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
9000552c:	e87300f0 	lwi	r3, r19, 240
90005530:	b0009002 	imm	-28670
90005534:	f8604d7c 	swi	r3, r0, 19836
        motionData.state              = state_loweringLid;
90005538:	30600006 	addik	r3, r0, 6
9000553c:	b0009002 	imm	-28670
90005540:	f8604d74 	swi	r3, r0, 19828
        printf("Lowering Lid...\n");
90005544:	b0009002 	imm	-28670
90005548:	30a01120 	addik	r5, r0, 4384
9000554c:	b0000000 	imm	0
90005550:	b9f4a9e8 	brlid	r15, -22040	// 9000ff38 <puts>
90005554:	80000000 	or	r0, r0, r0
90005558:	b8000020 	bri	32		// 90005578
    }
    else
    {
        callbackFunc(callbackRef, err_lidCannotMoveStepperBusy, "Can't lower lid.");
9000555c:	e87300ec 	lwi	r3, r19, 236
90005560:	e8b300f0 	lwi	r5, r19, 240
90005564:	30c00017 	addik	r6, r0, 23
90005568:	b0009002 	imm	-28670
9000556c:	30e01130 	addik	r7, r0, 4400
90005570:	99fc1800 	brald	r15, r3
90005574:	80000000 	or	r0, r0, r0
    }
}
90005578:	e9e10000 	lwi	r15, r1, 0
9000557c:	10330000 	addk	r1, r19, r0
90005580:	ea6100e4 	lwi	r19, r1, 228
90005584:	302100e8 	addik	r1, r1, 232
90005588:	b60f0008 	rtsd	r15, 8
9000558c:	80000000 	or	r0, r0, r0

90005590 <openCavity>:




void openCavity(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
90005590:	3021ff18 	addik	r1, r1, -232
90005594:	f9e10000 	swi	r15, r1, 0
90005598:	fa6100e4 	swi	r19, r1, 228
9000559c:	12610000 	addk	r19, r1, r0
900055a0:	f8b300ec 	swi	r5, r19, 236
900055a4:	f8d300f0 	swi	r6, r19, 240
    ASSERT(callbackFunc);
900055a8:	e87300ec 	lwi	r3, r19, 236
900055ac:	bc230028 	bnei	r3, 40		// 900055d4
900055b0:	94110002 	msrclr	r0, 2
900055b4:	b0009002 	imm	-28670
900055b8:	30a00c1c 	addik	r5, r0, 3100
900055bc:	b0009002 	imm	-28670
900055c0:	30c00c2c 	addik	r6, r0, 3116
900055c4:	30e003ef 	addik	r7, r0, 1007
900055c8:	b9f46e5c 	brlid	r15, 28252	// 9000c424 <printAssert>
900055cc:	80000000 	or	r0, r0, r0
900055d0:	b8000000 	bri	0		// 900055d0

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.lid.initialized)
900055d4:	b0009002 	imm	-28670
900055d8:	e8604d34 	lwi	r3, r0, 19764
900055dc:	bc230058 	bnei	r3, 88		// 90005634
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't open cavity - Lid not initialized.");
900055e0:	3073001c 	addik	r3, r19, 28
900055e4:	10a30000 	addk	r5, r3, r0
900055e8:	30c000c8 	addik	r6, r0, 200
900055ec:	b0009002 	imm	-28670
900055f0:	30e01144 	addik	r7, r0, 4420
900055f4:	b0000000 	imm	0
900055f8:	b9f4ec30 	brlid	r15, -5072	// 90014228 <snprintf>
900055fc:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_lidNotInitialized, errorDesc);
90005600:	e89300ec 	lwi	r4, r19, 236
90005604:	e8b300f0 	lwi	r5, r19, 240
90005608:	30c00013 	addik	r6, r0, 19
9000560c:	3073001c 	addik	r3, r19, 28
90005610:	10e30000 	addk	r7, r3, r0
90005614:	99fc2000 	brald	r15, r4
90005618:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
9000561c:	3073001c 	addik	r3, r19, 28
90005620:	10a30000 	addk	r5, r3, r0
90005624:	b0000000 	imm	0
90005628:	b9f4a910 	brlid	r15, -22256	// 9000ff38 <puts>
9000562c:	80000000 	or	r0, r0, r0
        return;
90005630:	b8000124 	bri	292		// 90005754
    }

    if(!motionData.door.initialized)
90005634:	b0009002 	imm	-28670
90005638:	e8604d08 	lwi	r3, r0, 19720
9000563c:	bc230058 	bnei	r3, 88		// 90005694
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't open cavity.  Door is not initialized.");
90005640:	3073001c 	addik	r3, r19, 28
90005644:	10a30000 	addk	r5, r3, r0
90005648:	30c000c8 	addik	r6, r0, 200
9000564c:	b0009002 	imm	-28670
90005650:	30e01170 	addik	r7, r0, 4464
90005654:	b0000000 	imm	0
90005658:	b9f4ebd0 	brlid	r15, -5168	// 90014228 <snprintf>
9000565c:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_lidCannotMoveDoorNotInitialized, errorDesc);
90005660:	e89300ec 	lwi	r4, r19, 236
90005664:	e8b300f0 	lwi	r5, r19, 240
90005668:	30c00015 	addik	r6, r0, 21
9000566c:	3073001c 	addik	r3, r19, 28
90005670:	10e30000 	addk	r7, r3, r0
90005674:	99fc2000 	brald	r15, r4
90005678:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
9000567c:	3073001c 	addik	r3, r19, 28
90005680:	10a30000 	addk	r5, r3, r0
90005684:	b0000000 	imm	0
90005688:	b9f4a8b0 	brlid	r15, -22352	// 9000ff38 <puts>
9000568c:	80000000 	or	r0, r0, r0
        return;
90005690:	b80000c4 	bri	196		// 90005754
    }

    if(motionData.state == state_aborting)
90005694:	b0009002 	imm	-28670
90005698:	e8604d74 	lwi	r3, r0, 19828
9000569c:	aa43000c 	xori	r18, r3, 12
900056a0:	bc320024 	bnei	r18, 36		// 900056c4
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
900056a4:	e87300ec 	lwi	r3, r19, 236
900056a8:	e8b300f0 	lwi	r5, r19, 240
900056ac:	30c00006 	addik	r6, r0, 6
900056b0:	b0009002 	imm	-28670
900056b4:	30e00c3c 	addik	r7, r0, 3132
900056b8:	99fc1800 	brald	r15, r3
900056bc:	80000000 	or	r0, r0, r0
        return;
900056c0:	b8000094 	bri	148		// 90005754
    }
    else if(motionData.state != state_idle)
900056c4:	b0009002 	imm	-28670
900056c8:	e8604d74 	lwi	r3, r0, 19828
900056cc:	bc030024 	beqi	r3, 36		// 900056f0
    {
        callbackFunc(callbackRef, err_lidCannotMoveStepperBusy, "Can't open cavity.");
900056d0:	e87300ec 	lwi	r3, r19, 236
900056d4:	e8b300f0 	lwi	r5, r19, 240
900056d8:	30c00017 	addik	r6, r0, 23
900056dc:	b0009002 	imm	-28670
900056e0:	30e011a0 	addik	r7, r0, 4512
900056e4:	99fc1800 	brald	r15, r3
900056e8:	80000000 	or	r0, r0, r0
        return;
900056ec:	b8000068 	bri	104		// 90005754
    }


    if(startRaiseLid())
900056f0:	b9f41c24 	brlid	r15, 7204	// 90007314 <startRaiseLid>
900056f4:	80000000 	or	r0, r0, r0
900056f8:	bc030040 	beqi	r3, 64		// 90005738
    {
        motionData.callback.function  = callbackFunc;
900056fc:	e87300ec 	lwi	r3, r19, 236
90005700:	b0009002 	imm	-28670
90005704:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
90005708:	e87300f0 	lwi	r3, r19, 240
9000570c:	b0009002 	imm	-28670
90005710:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_openingCavityLid;
90005714:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
90005718:	b0009002 	imm	-28670
9000571c:	f8604d74 	swi	r3, r0, 19828
        printf("Opening Cavity...\n");
90005720:	b0009002 	imm	-28670
90005724:	30a011b4 	addik	r5, r0, 4532
90005728:	b0000000 	imm	0
9000572c:	b9f4a80c 	brlid	r15, -22516	// 9000ff38 <puts>
90005730:	80000000 	or	r0, r0, r0
90005734:	b8000020 	bri	32		// 90005754
    }
    else
    {
        callbackFunc(callbackRef, err_lidCannotMoveStepperBusy, "Can't open cavity.");
90005738:	e87300ec 	lwi	r3, r19, 236
9000573c:	e8b300f0 	lwi	r5, r19, 240
90005740:	30c00017 	addik	r6, r0, 23
90005744:	b0009002 	imm	-28670
90005748:	30e011a0 	addik	r7, r0, 4512
9000574c:	99fc1800 	brald	r15, r3
90005750:	80000000 	or	r0, r0, r0
    }
}
90005754:	e9e10000 	lwi	r15, r1, 0
90005758:	10330000 	addk	r1, r19, r0
9000575c:	ea6100e4 	lwi	r19, r1, 228
90005760:	302100e8 	addik	r1, r1, 232
90005764:	b60f0008 	rtsd	r15, 8
90005768:	80000000 	or	r0, r0, r0

9000576c <closeCavity>:



void closeCavity(OfflineTaskCompleteCallback callbackFunc, int callbackRef)
{
9000576c:	3021ff18 	addik	r1, r1, -232
90005770:	f9e10000 	swi	r15, r1, 0
90005774:	fa6100e4 	swi	r19, r1, 228
90005778:	12610000 	addk	r19, r1, r0
9000577c:	f8b300ec 	swi	r5, r19, 236
90005780:	f8d300f0 	swi	r6, r19, 240
    ASSERT(callbackFunc);
90005784:	e87300ec 	lwi	r3, r19, 236
90005788:	bc230028 	bnei	r3, 40		// 900057b0
9000578c:	94110002 	msrclr	r0, 2
90005790:	b0009002 	imm	-28670
90005794:	30a00c1c 	addik	r5, r0, 3100
90005798:	b0009002 	imm	-28670
9000579c:	30c00c2c 	addik	r6, r0, 3116
900057a0:	30e00420 	addik	r7, r0, 1056
900057a4:	b9f46c80 	brlid	r15, 27776	// 9000c424 <printAssert>
900057a8:	80000000 	or	r0, r0, r0
900057ac:	b8000000 	bri	0		// 900057ac

    char errorDesc[ERROR_DESC_SIZE];

    if(!motionData.door.initialized)
900057b0:	b0009002 	imm	-28670
900057b4:	e8604d08 	lwi	r3, r0, 19720
900057b8:	bc230058 	bnei	r3, 88		// 90005810
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't close cavity.  Door is not initialized.");
900057bc:	3073001c 	addik	r3, r19, 28
900057c0:	10a30000 	addk	r5, r3, r0
900057c4:	30c000c8 	addik	r6, r0, 200
900057c8:	b0009002 	imm	-28670
900057cc:	30e011c8 	addik	r7, r0, 4552
900057d0:	b0000000 	imm	0
900057d4:	b9f4ea54 	brlid	r15, -5548	// 90014228 <snprintf>
900057d8:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorNotInitialized, errorDesc);
900057dc:	e89300ec 	lwi	r4, r19, 236
900057e0:	e8b300f0 	lwi	r5, r19, 240
900057e4:	30c0001a 	addik	r6, r0, 26
900057e8:	3073001c 	addik	r3, r19, 28
900057ec:	10e30000 	addk	r7, r3, r0
900057f0:	99fc2000 	brald	r15, r4
900057f4:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
900057f8:	3073001c 	addik	r3, r19, 28
900057fc:	10a30000 	addk	r5, r3, r0
90005800:	b0000000 	imm	0
90005804:	b9f4a734 	brlid	r15, -22732	// 9000ff38 <puts>
90005808:	80000000 	or	r0, r0, r0
        return;
9000580c:	b8000104 	bri	260		// 90005910
    }

    if(!motionData.lid.initialized)
90005810:	b0009002 	imm	-28670
90005814:	e8604d34 	lwi	r3, r0, 19764
90005818:	bc230058 	bnei	r3, 88		// 90005870
    {
        snprintf(errorDesc, ERROR_DESC_SIZE, "Can't close cavity - Lid not initialized.");
9000581c:	3073001c 	addik	r3, r19, 28
90005820:	10a30000 	addk	r5, r3, r0
90005824:	30c000c8 	addik	r6, r0, 200
90005828:	b0009002 	imm	-28670
9000582c:	30e011f8 	addik	r7, r0, 4600
90005830:	b0000000 	imm	0
90005834:	b9f4e9f4 	brlid	r15, -5644	// 90014228 <snprintf>
90005838:	80000000 	or	r0, r0, r0
        callbackFunc(callbackRef, err_doorCannotMoveLidNotInitialized, errorDesc);
9000583c:	e89300ec 	lwi	r4, r19, 236
90005840:	e8b300f0 	lwi	r5, r19, 240
90005844:	30c0001c 	addik	r6, r0, 28
90005848:	3073001c 	addik	r3, r19, 28
9000584c:	10e30000 	addk	r7, r3, r0
90005850:	99fc2000 	brald	r15, r4
90005854:	80000000 	or	r0, r0, r0
        printf("%s\n", errorDesc);
90005858:	3073001c 	addik	r3, r19, 28
9000585c:	10a30000 	addk	r5, r3, r0
90005860:	b0000000 	imm	0
90005864:	b9f4a6d4 	brlid	r15, -22828	// 9000ff38 <puts>
90005868:	80000000 	or	r0, r0, r0
        return;
9000586c:	b80000a4 	bri	164		// 90005910
    }

    if(motionData.state == state_aborting)
90005870:	b0009002 	imm	-28670
90005874:	e8604d74 	lwi	r3, r0, 19828
90005878:	aa43000c 	xori	r18, r3, 12
9000587c:	bc320024 	bnei	r18, 36		// 900058a0
    {
        callbackFunc(callbackRef, err_systemBusy, "Motion abort in progress.");
90005880:	e87300ec 	lwi	r3, r19, 236
90005884:	e8b300f0 	lwi	r5, r19, 240
90005888:	30c00006 	addik	r6, r0, 6
9000588c:	b0009002 	imm	-28670
90005890:	30e00c3c 	addik	r7, r0, 3132
90005894:	99fc1800 	brald	r15, r3
90005898:	80000000 	or	r0, r0, r0
9000589c:	b8000074 	bri	116		// 90005910
    }
    else if(motionData.state == state_idle && startCloseDoor())
900058a0:	b0009002 	imm	-28670
900058a4:	e8604d74 	lwi	r3, r0, 19828
900058a8:	bc23004c 	bnei	r3, 76		// 900058f4
900058ac:	b9f426dc 	brlid	r15, 9948	// 90007f88 <startCloseDoor>
900058b0:	80000000 	or	r0, r0, r0
900058b4:	bc030040 	beqi	r3, 64		// 900058f4
    {
        motionData.callback.function  = callbackFunc;
900058b8:	e87300ec 	lwi	r3, r19, 236
900058bc:	b0009002 	imm	-28670
900058c0:	f8604d78 	swi	r3, r0, 19832
        motionData.callback.reference = callbackRef;
900058c4:	e87300f0 	lwi	r3, r19, 240
900058c8:	b0009002 	imm	-28670
900058cc:	f8604d7c 	swi	r3, r0, 19836
        motionData.state = state_closingCavityDoor;
900058d0:	30600009 	addik	r3, r0, 9
900058d4:	b0009002 	imm	-28670
900058d8:	f8604d74 	swi	r3, r0, 19828
        printf("Closing Cavity...\n");
900058dc:	b0009002 	imm	-28670
900058e0:	30a01224 	addik	r5, r0, 4644
900058e4:	b0000000 	imm	0
900058e8:	b9f4a650 	brlid	r15, -22960	// 9000ff38 <puts>
900058ec:	80000000 	or	r0, r0, r0
900058f0:	b8000020 	bri	32		// 90005910
    }
    else
    {
        callbackFunc(callbackRef, err_doorCannotMoveStepperBusy, "Can't open cavity.");
900058f4:	e87300ec 	lwi	r3, r19, 236
900058f8:	e8b300f0 	lwi	r5, r19, 240
900058fc:	30c0001e 	addik	r6, r0, 30
90005900:	b0009002 	imm	-28670
90005904:	30e011a0 	addik	r7, r0, 4512
90005908:	99fc1800 	brald	r15, r3
9000590c:	80000000 	or	r0, r0, r0
    }
}
90005910:	e9e10000 	lwi	r15, r1, 0
90005914:	10330000 	addk	r1, r19, r0
90005918:	ea6100e4 	lwi	r19, r1, 228
9000591c:	302100e8 	addik	r1, r1, 232
90005920:	b60f0008 	rtsd	r15, 8
90005924:	80000000 	or	r0, r0, r0

90005928 <disableDoor>:



void disableDoor()
{
90005928:	3021fff8 	addik	r1, r1, -8
9000592c:	fa610004 	swi	r19, r1, 4
90005930:	12610000 	addk	r19, r1, r0
    motionData.door.initialized = false;
90005934:	b0009002 	imm	-28670
90005938:	f8004d08 	swi	r0, r0, 19720
    motionData.door.disabled    = true;
9000593c:	30600001 	addik	r3, r0, 1
90005940:	b0009002 	imm	-28670
90005944:	f8604d0c 	swi	r3, r0, 19724
}
90005948:	10330000 	addk	r1, r19, r0
9000594c:	ea610004 	lwi	r19, r1, 4
90005950:	30210008 	addik	r1, r1, 8
90005954:	b60f0008 	rtsd	r15, 8
90005958:	80000000 	or	r0, r0, r0

9000595c <setCurrentDoorClosedPosition>:



void setCurrentDoorClosedPosition()
{
9000595c:	3021ffe0 	addik	r1, r1, -32
90005960:	f9e10000 	swi	r15, r1, 0
90005964:	fa61001c 	swi	r19, r1, 28
90005968:	12610000 	addk	r19, r1, r0
    motionData.door.closedPosition = get_stepper_position(stepperF);
9000596c:	30a00001 	addik	r5, r0, 1
90005970:	b9f45ba8 	brlid	r15, 23464	// 9000b518 <get_stepper_position>
90005974:	80000000 	or	r0, r0, r0
90005978:	b0009002 	imm	-28670
9000597c:	f8604d10 	swi	r3, r0, 19728
}
90005980:	e9e10000 	lwi	r15, r1, 0
90005984:	10330000 	addk	r1, r19, r0
90005988:	ea61001c 	lwi	r19, r1, 28
9000598c:	30210020 	addik	r1, r1, 32
90005990:	b60f0008 	rtsd	r15, 8
90005994:	80000000 	or	r0, r0, r0

90005998 <setCurrentLidLoweredPosition>:



void setCurrentLidLoweredPosition()
{
90005998:	3021ffe0 	addik	r1, r1, -32
9000599c:	f9e10000 	swi	r15, r1, 0
900059a0:	fa61001c 	swi	r19, r1, 28
900059a4:	12610000 	addk	r19, r1, r0
    motionData.lid.compressedPosition = get_stepper_position(stepperU);
900059a8:	10a00000 	addk	r5, r0, r0
900059ac:	b9f45b6c 	brlid	r15, 23404	// 9000b518 <get_stepper_position>
900059b0:	80000000 	or	r0, r0, r0
900059b4:	b0009002 	imm	-28670
900059b8:	f8604d3c 	swi	r3, r0, 19772
}
900059bc:	e9e10000 	lwi	r15, r1, 0
900059c0:	10330000 	addk	r1, r19, r0
900059c4:	ea61001c 	lwi	r19, r1, 28
900059c8:	30210020 	addik	r1, r1, 32
900059cc:	b60f0008 	rtsd	r15, 8
900059d0:	80000000 	or	r0, r0, r0

900059d4 <setDoorClosedPosition>:



void setDoorClosedPosition(int position)
{
900059d4:	3021fff8 	addik	r1, r1, -8
900059d8:	fa610004 	swi	r19, r1, 4
900059dc:	12610000 	addk	r19, r1, r0
900059e0:	f8b3000c 	swi	r5, r19, 12
    if(position < door_min_closed_position ||
900059e4:	e873000c 	lwi	r3, r19, 12
900059e8:	3240270f 	addik	r18, r0, 9999
900059ec:	16439001 	cmp	r18, r3, r18
900059f0:	bcb20014 	bgei	r18, 20		// 90005a04
900059f4:	e873000c 	lwi	r3, r19, 12
900059f8:	32402ee0 	addik	r18, r0, 12000
900059fc:	16439001 	cmp	r18, r3, r18
90005a00:	bcb2000c 	bgei	r18, 12		// 90005a0c
       position > door_max_closed_position)
    {
        position = door_default_closed_position;
90005a04:	30602b5c 	addik	r3, r0, 11100
90005a08:	f873000c 	swi	r3, r19, 12
    }

    motionData.door.closedPosition = position;
90005a0c:	e873000c 	lwi	r3, r19, 12
90005a10:	b0009002 	imm	-28670
90005a14:	f8604d10 	swi	r3, r0, 19728
}
90005a18:	10330000 	addk	r1, r19, r0
90005a1c:	ea610004 	lwi	r19, r1, 4
90005a20:	30210008 	addik	r1, r1, 8
90005a24:	b60f0008 	rtsd	r15, 8
90005a28:	80000000 	or	r0, r0, r0

90005a2c <setLidLoweredPosition>:



void setLidLoweredPosition(int position)
{
90005a2c:	3021fff8 	addik	r1, r1, -8
90005a30:	fa610004 	swi	r19, r1, 4
90005a34:	12610000 	addk	r19, r1, r0
90005a38:	f8b3000c 	swi	r5, r19, 12
    if(position < lid_min_compressed_position ||
90005a3c:	e873000c 	lwi	r3, r19, 12
90005a40:	32403e7f 	addik	r18, r0, 15999
90005a44:	16439001 	cmp	r18, r3, r18
90005a48:	bcb20014 	bgei	r18, 20		// 90005a5c
90005a4c:	e873000c 	lwi	r3, r19, 12
90005a50:	32404a38 	addik	r18, r0, 19000
90005a54:	16439001 	cmp	r18, r3, r18
90005a58:	bcb2000c 	bgei	r18, 12		// 90005a64
       position > lid_max_compressed_position)
    {
        position = lid_default_compressed_position;
90005a5c:	30604268 	addik	r3, r0, 17000
90005a60:	f873000c 	swi	r3, r19, 12
    }

    motionData.lid.compressedPosition = position;
90005a64:	e873000c 	lwi	r3, r19, 12
90005a68:	b0009002 	imm	-28670
90005a6c:	f8604d3c 	swi	r3, r0, 19772
}
90005a70:	10330000 	addk	r1, r19, r0
90005a74:	ea610004 	lwi	r19, r1, 4
90005a78:	30210008 	addik	r1, r1, 8
90005a7c:	b60f0008 	rtsd	r15, 8
90005a80:	80000000 	or	r0, r0, r0

90005a84 <getDoorClosedPosition>:



bool getDoorClosedPosition(int *position)
{
90005a84:	3021fff4 	addik	r1, r1, -12
90005a88:	fa610008 	swi	r19, r1, 8
90005a8c:	12610000 	addk	r19, r1, r0
90005a90:	f8b30010 	swi	r5, r19, 16

    if(*position < door_min_closed_position ||
90005a94:	e8730010 	lwi	r3, r19, 16
90005a98:	e8630000 	lwi	r3, r3, 0
90005a9c:	3240270f 	addik	r18, r0, 9999
90005aa0:	16439001 	cmp	r18, r3, r18
90005aa4:	bcb20018 	bgei	r18, 24		// 90005abc
90005aa8:	e8730010 	lwi	r3, r19, 16
90005aac:	e8630000 	lwi	r3, r3, 0
90005ab0:	32402ee0 	addik	r18, r0, 12000
90005ab4:	16439001 	cmp	r18, r3, r18
90005ab8:	bcb2001c 	bgei	r18, 28		// 90005ad4
       *position > door_max_closed_position)
    {
        *position = door_default_closed_position;
90005abc:	e8930010 	lwi	r4, r19, 16
90005ac0:	30602b5c 	addik	r3, r0, 11100
90005ac4:	f8640000 	swi	r3, r4, 0
        return false;
90005ac8:	10600000 	addk	r3, r0, r0
90005acc:	f8730004 	swi	r3, r19, 4
90005ad0:	b800000c 	bri	12		// 90005adc
    }

    return true;
90005ad4:	30600001 	addik	r3, r0, 1
90005ad8:	f8730004 	swi	r3, r19, 4
90005adc:	e8730004 	lwi	r3, r19, 4
}
90005ae0:	10330000 	addk	r1, r19, r0
90005ae4:	ea610008 	lwi	r19, r1, 8
90005ae8:	3021000c 	addik	r1, r1, 12
90005aec:	b60f0008 	rtsd	r15, 8
90005af0:	80000000 	or	r0, r0, r0

90005af4 <getLidLoweredPosition>:



bool getLidLoweredPosition(int *position)
{
90005af4:	3021fff4 	addik	r1, r1, -12
90005af8:	fa610008 	swi	r19, r1, 8
90005afc:	12610000 	addk	r19, r1, r0
90005b00:	f8b30010 	swi	r5, r19, 16

    if(*position < lid_min_compressed_position ||
90005b04:	e8730010 	lwi	r3, r19, 16
90005b08:	e8630000 	lwi	r3, r3, 0
90005b0c:	32403e7f 	addik	r18, r0, 15999
90005b10:	16439001 	cmp	r18, r3, r18
90005b14:	bcb20018 	bgei	r18, 24		// 90005b2c
90005b18:	e8730010 	lwi	r3, r19, 16
90005b1c:	e8630000 	lwi	r3, r3, 0
90005b20:	32404a38 	addik	r18, r0, 19000
90005b24:	16439001 	cmp	r18, r3, r18
90005b28:	bcb2001c 	bgei	r18, 28		// 90005b44
       *position > lid_max_compressed_position)
    {
        *position = lid_default_compressed_position;
90005b2c:	e8930010 	lwi	r4, r19, 16
90005b30:	30604268 	addik	r3, r0, 17000
90005b34:	f8640000 	swi	r3, r4, 0
        return false;
90005b38:	10600000 	addk	r3, r0, r0
90005b3c:	f8730004 	swi	r3, r19, 4
90005b40:	b800000c 	bri	12		// 90005b4c
    }

    return true;
90005b44:	30600001 	addik	r3, r0, 1
90005b48:	f8730004 	swi	r3, r19, 4
90005b4c:	e8730004 	lwi	r3, r19, 4
}
90005b50:	10330000 	addk	r1, r19, r0
90005b54:	ea610008 	lwi	r19, r1, 8
90005b58:	3021000c 	addik	r1, r1, 12
90005b5c:	b60f0008 	rtsd	r15, 8
90005b60:	80000000 	or	r0, r0, r0

90005b64 <getPlateType>:



PlateType getPlateType()
{
90005b64:	3021fff8 	addik	r1, r1, -8
90005b68:	fa610004 	swi	r19, r1, 4
90005b6c:	12610000 	addk	r19, r1, r0
    return motionData.lid.plateType;
90005b70:	b0009002 	imm	-28670
90005b74:	e8604d64 	lwi	r3, r0, 19812
}
90005b78:	10330000 	addk	r1, r19, r0
90005b7c:	ea610004 	lwi	r19, r1, 4
90005b80:	30210008 	addik	r1, r1, 8
90005b84:	b60f0008 	rtsd	r15, 8
90005b88:	80000000 	or	r0, r0, r0

90005b8c <getPlateTypeName>:



const char* getPlateTypeName()
{
90005b8c:	3021fff0 	addik	r1, r1, -16
90005b90:	fa61000c 	swi	r19, r1, 12
90005b94:	12610000 	addk	r19, r1, r0
    switch(motionData.lid.plateType)
90005b98:	b0009002 	imm	-28670
90005b9c:	e8604d64 	lwi	r3, r0, 19812
90005ba0:	f8730008 	swi	r3, r19, 8
90005ba4:	e8730008 	lwi	r3, r19, 8
90005ba8:	aa430002 	xori	r18, r3, 2
90005bac:	bc120030 	beqi	r18, 48		// 90005bdc
90005bb0:	e8730008 	lwi	r3, r19, 8
90005bb4:	aa430003 	xori	r18, r3, 3
90005bb8:	bc120034 	beqi	r18, 52		// 90005bec
90005bbc:	e8730008 	lwi	r3, r19, 8
90005bc0:	aa430001 	xori	r18, r3, 1
90005bc4:	bc120008 	beqi	r18, 8		// 90005bcc
90005bc8:	b8000034 	bri	52		// 90005bfc
    {
        case plateType_none:
            return "None";
90005bcc:	b0009002 	imm	-28670
90005bd0:	30601238 	addik	r3, r0, 4664
90005bd4:	f8730004 	swi	r3, r19, 4
90005bd8:	b8000030 	bri	48		// 90005c08

        case plateType_sda:
            return "SDA";
90005bdc:	b0009002 	imm	-28670
90005be0:	30601240 	addik	r3, r0, 4672
90005be4:	f8730004 	swi	r3, r19, 4
90005be8:	b8000020 	bri	32		// 90005c08

        case plateType_pcr:
            return "PCR";
90005bec:	b0009002 	imm	-28670
90005bf0:	30601244 	addik	r3, r0, 4676
90005bf4:	f8730004 	swi	r3, r19, 4
90005bf8:	b8000010 	bri	16		// 90005c08

        case plateType_unknown:
        default:
            return "Unknown";
90005bfc:	b0009002 	imm	-28670
90005c00:	30601248 	addik	r3, r0, 4680
90005c04:	f8730004 	swi	r3, r19, 4
90005c08:	e8730004 	lwi	r3, r19, 4
    }
}
90005c0c:	10330000 	addk	r1, r19, r0
90005c10:	ea61000c 	lwi	r19, r1, 12
90005c14:	30210010 	addik	r1, r1, 16
90005c18:	b60f0008 	rtsd	r15, 8
90005c1c:	80000000 	or	r0, r0, r0

90005c20 <verifyDoorPosition>:




///////////////////////////////////////////////////
// Local filter functions

static bool verifyDoorPosition(int expectedPosition)
{
90005c20:	3021ffe0 	addik	r1, r1, -32
90005c24:	f9e10000 	swi	r15, r1, 0
90005c28:	fa61001c 	swi	r19, r1, 28
90005c2c:	12610000 	addk	r19, r1, r0
90005c30:	f8b30024 	swi	r5, r19, 36
    return get_stepper_position(stepperF) == expectedPosition;
90005c34:	30a00001 	addik	r5, r0, 1
90005c38:	b9f458e0 	brlid	r15, 22752	// 9000b518 <get_stepper_position>
90005c3c:	80000000 	or	r0, r0, r0
90005c40:	10830000 	addk	r4, r3, r0
90005c44:	e8730024 	lwi	r3, r19, 36
90005c48:	88641c00 	pcmpeq	r3, r4, r3
}
90005c4c:	e9e10000 	lwi	r15, r1, 0
90005c50:	10330000 	addk	r1, r19, r0
90005c54:	ea61001c 	lwi	r19, r1, 28
90005c58:	30210020 	addik	r1, r1, 32
90005c5c:	b60f0008 	rtsd	r15, 8
90005c60:	80000000 	or	r0, r0, r0

90005c64 <verifyLidPosition>:



static bool verifyLidPosition(int expectedPosition)
{
90005c64:	3021ffe0 	addik	r1, r1, -32
90005c68:	f9e10000 	swi	r15, r1, 0
90005c6c:	fa61001c 	swi	r19, r1, 28
90005c70:	12610000 	addk	r19, r1, r0
90005c74:	f8b30024 	swi	r5, r19, 36
    return get_stepper_position(stepperU) == expectedPosition;
90005c78:	10a00000 	addk	r5, r0, r0
90005c7c:	b9f4589c 	brlid	r15, 22684	// 9000b518 <get_stepper_position>
90005c80:	80000000 	or	r0, r0, r0
90005c84:	10830000 	addk	r4, r3, r0
90005c88:	e8730024 	lwi	r3, r19, 36
90005c8c:	88641c00 	pcmpeq	r3, r4, r3
}
90005c90:	e9e10000 	lwi	r15, r1, 0
90005c94:	10330000 	addk	r1, r19, r0
90005c98:	ea61001c 	lwi	r19, r1, 28
90005c9c:	30210020 	addik	r1, r1, 32
90005ca0:	b60f0008 	rtsd	r15, 8
90005ca4:	80000000 	or	r0, r0, r0

90005ca8 <verifyDoorOpenedSensor>:


static bool verifyDoorOpenedSensor()
{
90005ca8:	3021ffdc 	addik	r1, r1, -36
90005cac:	f9e10000 	swi	r15, r1, 0
90005cb0:	fa610020 	swi	r19, r1, 32
90005cb4:	12610000 	addk	r19, r1, r0
    return stepper_is_at_home_position(stepperF)                            &&
90005cb8:	30a00001 	addik	r5, r0, 1
90005cbc:	b9f45704 	brlid	r15, 22276	// 9000b3c0 <stepper_is_at_home_position>
90005cc0:	80000000 	or	r0, r0, r0
90005cc4:	bc03004c 	beqi	r3, 76		// 90005d10
90005cc8:	30a00001 	addik	r5, r0, 1
90005ccc:	b9f4584c 	brlid	r15, 22604	// 9000b518 <get_stepper_position>
90005cd0:	80000000 	or	r0, r0, r0
90005cd4:	bc23003c 	bnei	r3, 60		// 90005d10
90005cd8:	30a00001 	addik	r5, r0, 1
90005cdc:	b9f4583c 	brlid	r15, 22588	// 9000b518 <get_stepper_position>
90005ce0:	80000000 	or	r0, r0, r0
90005ce4:	10830000 	addk	r4, r3, r0
90005ce8:	b0009002 	imm	-28670
90005cec:	e8604d14 	lwi	r3, r0, 19732
90005cf0:	16432000 	rsubk	r18, r3, r4
90005cf4:	bc120010 	beqi	r18, 16		// 90005d04
90005cf8:	b0009002 	imm	-28670
90005cfc:	e8604d18 	lwi	r3, r0, 19736
90005d00:	bc030010 	beqi	r3, 16		// 90005d10
90005d04:	30600001 	addik	r3, r0, 1
90005d08:	f873001c 	swi	r3, r19, 28
90005d0c:	b800000c 	bri	12		// 90005d18
90005d10:	10600000 	addk	r3, r0, r0
90005d14:	f873001c 	swi	r3, r19, 28
90005d18:	e873001c 	lwi	r3, r19, 28
           get_stepper_position(stepperF) == door_open_position             &&
           (get_stepper_position(stepperF) == motionData.door.startPosition ||
            motionData.door.homePinFound);
}
90005d1c:	e9e10000 	lwi	r15, r1, 0
90005d20:	10330000 	addk	r1, r19, r0
90005d24:	ea610020 	lwi	r19, r1, 32
90005d28:	30210024 	addik	r1, r1, 36
90005d2c:	b60f0008 	rtsd	r15, 8
90005d30:	80000000 	or	r0, r0, r0

90005d34 <verifyDoorClosedSensor>:



static bool verifyDoorClosedSensor()
{
90005d34:	3021ffdc 	addik	r1, r1, -36
90005d38:	f9e10000 	swi	r15, r1, 0
90005d3c:	fa610020 	swi	r19, r1, 32
90005d40:	12610000 	addk	r19, r1, r0
    return stepper_is_at_alt_position(stepperF)                             &&
90005d44:	30a00001 	addik	r5, r0, 1
90005d48:	b9f45714 	brlid	r15, 22292	// 9000b45c <stepper_is_at_alt_position>
90005d4c:	80000000 	or	r0, r0, r0
90005d50:	bc03005c 	beqi	r3, 92		// 90005dac
90005d54:	30a00001 	addik	r5, r0, 1
90005d58:	b9f457c0 	brlid	r15, 22464	// 9000b518 <get_stepper_position>
90005d5c:	80000000 	or	r0, r0, r0
90005d60:	10830000 	addk	r4, r3, r0
90005d64:	b0009002 	imm	-28670
90005d68:	e8604d10 	lwi	r3, r0, 19728
90005d6c:	16432000 	rsubk	r18, r3, r4
90005d70:	bc32003c 	bnei	r18, 60		// 90005dac
90005d74:	30a00001 	addik	r5, r0, 1
90005d78:	b9f457a0 	brlid	r15, 22432	// 9000b518 <get_stepper_position>
90005d7c:	80000000 	or	r0, r0, r0
90005d80:	10830000 	addk	r4, r3, r0
90005d84:	b0009002 	imm	-28670
90005d88:	e8604d14 	lwi	r3, r0, 19732
90005d8c:	16432000 	rsubk	r18, r3, r4
90005d90:	bc120010 	beqi	r18, 16		// 90005da0
90005d94:	b0009002 	imm	-28670
90005d98:	e8604d1c 	lwi	r3, r0, 19740
90005d9c:	bc030010 	beqi	r3, 16		// 90005dac
90005da0:	30600001 	addik	r3, r0, 1
90005da4:	f873001c 	swi	r3, r19, 28
90005da8:	b800000c 	bri	12		// 90005db4
90005dac:	10600000 	addk	r3, r0, r0
90005db0:	f873001c 	swi	r3, r19, 28
90005db4:	e873001c 	lwi	r3, r19, 28
           get_stepper_position(stepperF) == motionData.door.closedPosition &&
           (get_stepper_position(stepperF) == motionData.door.startPosition ||
            motionData.door.altPinFound);
}
90005db8:	e9e10000 	lwi	r15, r1, 0
90005dbc:	10330000 	addk	r1, r19, r0
90005dc0:	ea610020 	lwi	r19, r1, 32
90005dc4:	30210024 	addik	r1, r1, 36
90005dc8:	b60f0008 	rtsd	r15, 8
90005dcc:	80000000 	or	r0, r0, r0

90005dd0 <verifyLidRaisedSensors>:



static bool verifyLidRaisedSensors()
{
90005dd0:	3021ffdc 	addik	r1, r1, -36
90005dd4:	f9e10000 	swi	r15, r1, 0
90005dd8:	fa610020 	swi	r19, r1, 32
90005ddc:	12610000 	addk	r19, r1, r0
    return stepper_is_at_home_position(stepperU)                           &&
90005de0:	10a00000 	addk	r5, r0, r0
90005de4:	b9f455dc 	brlid	r15, 21980	// 9000b3c0 <stepper_is_at_home_position>
90005de8:	80000000 	or	r0, r0, r0
90005dec:	bc03004c 	beqi	r3, 76		// 90005e38
90005df0:	10a00000 	addk	r5, r0, r0
90005df4:	b9f45724 	brlid	r15, 22308	// 9000b518 <get_stepper_position>
90005df8:	80000000 	or	r0, r0, r0
90005dfc:	bc23003c 	bnei	r3, 60		// 90005e38
90005e00:	10a00000 	addk	r5, r0, r0
90005e04:	b9f45714 	brlid	r15, 22292	// 9000b518 <get_stepper_position>
90005e08:	80000000 	or	r0, r0, r0
90005e0c:	10830000 	addk	r4, r3, r0
90005e10:	b0009002 	imm	-28670
90005e14:	e8604d40 	lwi	r3, r0, 19776
90005e18:	16432000 	rsubk	r18, r3, r4
90005e1c:	bc120010 	beqi	r18, 16		// 90005e2c
90005e20:	b0009002 	imm	-28670
90005e24:	e8604d44 	lwi	r3, r0, 19780
90005e28:	bc030010 	beqi	r3, 16		// 90005e38
90005e2c:	30600001 	addik	r3, r0, 1
90005e30:	f873001c 	swi	r3, r19, 28
90005e34:	b800000c 	bri	12		// 90005e40
90005e38:	10600000 	addk	r3, r0, r0
90005e3c:	f873001c 	swi	r3, r19, 28
90005e40:	e873001c 	lwi	r3, r19, 28
           get_stepper_position(stepperU) == lid_raised_position           &&
           (get_stepper_position(stepperU) == motionData.lid.startPosition ||
            motionData.lid.homePinFound);
}
90005e44:	e9e10000 	lwi	r15, r1, 0
90005e48:	10330000 	addk	r1, r19, r0
90005e4c:	ea610020 	lwi	r19, r1, 32
90005e50:	30210024 	addik	r1, r1, 36
90005e54:	b60f0008 	rtsd	r15, 8
90005e58:	80000000 	or	r0, r0, r0

90005e5c <verifyLidLoweredSensors>:



static bool verifyLidLoweredSensors()
{
90005e5c:	3021ffdc 	addik	r1, r1, -36
90005e60:	f9e10000 	swi	r15, r1, 0
90005e64:	fa610020 	swi	r19, r1, 32
90005e68:	12610000 	addk	r19, r1, r0
    return (get_stepper_position(stepperU) == motionData.lid.compressedPosition    ||
90005e6c:	10a00000 	addk	r5, r0, r0
90005e70:	b9f456a8 	brlid	r15, 22184	// 9000b518 <get_stepper_position>
90005e74:	80000000 	or	r0, r0, r0
90005e78:	10830000 	addk	r4, r3, r0
90005e7c:	b0009002 	imm	-28670
90005e80:	e8604d3c 	lwi	r3, r0, 19772
90005e84:	16432000 	rsubk	r18, r3, r4
90005e88:	bc120014 	beqi	r18, 20		// 90005e9c
90005e8c:	b0009002 	imm	-28670
90005e90:	e8604d64 	lwi	r3, r0, 19812
90005e94:	aa430001 	xori	r18, r3, 1
90005e98:	bc320088 	bnei	r18, 136		// 90005f20
90005e9c:	10a00000 	addk	r5, r0, r0
90005ea0:	b9f45678 	brlid	r15, 22136	// 9000b518 <get_stepper_position>
90005ea4:	80000000 	or	r0, r0, r0
90005ea8:	10830000 	addk	r4, r3, r0
90005eac:	b0009002 	imm	-28670
90005eb0:	e8604d40 	lwi	r3, r0, 19776
90005eb4:	16432000 	rsubk	r18, r3, r4
90005eb8:	bc12005c 	beqi	r18, 92		// 90005f14
90005ebc:	b0009002 	imm	-28670
90005ec0:	e8604d48 	lwi	r3, r0, 19784
90005ec4:	bc63005c 	blei	r3, 92		// 90005f20
90005ec8:	b0009002 	imm	-28670
90005ecc:	e8604d48 	lwi	r3, r0, 19784
90005ed0:	32400002 	addik	r18, r0, 2
90005ed4:	16439001 	cmp	r18, r3, r18
90005ed8:	bc520048 	blti	r18, 72		// 90005f20
90005edc:	b0009002 	imm	-28670
90005ee0:	e8604d4c 	lwi	r3, r0, 19788
90005ee4:	bc43003c 	blti	r3, 60		// 90005f20
90005ee8:	b0009002 	imm	-28670
90005eec:	e8604d4c 	lwi	r3, r0, 19788
90005ef0:	32400002 	addik	r18, r0, 2
90005ef4:	16439001 	cmp	r18, r3, r18
90005ef8:	bc520028 	blti	r18, 40		// 90005f20
90005efc:	b0009002 	imm	-28670
90005f00:	e8804d48 	lwi	r4, r0, 19784
90005f04:	b0009002 	imm	-28670
90005f08:	e8604d4c 	lwi	r3, r0, 19788
90005f0c:	16432001 	cmp	r18, r3, r4
90005f10:	bc520010 	blti	r18, 16		// 90005f20
90005f14:	30600001 	addik	r3, r0, 1
90005f18:	f873001c 	swi	r3, r19, 28
90005f1c:	b800000c 	bri	12		// 90005f28
90005f20:	10600000 	addk	r3, r0, r0
90005f24:	f873001c 	swi	r3, r19, 28
90005f28:	e873001c 	lwi	r3, r19, 28
            motionData.lid.plateType == plateType_none)                               &&
           (get_stepper_position(stepperU) == motionData.lid.startPosition         ||
            ((motionData.lid.altPinCount >= 1 && motionData.lid.altPinCount <= 2)     &&
             (motionData.lid.altSpaceCount >= 0 && motionData.lid.altSpaceCount <= 2) &&
             (motionData.lid.altPinCount >= motionData.lid.altSpaceCount)));
}
90005f2c:	e9e10000 	lwi	r15, r1, 0
90005f30:	10330000 	addk	r1, r19, r0
90005f34:	ea610020 	lwi	r19, r1, 32
90005f38:	30210024 	addik	r1, r1, 36
90005f3c:	b60f0008 	rtsd	r15, 8
90005f40:	80000000 	or	r0, r0, r0

90005f44 <disableAndFinishMotorMove>:


static void disableAndFinishMotorMove(StepperMotor stepper, ErrorCodes error, const char* errorDesc)
{
90005f44:	3021ffe0 	addik	r1, r1, -32
90005f48:	f9e10000 	swi	r15, r1, 0
90005f4c:	fa61001c 	swi	r19, r1, 28
90005f50:	12610000 	addk	r19, r1, r0
90005f54:	f8b30024 	swi	r5, r19, 36
90005f58:	f8d30028 	swi	r6, r19, 40
90005f5c:	f8f3002c 	swi	r7, r19, 44
    if(error != err_noError)
90005f60:	e8730028 	lwi	r3, r19, 40
90005f64:	bc030014 	beqi	r3, 20		// 90005f78
    {
        stepper_enable(stepper, false);
90005f68:	e8b30024 	lwi	r5, r19, 36
90005f6c:	10c00000 	addk	r6, r0, r0
90005f70:	b9f44da4 	brlid	r15, 19876	// 9000ad14 <stepper_enable>
90005f74:	80000000 	or	r0, r0, r0
    }

    finishMotorMove(error, errorDesc);
90005f78:	e8b30028 	lwi	r5, r19, 40
90005f7c:	e8d3002c 	lwi	r6, r19, 44
90005f80:	b9f40020 	brlid	r15, 32	// 90005fa0 <finishMotorMove>
90005f84:	80000000 	or	r0, r0, r0
}
90005f88:	e9e10000 	lwi	r15, r1, 0
90005f8c:	10330000 	addk	r1, r19, r0
90005f90:	ea61001c 	lwi	r19, r1, 28
90005f94:	30210020 	addik	r1, r1, 32
90005f98:	b60f0008 	rtsd	r15, 8
90005f9c:	80000000 	or	r0, r0, r0

90005fa0 <finishMotorMove>:

static void finishMotorMove(ErrorCodes error, const char* errorDesc)
{
90005fa0:	3021ffe0 	addik	r1, r1, -32
90005fa4:	f9e10000 	swi	r15, r1, 0
90005fa8:	fa61001c 	swi	r19, r1, 28
90005fac:	12610000 	addk	r19, r1, r0
90005fb0:	f8b30024 	swi	r5, r19, 36
90005fb4:	f8d30028 	swi	r6, r19, 40
    motionData.state = state_idle;
90005fb8:	b0009002 	imm	-28670
90005fbc:	f8004d74 	swi	r0, r0, 19828

    if(motionData.callback.function)
90005fc0:	b0009002 	imm	-28670
90005fc4:	e8604d78 	lwi	r3, r0, 19832
90005fc8:	bc030028 	beqi	r3, 40		// 90005ff0
    {
        motionData.callback.function(motionData.callback.reference, error, errorDesc);
90005fcc:	b0009002 	imm	-28670
90005fd0:	e8804d78 	lwi	r4, r0, 19832
90005fd4:	b0009002 	imm	-28670
90005fd8:	e8604d7c 	lwi	r3, r0, 19836
90005fdc:	10a30000 	addk	r5, r3, r0
90005fe0:	e8d30024 	lwi	r6, r19, 36
90005fe4:	e8f30028 	lwi	r7, r19, 40
90005fe8:	99fc2000 	brald	r15, r4
90005fec:	80000000 	or	r0, r0, r0
    }

    printf("Done.\n");
90005ff0:	b0009002 	imm	-28670
90005ff4:	30a01250 	addik	r5, r0, 4688
90005ff8:	b0000000 	imm	0
90005ffc:	b9f49f3c 	brlid	r15, -24772	// 9000ff38 <puts>
90006000:	80000000 	or	r0, r0, r0
}
90006004:	e9e10000 	lwi	r15, r1, 0
90006008:	10330000 	addk	r1, r19, r0
9000600c:	ea61001c 	lwi	r19, r1, 28
90006010:	30210020 	addik	r1, r1, 32
90006014:	b60f0008 	rtsd	r15, 8
90006018:	80000000 	or	r0, r0, r0

9000601c <motionTest>:



extern char inbyte(void);

void motionTest()
{
9000601c:	3021ffd4 	addik	r1, r1, -44
90006020:	f9e10000 	swi	r15, r1, 0
90006024:	fa610028 	swi	r19, r1, 40
90006028:	12610000 	addk	r19, r1, r0
    const int       STEP_PER_KEY = 500;
9000602c:	306001f4 	addik	r3, r0, 500
90006030:	f8730024 	swi	r3, r19, 36
    const StepperMotor STEPPER      = stepperU;
90006034:	f8130020 	swi	r0, r19, 32
90006038:	b8000004 	bri	4		// 9000603c

    while(1)
    {
        int c = inbyte();
9000603c:	b0000000 	imm	0
90006040:	b9f4c010 	brlid	r15, -16368	// 90012050 <inbyte>
90006044:	80000000 	or	r0, r0, r0
90006048:	f873001c 	swi	r3, r19, 28
        if(c == 'u')
9000604c:	e873001c 	lwi	r3, r19, 28
90006050:	aa430075 	xori	r18, r3, 117
90006054:	bc320034 	bnei	r18, 52		// 90006088
        {
            printf("Stepper up...\n");
90006058:	b0009002 	imm	-28670
9000605c:	30a01258 	addik	r5, r0, 4696
90006060:	b0000000 	imm	0
90006064:	b9f49ed4 	brlid	r15, -24876	// 9000ff38 <puts>
90006068:	80000000 	or	r0, r0, r0
            stepper_move_relative(STEPPER, -STEP_PER_KEY);
9000606c:	e8730024 	lwi	r3, r19, 36
90006070:	14630000 	rsubk	r3, r3, r0
90006074:	e8b30020 	lwi	r5, r19, 32
90006078:	10c30000 	addk	r6, r3, r0
9000607c:	b9f44d9c 	brlid	r15, 19868	// 9000ae18 <stepper_move_relative>
90006080:	80000000 	or	r0, r0, r0
90006084:	b800ffb8 	bri	-72		// 9000603c
        }
        else if(c == 'd')
90006088:	e873001c 	lwi	r3, r19, 28
9000608c:	aa430064 	xori	r18, r3, 100
90006090:	bc32002c 	bnei	r18, 44		// 900060bc
        {
            printf("Stepper down...\n");
90006094:	b0009002 	imm	-28670
90006098:	30a01268 	addik	r5, r0, 4712
9000609c:	b0000000 	imm	0
900060a0:	b9f49e98 	brlid	r15, -24936	// 9000ff38 <puts>
900060a4:	80000000 	or	r0, r0, r0
            stepper_move_relative(STEPPER, STEP_PER_KEY);
900060a8:	e8b30020 	lwi	r5, r19, 32
900060ac:	e8d30024 	lwi	r6, r19, 36
900060b0:	b9f44d68 	brlid	r15, 19816	// 9000ae18 <stepper_move_relative>
900060b4:	80000000 	or	r0, r0, r0
900060b8:	b800ff84 	bri	-124		// 9000603c
        }
        else if(c == 'q')
900060bc:	e873001c 	lwi	r3, r19, 28
900060c0:	aa430071 	xori	r18, r3, 113
900060c4:	bc120008 	beqi	r18, 8		// 900060cc
        {
            break;
        }
    }
900060c8:	b800ff74 	bri	-140		// 9000603c
}
900060cc:	e9e10000 	lwi	r15, r1, 0
900060d0:	10330000 	addk	r1, r19, r0
900060d4:	ea610028 	lwi	r19, r1, 40
900060d8:	3021002c 	addik	r1, r1, 44
900060dc:	b60f0008 	rtsd	r15, 8
900060e0:	80000000 	or	r0, r0, r0

900060e4 <initProcess>:



static bool initProcess()
{
900060e4:	3021ffd8 	addik	r1, r1, -40
900060e8:	f9e10000 	swi	r15, r1, 0
900060ec:	fa610024 	swi	r19, r1, 36
900060f0:	12610000 	addk	r19, r1, r0
    switch(motionData.init.state)
900060f4:	b0009002 	imm	-28670
900060f8:	e86040d4 	lwi	r3, r0, 16596
900060fc:	f8730020 	swi	r3, r19, 32
90006100:	e8730020 	lwi	r3, r19, 32
90006104:	2240000c 	addi	r18, r0, 12
90006108:	16439003 	cmpu	r18, r3, r18
9000610c:	bc520658 	blti	r18, 1624		// 90006764
90006110:	e8730020 	lwi	r3, r19, 32
90006114:	64830402 	bslli	r4, r3, 2
90006118:	b0009002 	imm	-28670
9000611c:	306014f8 	addik	r3, r0, 5368
90006120:	10641800 	addk	r3, r4, r3
90006124:	e8630000 	lwi	r3, r3, 0
90006128:	98081800 	bra	r3
    {
        case initState_idle:
            return true;
9000612c:	30600001 	addik	r3, r0, 1
90006130:	f873001c 	swi	r3, r19, 28
90006134:	b800065c 	bri	1628		// 90006790

        case initState_filterStart:
            if(timerExpired(&motionData.init.timer))
90006138:	b0009002 	imm	-28670
9000613c:	30a040c4 	addik	r5, r0, 16580
90006140:	b9f45e14 	brlid	r15, 24084	// 9000bf54 <timerExpired>
90006144:	80000000 	or	r0, r0, r0
90006148:	bc030640 	beqi	r3, 1600		// 90006788
            {
                if(stepper_busy())
9000614c:	b9f44a84 	brlid	r15, 19076	// 9000abd0 <stepper_busy>
90006150:	80000000 	or	r0, r0, r0
90006154:	bc030024 	beqi	r3, 36		// 90006178
                {
                    finishMotorMove(err_filterInitializationFailure, "Stepper busy - unable to start filter init");
90006158:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9000615c:	b0009002 	imm	-28670
90006160:	30c01278 	addik	r6, r0, 4728
90006164:	b9f4fe3c 	brlid	r15, -452	// 90005fa0 <finishMotorMove>
90006168:	80000000 	or	r0, r0, r0
                    return true;
9000616c:	30600001 	addik	r3, r0, 1
90006170:	f873001c 	swi	r3, r19, 28
90006174:	b800061c 	bri	1564		// 90006790
                }

                startTimer(&motionData.init.timer, MSEC_TO_TICKS(filterInitializationTimeout_ms));
90006178:	b0009002 	imm	-28670
9000617c:	30a040c4 	addik	r5, r0, 16580
90006180:	30c00000 	addik	r6, r0, 0
90006184:	b0000fe4 	imm	4068
90006188:	30e0f840 	addik	r7, r0, -1984
9000618c:	b9f45d64 	brlid	r15, 23908	// 9000bef0 <startTimer>
90006190:	80000000 	or	r0, r0, r0
                motionData.filter.findSpaceSteps = 0;
90006194:	b0009002 	imm	-28670
90006198:	f80040dc 	swi	r0, r0, 16604
                motionData.init.state            = initState_filterFindSpace;
9000619c:	30600002 	addik	r3, r0, 2
900061a0:	b0009002 	imm	-28670
900061a4:	f86040d4 	swi	r3, r0, 16596
            }
            break;
900061a8:	b80005e0 	bri	1504		// 90006788

        case initState_filterFindSpace:
            // Ensure we are not on a filter pin before the search.

            if(timerExpired(&motionData.init.timer))
900061ac:	b0009002 	imm	-28670
900061b0:	30a040c4 	addik	r5, r0, 16580
900061b4:	b9f45da0 	brlid	r15, 23968	// 9000bf54 <timerExpired>
900061b8:	80000000 	or	r0, r0, r0
900061bc:	bc030024 	beqi	r3, 36		// 900061e0
            {
                finishMotorMove(err_filterInitializationFailure, "Timeout waiting for stepper while finding first space");
900061c0:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
900061c4:	b0009002 	imm	-28670
900061c8:	30c012a4 	addik	r6, r0, 4772
900061cc:	b9f4fdd4 	brlid	r15, -556	// 90005fa0 <finishMotorMove>
900061d0:	80000000 	or	r0, r0, r0
                return true;
900061d4:	30600001 	addik	r3, r0, 1
900061d8:	f873001c 	swi	r3, r19, 28
900061dc:	b80005b4 	bri	1460		// 90006790
            }
            else if(!stepper_busy())
900061e0:	b9f449f0 	brlid	r15, 18928	// 9000abd0 <stepper_busy>
900061e4:	80000000 	or	r0, r0, r0
900061e8:	bc2305a0 	bnei	r3, 1440		// 90006788
            {
                if(!stepper_is_at_home_position(stepperR))
900061ec:	30a00002 	addik	r5, r0, 2
900061f0:	b9f451d0 	brlid	r15, 20944	// 9000b3c0 <stepper_is_at_home_position>
900061f4:	80000000 	or	r0, r0, r0
900061f8:	bc23002c 	bnei	r3, 44		// 90006224
                {
                    if(filterInitRun())
900061fc:	b9f407a4 	brlid	r15, 1956	// 900069a0 <filterInitRun>
90006200:	80000000 	or	r0, r0, r0
90006204:	bc030014 	beqi	r3, 20		// 90006218
                    {
                        motionData.init.state = initState_filterRun;
90006208:	30600003 	addik	r3, r0, 3
9000620c:	b0009002 	imm	-28670
90006210:	f86040d4 	swi	r3, r0, 16596
90006214:	b8000574 	bri	1396		// 90006788
                    }
                    else
                    {
                        return true;
90006218:	30600001 	addik	r3, r0, 1
9000621c:	f873001c 	swi	r3, r19, 28
90006220:	b8000570 	bri	1392		// 90006790
                    }
                }
                else if(motionData.filter.findSpaceSteps > maxSpaceFindFilterSteps)
90006224:	b0009002 	imm	-28670
90006228:	e86040dc 	lwi	r3, r0, 16604
9000622c:	32400032 	addik	r18, r0, 50
90006230:	16439001 	cmp	r18, r3, r18
90006234:	bcb20024 	bgei	r18, 36		// 90006258
                {
                    finishMotorMove(err_filterInitializationFailure, "Filter sensor error - unable to find first space");
90006238:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9000623c:	b0009002 	imm	-28670
90006240:	30c012dc 	addik	r6, r0, 4828
90006244:	b9f4fd5c 	brlid	r15, -676	// 90005fa0 <finishMotorMove>
90006248:	80000000 	or	r0, r0, r0
                    return true;
9000624c:	30600001 	addik	r3, r0, 1
90006250:	f873001c 	swi	r3, r19, 28
90006254:	b800053c 	bri	1340		// 90006790
                }
                else
                {
                    motionData.filter.findSpaceSteps += spaceFindStepSize;
90006258:	b0009002 	imm	-28670
9000625c:	e86040dc 	lwi	r3, r0, 16604
90006260:	30630005 	addik	r3, r3, 5
90006264:	b0009002 	imm	-28670
90006268:	f86040dc 	swi	r3, r0, 16604
                    stepper_move_relative(stepperR, spaceFindStepSize);
9000626c:	30a00002 	addik	r5, r0, 2
90006270:	30c00005 	addik	r6, r0, 5
90006274:	b9f44ba4 	brlid	r15, 19364	// 9000ae18 <stepper_move_relative>
90006278:	80000000 	or	r0, r0, r0
                }
            }
            break;
9000627c:	b800050c 	bri	1292		// 90006788

        case initState_filterRun:
            if(!stepper_busy())
90006280:	b9f44950 	brlid	r15, 18768	// 9000abd0 <stepper_busy>
90006284:	80000000 	or	r0, r0, r0
90006288:	bc23002c 	bnei	r3, 44		// 900062b4
            {
                if(filterInitEnd())
9000628c:	b9f40780 	brlid	r15, 1920	// 90006a0c <filterInitEnd>
90006290:	80000000 	or	r0, r0, r0
90006294:	bc030014 	beqi	r3, 20		// 900062a8
                {
                    motionData.init.state = initState_filterEnd;
90006298:	30600004 	addik	r3, r0, 4
9000629c:	b0009002 	imm	-28670
900062a0:	f86040d4 	swi	r3, r0, 16596
900062a4:	b80004e4 	bri	1252		// 90006788
                }
                else
                {
                    return true;
900062a8:	30600001 	addik	r3, r0, 1
900062ac:	f873001c 	swi	r3, r19, 28
900062b0:	b80004e0 	bri	1248		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
900062b4:	b0009002 	imm	-28670
900062b8:	30a040c4 	addik	r5, r0, 16580
900062bc:	b9f45c98 	brlid	r15, 23704	// 9000bf54 <timerExpired>
900062c0:	80000000 	or	r0, r0, r0
900062c4:	bc0304c4 	beqi	r3, 1220		// 90006788
            {
                stepper_abort();
900062c8:	b9f445bc 	brlid	r15, 17852	// 9000a884 <stepper_abort>
900062cc:	80000000 	or	r0, r0, r0
                finishMotorMove(err_filterInitializationFailure, "Filter initialization timed out (step run)");
900062d0:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
900062d4:	b0009002 	imm	-28670
900062d8:	30c01310 	addik	r6, r0, 4880
900062dc:	b9f4fcc4 	brlid	r15, -828	// 90005fa0 <finishMotorMove>
900062e0:	80000000 	or	r0, r0, r0
                return true;
900062e4:	30600001 	addik	r3, r0, 1
900062e8:	f873001c 	swi	r3, r19, 28
900062ec:	b80004a4 	bri	1188		// 90006790
            }
            break;

        case initState_filterEnd:
            if(!stepper_busy())
900062f0:	b9f448e0 	brlid	r15, 18656	// 9000abd0 <stepper_busy>
900062f4:	80000000 	or	r0, r0, r0
900062f8:	bc230054 	bnei	r3, 84		// 9000634c
            {
                motionData.filter.initialized = true;
900062fc:	30600001 	addik	r3, r0, 1
90006300:	b0009002 	imm	-28670
90006304:	f86040d8 	swi	r3, r0, 16600
                printf("Filter Init Done.\n");
90006308:	b0009002 	imm	-28670
9000630c:	30a0133c 	addik	r5, r0, 4924
90006310:	b0000000 	imm	0
90006314:	b9f49c24 	brlid	r15, -25564	// 9000ff38 <puts>
90006318:	80000000 	or	r0, r0, r0

                motionData.init.state = initState_completeNotification;
9000631c:	3060000c 	addik	r3, r0, 12
90006320:	b0009002 	imm	-28670
90006324:	f86040d4 	swi	r3, r0, 16596
                scheduleTask(notifyInitCompleteTask, NULL, false);
90006328:	b0009000 	imm	-28672
9000632c:	30a067ac 	addik	r5, r0, 26540
90006330:	10c00000 	addk	r6, r0, r0
90006334:	10e00000 	addk	r7, r0, r0
90006338:	b9f42744 	brlid	r15, 10052	// 90008a7c <scheduleTask>
9000633c:	80000000 	or	r0, r0, r0

                return false;
90006340:	10600000 	addk	r3, r0, r0
90006344:	f873001c 	swi	r3, r19, 28
90006348:	b8000448 	bri	1096		// 90006790
            }
            else if(timerExpired(&motionData.init.timer))
9000634c:	b0009002 	imm	-28670
90006350:	30a040c4 	addik	r5, r0, 16580
90006354:	b9f45c00 	brlid	r15, 23552	// 9000bf54 <timerExpired>
90006358:	80000000 	or	r0, r0, r0
9000635c:	bc03042c 	beqi	r3, 1068		// 90006788
            {
                stepper_abort();
90006360:	b9f44524 	brlid	r15, 17700	// 9000a884 <stepper_abort>
90006364:	80000000 	or	r0, r0, r0
                finishMotorMove(err_filterInitializationFailure, "Filter initialization timed out (step end)");
90006368:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9000636c:	b0009002 	imm	-28670
90006370:	30c01350 	addik	r6, r0, 4944
90006374:	b9f4fc2c 	brlid	r15, -980	// 90005fa0 <finishMotorMove>
90006378:	80000000 	or	r0, r0, r0
                return true;
9000637c:	30600001 	addik	r3, r0, 1
90006380:	f873001c 	swi	r3, r19, 28
90006384:	b800040c 	bri	1036		// 90006790
            }
            break;

        case initState_lidStart:
            if(!stepper_busy())
90006388:	b9f44848 	brlid	r15, 18504	// 9000abd0 <stepper_busy>
9000638c:	80000000 	or	r0, r0, r0
90006390:	bc23002c 	bnei	r3, 44		// 900063bc
            {
                if(lidInitRun1())
90006394:	b9f40dc4 	brlid	r15, 3524	// 90007158 <lidInitRun1>
90006398:	80000000 	or	r0, r0, r0
9000639c:	bc030014 	beqi	r3, 20		// 900063b0
                {
                    motionData.init.state = initState_lidRun1;
900063a0:	30600006 	addik	r3, r0, 6
900063a4:	b0009002 	imm	-28670
900063a8:	f86040d4 	swi	r3, r0, 16596
900063ac:	b80003dc 	bri	988		// 90006788
                }
                else
                {
                    return true;
900063b0:	30600001 	addik	r3, r0, 1
900063b4:	f873001c 	swi	r3, r19, 28
900063b8:	b80003d8 	bri	984		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
900063bc:	b0009002 	imm	-28670
900063c0:	30a040c4 	addik	r5, r0, 16580
900063c4:	b9f45b90 	brlid	r15, 23440	// 9000bf54 <timerExpired>
900063c8:	80000000 	or	r0, r0, r0
900063cc:	bc0303bc 	beqi	r3, 956		// 90006788
            {
                stepper_abort();
900063d0:	b9f444b4 	brlid	r15, 17588	// 9000a884 <stepper_abort>
900063d4:	80000000 	or	r0, r0, r0
                finishMotorMove(err_lidInitializationFailure, "Lid initialization timed out (step start)");
900063d8:	30a00014 	addik	r5, r0, 20
900063dc:	b0009002 	imm	-28670
900063e0:	30c0137c 	addik	r6, r0, 4988
900063e4:	b9f4fbbc 	brlid	r15, -1092	// 90005fa0 <finishMotorMove>
900063e8:	80000000 	or	r0, r0, r0
                return true;
900063ec:	30600001 	addik	r3, r0, 1
900063f0:	f873001c 	swi	r3, r19, 28
900063f4:	b800039c 	bri	924		// 90006790
            }
            break;

        case initState_lidRun1:
            if(!stepper_busy())
900063f8:	b9f447d8 	brlid	r15, 18392	// 9000abd0 <stepper_busy>
900063fc:	80000000 	or	r0, r0, r0
90006400:	bc23002c 	bnei	r3, 44		// 9000642c
            {
                if(lidInitRun2())
90006404:	b9f40dd8 	brlid	r15, 3544	// 900071dc <lidInitRun2>
90006408:	80000000 	or	r0, r0, r0
9000640c:	bc030014 	beqi	r3, 20		// 90006420
                {
                    motionData.init.state = initState_lidRun2;
90006410:	30600007 	addik	r3, r0, 7
90006414:	b0009002 	imm	-28670
90006418:	f86040d4 	swi	r3, r0, 16596
9000641c:	b800036c 	bri	876		// 90006788
                }
                else
                {
                    return true;
90006420:	30600001 	addik	r3, r0, 1
90006424:	f873001c 	swi	r3, r19, 28
90006428:	b8000368 	bri	872		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
9000642c:	b0009002 	imm	-28670
90006430:	30a040c4 	addik	r5, r0, 16580
90006434:	b9f45b20 	brlid	r15, 23328	// 9000bf54 <timerExpired>
90006438:	80000000 	or	r0, r0, r0
9000643c:	bc03034c 	beqi	r3, 844		// 90006788
            {
                stepper_abort();
90006440:	b9f44444 	brlid	r15, 17476	// 9000a884 <stepper_abort>
90006444:	80000000 	or	r0, r0, r0
                finishMotorMove(err_lidInitializationFailure, "Lid initialization timed out (step run1)");
90006448:	30a00014 	addik	r5, r0, 20
9000644c:	b0009002 	imm	-28670
90006450:	30c013a8 	addik	r6, r0, 5032
90006454:	b9f4fb4c 	brlid	r15, -1204	// 90005fa0 <finishMotorMove>
90006458:	80000000 	or	r0, r0, r0
                return true;
9000645c:	30600001 	addik	r3, r0, 1
90006460:	f873001c 	swi	r3, r19, 28
90006464:	b800032c 	bri	812		// 90006790
            }
            break;

        case initState_lidRun2:
            if(!stepper_busy())
90006468:	b9f44768 	brlid	r15, 18280	// 9000abd0 <stepper_busy>
9000646c:	80000000 	or	r0, r0, r0
90006470:	bc23002c 	bnei	r3, 44		// 9000649c
            {
                if(lidInitEnd())
90006474:	b9f40dc4 	brlid	r15, 3524	// 90007238 <lidInitEnd>
90006478:	80000000 	or	r0, r0, r0
9000647c:	bc030014 	beqi	r3, 20		// 90006490
                {
                    motionData.init.state = initState_lidEnd;
90006480:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
90006484:	b0009002 	imm	-28670
90006488:	f86040d4 	swi	r3, r0, 16596
9000648c:	b80002fc 	bri	764		// 90006788
                }
                else
                {
                    return true;
90006490:	30600001 	addik	r3, r0, 1
90006494:	f873001c 	swi	r3, r19, 28
90006498:	b80002f8 	bri	760		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
9000649c:	b0009002 	imm	-28670
900064a0:	30a040c4 	addik	r5, r0, 16580
900064a4:	b9f45ab0 	brlid	r15, 23216	// 9000bf54 <timerExpired>
900064a8:	80000000 	or	r0, r0, r0
900064ac:	bc0302dc 	beqi	r3, 732		// 90006788
            {
                stepper_abort();
900064b0:	b9f443d4 	brlid	r15, 17364	// 9000a884 <stepper_abort>
900064b4:	80000000 	or	r0, r0, r0
                finishMotorMove(err_lidInitializationFailure, "Lid initialization timed out (step run2)");
900064b8:	30a00014 	addik	r5, r0, 20
900064bc:	b0009002 	imm	-28670
900064c0:	30c013d4 	addik	r6, r0, 5076
900064c4:	b9f4fadc 	brlid	r15, -1316	// 90005fa0 <finishMotorMove>
900064c8:	80000000 	or	r0, r0, r0
                return true;
900064cc:	30600001 	addik	r3, r0, 1
900064d0:	f873001c 	swi	r3, r19, 28
900064d4:	b80002bc 	bri	700		// 90006790
            }
            break;

        case initState_lidEnd:
            if(!stepper_busy())
900064d8:	b9f446f8 	brlid	r15, 18168	// 9000abd0 <stepper_busy>
900064dc:	80000000 	or	r0, r0, r0
900064e0:	bc230054 	bnei	r3, 84		// 90006534
            {
                motionData.lid.initialized = true;
900064e4:	30600001 	addik	r3, r0, 1
900064e8:	b0009002 	imm	-28670
900064ec:	f8604d34 	swi	r3, r0, 19764
                printf("Lid Init Done.\n");
900064f0:	b0009002 	imm	-28670
900064f4:	30a01400 	addik	r5, r0, 5120
900064f8:	b0000000 	imm	0
900064fc:	b9f49a3c 	brlid	r15, -26052	// 9000ff38 <puts>
90006500:	80000000 	or	r0, r0, r0

                motionData.init.state = initState_completeNotification;
90006504:	3060000c 	addik	r3, r0, 12
90006508:	b0009002 	imm	-28670
9000650c:	f86040d4 	swi	r3, r0, 16596
                scheduleTask(notifyInitCompleteTask, NULL, false);
90006510:	b0009000 	imm	-28672
90006514:	30a067ac 	addik	r5, r0, 26540
90006518:	10c00000 	addk	r6, r0, r0
9000651c:	10e00000 	addk	r7, r0, r0
90006520:	b9f4255c 	brlid	r15, 9564	// 90008a7c <scheduleTask>
90006524:	80000000 	or	r0, r0, r0

                return false;
90006528:	10600000 	addk	r3, r0, r0
9000652c:	f873001c 	swi	r3, r19, 28
90006530:	b8000260 	bri	608		// 90006790
            }
            else if(timerExpired(&motionData.init.timer))
90006534:	b0009002 	imm	-28670
90006538:	30a040c4 	addik	r5, r0, 16580
9000653c:	b9f45a18 	brlid	r15, 23064	// 9000bf54 <timerExpired>
90006540:	80000000 	or	r0, r0, r0
90006544:	bc030244 	beqi	r3, 580		// 90006788
            {
                stepper_abort();
90006548:	b9f4433c 	brlid	r15, 17212	// 9000a884 <stepper_abort>
9000654c:	80000000 	or	r0, r0, r0
                finishMotorMove(err_lidInitializationFailure, "Lid initialization timed out (step end)");
90006550:	30a00014 	addik	r5, r0, 20
90006554:	b0009002 	imm	-28670
90006558:	30c01410 	addik	r6, r0, 5136
9000655c:	b9f4fa44 	brlid	r15, -1468	// 90005fa0 <finishMotorMove>
90006560:	80000000 	or	r0, r0, r0
                return true;
90006564:	30600001 	addik	r3, r0, 1
90006568:	f873001c 	swi	r3, r19, 28
9000656c:	b8000224 	bri	548		// 90006790
            }
            break;

        case initState_doorStart:
            if(!stepper_busy())
90006570:	b9f44660 	brlid	r15, 18016	// 9000abd0 <stepper_busy>
90006574:	80000000 	or	r0, r0, r0
90006578:	bc23002c 	bnei	r3, 44		// 900065a4
            {
                if(doorInitRun())
9000657c:	b9f417d8 	brlid	r15, 6104	// 90007d54 <doorInitRun>
90006580:	80000000 	or	r0, r0, r0
90006584:	bc030014 	beqi	r3, 20		// 90006598
                {
                    motionData.init.state = initState_doorRun;
90006588:	3060000a 	addik	r3, r0, 10
9000658c:	b0009002 	imm	-28670
90006590:	f86040d4 	swi	r3, r0, 16596
90006594:	b80001f4 	bri	500		// 90006788
                }
                else
                {
                    return true;
90006598:	30600001 	addik	r3, r0, 1
9000659c:	f873001c 	swi	r3, r19, 28
900065a0:	b80001f0 	bri	496		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
900065a4:	b0009002 	imm	-28670
900065a8:	30a040c4 	addik	r5, r0, 16580
900065ac:	b9f459a8 	brlid	r15, 22952	// 9000bf54 <timerExpired>
900065b0:	80000000 	or	r0, r0, r0
900065b4:	bc0301d4 	beqi	r3, 468		// 90006788
            {
                stepper_abort();
900065b8:	b9f442cc 	brlid	r15, 17100	// 9000a884 <stepper_abort>
900065bc:	80000000 	or	r0, r0, r0
                finishMotorMove(err_doorInitializationFailure, "Door initialization timed out (step start)");
900065c0:	30a0001b 	addik	r5, r0, 27
900065c4:	b0009002 	imm	-28670
900065c8:	30c01438 	addik	r6, r0, 5176
900065cc:	b9f4f9d4 	brlid	r15, -1580	// 90005fa0 <finishMotorMove>
900065d0:	80000000 	or	r0, r0, r0
                return true;
900065d4:	30600001 	addik	r3, r0, 1
900065d8:	f873001c 	swi	r3, r19, 28
900065dc:	b80001b4 	bri	436		// 90006790
            }
            break;

        case initState_doorRun:
            if(!stepper_busy())
900065e0:	b9f445f0 	brlid	r15, 17904	// 9000abd0 <stepper_busy>
900065e4:	80000000 	or	r0, r0, r0
900065e8:	bc23009c 	bnei	r3, 156		// 90006684
            {
                if(!stepper_is_at_home_position(stepperF))
900065ec:	30a00001 	addik	r5, r0, 1
900065f0:	b9f44dd0 	brlid	r15, 19920	// 9000b3c0 <stepper_is_at_home_position>
900065f4:	80000000 	or	r0, r0, r0
900065f8:	bc23002c 	bnei	r3, 44		// 90006624
                {
                    stepper_abort();
900065fc:	b9f44288 	brlid	r15, 17032	// 9000a884 <stepper_abort>
90006600:	80000000 	or	r0, r0, r0
                    finishMotorMove(err_doorInitializationFailure, "Home sensor not found");
90006604:	30a0001b 	addik	r5, r0, 27
90006608:	b0009002 	imm	-28670
9000660c:	30c01464 	addik	r6, r0, 5220
90006610:	b9f4f990 	brlid	r15, -1648	// 90005fa0 <finishMotorMove>
90006614:	80000000 	or	r0, r0, r0
                    return true;
90006618:	30600001 	addik	r3, r0, 1
9000661c:	f873001c 	swi	r3, r19, 28
90006620:	b8000170 	bri	368		// 90006790
                }

                if(stepper_is_at_alt_position(stepperF))
90006624:	30a00001 	addik	r5, r0, 1
90006628:	b9f44e34 	brlid	r15, 20020	// 9000b45c <stepper_is_at_alt_position>
9000662c:	80000000 	or	r0, r0, r0
90006630:	bc03002c 	beqi	r3, 44		// 9000665c
                {
                    stepper_abort();
90006634:	b9f44250 	brlid	r15, 16976	// 9000a884 <stepper_abort>
90006638:	80000000 	or	r0, r0, r0
                    finishMotorMove(err_doorInitializationFailure, "Alt sensor not open");
9000663c:	30a0001b 	addik	r5, r0, 27
90006640:	b0009002 	imm	-28670
90006644:	30c0147c 	addik	r6, r0, 5244
90006648:	b9f4f958 	brlid	r15, -1704	// 90005fa0 <finishMotorMove>
9000664c:	80000000 	or	r0, r0, r0
                    return true;
90006650:	30600001 	addik	r3, r0, 1
90006654:	f873001c 	swi	r3, r19, 28
90006658:	b8000138 	bri	312		// 90006790
                }

                if(doorInitEnd())
9000665c:	b9f41754 	brlid	r15, 5972	// 90007db0 <doorInitEnd>
90006660:	80000000 	or	r0, r0, r0
90006664:	bc030014 	beqi	r3, 20		// 90006678
                {
                    motionData.init.state = initState_doorEnd;
90006668:	3060000b 	addik	r3, r0, 11
9000666c:	b0009002 	imm	-28670
90006670:	f86040d4 	swi	r3, r0, 16596
90006674:	b8000114 	bri	276		// 90006788
                }
                else
                {
                    return true;
90006678:	30600001 	addik	r3, r0, 1
9000667c:	f873001c 	swi	r3, r19, 28
90006680:	b8000110 	bri	272		// 90006790
                }
            }
            else if(timerExpired(&motionData.init.timer))
90006684:	b0009002 	imm	-28670
90006688:	30a040c4 	addik	r5, r0, 16580
9000668c:	b9f458c8 	brlid	r15, 22728	// 9000bf54 <timerExpired>
90006690:	80000000 	or	r0, r0, r0
90006694:	bc0300f4 	beqi	r3, 244		// 90006788
            {
                stepper_abort();
90006698:	b9f441ec 	brlid	r15, 16876	// 9000a884 <stepper_abort>
9000669c:	80000000 	or	r0, r0, r0
                finishMotorMove(err_doorInitializationFailure, "Door initialization timed out (step run)");
900066a0:	30a0001b 	addik	r5, r0, 27
900066a4:	b0009002 	imm	-28670
900066a8:	30c01490 	addik	r6, r0, 5264
900066ac:	b9f4f8f4 	brlid	r15, -1804	// 90005fa0 <finishMotorMove>
900066b0:	80000000 	or	r0, r0, r0
                return true;
900066b4:	30600001 	addik	r3, r0, 1
900066b8:	f873001c 	swi	r3, r19, 28
900066bc:	b80000d4 	bri	212		// 90006790
            }
            break;

        case initState_doorEnd:
            if(!stepper_busy())
900066c0:	b9f44510 	brlid	r15, 17680	// 9000abd0 <stepper_busy>
900066c4:	80000000 	or	r0, r0, r0
900066c8:	bc230054 	bnei	r3, 84		// 9000671c
            {
                motionData.door.initialized = true;
900066cc:	30600001 	addik	r3, r0, 1
900066d0:	b0009002 	imm	-28670
900066d4:	f8604d08 	swi	r3, r0, 19720
                printf("Door Init Done.\n");
900066d8:	b0009002 	imm	-28670
900066dc:	30a014bc 	addik	r5, r0, 5308
900066e0:	b0000000 	imm	0
900066e4:	b9f49854 	brlid	r15, -26540	// 9000ff38 <puts>
900066e8:	80000000 	or	r0, r0, r0

                motionData.init.state = initState_completeNotification;
900066ec:	3060000c 	addik	r3, r0, 12
900066f0:	b0009002 	imm	-28670
900066f4:	f86040d4 	swi	r3, r0, 16596
                scheduleTask(notifyInitCompleteTask, NULL, false);
900066f8:	b0009000 	imm	-28672
900066fc:	30a067ac 	addik	r5, r0, 26540
90006700:	10c00000 	addk	r6, r0, r0
90006704:	10e00000 	addk	r7, r0, r0
90006708:	b9f42374 	brlid	r15, 9076	// 90008a7c <scheduleTask>
9000670c:	80000000 	or	r0, r0, r0

                return false;
90006710:	10600000 	addk	r3, r0, r0
90006714:	f873001c 	swi	r3, r19, 28
90006718:	b8000078 	bri	120		// 90006790
            }
            else if(timerExpired(&motionData.init.timer))
9000671c:	b0009002 	imm	-28670
90006720:	30a040c4 	addik	r5, r0, 16580
90006724:	b9f45830 	brlid	r15, 22576	// 9000bf54 <timerExpired>
90006728:	80000000 	or	r0, r0, r0
9000672c:	bc03005c 	beqi	r3, 92		// 90006788
            {
                stepper_abort();
90006730:	b9f44154 	brlid	r15, 16724	// 9000a884 <stepper_abort>
90006734:	80000000 	or	r0, r0, r0
                finishMotorMove(err_doorInitializationFailure, "Door initialization timed out (step end)");
90006738:	30a0001b 	addik	r5, r0, 27
9000673c:	b0009002 	imm	-28670
90006740:	30c014cc 	addik	r6, r0, 5324
90006744:	b9f4f85c 	brlid	r15, -1956	// 90005fa0 <finishMotorMove>
90006748:	80000000 	or	r0, r0, r0
                return true;
9000674c:	30600001 	addik	r3, r0, 1
90006750:	f873001c 	swi	r3, r19, 28
90006754:	b800003c 	bri	60		// 90006790
            }
            break;

        case initState_completeNotification:
            // Do nothing
            return true;
90006758:	30600001 	addik	r3, r0, 1
9000675c:	f873001c 	swi	r3, r19, 28
90006760:	b8000030 	bri	48		// 90006790

        default:
            ASSERT(false);
90006764:	94110002 	msrclr	r0, 2
90006768:	b0009002 	imm	-28670
9000676c:	30a00de0 	addik	r5, r0, 3552
90006770:	b0009002 	imm	-28670
90006774:	30c00c2c 	addik	r6, r0, 3116
90006778:	30e0061c 	addik	r7, r0, 1564
9000677c:	b9f45ca8 	brlid	r15, 23720	// 9000c424 <printAssert>
90006780:	80000000 	or	r0, r0, r0
90006784:	b8000000 	bri	0		// 90006784
            break;
    }

    return false;
90006788:	10600000 	addk	r3, r0, r0
9000678c:	f873001c 	swi	r3, r19, 28
90006790:	e873001c 	lwi	r3, r19, 28
}
90006794:	e9e10000 	lwi	r15, r1, 0
90006798:	10330000 	addk	r1, r19, r0
9000679c:	ea610024 	lwi	r19, r1, 36
900067a0:	30210028 	addik	r1, r1, 40
900067a4:	b60f0008 	rtsd	r15, 8
900067a8:	80000000 	or	r0, r0, r0

900067ac <notifyInitCompleteTask>:



bool notifyInitCompleteTask(void* unused)
{
900067ac:	3021ffe0 	addik	r1, r1, -32
900067b0:	f9e10000 	swi	r15, r1, 0
900067b4:	fa61001c 	swi	r19, r1, 28
900067b8:	12610000 	addk	r19, r1, r0
900067bc:	f8b30024 	swi	r5, r19, 36
    if(motionData.init.state == initState_completeNotification)
900067c0:	b0009002 	imm	-28670
900067c4:	e86040d4 	lwi	r3, r0, 16596
900067c8:	aa43000c 	xori	r18, r3, 12
900067cc:	bc320044 	bnei	r18, 68		// 90006810
    {
        motionData.init.state = initState_idle;
900067d0:	b0009002 	imm	-28670
900067d4:	f80040d4 	swi	r0, r0, 16596
        motionData.state      = state_idle;
900067d8:	b0009002 	imm	-28670
900067dc:	f8004d74 	swi	r0, r0, 19828

        if(motionData.callback.function)
900067e0:	b0009002 	imm	-28670
900067e4:	e8604d78 	lwi	r3, r0, 19832
900067e8:	bc030028 	beqi	r3, 40		// 90006810
        {
            motionData.callback.function(motionData.callback.reference, err_noError, NULL);
900067ec:	b0009002 	imm	-28670
900067f0:	e8804d78 	lwi	r4, r0, 19832
900067f4:	b0009002 	imm	-28670
900067f8:	e8604d7c 	lwi	r3, r0, 19836
900067fc:	10a30000 	addk	r5, r3, r0
90006800:	10c00000 	addk	r6, r0, r0
90006804:	10e00000 	addk	r7, r0, r0
90006808:	99fc2000 	brald	r15, r4
9000680c:	80000000 	or	r0, r0, r0
        }
    }

    return false;
90006810:	10600000 	addk	r3, r0, r0
}
90006814:	e9e10000 	lwi	r15, r1, 0
90006818:	10330000 	addk	r1, r19, r0
9000681c:	ea61001c 	lwi	r19, r1, 28
90006820:	30210020 	addik	r1, r1, 32
90006824:	b60f0008 	rtsd	r15, 8
90006828:	80000000 	or	r0, r0, r0

9000682c <filterInitStart>:



//------------------------------------------------------------------------------
static bool filterInitStart()
{
9000682c:	3021ffe0 	addik	r1, r1, -32
90006830:	f9e10000 	swi	r15, r1, 0
90006834:	fa61001c 	swi	r19, r1, 28
90006838:	12610000 	addk	r19, r1, r0
    // Mark uninitialized & enable stepper
    motionData.filter.initialized = false;
9000683c:	b0009002 	imm	-28670
90006840:	f80040d8 	swi	r0, r0, 16600
    stepper_enable(stepperR, true);
90006844:	30a00002 	addik	r5, r0, 2
90006848:	30c00001 	addik	r6, r0, 1
9000684c:	b9f444c8 	brlid	r15, 17608	// 9000ad14 <stepper_enable>
90006850:	80000000 	or	r0, r0, r0

    printf("Initializing Filter...\n");
90006854:	b0009002 	imm	-28670
90006858:	30a0152c 	addik	r5, r0, 5420
9000685c:	b0000000 	imm	0
90006860:	b9f496d8 	brlid	r15, -26920	// 9000ff38 <puts>
90006864:	80000000 	or	r0, r0, r0



    // Slow down the stepper to smooth out the search for the filter pins.
    stepper_set_parameter(stepperR, stepperSlowFrequency, filterPinSearchFrequency);
90006868:	30a00002 	addik	r5, r0, 2
9000686c:	30c00001 	addik	r6, r0, 1
90006870:	30e00019 	addik	r7, r0, 25
90006874:	b9f4416c 	brlid	r15, 16748	// 9000a9e0 <stepper_set_parameter>
90006878:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperFastFrequency, filterPinSearchFrequency);
9000687c:	30a00002 	addik	r5, r0, 2
90006880:	10c00000 	addk	r6, r0, r0
90006884:	30e00019 	addik	r7, r0, 25
90006888:	b9f44158 	brlid	r15, 16728	// 9000a9e0 <stepper_set_parameter>
9000688c:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperRampSteps, filterPinSearchRampSteps);
90006890:	30a00002 	addik	r5, r0, 2
90006894:	30c00002 	addik	r6, r0, 2
90006898:	30e0000a 	addik	r7, r0, 10
9000689c:	b9f44144 	brlid	r15, 16708	// 9000a9e0 <stepper_set_parameter>
900068a0:	80000000 	or	r0, r0, r0

    stepper_set_home_sensor_make_hook(stepperR, NULL);
900068a4:	30a00002 	addik	r5, r0, 2
900068a8:	10c00000 	addk	r6, r0, r0
900068ac:	b9f44904 	brlid	r15, 18692	// 9000b1b0 <stepper_set_home_sensor_make_hook>
900068b0:	80000000 	or	r0, r0, r0

    motionData.filter.positionIndex = filterStepsPerRevolution;
900068b4:	30600300 	addik	r3, r0, 768
900068b8:	b0009002 	imm	-28670
900068bc:	f8604cf8 	swi	r3, r0, 19704
    while(motionData.filter.positionIndex)
900068c0:	b800003c 	bri	60		// 900068fc
    {
        motionData.filter.sensorBreakPositions[--motionData.filter.positionIndex] = invalid_position;
900068c4:	b0009002 	imm	-28670
900068c8:	e8604cf8 	lwi	r3, r0, 19704
900068cc:	3063ffff 	addik	r3, r3, -1
900068d0:	b0009002 	imm	-28670
900068d4:	f8604cf8 	swi	r3, r0, 19704
900068d8:	b0009002 	imm	-28670
900068dc:	e8604cf8 	lwi	r3, r0, 19704
900068e0:	64830402 	bslli	r4, r3, 2
900068e4:	b0009002 	imm	-28670
900068e8:	306040f8 	addik	r3, r0, 16632
900068ec:	10841800 	addk	r4, r4, r3
900068f0:	b0007fff 	imm	32767
900068f4:	3060ffff 	addik	r3, r0, -1
900068f8:	f8640000 	swi	r3, r4, 0
900068fc:	b0009002 	imm	-28670
90006900:	e8604cf8 	lwi	r3, r0, 19704
90006904:	bc23ffc0 	bnei	r3, -64		// 900068c4
    }

    motionData.filter.positionIndex = num_filters;
90006908:	30600006 	addik	r3, r0, 6
9000690c:	b0009002 	imm	-28670
90006910:	f8604cf8 	swi	r3, r0, 19704
    while(motionData.filter.positionIndex)
90006914:	b800003c 	bri	60		// 90006950
    {
        motionData.filter.filterPositions[--motionData.filter.positionIndex] = invalid_position;
90006918:	b0009002 	imm	-28670
9000691c:	e8604cf8 	lwi	r3, r0, 19704
90006920:	3063ffff 	addik	r3, r3, -1
90006924:	b0009002 	imm	-28670
90006928:	f8604cf8 	swi	r3, r0, 19704
9000692c:	b0009002 	imm	-28670
90006930:	e8604cf8 	lwi	r3, r0, 19704
90006934:	64830402 	bslli	r4, r3, 2
90006938:	b0009002 	imm	-28670
9000693c:	306040e0 	addik	r3, r0, 16608
90006940:	10841800 	addk	r4, r4, r3
90006944:	b0007fff 	imm	32767
90006948:	3060ffff 	addik	r3, r0, -1
9000694c:	f8640000 	swi	r3, r4, 0
90006950:	b0009002 	imm	-28670
90006954:	e8604cf8 	lwi	r3, r0, 19704
90006958:	bc23ffc0 	bnei	r3, -64		// 90006918
    }


    // Set timer and state
    startTimer(&motionData.init.timer, MSEC_TO_TICKS(initEnableWaitTime_ms));
9000695c:	b0009002 	imm	-28670
90006960:	30a040c4 	addik	r5, r0, 16580
90006964:	30c00000 	addik	r6, r0, 0
90006968:	b00007f2 	imm	2034
9000696c:	30e07c20 	addik	r7, r0, 31776
90006970:	b9f45580 	brlid	r15, 21888	// 9000bef0 <startTimer>
90006974:	80000000 	or	r0, r0, r0
    motionData.init.state = initState_filterStart;
90006978:	30600001 	addik	r3, r0, 1
9000697c:	b0009002 	imm	-28670
90006980:	f86040d4 	swi	r3, r0, 16596


    return true;
90006984:	30600001 	addik	r3, r0, 1
}
90006988:	e9e10000 	lwi	r15, r1, 0
9000698c:	10330000 	addk	r1, r19, r0
90006990:	ea61001c 	lwi	r19, r1, 28
90006994:	30210020 	addik	r1, r1, 32
90006998:	b60f0008 	rtsd	r15, 8
9000699c:	80000000 	or	r0, r0, r0

900069a0 <filterInitRun>:


static bool filterInitRun()
{
900069a0:	3021ffe0 	addik	r1, r1, -32
900069a4:	f9e10000 	swi	r15, r1, 0
900069a8:	fa61001c 	swi	r19, r1, 28
900069ac:	12610000 	addk	r19, r1, r0
    // Start filter rotation
    stepper_set_home_sensor_make_hook(stepperR, filterInitHomeSensorHook);
900069b0:	30a00002 	addik	r5, r0, 2
900069b4:	b0009000 	imm	-28672
900069b8:	30c06b40 	addik	r6, r0, 27456
900069bc:	b9f447f4 	brlid	r15, 18420	// 9000b1b0 <stepper_set_home_sensor_make_hook>
900069c0:	80000000 	or	r0, r0, r0
    stepper_move_relative(stepperR, filterStepsPerRevolution);
900069c4:	30a00002 	addik	r5, r0, 2
900069c8:	30c00300 	addik	r6, r0, 768
900069cc:	b9f4444c 	brlid	r15, 17484	// 9000ae18 <stepper_move_relative>
900069d0:	80000000 	or	r0, r0, r0

    startTimer(&motionData.init.timer, SEC_TO_TICKS(2 + (filterStepsPerRevolution /
900069d4:	b0009002 	imm	-28670
900069d8:	30a040c4 	addik	r5, r0, 16580
900069dc:	30c00000 	addik	r6, r0, 0
900069e0:	b0007f28 	imm	32552
900069e4:	30e01560 	addik	r7, r0, 5472
900069e8:	b9f45508 	brlid	r15, 21768	// 9000bef0 <startTimer>
900069ec:	80000000 	or	r0, r0, r0
                                                         filterPinSearchFrequency)));

    return true;
900069f0:	30600001 	addik	r3, r0, 1
}
900069f4:	e9e10000 	lwi	r15, r1, 0
900069f8:	10330000 	addk	r1, r19, r0
900069fc:	ea61001c 	lwi	r19, r1, 28
90006a00:	30210020 	addik	r1, r1, 32
90006a04:	b60f0008 	rtsd	r15, 8
90006a08:	80000000 	or	r0, r0, r0

90006a0c <filterInitEnd>:


static bool filterInitEnd()
{
90006a0c:	3021ff14 	addik	r1, r1, -236
90006a10:	f9e10000 	swi	r15, r1, 0
90006a14:	fa6100e8 	swi	r19, r1, 232
90006a18:	12610000 	addk	r19, r1, r0
    char errorDesc[ERROR_DESC_SIZE];
    errorDesc[0] = 0;
90006a1c:	f013001c 	sbi	r0, r19, 28
    
    // Restore parameters for normal stepper operation.
    stepper_set_home_sensor_make_hook(stepperR, NULL);
90006a20:	30a00002 	addik	r5, r0, 2
90006a24:	10c00000 	addk	r6, r0, r0
90006a28:	b9f44788 	brlid	r15, 18312	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90006a2c:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperSlowFrequency, motionData.filter.slowFrequency);
90006a30:	b0009002 	imm	-28670
90006a34:	e8604cfc 	lwi	r3, r0, 19708
90006a38:	30a00002 	addik	r5, r0, 2
90006a3c:	30c00001 	addik	r6, r0, 1
90006a40:	10e30000 	addk	r7, r3, r0
90006a44:	b9f43f9c 	brlid	r15, 16284	// 9000a9e0 <stepper_set_parameter>
90006a48:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperFastFrequency, motionData.filter.fastFrequency);
90006a4c:	b0009002 	imm	-28670
90006a50:	e8604d00 	lwi	r3, r0, 19712
90006a54:	30a00002 	addik	r5, r0, 2
90006a58:	10c00000 	addk	r6, r0, r0
90006a5c:	10e30000 	addk	r7, r3, r0
90006a60:	b9f43f80 	brlid	r15, 16256	// 9000a9e0 <stepper_set_parameter>
90006a64:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperR, stepperRampSteps,  motionData.filter.rampSteps);
90006a68:	b0009002 	imm	-28670
90006a6c:	e8604d04 	lwi	r3, r0, 19716
90006a70:	30a00002 	addik	r5, r0, 2
90006a74:	30c00002 	addik	r6, r0, 2
90006a78:	10e30000 	addk	r7, r3, r0
90006a7c:	b9f43f64 	brlid	r15, 16228	// 9000a9e0 <stepper_set_parameter>
90006a80:	80000000 	or	r0, r0, r0

    if(determineFilterPositions(motionData.filter.sensorBreakPositions,
90006a84:	b0009002 	imm	-28670
90006a88:	30a040f8 	addik	r5, r0, 16632
90006a8c:	b0009002 	imm	-28670
90006a90:	30c040e0 	addik	r6, r0, 16608
90006a94:	3073001c 	addik	r3, r19, 28
90006a98:	10e30000 	addk	r7, r3, r0
90006a9c:	310000c8 	addik	r8, r0, 200
90006aa0:	b9f40118 	brlid	r15, 280	// 90006bb8 <determineFilterPositions>
90006aa4:	80000000 	or	r0, r0, r0
90006aa8:	bc030044 	beqi	r3, 68		// 90006aec
                                motionData.filter.filterPositions,
                                errorDesc, ERROR_DESC_SIZE))
    {
        stepper_move_to_position(stepperR, motionData.filter.filterPositions[filter_clear]);
90006aac:	b0009002 	imm	-28670
90006ab0:	e86040e0 	lwi	r3, r0, 16608
90006ab4:	30a00002 	addik	r5, r0, 2
90006ab8:	10c30000 	addk	r6, r3, r0
90006abc:	b9f443f4 	brlid	r15, 17396	// 9000aeb0 <stepper_move_to_position>
90006ac0:	80000000 	or	r0, r0, r0
        startTimer(&motionData.init.timer, MSEC_TO_TICKS(filterInitializationTimeout_ms));
90006ac4:	b0009002 	imm	-28670
90006ac8:	30a040c4 	addik	r5, r0, 16580
90006acc:	30c00000 	addik	r6, r0, 0
90006ad0:	b0000fe4 	imm	4068
90006ad4:	30e0f840 	addik	r7, r0, -1984
90006ad8:	b9f45418 	brlid	r15, 21528	// 9000bef0 <startTimer>
90006adc:	80000000 	or	r0, r0, r0
        return true;
90006ae0:	30600001 	addik	r3, r0, 1
90006ae4:	f87300e4 	swi	r3, r19, 228
90006ae8:	b800003c 	bri	60		// 90006b24
    }

    printf("Filter Init failed.  %s\n", errorDesc);
90006aec:	b0009002 	imm	-28670
90006af0:	30a01544 	addik	r5, r0, 5444
90006af4:	3073001c 	addik	r3, r19, 28
90006af8:	10c30000 	addk	r6, r3, r0
90006afc:	b0000000 	imm	0
90006b00:	b9f49344 	brlid	r15, -27836	// 9000fe44 <printf>
90006b04:	80000000 	or	r0, r0, r0
    finishMotorMove(err_filterInitializationFailure, errorDesc);
90006b08:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
90006b0c:	3073001c 	addik	r3, r19, 28
90006b10:	10c30000 	addk	r6, r3, r0
90006b14:	b9f4f48c 	brlid	r15, -2932	// 90005fa0 <finishMotorMove>
90006b18:	80000000 	or	r0, r0, r0
    return false;
90006b1c:	10600000 	addk	r3, r0, r0
90006b20:	f87300e4 	swi	r3, r19, 228
90006b24:	e87300e4 	lwi	r3, r19, 228
}
90006b28:	e9e10000 	lwi	r15, r1, 0
90006b2c:	10330000 	addk	r1, r19, r0
90006b30:	ea6100e8 	lwi	r19, r1, 232
90006b34:	302100ec 	addik	r1, r1, 236
90006b38:	b60f0008 	rtsd	r15, 8
90006b3c:	80000000 	or	r0, r0, r0

90006b40 <filterInitHomeSensorHook>:



//------------------------------------------------------------------------------
static bool filterInitHomeSensorHook(int position)
{
90006b40:	3021fff8 	addik	r1, r1, -8
90006b44:	fa610004 	swi	r19, r1, 4
90006b48:	12610000 	addk	r19, r1, r0
90006b4c:	f8b3000c 	swi	r5, r19, 12
    motionData.filter.sensorBreakPositions[motionData.filter.positionIndex++] = position;
90006b50:	b0009002 	imm	-28670
90006b54:	e8a04cf8 	lwi	r5, r0, 19704
90006b58:	64850402 	bslli	r4, r5, 2
90006b5c:	b0009002 	imm	-28670
90006b60:	306040f8 	addik	r3, r0, 16632
90006b64:	10841800 	addk	r4, r4, r3
90006b68:	e873000c 	lwi	r3, r19, 12
90006b6c:	f8640000 	swi	r3, r4, 0
90006b70:	30650001 	addik	r3, r5, 1
90006b74:	b0009002 	imm	-28670
90006b78:	f8604cf8 	swi	r3, r0, 19704
    motionData.filter.positionIndex %= filterStepsPerRevolution;
90006b7c:	b0009002 	imm	-28670
90006b80:	e8a04cf8 	lwi	r5, r0, 19704
90006b84:	30600300 	addik	r3, r0, 768
90006b88:	48832800 	idiv	r4, r3, r5
90006b8c:	30600300 	addik	r3, r0, 768
90006b90:	40641800 	mul	r3, r4, r3
90006b94:	14632800 	rsubk	r3, r3, r5
90006b98:	b0009002 	imm	-28670
90006b9c:	f8604cf8 	swi	r3, r0, 19704
    return true;
90006ba0:	30600001 	addik	r3, r0, 1
}
90006ba4:	10330000 	addk	r1, r19, r0
90006ba8:	ea610004 	lwi	r19, r1, 4
90006bac:	30210008 	addik	r1, r1, 8
90006bb0:	b60f0008 	rtsd	r15, 8
90006bb4:	80000000 	or	r0, r0, r0

90006bb8 <determineFilterPositions>:

//------------------------------------------------------------------------------
static bool determineFilterPositions(int sensorBreakPositions[], int filterPositions[], char* errorDesc, unsigned errorDescSize)
{
90006bb8:	3021ffa0 	addik	r1, r1, -96
90006bbc:	f9e10000 	swi	r15, r1, 0
90006bc0:	fa61005c 	swi	r19, r1, 92
90006bc4:	12610000 	addk	r19, r1, r0
90006bc8:	f8b30064 	swi	r5, r19, 100
90006bcc:	f8d30068 	swi	r6, r19, 104
90006bd0:	f8f3006c 	swi	r7, r19, 108
90006bd4:	f9130070 	swi	r8, r19, 112
    ASSERT(errorDesc);
90006bd8:	e873006c 	lwi	r3, r19, 108
90006bdc:	bc230028 	bnei	r3, 40		// 90006c04
90006be0:	94110002 	msrclr	r0, 2
90006be4:	b0009002 	imm	-28670
90006be8:	30a01560 	addik	r5, r0, 5472
90006bec:	b0009002 	imm	-28670
90006bf0:	30c00c2c 	addik	r6, r0, 3116
90006bf4:	30e00692 	addik	r7, r0, 1682
90006bf8:	b9f4582c 	brlid	r15, 22572	// 9000c424 <printAssert>
90006bfc:	80000000 	or	r0, r0, r0
90006c00:	b8000000 	bri	0		// 90006c00
    
    int pin_start_positions[numFilterPins];
    int pin_index = 0;
90006c04:	f8130038 	swi	r0, r19, 56
    int *this_break_position = &sensorBreakPositions[0];
90006c08:	e8730064 	lwi	r3, r19, 100
90006c0c:	f8730034 	swi	r3, r19, 52
    int first_small_distance = invalid_position;
90006c10:	b0007fff 	imm	32767
90006c14:	3060ffff 	addik	r3, r0, -1
90006c18:	f8730030 	swi	r3, r19, 48
    int home_pin = numFilterPins;
90006c1c:	30600007 	addik	r3, r0, 7
90006c20:	f873002c 	swi	r3, r19, 44
    int filter_index;
    int last_contiguous_position;

    pin_start_positions[0]   = *this_break_position % filterStepsPerRevolution;
90006c24:	e8730034 	lwi	r3, r19, 52
90006c28:	e8a30000 	lwi	r5, r3, 0
90006c2c:	30600300 	addik	r3, r0, 768
90006c30:	48832800 	idiv	r4, r3, r5
90006c34:	30600300 	addik	r3, r0, 768
90006c38:	40641800 	mul	r3, r4, r3
90006c3c:	14632800 	rsubk	r3, r3, r5
90006c40:	f873003c 	swi	r3, r19, 60
    last_contiguous_position = pin_start_positions[0];
90006c44:	e873003c 	lwi	r3, r19, 60
90006c48:	f8730024 	swi	r3, r19, 36

    // Find the starting position of each pin by searching for
    // non-contiguous entries in the sensor break array.
    while(*++this_break_position != invalid_position)
90006c4c:	b80000ec 	bri	236		// 90006d38
    {
        *this_break_position %= filterStepsPerRevolution;
90006c50:	e8730034 	lwi	r3, r19, 52
90006c54:	e8a30000 	lwi	r5, r3, 0
90006c58:	30600300 	addik	r3, r0, 768
90006c5c:	48832800 	idiv	r4, r3, r5
90006c60:	30600300 	addik	r3, r0, 768
90006c64:	40641800 	mul	r3, r4, r3
90006c68:	14832800 	rsubk	r4, r3, r5
90006c6c:	e8730034 	lwi	r3, r19, 52
90006c70:	f8830000 	swi	r4, r3, 0

        if(*this_break_position == (last_contiguous_position + 1) % filterStepsPerRevolution)
90006c74:	e8730034 	lwi	r3, r19, 52
90006c78:	e8c30000 	lwi	r6, r3, 0
90006c7c:	e8730024 	lwi	r3, r19, 36
90006c80:	30a30001 	addik	r5, r3, 1
90006c84:	30600300 	addik	r3, r0, 768
90006c88:	48832800 	idiv	r4, r3, r5
90006c8c:	30600300 	addik	r3, r0, 768
90006c90:	40641800 	mul	r3, r4, r3
90006c94:	14632800 	rsubk	r3, r3, r5
90006c98:	16433000 	rsubk	r18, r3, r6
90006c9c:	bc320014 	bnei	r18, 20		// 90006cb0
        {
            last_contiguous_position = *this_break_position;
90006ca0:	e8730034 	lwi	r3, r19, 52
90006ca4:	e8630000 	lwi	r3, r3, 0
90006ca8:	f8730024 	swi	r3, r19, 36
90006cac:	b800008c 	bri	140		// 90006d38
        }
        else
        {
            if(++pin_index >= numFilterPins)
90006cb0:	e8730038 	lwi	r3, r19, 56
90006cb4:	30630001 	addik	r3, r3, 1
90006cb8:	f8730038 	swi	r3, r19, 56
90006cbc:	e8730038 	lwi	r3, r19, 56
90006cc0:	32400006 	addik	r18, r0, 6
90006cc4:	16439001 	cmp	r18, r3, r18
90006cc8:	bcb20048 	bgei	r18, 72		// 90006d10
            {
                snprintf(errorDesc, errorDescSize, "Too many pins found (%d found)", pin_index);
90006ccc:	e8b3006c 	lwi	r5, r19, 108
90006cd0:	e8d30070 	lwi	r6, r19, 112
90006cd4:	b0009002 	imm	-28670
90006cd8:	30e0156c 	addik	r7, r0, 5484
90006cdc:	e9130038 	lwi	r8, r19, 56
90006ce0:	b0000000 	imm	0
90006ce4:	b9f4d544 	brlid	r15, -10940	// 90014228 <snprintf>
90006ce8:	80000000 	or	r0, r0, r0
                printf("Filter init error - %s\n", errorDesc);
90006cec:	b0009002 	imm	-28670
90006cf0:	30a0158c 	addik	r5, r0, 5516
90006cf4:	e8d3006c 	lwi	r6, r19, 108
90006cf8:	b0000000 	imm	0
90006cfc:	b9f49148 	brlid	r15, -28344	// 9000fe44 <printf>
90006d00:	80000000 	or	r0, r0, r0
                return false;
90006d04:	10600000 	addk	r3, r0, r0
90006d08:	f8730058 	swi	r3, r19, 88
90006d0c:	b80002c0 	bri	704		// 90006fcc
            }

            pin_start_positions[pin_index] =
90006d10:	e8930038 	lwi	r4, r19, 56
90006d14:	e8730034 	lwi	r3, r19, 52
90006d18:	e8630000 	lwi	r3, r3, 0
90006d1c:	f8730024 	swi	r3, r19, 36
90006d20:	64840402 	bslli	r4, r4, 2
90006d24:	3073001c 	addik	r3, r19, 28
90006d28:	10641800 	addk	r3, r4, r3
90006d2c:	30830020 	addik	r4, r3, 32
90006d30:	e8730024 	lwi	r3, r19, 36
90006d34:	f8640000 	swi	r3, r4, 0
90006d38:	e8730034 	lwi	r3, r19, 52
90006d3c:	30630004 	addik	r3, r3, 4
90006d40:	f8730034 	swi	r3, r19, 52
90006d44:	e8730034 	lwi	r3, r19, 52
90006d48:	e8630000 	lwi	r3, r3, 0
90006d4c:	b0007fff 	imm	32767
90006d50:	aa43ffff 	xori	r18, r3, -1
90006d54:	bc32fefc 	bnei	r18, -260		// 90006c50
                last_contiguous_position = *this_break_position;
        }
    }

    if(pin_index + 1 < numFilterPins)
90006d58:	e8730038 	lwi	r3, r19, 56
90006d5c:	32400005 	addik	r18, r0, 5
90006d60:	16439001 	cmp	r18, r3, r18
90006d64:	bc520048 	blti	r18, 72		// 90006dac
    {
        snprintf(errorDesc, errorDescSize, "Too few pins found (%d found)", pin_index);
90006d68:	e8b3006c 	lwi	r5, r19, 108
90006d6c:	e8d30070 	lwi	r6, r19, 112
90006d70:	b0009002 	imm	-28670
90006d74:	30e015a4 	addik	r7, r0, 5540
90006d78:	e9130038 	lwi	r8, r19, 56
90006d7c:	b0000000 	imm	0
90006d80:	b9f4d4a8 	brlid	r15, -11096	// 90014228 <snprintf>
90006d84:	80000000 	or	r0, r0, r0
        printf("Filter init error - %s\n", errorDesc);
90006d88:	b0009002 	imm	-28670
90006d8c:	30a0158c 	addik	r5, r0, 5516
90006d90:	e8d3006c 	lwi	r6, r19, 108
90006d94:	b0000000 	imm	0
90006d98:	b9f490ac 	brlid	r15, -28500	// 9000fe44 <printf>
90006d9c:	80000000 	or	r0, r0, r0
        return false;
90006da0:	10600000 	addk	r3, r0, r0
90006da4:	f8730058 	swi	r3, r19, 88
90006da8:	b8000224 	bri	548		// 90006fcc
    }

    // Find the "home" pin - it lies between the first and last filters.
    for(pin_index = 0; pin_index < numFilterPins - 1; ++pin_index)
90006dac:	f8130038 	swi	r0, r19, 56
90006db0:	b80000a8 	bri	168		// 90006e58
    {
        int pin_distance =
            (pin_start_positions[pin_index + 1] -
             pin_start_positions[pin_index]) %
            filterStepsPerRevolution;
90006db4:	e8730038 	lwi	r3, r19, 56
90006db8:	30630001 	addik	r3, r3, 1
90006dbc:	64830402 	bslli	r4, r3, 2
90006dc0:	3073001c 	addik	r3, r19, 28
90006dc4:	10641800 	addk	r3, r4, r3
90006dc8:	30630020 	addik	r3, r3, 32
90006dcc:	e8a30000 	lwi	r5, r3, 0
90006dd0:	e8730038 	lwi	r3, r19, 56
90006dd4:	64830402 	bslli	r4, r3, 2
90006dd8:	3073001c 	addik	r3, r19, 28
90006ddc:	10641800 	addk	r3, r4, r3
90006de0:	30630020 	addik	r3, r3, 32
90006de4:	e8630000 	lwi	r3, r3, 0
90006de8:	14a32800 	rsubk	r5, r3, r5
90006dec:	30600300 	addik	r3, r0, 768
90006df0:	48832800 	idiv	r4, r3, r5
90006df4:	30600300 	addik	r3, r0, 768
90006df8:	40641800 	mul	r3, r4, r3
90006dfc:	14632800 	rsubk	r3, r3, r5
90006e00:	f8730020 	swi	r3, r19, 32

        if(pin_distance < 0)
90006e04:	e8730020 	lwi	r3, r19, 32
90006e08:	bca30010 	bgei	r3, 16		// 90006e18
            pin_distance += filterStepsPerRevolution;
90006e0c:	e8730020 	lwi	r3, r19, 32
90006e10:	30630300 	addik	r3, r3, 768
90006e14:	f8730020 	swi	r3, r19, 32

        if(pin_distance < minFilterSeparation)
90006e18:	e8730020 	lwi	r3, r19, 32
90006e1c:	32400063 	addik	r18, r0, 99
90006e20:	16439001 	cmp	r18, r3, r18
90006e24:	bc520028 	blti	r18, 40		// 90006e4c
        {
            if(first_small_distance != invalid_position)
90006e28:	e8730030 	lwi	r3, r19, 48
90006e2c:	b0007fff 	imm	32767
90006e30:	aa43ffff 	xori	r18, r3, -1
90006e34:	bc120010 	beqi	r18, 16		// 90006e44
            {
                home_pin = pin_index;
90006e38:	e8730038 	lwi	r3, r19, 56
90006e3c:	f873002c 	swi	r3, r19, 44
                break;
90006e40:	b8000028 	bri	40		// 90006e68
            }
            first_small_distance = pin_index;
90006e44:	e8730038 	lwi	r3, r19, 56
90006e48:	f8730030 	swi	r3, r19, 48
90006e4c:	e8730038 	lwi	r3, r19, 56
90006e50:	30630001 	addik	r3, r3, 1
90006e54:	f8730038 	swi	r3, r19, 56
90006e58:	e8730038 	lwi	r3, r19, 56
90006e5c:	32400005 	addik	r18, r0, 5
90006e60:	16439001 	cmp	r18, r3, r18
90006e64:	bcb2ff50 	bgei	r18, -176		// 90006db4
        }
    }

    if(home_pin >= numFilterPins)
90006e68:	e873002c 	lwi	r3, r19, 44
90006e6c:	32400006 	addik	r18, r0, 6
90006e70:	16439001 	cmp	r18, r3, r18
90006e74:	bcb200c8 	bgei	r18, 200		// 90006f3c
    {
        int pin_distance =
            (pin_start_positions[0] - pin_start_positions[pin_index]) %
            filterStepsPerRevolution;
90006e78:	e8b3003c 	lwi	r5, r19, 60
90006e7c:	e8730038 	lwi	r3, r19, 56
90006e80:	64830402 	bslli	r4, r3, 2
90006e84:	3073001c 	addik	r3, r19, 28
90006e88:	10641800 	addk	r3, r4, r3
90006e8c:	30630020 	addik	r3, r3, 32
90006e90:	e8630000 	lwi	r3, r3, 0
90006e94:	14a32800 	rsubk	r5, r3, r5
90006e98:	30600300 	addik	r3, r0, 768
90006e9c:	48832800 	idiv	r4, r3, r5
90006ea0:	30600300 	addik	r3, r0, 768
90006ea4:	40641800 	mul	r3, r4, r3
90006ea8:	14632800 	rsubk	r3, r3, r5
90006eac:	f873001c 	swi	r3, r19, 28

        if(pin_distance < 0)
90006eb0:	e873001c 	lwi	r3, r19, 28
90006eb4:	bca30010 	bgei	r3, 16		// 90006ec4
            pin_distance += filterStepsPerRevolution;
90006eb8:	e873001c 	lwi	r3, r19, 28
90006ebc:	30630300 	addik	r3, r3, 768
90006ec0:	f873001c 	swi	r3, r19, 28

        if(pin_distance < minFilterSeparation)
90006ec4:	e873001c 	lwi	r3, r19, 28
90006ec8:	32400063 	addik	r18, r0, 99
90006ecc:	16439001 	cmp	r18, r3, r18
90006ed0:	bc52006c 	blti	r18, 108		// 90006f3c
        {
            if(first_small_distance == invalid_position)
90006ed4:	e8730030 	lwi	r3, r19, 48
90006ed8:	b0007fff 	imm	32767
90006edc:	aa43ffff 	xori	r18, r3, -1
90006ee0:	bc320044 	bnei	r18, 68		// 90006f24
            {
                snprintf(errorDesc, errorDescSize, "first_small_distance is invalid");
90006ee4:	e8b3006c 	lwi	r5, r19, 108
90006ee8:	e8d30070 	lwi	r6, r19, 112
90006eec:	b0009002 	imm	-28670
90006ef0:	30e015c4 	addik	r7, r0, 5572
90006ef4:	b0000000 	imm	0
90006ef8:	b9f4d330 	brlid	r15, -11472	// 90014228 <snprintf>
90006efc:	80000000 	or	r0, r0, r0
                printf("Filter init error - %s\n", errorDesc);
90006f00:	b0009002 	imm	-28670
90006f04:	30a0158c 	addik	r5, r0, 5516
90006f08:	e8d3006c 	lwi	r6, r19, 108
90006f0c:	b0000000 	imm	0
90006f10:	b9f48f34 	brlid	r15, -28876	// 9000fe44 <printf>
90006f14:	80000000 	or	r0, r0, r0
                return false;
90006f18:	10600000 	addk	r3, r0, r0
90006f1c:	f8730058 	swi	r3, r19, 88
90006f20:	b80000ac 	bri	172		// 90006fcc
            }

            if(first_small_distance == 0)
90006f24:	e8730030 	lwi	r3, r19, 48
90006f28:	bc23000c 	bnei	r3, 12		// 90006f34
                home_pin = 0;
90006f2c:	f813002c 	swi	r0, r19, 44
90006f30:	b800000c 	bri	12		// 90006f3c
            else
                home_pin = pin_index;
90006f34:	e8730038 	lwi	r3, r19, 56
90006f38:	f873002c 	swi	r3, r19, 44
        }
    }

    // Record the filter positions starting with the filter after the home pin.
    for(filter_index = 0, pin_index = 0; filter_index < num_filters; filter_index++, pin_index++)
90006f3c:	f8130028 	swi	r0, r19, 40
90006f40:	f8130038 	swi	r0, r19, 56
90006f44:	b8000070 	bri	112		// 90006fb4
    {
        filterPositions[filter_index] =
90006f48:	e8730028 	lwi	r3, r19, 40
90006f4c:	64630402 	bslli	r3, r3, 2
90006f50:	10830000 	addk	r4, r3, r0
90006f54:	e8730068 	lwi	r3, r19, 104
90006f58:	10c41800 	addk	r6, r4, r3
90006f5c:	e893002c 	lwi	r4, r19, 44
90006f60:	e8730038 	lwi	r3, r19, 56
90006f64:	10641800 	addk	r3, r4, r3
90006f68:	30a30008 	addik	r5, r3, 8
90006f6c:	30600007 	addik	r3, r0, 7
90006f70:	48832800 	idiv	r4, r3, r5
90006f74:	30600007 	addik	r3, r0, 7
90006f78:	40641800 	mul	r3, r4, r3
90006f7c:	14632800 	rsubk	r3, r3, r5
90006f80:	64830402 	bslli	r4, r3, 2
90006f84:	3073001c 	addik	r3, r19, 28
90006f88:	10641800 	addk	r3, r4, r3
90006f8c:	30630020 	addik	r3, r3, 32
90006f90:	e8630000 	lwi	r3, r3, 0
90006f94:	30630001 	addik	r3, r3, 1
90006f98:	f8660000 	swi	r3, r6, 0
90006f9c:	e8730028 	lwi	r3, r19, 40
90006fa0:	30630001 	addik	r3, r3, 1
90006fa4:	f8730028 	swi	r3, r19, 40
90006fa8:	e8730038 	lwi	r3, r19, 56
90006fac:	30630001 	addik	r3, r3, 1
90006fb0:	f8730038 	swi	r3, r19, 56
90006fb4:	e8730028 	lwi	r3, r19, 40
90006fb8:	32400005 	addik	r18, r0, 5
90006fbc:	16439001 	cmp	r18, r3, r18
90006fc0:	bcb2ff88 	bgei	r18, -120		// 90006f48
            pin_start_positions[(home_pin + 1 + pin_index + numFilterPins) % numFilterPins] + 1;
    }

    return true;
90006fc4:	30600001 	addik	r3, r0, 1
90006fc8:	f8730058 	swi	r3, r19, 88
90006fcc:	e8730058 	lwi	r3, r19, 88
}
90006fd0:	e9e10000 	lwi	r15, r1, 0
90006fd4:	10330000 	addk	r1, r19, r0
90006fd8:	ea61005c 	lwi	r19, r1, 92
90006fdc:	30210060 	addik	r1, r1, 96
90006fe0:	b60f0008 	rtsd	r15, 8
90006fe4:	80000000 	or	r0, r0, r0

90006fe8 <lidInitStart>:



///////////////////////////////////////////////////
// Local lid functions

static bool lidInitStart()
{
90006fe8:	3021ffe0 	addik	r1, r1, -32
90006fec:	f9e10000 	swi	r15, r1, 0
90006ff0:	fa61001c 	swi	r19, r1, 28
90006ff4:	12610000 	addk	r19, r1, r0
    motionData.lid.initialized = false;
90006ff8:	b0009002 	imm	-28670
90006ffc:	f8004d34 	swi	r0, r0, 19764
    motionData.init.state = initState_lidStart;
90007000:	30600005 	addik	r3, r0, 5
90007004:	b0009002 	imm	-28670
90007008:	f86040d4 	swi	r3, r0, 16596

    stepper_set_parameter(stepperU, stepperSlowFrequency, lid_initialization_frequency);
9000700c:	10a00000 	addk	r5, r0, r0
90007010:	30c00001 	addik	r6, r0, 1
90007014:	30e00064 	addik	r7, r0, 100
90007018:	b9f439c8 	brlid	r15, 14792	// 9000a9e0 <stepper_set_parameter>
9000701c:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperU, stepperFastFrequency, lid_initialization_frequency);
90007020:	10a00000 	addk	r5, r0, r0
90007024:	10c00000 	addk	r6, r0, r0
90007028:	30e00064 	addik	r7, r0, 100
9000702c:	b9f439b4 	brlid	r15, 14772	// 9000a9e0 <stepper_set_parameter>
90007030:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperU, stepperRampSteps, lid_initialization_ramp_steps);
90007034:	10a00000 	addk	r5, r0, r0
90007038:	30c00002 	addik	r6, r0, 2
9000703c:	30e00064 	addik	r7, r0, 100
90007040:	b9f439a0 	brlid	r15, 14752	// 9000a9e0 <stepper_set_parameter>
90007044:	80000000 	or	r0, r0, r0
    stepper_set_home_sensor_make_hook(stepperU, NULL);
90007048:	10a00000 	addk	r5, r0, r0
9000704c:	10c00000 	addk	r6, r0, r0
90007050:	b9f44160 	brlid	r15, 16736	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007054:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_make_hook(stepperU, NULL);
90007058:	10a00000 	addk	r5, r0, r0
9000705c:	10c00000 	addk	r6, r0, r0
90007060:	b9f44258 	brlid	r15, 16984	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007064:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_break_hook(stepperU, NULL);
90007068:	10a00000 	addk	r5, r0, r0
9000706c:	10c00000 	addk	r6, r0, r0
90007070:	b9f442cc 	brlid	r15, 17100	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007074:	80000000 	or	r0, r0, r0

    if(!stepper_is_at_alt_position(stepperF))
90007078:	30a00001 	addik	r5, r0, 1
9000707c:	b9f443e0 	brlid	r15, 17376	// 9000b45c <stepper_is_at_alt_position>
90007080:	80000000 	or	r0, r0, r0
90007084:	bc2300a0 	bnei	r3, 160		// 90007124
    {
        printf("Move door first...\n");
90007088:	b0009002 	imm	-28670
9000708c:	30a015e4 	addik	r5, r0, 5604
90007090:	b0000000 	imm	0
90007094:	b9f48ea4 	brlid	r15, -29020	// 9000ff38 <puts>
90007098:	80000000 	or	r0, r0, r0
        motionData.lid.altPinCount = 0;
9000709c:	b0009002 	imm	-28670
900070a0:	f8004d48 	swi	r0, r0, 19784
        stepper_set_parameter(stepperF, stepperSlowFrequency, door_initialization_frequency);
900070a4:	30a00001 	addik	r5, r0, 1
900070a8:	30c00001 	addik	r6, r0, 1
900070ac:	30e00320 	addik	r7, r0, 800
900070b0:	b9f43930 	brlid	r15, 14640	// 9000a9e0 <stepper_set_parameter>
900070b4:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperFastFrequency, door_initialization_frequency);
900070b8:	30a00001 	addik	r5, r0, 1
900070bc:	10c00000 	addk	r6, r0, r0
900070c0:	30e00320 	addik	r7, r0, 800
900070c4:	b9f4391c 	brlid	r15, 14620	// 9000a9e0 <stepper_set_parameter>
900070c8:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperRampSteps, door_initialization_ramp_steps);
900070cc:	30a00001 	addik	r5, r0, 1
900070d0:	30c00002 	addik	r6, r0, 2
900070d4:	10e00000 	addk	r7, r0, r0
900070d8:	b9f43908 	brlid	r15, 14600	// 9000a9e0 <stepper_set_parameter>
900070dc:	80000000 	or	r0, r0, r0
        stepper_set_alt_sensor_make_hook(stepperF, lidInitDoorAltSensorMakeCallback);
900070e0:	30a00001 	addik	r5, r0, 1
900070e4:	b0009000 	imm	-28672
900070e8:	30c07b54 	addik	r6, r0, 31572
900070ec:	b9f441cc 	brlid	r15, 16844	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
900070f0:	80000000 	or	r0, r0, r0
        stepper_move_relative(stepperF, lid_preinit_door_move_steps);
900070f4:	30a00001 	addik	r5, r0, 1
900070f8:	30c003e8 	addik	r6, r0, 1000
900070fc:	b9f43d1c 	brlid	r15, 15644	// 9000ae18 <stepper_move_relative>
90007100:	80000000 	or	r0, r0, r0
        startTimer(&motionData.init.timer, MSEC_TO_TICKS(2000));
90007104:	b0009002 	imm	-28670
90007108:	30a040c4 	addik	r5, r0, 16580
9000710c:	30c00000 	addik	r6, r0, 0
90007110:	b00007f2 	imm	2034
90007114:	30e07c20 	addik	r7, r0, 31776
90007118:	b9f44dd8 	brlid	r15, 19928	// 9000bef0 <startTimer>
9000711c:	80000000 	or	r0, r0, r0
90007120:	b800001c 	bri	28		// 9000713c
    }
    else
    {
        startTimer(&motionData.init.timer, 0);
90007124:	b0009002 	imm	-28670
90007128:	30a040c4 	addik	r5, r0, 16580
9000712c:	10c00000 	addk	r6, r0, r0
90007130:	10e00000 	addk	r7, r0, r0
90007134:	b9f44dbc 	brlid	r15, 19900	// 9000bef0 <startTimer>
90007138:	80000000 	or	r0, r0, r0
    }

    return true;
9000713c:	30600001 	addik	r3, r0, 1
}
90007140:	e9e10000 	lwi	r15, r1, 0
90007144:	10330000 	addk	r1, r19, r0
90007148:	ea61001c 	lwi	r19, r1, 28
9000714c:	30210020 	addik	r1, r1, 32
90007150:	b60f0008 	rtsd	r15, 8
90007154:	80000000 	or	r0, r0, r0

90007158 <lidInitRun1>:



static bool lidInitRun1()
{
90007158:	3021ffe0 	addik	r1, r1, -32
9000715c:	f9e10000 	swi	r15, r1, 0
90007160:	fa61001c 	swi	r19, r1, 28
90007164:	12610000 	addk	r19, r1, r0
    if(!stepper_is_at_alt_position(stepperU))
90007168:	10a00000 	addk	r5, r0, r0
9000716c:	b9f442f0 	brlid	r15, 17136	// 9000b45c <stepper_is_at_alt_position>
90007170:	80000000 	or	r0, r0, r0
90007174:	bc230034 	bnei	r3, 52		// 900071a8
    {
        // Move lid down a few steps to make sure we see the home sensor
        stepper_move_relative(stepperU, lid_preinitialization_move_steps);
90007178:	10a00000 	addk	r5, r0, r0
9000717c:	30c001f4 	addik	r6, r0, 500
90007180:	b9f43c98 	brlid	r15, 15512	// 9000ae18 <stepper_move_relative>
90007184:	80000000 	or	r0, r0, r0
        startTimer(&motionData.init.timer, MSEC_TO_TICKS(2000));
90007188:	b0009002 	imm	-28670
9000718c:	30a040c4 	addik	r5, r0, 16580
90007190:	30c00000 	addik	r6, r0, 0
90007194:	b00007f2 	imm	2034
90007198:	30e07c20 	addik	r7, r0, 31776
9000719c:	b9f44d54 	brlid	r15, 19796	// 9000bef0 <startTimer>
900071a0:	80000000 	or	r0, r0, r0
900071a4:	b800001c 	bri	28		// 900071c0
    }
    else
    {
        startTimer(&motionData.init.timer, 0);
900071a8:	b0009002 	imm	-28670
900071ac:	30a040c4 	addik	r5, r0, 16580
900071b0:	10c00000 	addk	r6, r0, r0
900071b4:	10e00000 	addk	r7, r0, r0
900071b8:	b9f44d38 	brlid	r15, 19768	// 9000bef0 <startTimer>
900071bc:	80000000 	or	r0, r0, r0
    }

    return true;
900071c0:	30600001 	addik	r3, r0, 1
}
900071c4:	e9e10000 	lwi	r15, r1, 0
900071c8:	10330000 	addk	r1, r19, r0
900071cc:	ea61001c 	lwi	r19, r1, 28
900071d0:	30210020 	addik	r1, r1, 32
900071d4:	b60f0008 	rtsd	r15, 8
900071d8:	80000000 	or	r0, r0, r0

900071dc <lidInitRun2>:



static bool lidInitRun2()
{
900071dc:	3021ffe0 	addik	r1, r1, -32
900071e0:	f9e10000 	swi	r15, r1, 0
900071e4:	fa61001c 	swi	r19, r1, 28
900071e8:	12610000 	addk	r19, r1, r0
    // Start looking for home flag
    stepper_move_to_position(stepperU, stepperHome);
900071ec:	10a00000 	addk	r5, r0, r0
900071f0:	b0007fff 	imm	32767
900071f4:	30c0ffff 	addik	r6, r0, -1
900071f8:	b9f43cb8 	brlid	r15, 15544	// 9000aeb0 <stepper_move_to_position>
900071fc:	80000000 	or	r0, r0, r0
    startTimer(&motionData.init.timer, MSEC_TO_TICKS(lid_initialization_timeout_ms));
90007200:	b0009002 	imm	-28670
90007204:	30a040c4 	addik	r5, r0, 16580
90007208:	30c00000 	addik	r6, r0, 0
9000720c:	b0006357 	imm	25431
90007210:	30e00f90 	addik	r7, r0, 3984
90007214:	b9f44cdc 	brlid	r15, 19676	// 9000bef0 <startTimer>
90007218:	80000000 	or	r0, r0, r0
    return true;
9000721c:	30600001 	addik	r3, r0, 1
}
90007220:	e9e10000 	lwi	r15, r1, 0
90007224:	10330000 	addk	r1, r19, r0
90007228:	ea61001c 	lwi	r19, r1, 28
9000722c:	30210020 	addik	r1, r1, 32
90007230:	b60f0008 	rtsd	r15, 8
90007234:	80000000 	or	r0, r0, r0

90007238 <lidInitEnd>:



static bool lidInitEnd()
{
90007238:	3021ffe0 	addik	r1, r1, -32
9000723c:	f9e10000 	swi	r15, r1, 0
90007240:	fa61001c 	swi	r19, r1, 28
90007244:	12610000 	addk	r19, r1, r0
    // Reset speed
    stepper_set_parameter(stepperU, stepperSlowFrequency, motionData.lid.slowFrequency);
90007248:	b0009002 	imm	-28670
9000724c:	e8604d68 	lwi	r3, r0, 19816
90007250:	10a00000 	addk	r5, r0, r0
90007254:	30c00001 	addik	r6, r0, 1
90007258:	10e30000 	addk	r7, r3, r0
9000725c:	b9f43784 	brlid	r15, 14212	// 9000a9e0 <stepper_set_parameter>
90007260:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperU, stepperFastFrequency, motionData.lid.fastFrequency);
90007264:	b0009002 	imm	-28670
90007268:	e8604d6c 	lwi	r3, r0, 19820
9000726c:	10a00000 	addk	r5, r0, r0
90007270:	10c00000 	addk	r6, r0, r0
90007274:	10e30000 	addk	r7, r3, r0
90007278:	b9f43768 	brlid	r15, 14184	// 9000a9e0 <stepper_set_parameter>
9000727c:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperU, stepperRampSteps, motionData.lid.rampSteps);
90007280:	b0009002 	imm	-28670
90007284:	e8604d70 	lwi	r3, r0, 19824
90007288:	10a00000 	addk	r5, r0, r0
9000728c:	30c00002 	addik	r6, r0, 2
90007290:	10e30000 	addk	r7, r3, r0
90007294:	b9f4374c 	brlid	r15, 14156	// 9000a9e0 <stepper_set_parameter>
90007298:	80000000 	or	r0, r0, r0
    stepper_set_home_sensor_make_hook(stepperU, NULL);
9000729c:	10a00000 	addk	r5, r0, r0
900072a0:	10c00000 	addk	r6, r0, r0
900072a4:	b9f43f0c 	brlid	r15, 16140	// 9000b1b0 <stepper_set_home_sensor_make_hook>
900072a8:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_make_hook(stepperU, NULL);
900072ac:	10a00000 	addk	r5, r0, r0
900072b0:	10c00000 	addk	r6, r0, r0
900072b4:	b9f44004 	brlid	r15, 16388	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
900072b8:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_break_hook(stepperU, NULL);
900072bc:	10a00000 	addk	r5, r0, r0
900072c0:	10c00000 	addk	r6, r0, r0
900072c4:	b9f44078 	brlid	r15, 16504	// 9000b33c <stepper_set_alt_sensor_break_hook>
900072c8:	80000000 	or	r0, r0, r0

    // Move to home/raised position
    stepper_move_to_position(stepperU, lid_raised_position);
900072cc:	10a00000 	addk	r5, r0, r0
900072d0:	10c00000 	addk	r6, r0, r0
900072d4:	b9f43bdc 	brlid	r15, 15324	// 9000aeb0 <stepper_move_to_position>
900072d8:	80000000 	or	r0, r0, r0
    startTimer(&motionData.init.timer, MSEC_TO_TICKS(lid_initialization_timeout_ms));
900072dc:	b0009002 	imm	-28670
900072e0:	30a040c4 	addik	r5, r0, 16580
900072e4:	30c00000 	addik	r6, r0, 0
900072e8:	b0006357 	imm	25431
900072ec:	30e00f90 	addik	r7, r0, 3984
900072f0:	b9f44c00 	brlid	r15, 19456	// 9000bef0 <startTimer>
900072f4:	80000000 	or	r0, r0, r0

    return true;
900072f8:	30600001 	addik	r3, r0, 1
}
900072fc:	e9e10000 	lwi	r15, r1, 0
90007300:	10330000 	addk	r1, r19, r0
90007304:	ea61001c 	lwi	r19, r1, 28
90007308:	30210020 	addik	r1, r1, 32
9000730c:	b60f0008 	rtsd	r15, 8
90007310:	80000000 	or	r0, r0, r0

90007314 <startRaiseLid>:



static bool startRaiseLid()
{
90007314:	3021ffdc 	addik	r1, r1, -36
90007318:	f9e10000 	swi	r15, r1, 0
9000731c:	fa610020 	swi	r19, r1, 32
90007320:	12610000 	addk	r19, r1, r0
    if(!stepper_busy())
90007324:	b9f438ac 	brlid	r15, 14508	// 9000abd0 <stepper_busy>
90007328:	80000000 	or	r0, r0, r0
9000732c:	bc230108 	bnei	r3, 264		// 90007434
    {
        motionData.lid.startPosition    = get_stepper_position(stepperU);
90007330:	10a00000 	addk	r5, r0, r0
90007334:	b9f441e4 	brlid	r15, 16868	// 9000b518 <get_stepper_position>
90007338:	80000000 	or	r0, r0, r0
9000733c:	b0009002 	imm	-28670
90007340:	f8604d40 	swi	r3, r0, 19776
        motionData.lid.plateType        = plateType_unknown;
90007344:	b0009002 	imm	-28670
90007348:	f8004d64 	swi	r0, r0, 19812
        motionData.lid.homePinFound     = false;
9000734c:	b0009002 	imm	-28670
90007350:	f8004d44 	swi	r0, r0, 19780
        motionData.lid.altPinCount      = 0;
90007354:	b0009002 	imm	-28670
90007358:	f8004d48 	swi	r0, r0, 19784
        motionData.lid.altSpaceCount    = 0;
9000735c:	b0009002 	imm	-28670
90007360:	f8004d4c 	swi	r0, r0, 19788
        motionData.lid.homePinMakePos   = 0;
90007364:	b0009002 	imm	-28670
90007368:	f8004d50 	swi	r0, r0, 19792
        motionData.lid.altPinMake1Pos   = 0;
9000736c:	b0009002 	imm	-28670
90007370:	f8004d54 	swi	r0, r0, 19796
        motionData.lid.altPinBreak1Pos  = 0;
90007374:	b0009002 	imm	-28670
90007378:	f8004d58 	swi	r0, r0, 19800
        motionData.lid.altPinMake2Pos   = 0;
9000737c:	b0009002 	imm	-28670
90007380:	f8004d5c 	swi	r0, r0, 19804
        motionData.lid.altPinBreak2Pos  = 0;
90007384:	b0009002 	imm	-28670
90007388:	f8004d60 	swi	r0, r0, 19808

        stepper_set_parameter(stepperU, stepperSlowFrequency, motionData.lid.slowFrequency);
9000738c:	b0009002 	imm	-28670
90007390:	e8604d68 	lwi	r3, r0, 19816
90007394:	10a00000 	addk	r5, r0, r0
90007398:	30c00001 	addik	r6, r0, 1
9000739c:	10e30000 	addk	r7, r3, r0
900073a0:	b9f43640 	brlid	r15, 13888	// 9000a9e0 <stepper_set_parameter>
900073a4:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperFastFrequency, motionData.lid.fastFrequency);
900073a8:	b0009002 	imm	-28670
900073ac:	e8604d6c 	lwi	r3, r0, 19820
900073b0:	10a00000 	addk	r5, r0, r0
900073b4:	10c00000 	addk	r6, r0, r0
900073b8:	10e30000 	addk	r7, r3, r0
900073bc:	b9f43624 	brlid	r15, 13860	// 9000a9e0 <stepper_set_parameter>
900073c0:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperRampSteps, motionData.lid.rampSteps);
900073c4:	b0009002 	imm	-28670
900073c8:	e8604d70 	lwi	r3, r0, 19824
900073cc:	10a00000 	addk	r5, r0, r0
900073d0:	30c00002 	addik	r6, r0, 2
900073d4:	10e30000 	addk	r7, r3, r0
900073d8:	b9f43608 	brlid	r15, 13832	// 9000a9e0 <stepper_set_parameter>
900073dc:	80000000 	or	r0, r0, r0
        stepper_set_home_sensor_make_hook(stepperU, lidHomeSensorMakeCallback);
900073e0:	10a00000 	addk	r5, r0, r0
900073e4:	b0009000 	imm	-28672
900073e8:	30c07764 	addik	r6, r0, 30564
900073ec:	b9f43dc4 	brlid	r15, 15812	// 9000b1b0 <stepper_set_home_sensor_make_hook>
900073f0:	80000000 	or	r0, r0, r0
        stepper_set_alt_sensor_make_hook(stepperU, NULL);
900073f4:	10a00000 	addk	r5, r0, r0
900073f8:	10c00000 	addk	r6, r0, r0
900073fc:	b9f43ebc 	brlid	r15, 16060	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007400:	80000000 	or	r0, r0, r0
        stepper_set_alt_sensor_break_hook(stepperU, NULL);
90007404:	10a00000 	addk	r5, r0, r0
90007408:	10c00000 	addk	r6, r0, r0
9000740c:	b9f43f30 	brlid	r15, 16176	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007410:	80000000 	or	r0, r0, r0

        if(stepper_move_to_position(stepperU, lid_raised_position))
90007414:	10a00000 	addk	r5, r0, r0
90007418:	10c00000 	addk	r6, r0, r0
9000741c:	b9f43a94 	brlid	r15, 14996	// 9000aeb0 <stepper_move_to_position>
90007420:	80000000 	or	r0, r0, r0
90007424:	bc030010 	beqi	r3, 16		// 90007434
        {
            return true;
90007428:	30600001 	addik	r3, r0, 1
9000742c:	f873001c 	swi	r3, r19, 28
90007430:	b800000c 	bri	12		// 9000743c
        }
    }

    return false;
90007434:	10600000 	addk	r3, r0, r0
90007438:	f873001c 	swi	r3, r19, 28
9000743c:	e873001c 	lwi	r3, r19, 28
}
90007440:	e9e10000 	lwi	r15, r1, 0
90007444:	10330000 	addk	r1, r19, r0
90007448:	ea610020 	lwi	r19, r1, 32
9000744c:	30210024 	addik	r1, r1, 36
90007450:	b60f0008 	rtsd	r15, 8
90007454:	80000000 	or	r0, r0, r0

90007458 <startLowerLid>:


static bool startLowerLid()
{
90007458:	3021ffdc 	addik	r1, r1, -36
9000745c:	f9e10000 	swi	r15, r1, 0
90007460:	fa610020 	swi	r19, r1, 32
90007464:	12610000 	addk	r19, r1, r0
    if(!stepper_busy())
90007468:	b9f43768 	brlid	r15, 14184	// 9000abd0 <stepper_busy>
9000746c:	80000000 	or	r0, r0, r0
90007470:	bc230184 	bnei	r3, 388		// 900075f4
    {
        motionData.lid.startPosition    = get_stepper_position(stepperU);
90007474:	10a00000 	addk	r5, r0, r0
90007478:	b9f440a0 	brlid	r15, 16544	// 9000b518 <get_stepper_position>
9000747c:	80000000 	or	r0, r0, r0
90007480:	b0009002 	imm	-28670
90007484:	f8604d40 	swi	r3, r0, 19776
        motionData.lid.homePinFound     = false;
90007488:	b0009002 	imm	-28670
9000748c:	f8004d44 	swi	r0, r0, 19780
        motionData.lid.altPinCount      = 0;
90007490:	b0009002 	imm	-28670
90007494:	f8004d48 	swi	r0, r0, 19784
        motionData.lid.altSpaceCount    = 0;
90007498:	b0009002 	imm	-28670
9000749c:	f8004d4c 	swi	r0, r0, 19788
        motionData.lid.homePinMakePos   = 0;
900074a0:	b0009002 	imm	-28670
900074a4:	f8004d50 	swi	r0, r0, 19792
        motionData.lid.altPinMake1Pos   = 0;
900074a8:	b0009002 	imm	-28670
900074ac:	f8004d54 	swi	r0, r0, 19796
        motionData.lid.altPinBreak1Pos  = 0;
900074b0:	b0009002 	imm	-28670
900074b4:	f8004d58 	swi	r0, r0, 19800
        motionData.lid.altPinMake2Pos   = 0;
900074b8:	b0009002 	imm	-28670
900074bc:	f8004d5c 	swi	r0, r0, 19804
        motionData.lid.altPinBreak2Pos  = 0;
900074c0:	b0009002 	imm	-28670
900074c4:	f8004d60 	swi	r0, r0, 19808

        stepper_set_parameter(stepperU, stepperSlowFrequency, motionData.lid.slowFrequency);
900074c8:	b0009002 	imm	-28670
900074cc:	e8604d68 	lwi	r3, r0, 19816
900074d0:	10a00000 	addk	r5, r0, r0
900074d4:	30c00001 	addik	r6, r0, 1
900074d8:	10e30000 	addk	r7, r3, r0
900074dc:	b9f43504 	brlid	r15, 13572	// 9000a9e0 <stepper_set_parameter>
900074e0:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperFastFrequency, motionData.lid.fastFrequency);
900074e4:	b0009002 	imm	-28670
900074e8:	e8604d6c 	lwi	r3, r0, 19820
900074ec:	10a00000 	addk	r5, r0, r0
900074f0:	10c00000 	addk	r6, r0, r0
900074f4:	10e30000 	addk	r7, r3, r0
900074f8:	b9f434e8 	brlid	r15, 13544	// 9000a9e0 <stepper_set_parameter>
900074fc:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperRampSteps, motionData.lid.rampSteps);
90007500:	b0009002 	imm	-28670
90007504:	e8604d70 	lwi	r3, r0, 19824
90007508:	10a00000 	addk	r5, r0, r0
9000750c:	30c00002 	addik	r6, r0, 2
90007510:	10e30000 	addk	r7, r3, r0
90007514:	b9f434cc 	brlid	r15, 13516	// 9000a9e0 <stepper_set_parameter>
90007518:	80000000 	or	r0, r0, r0

        if(motionData.lid.startPosition > lid_lowered_position)
9000751c:	b0009002 	imm	-28670
90007520:	e8604d40 	lwi	r3, r0, 19776
90007524:	324038a4 	addik	r18, r0, 14500
90007528:	16439001 	cmp	r18, r3, r18
9000752c:	bcb20038 	bgei	r18, 56		// 90007564
        {
            // Lid is below the lowered position (in the compressing region)
            // so it will move up to the lowered position.  Don't watch
            // the sensors because we will get invalid sensor readings.
            stepper_set_home_sensor_make_hook(stepperU, NULL);
90007530:	10a00000 	addk	r5, r0, r0
90007534:	10c00000 	addk	r6, r0, r0
90007538:	b9f43c78 	brlid	r15, 15480	// 9000b1b0 <stepper_set_home_sensor_make_hook>
9000753c:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_make_hook(stepperU, NULL);
90007540:	10a00000 	addk	r5, r0, r0
90007544:	10c00000 	addk	r6, r0, r0
90007548:	b9f43d70 	brlid	r15, 15728	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
9000754c:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_break_hook(stepperU, NULL);
90007550:	10a00000 	addk	r5, r0, r0
90007554:	10c00000 	addk	r6, r0, r0
90007558:	b9f43de4 	brlid	r15, 15844	// 9000b33c <stepper_set_alt_sensor_break_hook>
9000755c:	80000000 	or	r0, r0, r0
90007560:	b8000038 	bri	56		// 90007598
        }
        else
        {
            stepper_set_home_sensor_make_hook(stepperU, NULL);
90007564:	10a00000 	addk	r5, r0, r0
90007568:	10c00000 	addk	r6, r0, r0
9000756c:	b9f43c44 	brlid	r15, 15428	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007570:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_make_hook(stepperU, lidAltSensorMakeCallback);
90007574:	10a00000 	addk	r5, r0, r0
90007578:	b0009000 	imm	-28672
9000757c:	30c07878 	addik	r6, r0, 30840
90007580:	b9f43d38 	brlid	r15, 15672	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007584:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_break_hook(stepperU, NULL);
90007588:	10a00000 	addk	r5, r0, r0
9000758c:	10c00000 	addk	r6, r0, r0
90007590:	b9f43dac 	brlid	r15, 15788	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007594:	80000000 	or	r0, r0, r0
        }
        
        if(motionData.lid.startPosition == motionData.lid.compressedPosition)
90007598:	b0009002 	imm	-28670
9000759c:	e8804d40 	lwi	r4, r0, 19776
900075a0:	b0009002 	imm	-28670
900075a4:	e8604d3c 	lwi	r3, r0, 19772
900075a8:	16432000 	rsubk	r18, r3, r4
900075ac:	bc320018 	bnei	r18, 24		// 900075c4
        {
            motionData.lid.loweringState = lidLoweringState_lowering;
900075b0:	b0009002 	imm	-28670
900075b4:	f8004d38 	swi	r0, r0, 19768
            return true;
900075b8:	30600001 	addik	r3, r0, 1
900075bc:	f873001c 	swi	r3, r19, 28
900075c0:	b800003c 	bri	60		// 900075fc
        }
        
        if(stepper_move_to_position(stepperU, lid_lowered_position))
900075c4:	10a00000 	addk	r5, r0, r0
900075c8:	30c038a4 	addik	r6, r0, 14500
900075cc:	b9f438e4 	brlid	r15, 14564	// 9000aeb0 <stepper_move_to_position>
900075d0:	80000000 	or	r0, r0, r0
900075d4:	bc030020 	beqi	r3, 32		// 900075f4
        {
            motionData.lid.plateType      = plateType_unknown;
900075d8:	b0009002 	imm	-28670
900075dc:	f8004d64 	swi	r0, r0, 19812
            motionData.lid.loweringState  = lidLoweringState_lowering;
900075e0:	b0009002 	imm	-28670
900075e4:	f8004d38 	swi	r0, r0, 19768
            return true;
900075e8:	30600001 	addik	r3, r0, 1
900075ec:	f873001c 	swi	r3, r19, 28
900075f0:	b800000c 	bri	12		// 900075fc
        }
    }

    return false;
900075f4:	10600000 	addk	r3, r0, r0
900075f8:	f873001c 	swi	r3, r19, 28
900075fc:	e873001c 	lwi	r3, r19, 28
}
90007600:	e9e10000 	lwi	r15, r1, 0
90007604:	10330000 	addk	r1, r19, r0
90007608:	ea610020 	lwi	r19, r1, 32
9000760c:	30210024 	addik	r1, r1, 36
90007610:	b60f0008 	rtsd	r15, 8
90007614:	80000000 	or	r0, r0, r0

90007618 <startCompressLid>:



static bool startCompressLid()
{
90007618:	3021ffdc 	addik	r1, r1, -36
9000761c:	f9e10000 	swi	r15, r1, 0
90007620:	fa610020 	swi	r19, r1, 32
90007624:	12610000 	addk	r19, r1, r0
    if(!stepper_busy())
90007628:	b9f435a8 	brlid	r15, 13736	// 9000abd0 <stepper_busy>
9000762c:	80000000 	or	r0, r0, r0
90007630:	bc230110 	bnei	r3, 272		// 90007740
    {
        stepper_set_parameter(stepperU, stepperSlowFrequency, motionData.lid.slowFrequency);
90007634:	b0009002 	imm	-28670
90007638:	e8604d68 	lwi	r3, r0, 19816
9000763c:	10a00000 	addk	r5, r0, r0
90007640:	30c00001 	addik	r6, r0, 1
90007644:	10e30000 	addk	r7, r3, r0
90007648:	b9f43398 	brlid	r15, 13208	// 9000a9e0 <stepper_set_parameter>
9000764c:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperFastFrequency, motionData.lid.slowFrequency);
90007650:	b0009002 	imm	-28670
90007654:	e8604d68 	lwi	r3, r0, 19816
90007658:	10a00000 	addk	r5, r0, r0
9000765c:	10c00000 	addk	r6, r0, r0
90007660:	10e30000 	addk	r7, r3, r0
90007664:	b9f4337c 	brlid	r15, 13180	// 9000a9e0 <stepper_set_parameter>
90007668:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperU, stepperRampSteps, motionData.lid.rampSteps);
9000766c:	b0009002 	imm	-28670
90007670:	e8604d70 	lwi	r3, r0, 19824
90007674:	10a00000 	addk	r5, r0, r0
90007678:	30c00002 	addik	r6, r0, 2
9000767c:	10e30000 	addk	r7, r3, r0
90007680:	b9f43360 	brlid	r15, 13152	// 9000a9e0 <stepper_set_parameter>
90007684:	80000000 	or	r0, r0, r0
        stepper_set_home_sensor_make_hook(stepperU, NULL);
90007688:	10a00000 	addk	r5, r0, r0
9000768c:	10c00000 	addk	r6, r0, r0
90007690:	b9f43b20 	brlid	r15, 15136	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007694:	80000000 	or	r0, r0, r0

        if(stepper_is_at_alt_position(stepperU))
90007698:	10a00000 	addk	r5, r0, r0
9000769c:	b9f43dc0 	brlid	r15, 15808	// 9000b45c <stepper_is_at_alt_position>
900076a0:	80000000 	or	r0, r0, r0
900076a4:	bc030044 	beqi	r3, 68		// 900076e8
        {
            if(motionData.lid.altPinCount == 0)
900076a8:	b0009002 	imm	-28670
900076ac:	e8604d48 	lwi	r3, r0, 19784
900076b0:	bc230010 	bnei	r3, 16		// 900076c0
            {
                //Pin sensed, but because of starting position, it was missed.
                motionData.lid.altPinCount = 1;
900076b4:	30600001 	addik	r3, r0, 1
900076b8:	b0009002 	imm	-28670
900076bc:	f8604d48 	swi	r3, r0, 19784
            }
            stepper_set_alt_sensor_make_hook(stepperU, NULL);
900076c0:	10a00000 	addk	r5, r0, r0
900076c4:	10c00000 	addk	r6, r0, r0
900076c8:	b9f43bf0 	brlid	r15, 15344	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
900076cc:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_break_hook(stepperU, lidAltSensorBreakCallback);
900076d0:	10a00000 	addk	r5, r0, r0
900076d4:	b0009000 	imm	-28672
900076d8:	30c07a90 	addik	r6, r0, 31376
900076dc:	b9f43c60 	brlid	r15, 15456	// 9000b33c <stepper_set_alt_sensor_break_hook>
900076e0:	80000000 	or	r0, r0, r0
900076e4:	b8000028 	bri	40		// 9000770c
        }
        else
        {
            stepper_set_alt_sensor_make_hook(stepperU, lidAltSensorMakeCallback);
900076e8:	10a00000 	addk	r5, r0, r0
900076ec:	b0009000 	imm	-28672
900076f0:	30c07878 	addik	r6, r0, 30840
900076f4:	b9f43bc4 	brlid	r15, 15300	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
900076f8:	80000000 	or	r0, r0, r0
            stepper_set_alt_sensor_break_hook(stepperU, NULL);
900076fc:	10a00000 	addk	r5, r0, r0
90007700:	10c00000 	addk	r6, r0, r0
90007704:	b9f43c38 	brlid	r15, 15416	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007708:	80000000 	or	r0, r0, r0
        }

        if(stepper_move_to_position(stepperU, motionData.lid.compressedPosition))
9000770c:	b0009002 	imm	-28670
90007710:	e8604d3c 	lwi	r3, r0, 19772
90007714:	10a00000 	addk	r5, r0, r0
90007718:	10c30000 	addk	r6, r3, r0
9000771c:	b9f43794 	brlid	r15, 14228	// 9000aeb0 <stepper_move_to_position>
90007720:	80000000 	or	r0, r0, r0
90007724:	bc03001c 	beqi	r3, 28		// 90007740
        {
            motionData.lid.loweringState  = lidLoweringState_compressing;
90007728:	30600001 	addik	r3, r0, 1
9000772c:	b0009002 	imm	-28670
90007730:	f8604d38 	swi	r3, r0, 19768
            return true;
90007734:	30600001 	addik	r3, r0, 1
90007738:	f873001c 	swi	r3, r19, 28
9000773c:	b800000c 	bri	12		// 90007748
        }
    }

    return false;
90007740:	10600000 	addk	r3, r0, r0
90007744:	f873001c 	swi	r3, r19, 28
90007748:	e873001c 	lwi	r3, r19, 28
}
9000774c:	e9e10000 	lwi	r15, r1, 0
90007750:	10330000 	addk	r1, r19, r0
90007754:	ea610020 	lwi	r19, r1, 32
90007758:	30210024 	addik	r1, r1, 36
9000775c:	b60f0008 	rtsd	r15, 8
90007760:	80000000 	or	r0, r0, r0

90007764 <lidHomeSensorMakeCallback>:



static bool lidHomeSensorMakeCallback(int position)
{
90007764:	3021ffdc 	addik	r1, r1, -36
90007768:	f9e10000 	swi	r15, r1, 0
9000776c:	fa610020 	swi	r19, r1, 32
90007770:	12610000 	addk	r19, r1, r0
90007774:	f8b30028 	swi	r5, r19, 40
    stepper_set_home_sensor_make_hook(stepperU, NULL);
90007778:	10a00000 	addk	r5, r0, r0
9000777c:	10c00000 	addk	r6, r0, r0
90007780:	b9f43a30 	brlid	r15, 14896	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007784:	80000000 	or	r0, r0, r0

    motionData.lid.homePinMakePos = position;
90007788:	e8730028 	lwi	r3, r19, 40
9000778c:	b0009002 	imm	-28670
90007790:	f8604d50 	swi	r3, r0, 19792

    if(position - stepper_get_home_pin_location(stepperU) > lid_max_home_sensor_steps)
90007794:	10a00000 	addk	r5, r0, r0
90007798:	b9f43500 	brlid	r15, 13568	// 9000ac98 <stepper_get_home_pin_location>
9000779c:	80000000 	or	r0, r0, r0
900077a0:	10830000 	addk	r4, r3, r0
900077a4:	e8730028 	lwi	r3, r19, 40
900077a8:	14641800 	rsubk	r3, r4, r3
900077ac:	324000c8 	addik	r18, r0, 200
900077b0:	16439001 	cmp	r18, r3, r18
900077b4:	bcb20074 	bgei	r18, 116		// 90007828
    {
        motionData.state = state_error;
900077b8:	3060000b 	addik	r3, r0, 11
900077bc:	b0009002 	imm	-28670
900077c0:	f8604d74 	swi	r3, r0, 19828
        motionData.error = err_lidRaiseFailure;
900077c4:	30600018 	addik	r3, r0, 24
900077c8:	b0009002 	imm	-28670
900077cc:	f8604d80 	swi	r3, r0, 19840

        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
900077d0:	10a00000 	addk	r5, r0, r0
900077d4:	b9f434c4 	brlid	r15, 13508	// 9000ac98 <stepper_get_home_pin_location>
900077d8:	80000000 	or	r0, r0, r0
900077dc:	b0009002 	imm	-28670
900077e0:	30a04d84 	addik	r5, r0, 19844
900077e4:	30c000c8 	addik	r6, r0, 200
900077e8:	b0009002 	imm	-28670
900077ec:	30e015f8 	addik	r7, r0, 5624
900077f0:	e9130028 	lwi	r8, r19, 40
900077f4:	11230000 	addk	r9, r3, r0
900077f8:	314000c8 	addik	r10, r0, 200
900077fc:	b0000000 	imm	0
90007800:	b9f4ca28 	brlid	r15, -13784	// 90014228 <snprintf>
90007804:	80000000 	or	r0, r0, r0
                 "Raised pin found at pos %d, should be %d +/- %d",
                 position, stepper_get_home_pin_location(stepperU), lid_max_home_sensor_steps);
        puts(motionData.errorDesc);
90007808:	b0009002 	imm	-28670
9000780c:	30a04d84 	addik	r5, r0, 19844
90007810:	b0000000 	imm	0
90007814:	b9f48724 	brlid	r15, -30940	// 9000ff38 <puts>
90007818:	80000000 	or	r0, r0, r0
        
        return false;
9000781c:	10600000 	addk	r3, r0, r0
90007820:	f873001c 	swi	r3, r19, 28
90007824:	b8000038 	bri	56		// 9000785c
    }

    printf("Lid home pin at %d\n", position);
90007828:	b0009002 	imm	-28670
9000782c:	30a01628 	addik	r5, r0, 5672
90007830:	e8d30028 	lwi	r6, r19, 40
90007834:	b0000000 	imm	0
90007838:	b9f4860c 	brlid	r15, -31220	// 9000fe44 <printf>
9000783c:	80000000 	or	r0, r0, r0
    motionData.lid.homePinFound = true;
90007840:	30600001 	addik	r3, r0, 1
90007844:	b0009002 	imm	-28670
90007848:	f8604d44 	swi	r3, r0, 19780
    stepper_reset_home_pin_location();
9000784c:	b9f433b0 	brlid	r15, 13232	// 9000abfc <stepper_reset_home_pin_location>
90007850:	80000000 	or	r0, r0, r0

    return true;
90007854:	30600001 	addik	r3, r0, 1
90007858:	f873001c 	swi	r3, r19, 28
9000785c:	e873001c 	lwi	r3, r19, 28
}
90007860:	e9e10000 	lwi	r15, r1, 0
90007864:	10330000 	addk	r1, r19, r0
90007868:	ea610020 	lwi	r19, r1, 32
9000786c:	30210024 	addik	r1, r1, 36
90007870:	b60f0008 	rtsd	r15, 8
90007874:	80000000 	or	r0, r0, r0

90007878 <lidAltSensorMakeCallback>:



static bool lidAltSensorMakeCallback(int position)
{
90007878:	3021ffdc 	addik	r1, r1, -36
9000787c:	f9e10000 	swi	r15, r1, 0
90007880:	fa610020 	swi	r19, r1, 32
90007884:	12610000 	addk	r19, r1, r0
90007888:	f8b30028 	swi	r5, r19, 40
    stepper_set_alt_sensor_make_hook(stepperU, NULL);
9000788c:	10a00000 	addk	r5, r0, r0
90007890:	10c00000 	addk	r6, r0, r0
90007894:	b9f43a24 	brlid	r15, 14884	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007898:	80000000 	or	r0, r0, r0

    if(motionData.lid.altPinCount == 0)
9000789c:	b0009002 	imm	-28670
900078a0:	e8604d48 	lwi	r3, r0, 19784
900078a4:	bc230014 	bnei	r3, 20		// 900078b8
    {
        motionData.lid.altPinMake1Pos = position;
900078a8:	e8730028 	lwi	r3, r19, 40
900078ac:	b0009002 	imm	-28670
900078b0:	f8604d54 	swi	r3, r0, 19796
900078b4:	b8000020 	bri	32		// 900078d4
    }
    else if(motionData.lid.altPinCount == 1)
900078b8:	b0009002 	imm	-28670
900078bc:	e8604d48 	lwi	r3, r0, 19784
900078c0:	aa430001 	xori	r18, r3, 1
900078c4:	bc320010 	bnei	r18, 16		// 900078d4
    {
        motionData.lid.altPinMake2Pos = position;
900078c8:	e8730028 	lwi	r3, r19, 40
900078cc:	b0009002 	imm	-28670
900078d0:	f8604d5c 	swi	r3, r0, 19804
    }

    if(motionData.lid.compressedPosition - position > lid_max_alt_sensor_steps)
900078d4:	b0009002 	imm	-28670
900078d8:	e8604d3c 	lwi	r3, r0, 19772
900078dc:	e8930028 	lwi	r4, r19, 40
900078e0:	14641800 	rsubk	r3, r4, r3
900078e4:	324008fc 	addik	r18, r0, 2300
900078e8:	16439001 	cmp	r18, r3, r18
900078ec:	bcb20070 	bgei	r18, 112		// 9000795c
    {
        motionData.state = state_error;
900078f0:	3060000b 	addik	r3, r0, 11
900078f4:	b0009002 	imm	-28670
900078f8:	f8604d74 	swi	r3, r0, 19828
        motionData.error = err_lidLowerFailure;
900078fc:	30600019 	addik	r3, r0, 25
90007900:	b0009002 	imm	-28670
90007904:	f8604d80 	swi	r3, r0, 19840

        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
90007908:	b0009002 	imm	-28670
9000790c:	e8604d3c 	lwi	r3, r0, 19772
90007910:	b0009002 	imm	-28670
90007914:	30a04d84 	addik	r5, r0, 19844
90007918:	30c000c8 	addik	r6, r0, 200
9000791c:	b0009002 	imm	-28670
90007920:	30e0163c 	addik	r7, r0, 5692
90007924:	e9130028 	lwi	r8, r19, 40
90007928:	11230000 	addk	r9, r3, r0
9000792c:	314008fc 	addik	r10, r0, 2300
90007930:	b0000000 	imm	0
90007934:	b9f4c8f4 	brlid	r15, -14092	// 90014228 <snprintf>
90007938:	80000000 	or	r0, r0, r0
                 "Lower pin found at pos %d, should be %d +/- %d",
                 position, motionData.lid.compressedPosition, lid_max_alt_sensor_steps);
        puts(motionData.errorDesc);
9000793c:	b0009002 	imm	-28670
90007940:	30a04d84 	addik	r5, r0, 19844
90007944:	b0000000 	imm	0
90007948:	b9f485f0 	brlid	r15, -31248	// 9000ff38 <puts>
9000794c:	80000000 	or	r0, r0, r0
        
        return false;
90007950:	10600000 	addk	r3, r0, r0
90007954:	f873001c 	swi	r3, r19, 28
90007958:	b800011c 	bri	284		// 90007a74
    }

    printf("Lid alt pin %d at %d", motionData.lid.altPinCount, position);
9000795c:	b0009002 	imm	-28670
90007960:	e8604d48 	lwi	r3, r0, 19784
90007964:	b0009002 	imm	-28670
90007968:	30a0166c 	addik	r5, r0, 5740
9000796c:	10c30000 	addk	r6, r3, r0
90007970:	e8f30028 	lwi	r7, r19, 40
90007974:	b0000000 	imm	0
90007978:	b9f484cc 	brlid	r15, -31540	// 9000fe44 <printf>
9000797c:	80000000 	or	r0, r0, r0
    ++motionData.lid.altPinCount;
90007980:	b0009002 	imm	-28670
90007984:	e8604d48 	lwi	r3, r0, 19784
90007988:	30630001 	addik	r3, r3, 1
9000798c:	b0009002 	imm	-28670
90007990:	f8604d48 	swi	r3, r0, 19784

    if(motionData.lid.altPinCount < 2)
90007994:	b0009002 	imm	-28670
90007998:	e8604d48 	lwi	r3, r0, 19784
9000799c:	32400001 	addik	r18, r0, 1
900079a0:	16439001 	cmp	r18, r3, r18
900079a4:	bc520028 	blti	r18, 40		// 900079cc
    {
        motionData.lid.plateType = plateType_sda;
900079a8:	30600002 	addik	r3, r0, 2
900079ac:	b0009002 	imm	-28670
900079b0:	f8604d64 	swi	r3, r0, 19812
        printf(" (SDA)\n");
900079b4:	b0009002 	imm	-28670
900079b8:	30a01684 	addik	r5, r0, 5764
900079bc:	b0000000 	imm	0
900079c0:	b9f48578 	brlid	r15, -31368	// 9000ff38 <puts>
900079c4:	80000000 	or	r0, r0, r0
900079c8:	b8000090 	bri	144		// 90007a58
    }
    else if(motionData.lid.altPinCount == 2)
900079cc:	b0009002 	imm	-28670
900079d0:	e8604d48 	lwi	r3, r0, 19784
900079d4:	aa430002 	xori	r18, r3, 2
900079d8:	bc320028 	bnei	r18, 40		// 90007a00
    {
        motionData.lid.plateType = plateType_pcr;
900079dc:	30600003 	addik	r3, r0, 3
900079e0:	b0009002 	imm	-28670
900079e4:	f8604d64 	swi	r3, r0, 19812
        printf(" (PCR)\n");
900079e8:	b0009002 	imm	-28670
900079ec:	30a0168c 	addik	r5, r0, 5772
900079f0:	b0000000 	imm	0
900079f4:	b9f48544 	brlid	r15, -31420	// 9000ff38 <puts>
900079f8:	80000000 	or	r0, r0, r0
900079fc:	b800005c 	bri	92		// 90007a58
    }
    else
    {
        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
90007a00:	b0009002 	imm	-28670
90007a04:	e8604d48 	lwi	r3, r0, 19784
90007a08:	b0009002 	imm	-28670
90007a0c:	30a04d84 	addik	r5, r0, 19844
90007a10:	30c000c8 	addik	r6, r0, 200
90007a14:	b0009002 	imm	-28670
90007a18:	30e01694 	addik	r7, r0, 5780
90007a1c:	11030000 	addk	r8, r3, r0
90007a20:	e9330028 	lwi	r9, r19, 40
90007a24:	b0000000 	imm	0
90007a28:	b9f4c800 	brlid	r15, -14336	// 90014228 <snprintf>
90007a2c:	80000000 	or	r0, r0, r0
                 "Too many lower pins (%d) at pos %d", motionData.lid.altPinCount, position);
        printf("\n%s\n", motionData.errorDesc);
90007a30:	b0009002 	imm	-28670
90007a34:	30a016b8 	addik	r5, r0, 5816
90007a38:	b0009002 	imm	-28670
90007a3c:	30c04d84 	addik	r6, r0, 19844
90007a40:	b0000000 	imm	0
90007a44:	b9f48400 	brlid	r15, -31744	// 9000fe44 <printf>
90007a48:	80000000 	or	r0, r0, r0

        return false;
90007a4c:	10600000 	addk	r3, r0, r0
90007a50:	f873001c 	swi	r3, r19, 28
90007a54:	b8000020 	bri	32		// 90007a74
    }

    stepper_set_alt_sensor_break_hook(stepperU, lidAltSensorBreakCallback);
90007a58:	10a00000 	addk	r5, r0, r0
90007a5c:	b0009000 	imm	-28672
90007a60:	30c07a90 	addik	r6, r0, 31376
90007a64:	b9f438d8 	brlid	r15, 14552	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007a68:	80000000 	or	r0, r0, r0

    return true;
90007a6c:	30600001 	addik	r3, r0, 1
90007a70:	f873001c 	swi	r3, r19, 28
90007a74:	e873001c 	lwi	r3, r19, 28
}
90007a78:	e9e10000 	lwi	r15, r1, 0
90007a7c:	10330000 	addk	r1, r19, r0
90007a80:	ea610020 	lwi	r19, r1, 32
90007a84:	30210024 	addik	r1, r1, 36
90007a88:	b60f0008 	rtsd	r15, 8
90007a8c:	80000000 	or	r0, r0, r0

90007a90 <lidAltSensorBreakCallback>:



static bool lidAltSensorBreakCallback(int position)
{
90007a90:	3021ffe0 	addik	r1, r1, -32
90007a94:	f9e10000 	swi	r15, r1, 0
90007a98:	fa61001c 	swi	r19, r1, 28
90007a9c:	12610000 	addk	r19, r1, r0
90007aa0:	f8b30024 	swi	r5, r19, 36
    stepper_set_alt_sensor_break_hook(stepperU, NULL);
90007aa4:	10a00000 	addk	r5, r0, r0
90007aa8:	10c00000 	addk	r6, r0, r0
90007aac:	b9f43890 	brlid	r15, 14480	// 9000b33c <stepper_set_alt_sensor_break_hook>
90007ab0:	80000000 	or	r0, r0, r0

    if(motionData.lid.altSpaceCount == 0)
90007ab4:	b0009002 	imm	-28670
90007ab8:	e8604d4c 	lwi	r3, r0, 19788
90007abc:	bc230014 	bnei	r3, 20		// 90007ad0
    {
        motionData.lid.altPinBreak1Pos = position;
90007ac0:	e8730024 	lwi	r3, r19, 36
90007ac4:	b0009002 	imm	-28670
90007ac8:	f8604d58 	swi	r3, r0, 19800
90007acc:	b8000020 	bri	32		// 90007aec
    }
    else if(motionData.lid.altSpaceCount == 1)
90007ad0:	b0009002 	imm	-28670
90007ad4:	e8604d4c 	lwi	r3, r0, 19788
90007ad8:	aa430001 	xori	r18, r3, 1
90007adc:	bc320010 	bnei	r18, 16		// 90007aec
    {
        motionData.lid.altPinBreak2Pos = position;
90007ae0:	e8730024 	lwi	r3, r19, 36
90007ae4:	b0009002 	imm	-28670
90007ae8:	f8604d60 	swi	r3, r0, 19808
    }

    printf("Lid alt space %d at %d\n", motionData.lid.altSpaceCount, position);
90007aec:	b0009002 	imm	-28670
90007af0:	e8604d4c 	lwi	r3, r0, 19788
90007af4:	b0009002 	imm	-28670
90007af8:	30a016c0 	addik	r5, r0, 5824
90007afc:	10c30000 	addk	r6, r3, r0
90007b00:	e8f30024 	lwi	r7, r19, 36
90007b04:	b0000000 	imm	0
90007b08:	b9f4833c 	brlid	r15, -31940	// 9000fe44 <printf>
90007b0c:	80000000 	or	r0, r0, r0
    ++motionData.lid.altSpaceCount;
90007b10:	b0009002 	imm	-28670
90007b14:	e8604d4c 	lwi	r3, r0, 19788
90007b18:	30630001 	addik	r3, r3, 1
90007b1c:	b0009002 	imm	-28670
90007b20:	f8604d4c 	swi	r3, r0, 19788
    
#if BETA_HARDWARE_SUPPORT
//TODO: Temporarily ignore space between SDA & PCR - Call it SDA
//      and space below PCR - call it PCR.
//      Need mechanical adjustment to fix issue
        stepper_set_alt_sensor_make_hook(stepperU, lidAltSensorMakeCallback);
90007b24:	10a00000 	addk	r5, r0, r0
90007b28:	b0009000 	imm	-28672
90007b2c:	30c07878 	addik	r6, r0, 30840
90007b30:	b9f43788 	brlid	r15, 14216	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007b34:	80000000 	or	r0, r0, r0
#else
    if(motionData.lid.altSpaceCount < 2)
    {
        //Okay to continue
        motionData.lid.plateType = plateType_unknown;
        stepper_set_alt_sensor_make_hook(stepperU, lidAltSensorMakeCallback);
    }
    else if(motionData.lid.altSpaceCount == 2)
    {
        //Second space found (No plate present) - stop so we don't run into the electroform
        printf("No plate present\n");
        motionData.lid.plateType = plateType_none;
        return false;
    }
    else
    {
        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
                 "Too many lower spaces (%d) at pos %d", motionData.lid.altSpaceCount, position);
        puts(motionData.errorDesc);

        return false;
    }
#endif

    return true;
90007b38:	30600001 	addik	r3, r0, 1
}
90007b3c:	e9e10000 	lwi	r15, r1, 0
90007b40:	10330000 	addk	r1, r19, r0
90007b44:	ea61001c 	lwi	r19, r1, 28
90007b48:	30210020 	addik	r1, r1, 32
90007b4c:	b60f0008 	rtsd	r15, 8
90007b50:	80000000 	or	r0, r0, r0

90007b54 <lidInitDoorAltSensorMakeCallback>:



static bool lidInitDoorAltSensorMakeCallback(int position)
{
90007b54:	3021ffdc 	addik	r1, r1, -36
90007b58:	f9e10000 	swi	r15, r1, 0
90007b5c:	fa610020 	swi	r19, r1, 32
90007b60:	12610000 	addk	r19, r1, r0
90007b64:	f8b30028 	swi	r5, r19, 40
    if(++motionData.lid.altPinCount >= lid_preinit_door_steps_past_alt)
90007b68:	b0009002 	imm	-28670
90007b6c:	e8604d48 	lwi	r3, r0, 19784
90007b70:	30630001 	addik	r3, r3, 1
90007b74:	b0009002 	imm	-28670
90007b78:	f8604d48 	swi	r3, r0, 19784
90007b7c:	b0009002 	imm	-28670
90007b80:	e8604d48 	lwi	r3, r0, 19784
90007b84:	324000c7 	addik	r18, r0, 199
90007b88:	16439001 	cmp	r18, r3, r18
90007b8c:	bcb20020 	bgei	r18, 32		// 90007bac
    {
        //Door moved to alt sensor - okay now to init lid
        stepper_set_home_sensor_make_hook(stepperF, NULL);
90007b90:	30a00001 	addik	r5, r0, 1
90007b94:	10c00000 	addk	r6, r0, r0
90007b98:	b9f43618 	brlid	r15, 13848	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007b9c:	80000000 	or	r0, r0, r0
        return false;
90007ba0:	10600000 	addk	r3, r0, r0
90007ba4:	f873001c 	swi	r3, r19, 28
90007ba8:	b800000c 	bri	12		// 90007bb4
    }
    return true;
90007bac:	30600001 	addik	r3, r0, 1
90007bb0:	f873001c 	swi	r3, r19, 28
90007bb4:	e873001c 	lwi	r3, r19, 28
}
90007bb8:	e9e10000 	lwi	r15, r1, 0
90007bbc:	10330000 	addk	r1, r19, r0
90007bc0:	ea610020 	lwi	r19, r1, 32
90007bc4:	30210024 	addik	r1, r1, 36
90007bc8:	b60f0008 	rtsd	r15, 8
90007bcc:	80000000 	or	r0, r0, r0

90007bd0 <doorInitStart>:



///////////////////////////////////////////////////
// Local door functions

static bool doorInitStart()
{
90007bd0:	3021ffdc 	addik	r1, r1, -36
90007bd4:	f9e10000 	swi	r15, r1, 0
90007bd8:	fa610020 	swi	r19, r1, 32
90007bdc:	12610000 	addk	r19, r1, r0
    motionData.door.initialized = false;
90007be0:	b0009002 	imm	-28670
90007be4:	f8004d08 	swi	r0, r0, 19720

    if(motionData.door.disabled)
90007be8:	b0009002 	imm	-28670
90007bec:	e8604d0c 	lwi	r3, r0, 19724
90007bf0:	bc030024 	beqi	r3, 36		// 90007c14
    {
        finishMotorMove(err_doorInitializationFailure, "Can't init door, currently disabled");
90007bf4:	30a0001b 	addik	r5, r0, 27
90007bf8:	b0009002 	imm	-28670
90007bfc:	30c016d8 	addik	r6, r0, 5848
90007c00:	b9f4e3a0 	brlid	r15, -7264	// 90005fa0 <finishMotorMove>
90007c04:	80000000 	or	r0, r0, r0
        return false;
90007c08:	10600000 	addk	r3, r0, r0
90007c0c:	f873001c 	swi	r3, r19, 28
90007c10:	b8000128 	bri	296		// 90007d38
    }

    if(!motionData.lid.initialized)
90007c14:	b0009002 	imm	-28670
90007c18:	e8604d34 	lwi	r3, r0, 19764
90007c1c:	bc230024 	bnei	r3, 36		// 90007c40
    {
        finishMotorMove(err_doorInitializationFailure, "Can't init door, lid not initialized");
90007c20:	30a0001b 	addik	r5, r0, 27
90007c24:	b0009002 	imm	-28670
90007c28:	30c016fc 	addik	r6, r0, 5884
90007c2c:	b9f4e374 	brlid	r15, -7308	// 90005fa0 <finishMotorMove>
90007c30:	80000000 	or	r0, r0, r0
        return false;
90007c34:	10600000 	addk	r3, r0, r0
90007c38:	f873001c 	swi	r3, r19, 28
90007c3c:	b80000fc 	bri	252		// 90007d38
    }

    motionData.init.state = initState_doorStart;
90007c40:	30600009 	addik	r3, r0, 9
90007c44:	b0009002 	imm	-28670
90007c48:	f86040d4 	swi	r3, r0, 16596


    // Set speed for initialization
    stepper_set_parameter(stepperF, stepperSlowFrequency, door_initialization_frequency);
90007c4c:	30a00001 	addik	r5, r0, 1
90007c50:	30c00001 	addik	r6, r0, 1
90007c54:	30e00320 	addik	r7, r0, 800
90007c58:	b9f42d88 	brlid	r15, 11656	// 9000a9e0 <stepper_set_parameter>
90007c5c:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperF, stepperFastFrequency, door_initialization_frequency);
90007c60:	30a00001 	addik	r5, r0, 1
90007c64:	10c00000 	addk	r6, r0, r0
90007c68:	30e00320 	addik	r7, r0, 800
90007c6c:	b9f42d74 	brlid	r15, 11636	// 9000a9e0 <stepper_set_parameter>
90007c70:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperF, stepperRampSteps, door_initialization_ramp_steps);
90007c74:	30a00001 	addik	r5, r0, 1
90007c78:	30c00002 	addik	r6, r0, 2
90007c7c:	10e00000 	addk	r7, r0, r0
90007c80:	b9f42d60 	brlid	r15, 11616	// 9000a9e0 <stepper_set_parameter>
90007c84:	80000000 	or	r0, r0, r0
    stepper_set_home_sensor_make_hook(stepperF, NULL);
90007c88:	30a00001 	addik	r5, r0, 1
90007c8c:	10c00000 	addk	r6, r0, r0
90007c90:	b9f43520 	brlid	r15, 13600	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007c94:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_make_hook(stepperF, NULL);
90007c98:	30a00001 	addik	r5, r0, 1
90007c9c:	10c00000 	addk	r6, r0, r0
90007ca0:	b9f43618 	brlid	r15, 13848	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007ca4:	80000000 	or	r0, r0, r0



    // Move door to correctly find home flag
    if(!stepper_is_at_alt_position(stepperF))
90007ca8:	30a00001 	addik	r5, r0, 1
90007cac:	b9f437b0 	brlid	r15, 14256	// 9000b45c <stepper_is_at_alt_position>
90007cb0:	80000000 	or	r0, r0, r0
90007cb4:	bc230034 	bnei	r3, 52		// 90007ce8
    {
        // Move door out a few steps to make sure we see the home sensor
        stepper_move_relative(stepperF, door_preinitialization_move_steps);
90007cb8:	30a00001 	addik	r5, r0, 1
90007cbc:	30c001f4 	addik	r6, r0, 500
90007cc0:	b9f43158 	brlid	r15, 12632	// 9000ae18 <stepper_move_relative>
90007cc4:	80000000 	or	r0, r0, r0
        startTimer(&motionData.init.timer, MSEC_TO_TICKS(2000));
90007cc8:	b0009002 	imm	-28670
90007ccc:	30a040c4 	addik	r5, r0, 16580
90007cd0:	30c00000 	addik	r6, r0, 0
90007cd4:	b00007f2 	imm	2034
90007cd8:	30e07c20 	addik	r7, r0, 31776
90007cdc:	b9f44214 	brlid	r15, 16916	// 9000bef0 <startTimer>
90007ce0:	80000000 	or	r0, r0, r0
90007ce4:	b800004c 	bri	76		// 90007d30
    }
    else
    {
        if(stepper_is_at_home_position(stepperF))
90007ce8:	30a00001 	addik	r5, r0, 1
90007cec:	b9f436d4 	brlid	r15, 14036	// 9000b3c0 <stepper_is_at_home_position>
90007cf0:	80000000 	or	r0, r0, r0
90007cf4:	bc030024 	beqi	r3, 36		// 90007d18
        {
            finishMotorMove(err_doorInitializationFailure, "Home and Alt sensors blocked");
90007cf8:	30a0001b 	addik	r5, r0, 27
90007cfc:	b0009002 	imm	-28670
90007d00:	30c01724 	addik	r6, r0, 5924
90007d04:	b9f4e29c 	brlid	r15, -7524	// 90005fa0 <finishMotorMove>
90007d08:	80000000 	or	r0, r0, r0
            return false;
90007d0c:	10600000 	addk	r3, r0, r0
90007d10:	f873001c 	swi	r3, r19, 28
90007d14:	b8000024 	bri	36		// 90007d38
        }
        startTimer(&motionData.init.timer, 0);
90007d18:	b0009002 	imm	-28670
90007d1c:	30a040c4 	addik	r5, r0, 16580
90007d20:	10c00000 	addk	r6, r0, r0
90007d24:	10e00000 	addk	r7, r0, r0
90007d28:	b9f441c8 	brlid	r15, 16840	// 9000bef0 <startTimer>
90007d2c:	80000000 	or	r0, r0, r0
    }

    return true;
90007d30:	30600001 	addik	r3, r0, 1
90007d34:	f873001c 	swi	r3, r19, 28
90007d38:	e873001c 	lwi	r3, r19, 28
}
90007d3c:	e9e10000 	lwi	r15, r1, 0
90007d40:	10330000 	addk	r1, r19, r0
90007d44:	ea610020 	lwi	r19, r1, 32
90007d48:	30210024 	addik	r1, r1, 36
90007d4c:	b60f0008 	rtsd	r15, 8
90007d50:	80000000 	or	r0, r0, r0

90007d54 <doorInitRun>:



static bool doorInitRun()
{
90007d54:	3021ffe0 	addik	r1, r1, -32
90007d58:	f9e10000 	swi	r15, r1, 0
90007d5c:	fa61001c 	swi	r19, r1, 28
90007d60:	12610000 	addk	r19, r1, r0
    // Start looking for home flag
    stepper_move_to_position(stepperF, stepperHome);
90007d64:	30a00001 	addik	r5, r0, 1
90007d68:	b0007fff 	imm	32767
90007d6c:	30c0ffff 	addik	r6, r0, -1
90007d70:	b9f43140 	brlid	r15, 12608	// 9000aeb0 <stepper_move_to_position>
90007d74:	80000000 	or	r0, r0, r0
    startTimer(&motionData.init.timer, MSEC_TO_TICKS(door_initialization_timeout_ms));
90007d78:	b0009002 	imm	-28670
90007d7c:	30a040c4 	addik	r5, r0, 16580
90007d80:	30c00000 	addik	r6, r0, 0
90007d84:	b0003b9a 	imm	15258
90007d88:	30e0a2f0 	addik	r7, r0, -23824
90007d8c:	b9f44164 	brlid	r15, 16740	// 9000bef0 <startTimer>
90007d90:	80000000 	or	r0, r0, r0
    return true;
90007d94:	30600001 	addik	r3, r0, 1
}
90007d98:	e9e10000 	lwi	r15, r1, 0
90007d9c:	10330000 	addk	r1, r19, r0
90007da0:	ea61001c 	lwi	r19, r1, 28
90007da4:	30210020 	addik	r1, r1, 32
90007da8:	b60f0008 	rtsd	r15, 8
90007dac:	80000000 	or	r0, r0, r0

90007db0 <doorInitEnd>:



static bool doorInitEnd()
{
90007db0:	3021ffe0 	addik	r1, r1, -32
90007db4:	f9e10000 	swi	r15, r1, 0
90007db8:	fa61001c 	swi	r19, r1, 28
90007dbc:	12610000 	addk	r19, r1, r0
    // Reset door speed
    stepper_set_parameter(stepperF, stepperSlowFrequency, motionData.door.slowFrequency);
90007dc0:	b0009002 	imm	-28670
90007dc4:	e8604d28 	lwi	r3, r0, 19752
90007dc8:	30a00001 	addik	r5, r0, 1
90007dcc:	30c00001 	addik	r6, r0, 1
90007dd0:	10e30000 	addk	r7, r3, r0
90007dd4:	b9f42c0c 	brlid	r15, 11276	// 9000a9e0 <stepper_set_parameter>
90007dd8:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperF, stepperFastFrequency, motionData.door.fastFrequency);
90007ddc:	b0009002 	imm	-28670
90007de0:	e8604d2c 	lwi	r3, r0, 19756
90007de4:	30a00001 	addik	r5, r0, 1
90007de8:	10c00000 	addk	r6, r0, r0
90007dec:	10e30000 	addk	r7, r3, r0
90007df0:	b9f42bf0 	brlid	r15, 11248	// 9000a9e0 <stepper_set_parameter>
90007df4:	80000000 	or	r0, r0, r0
    stepper_set_parameter(stepperF, stepperRampSteps, motionData.door.rampSteps);
90007df8:	b0009002 	imm	-28670
90007dfc:	e8604d30 	lwi	r3, r0, 19760
90007e00:	30a00001 	addik	r5, r0, 1
90007e04:	30c00002 	addik	r6, r0, 2
90007e08:	10e30000 	addk	r7, r3, r0
90007e0c:	b9f42bd4 	brlid	r15, 11220	// 9000a9e0 <stepper_set_parameter>
90007e10:	80000000 	or	r0, r0, r0
    stepper_set_home_sensor_make_hook(stepperF, NULL);
90007e14:	30a00001 	addik	r5, r0, 1
90007e18:	10c00000 	addk	r6, r0, r0
90007e1c:	b9f43394 	brlid	r15, 13204	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007e20:	80000000 	or	r0, r0, r0
    stepper_set_alt_sensor_make_hook(stepperF, NULL);
90007e24:	30a00001 	addik	r5, r0, 1
90007e28:	10c00000 	addk	r6, r0, r0
90007e2c:	b9f4348c 	brlid	r15, 13452	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007e30:	80000000 	or	r0, r0, r0

    // Move to home/open position
    stepper_move_to_position(stepperF, door_open_position);
90007e34:	30a00001 	addik	r5, r0, 1
90007e38:	10c00000 	addk	r6, r0, r0
90007e3c:	b9f43074 	brlid	r15, 12404	// 9000aeb0 <stepper_move_to_position>
90007e40:	80000000 	or	r0, r0, r0
    startTimer(&motionData.init.timer, MSEC_TO_TICKS(door_initialization_timeout_ms));
90007e44:	b0009002 	imm	-28670
90007e48:	30a040c4 	addik	r5, r0, 16580
90007e4c:	30c00000 	addik	r6, r0, 0
90007e50:	b0003b9a 	imm	15258
90007e54:	30e0a2f0 	addik	r7, r0, -23824
90007e58:	b9f44098 	brlid	r15, 16536	// 9000bef0 <startTimer>
90007e5c:	80000000 	or	r0, r0, r0

    return true;
90007e60:	30600001 	addik	r3, r0, 1
}
90007e64:	e9e10000 	lwi	r15, r1, 0
90007e68:	10330000 	addk	r1, r19, r0
90007e6c:	ea61001c 	lwi	r19, r1, 28
90007e70:	30210020 	addik	r1, r1, 32
90007e74:	b60f0008 	rtsd	r15, 8
90007e78:	80000000 	or	r0, r0, r0

90007e7c <startOpenDoor>:


static bool startOpenDoor()
{
90007e7c:	3021ffdc 	addik	r1, r1, -36
90007e80:	f9e10000 	swi	r15, r1, 0
90007e84:	fa610020 	swi	r19, r1, 32
90007e88:	12610000 	addk	r19, r1, r0
    if(!stepper_busy())
90007e8c:	b9f42d44 	brlid	r15, 11588	// 9000abd0 <stepper_busy>
90007e90:	80000000 	or	r0, r0, r0
90007e94:	bc2300d0 	bnei	r3, 208		// 90007f64
    {
        motionData.door.startPosition    = get_stepper_position(stepperF);
90007e98:	30a00001 	addik	r5, r0, 1
90007e9c:	b9f4367c 	brlid	r15, 13948	// 9000b518 <get_stepper_position>
90007ea0:	80000000 	or	r0, r0, r0
90007ea4:	b0009002 	imm	-28670
90007ea8:	f8604d14 	swi	r3, r0, 19732
        motionData.door.homePinFound     = false;
90007eac:	b0009002 	imm	-28670
90007eb0:	f8004d18 	swi	r0, r0, 19736
        motionData.door.altPinFound      = false;
90007eb4:	b0009002 	imm	-28670
90007eb8:	f8004d1c 	swi	r0, r0, 19740
        motionData.door.homePinFoundPos  = 0;
90007ebc:	b0009002 	imm	-28670
90007ec0:	f8004d20 	swi	r0, r0, 19744
        motionData.door.altPinFoundPos   = 0;
90007ec4:	b0009002 	imm	-28670
90007ec8:	f8004d24 	swi	r0, r0, 19748

        stepper_set_parameter(stepperF, stepperSlowFrequency, motionData.door.slowFrequency);
90007ecc:	b0009002 	imm	-28670
90007ed0:	e8604d28 	lwi	r3, r0, 19752
90007ed4:	30a00001 	addik	r5, r0, 1
90007ed8:	30c00001 	addik	r6, r0, 1
90007edc:	10e30000 	addk	r7, r3, r0
90007ee0:	b9f42b00 	brlid	r15, 11008	// 9000a9e0 <stepper_set_parameter>
90007ee4:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperFastFrequency, motionData.door.fastFrequency);
90007ee8:	b0009002 	imm	-28670
90007eec:	e8604d2c 	lwi	r3, r0, 19756
90007ef0:	30a00001 	addik	r5, r0, 1
90007ef4:	10c00000 	addk	r6, r0, r0
90007ef8:	10e30000 	addk	r7, r3, r0
90007efc:	b9f42ae4 	brlid	r15, 10980	// 9000a9e0 <stepper_set_parameter>
90007f00:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperRampSteps, motionData.door.rampSteps);
90007f04:	b0009002 	imm	-28670
90007f08:	e8604d30 	lwi	r3, r0, 19760
90007f0c:	30a00001 	addik	r5, r0, 1
90007f10:	30c00002 	addik	r6, r0, 2
90007f14:	10e30000 	addk	r7, r3, r0
90007f18:	b9f42ac8 	brlid	r15, 10952	// 9000a9e0 <stepper_set_parameter>
90007f1c:	80000000 	or	r0, r0, r0
        stepper_set_home_sensor_make_hook(stepperF, doorOpenHomeSensorCallback);
90007f20:	30a00001 	addik	r5, r0, 1
90007f24:	b0009000 	imm	-28672
90007f28:	30c0809c 	addik	r6, r0, -32612
90007f2c:	b9f43284 	brlid	r15, 12932	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90007f30:	80000000 	or	r0, r0, r0
        stepper_set_alt_sensor_make_hook(stepperF, NULL);
90007f34:	30a00001 	addik	r5, r0, 1
90007f38:	10c00000 	addk	r6, r0, r0
90007f3c:	b9f4337c 	brlid	r15, 13180	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
90007f40:	80000000 	or	r0, r0, r0

        if(stepper_move_to_position(stepperF, door_open_position))
90007f44:	30a00001 	addik	r5, r0, 1
90007f48:	10c00000 	addk	r6, r0, r0
90007f4c:	b9f42f64 	brlid	r15, 12132	// 9000aeb0 <stepper_move_to_position>
90007f50:	80000000 	or	r0, r0, r0
90007f54:	bc030010 	beqi	r3, 16		// 90007f64
        {
            return true;
90007f58:	30600001 	addik	r3, r0, 1
90007f5c:	f873001c 	swi	r3, r19, 28
90007f60:	b800000c 	bri	12		// 90007f6c
        }
    }

    return false;
90007f64:	10600000 	addk	r3, r0, r0
90007f68:	f873001c 	swi	r3, r19, 28
90007f6c:	e873001c 	lwi	r3, r19, 28
}
90007f70:	e9e10000 	lwi	r15, r1, 0
90007f74:	10330000 	addk	r1, r19, r0
90007f78:	ea610020 	lwi	r19, r1, 32
90007f7c:	30210024 	addik	r1, r1, 36
90007f80:	b60f0008 	rtsd	r15, 8
90007f84:	80000000 	or	r0, r0, r0

90007f88 <startCloseDoor>:


static bool startCloseDoor()
{
90007f88:	3021ffdc 	addik	r1, r1, -36
90007f8c:	f9e10000 	swi	r15, r1, 0
90007f90:	fa610020 	swi	r19, r1, 32
90007f94:	12610000 	addk	r19, r1, r0
    if(!stepper_busy())
90007f98:	b9f42c38 	brlid	r15, 11320	// 9000abd0 <stepper_busy>
90007f9c:	80000000 	or	r0, r0, r0
90007fa0:	bc2300d8 	bnei	r3, 216		// 90008078
    {
        motionData.door.startPosition    = get_stepper_position(stepperF);
90007fa4:	30a00001 	addik	r5, r0, 1
90007fa8:	b9f43570 	brlid	r15, 13680	// 9000b518 <get_stepper_position>
90007fac:	80000000 	or	r0, r0, r0
90007fb0:	b0009002 	imm	-28670
90007fb4:	f8604d14 	swi	r3, r0, 19732
        motionData.door.homePinFound     = false;
90007fb8:	b0009002 	imm	-28670
90007fbc:	f8004d18 	swi	r0, r0, 19736
        motionData.door.altPinFound      = false;
90007fc0:	b0009002 	imm	-28670
90007fc4:	f8004d1c 	swi	r0, r0, 19740
        motionData.door.homePinFoundPos  = 0;
90007fc8:	b0009002 	imm	-28670
90007fcc:	f8004d20 	swi	r0, r0, 19744
        motionData.door.altPinFoundPos   = 0;
90007fd0:	b0009002 	imm	-28670
90007fd4:	f8004d24 	swi	r0, r0, 19748

        stepper_set_parameter(stepperF, stepperSlowFrequency, motionData.door.slowFrequency);
90007fd8:	b0009002 	imm	-28670
90007fdc:	e8604d28 	lwi	r3, r0, 19752
90007fe0:	30a00001 	addik	r5, r0, 1
90007fe4:	30c00001 	addik	r6, r0, 1
90007fe8:	10e30000 	addk	r7, r3, r0
90007fec:	b9f429f4 	brlid	r15, 10740	// 9000a9e0 <stepper_set_parameter>
90007ff0:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperFastFrequency, motionData.door.fastFrequency);
90007ff4:	b0009002 	imm	-28670
90007ff8:	e8604d2c 	lwi	r3, r0, 19756
90007ffc:	30a00001 	addik	r5, r0, 1
90008000:	10c00000 	addk	r6, r0, r0
90008004:	10e30000 	addk	r7, r3, r0
90008008:	b9f429d8 	brlid	r15, 10712	// 9000a9e0 <stepper_set_parameter>
9000800c:	80000000 	or	r0, r0, r0
        stepper_set_parameter(stepperF, stepperRampSteps, motionData.door.rampSteps);
90008010:	b0009002 	imm	-28670
90008014:	e8604d30 	lwi	r3, r0, 19760
90008018:	30a00001 	addik	r5, r0, 1
9000801c:	30c00002 	addik	r6, r0, 2
90008020:	10e30000 	addk	r7, r3, r0
90008024:	b9f429bc 	brlid	r15, 10684	// 9000a9e0 <stepper_set_parameter>
90008028:	80000000 	or	r0, r0, r0
        stepper_set_home_sensor_make_hook(stepperF, NULL);
9000802c:	30a00001 	addik	r5, r0, 1
90008030:	10c00000 	addk	r6, r0, r0
90008034:	b9f4317c 	brlid	r15, 12668	// 9000b1b0 <stepper_set_home_sensor_make_hook>
90008038:	80000000 	or	r0, r0, r0
        stepper_set_alt_sensor_make_hook(stepperF, doorCloseAltSensorMakeCallback);
9000803c:	30a00001 	addik	r5, r0, 1
90008040:	b0009000 	imm	-28672
90008044:	30c081b0 	addik	r6, r0, -32336
90008048:	b9f43270 	brlid	r15, 12912	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
9000804c:	80000000 	or	r0, r0, r0

        if(stepper_move_to_position(stepperF, motionData.door.closedPosition))
90008050:	b0009002 	imm	-28670
90008054:	e8604d10 	lwi	r3, r0, 19728
90008058:	30a00001 	addik	r5, r0, 1
9000805c:	10c30000 	addk	r6, r3, r0
90008060:	b9f42e50 	brlid	r15, 11856	// 9000aeb0 <stepper_move_to_position>
90008064:	80000000 	or	r0, r0, r0
90008068:	bc030010 	beqi	r3, 16		// 90008078
        {
            return true;
9000806c:	30600001 	addik	r3, r0, 1
90008070:	f873001c 	swi	r3, r19, 28
90008074:	b800000c 	bri	12		// 90008080
        }
    }

    return false;
90008078:	10600000 	addk	r3, r0, r0
9000807c:	f873001c 	swi	r3, r19, 28
90008080:	e873001c 	lwi	r3, r19, 28
}
90008084:	e9e10000 	lwi	r15, r1, 0
90008088:	10330000 	addk	r1, r19, r0
9000808c:	ea610020 	lwi	r19, r1, 32
90008090:	30210024 	addik	r1, r1, 36
90008094:	b60f0008 	rtsd	r15, 8
90008098:	80000000 	or	r0, r0, r0

9000809c <doorOpenHomeSensorCallback>:



static bool doorOpenHomeSensorCallback(int position)
{
9000809c:	3021ffdc 	addik	r1, r1, -36
900080a0:	f9e10000 	swi	r15, r1, 0
900080a4:	fa610020 	swi	r19, r1, 32
900080a8:	12610000 	addk	r19, r1, r0
900080ac:	f8b30028 	swi	r5, r19, 40
    stepper_set_home_sensor_make_hook(stepperF, NULL);
900080b0:	30a00001 	addik	r5, r0, 1
900080b4:	10c00000 	addk	r6, r0, r0
900080b8:	b9f430f8 	brlid	r15, 12536	// 9000b1b0 <stepper_set_home_sensor_make_hook>
900080bc:	80000000 	or	r0, r0, r0

    motionData.door.homePinFoundPos = position;
900080c0:	e8730028 	lwi	r3, r19, 40
900080c4:	b0009002 	imm	-28670
900080c8:	f8604d20 	swi	r3, r0, 19744

    if(position - stepper_get_home_pin_location(stepperF) > door_max_home_sensor_steps)
900080cc:	30a00001 	addik	r5, r0, 1
900080d0:	b9f42bc8 	brlid	r15, 11208	// 9000ac98 <stepper_get_home_pin_location>
900080d4:	80000000 	or	r0, r0, r0
900080d8:	10830000 	addk	r4, r3, r0
900080dc:	e8730028 	lwi	r3, r19, 40
900080e0:	14641800 	rsubk	r3, r4, r3
900080e4:	3240012c 	addik	r18, r0, 300
900080e8:	16439001 	cmp	r18, r3, r18
900080ec:	bcb20074 	bgei	r18, 116		// 90008160
    {
        motionData.state = state_error;
900080f0:	3060000b 	addik	r3, r0, 11
900080f4:	b0009002 	imm	-28670
900080f8:	f8604d74 	swi	r3, r0, 19828
        motionData.error = err_doorOpenFailure;
900080fc:	3060001f 	addik	r3, r0, 31
90008100:	b0009002 	imm	-28670
90008104:	f8604d80 	swi	r3, r0, 19840

        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
90008108:	30a00001 	addik	r5, r0, 1
9000810c:	b9f42b8c 	brlid	r15, 11148	// 9000ac98 <stepper_get_home_pin_location>
90008110:	80000000 	or	r0, r0, r0
90008114:	b0009002 	imm	-28670
90008118:	30a04d84 	addik	r5, r0, 19844
9000811c:	30c000c8 	addik	r6, r0, 200
90008120:	b0009002 	imm	-28670
90008124:	30e01744 	addik	r7, r0, 5956
90008128:	e9130028 	lwi	r8, r19, 40
9000812c:	11230000 	addk	r9, r3, r0
90008130:	3140012c 	addik	r10, r0, 300
90008134:	b0000000 	imm	0
90008138:	b9f4c0f0 	brlid	r15, -16144	// 90014228 <snprintf>
9000813c:	80000000 	or	r0, r0, r0
                 "Open pin found at pos %d, should be %d +/- %d",
                  position, stepper_get_home_pin_location(stepperF), door_max_home_sensor_steps);
        puts(motionData.errorDesc);
90008140:	b0009002 	imm	-28670
90008144:	30a04d84 	addik	r5, r0, 19844
90008148:	b0000000 	imm	0
9000814c:	b9f47dec 	brlid	r15, 32236	// 9000ff38 <puts>
90008150:	80000000 	or	r0, r0, r0
        
        return false;
90008154:	10600000 	addk	r3, r0, r0
90008158:	f873001c 	swi	r3, r19, 28
9000815c:	b8000038 	bri	56		// 90008194
    }

    printf("Door home pin at %d\n", position);
90008160:	b0009002 	imm	-28670
90008164:	30a01774 	addik	r5, r0, 6004
90008168:	e8d30028 	lwi	r6, r19, 40
9000816c:	b0000000 	imm	0
90008170:	b9f47cd4 	brlid	r15, 31956	// 9000fe44 <printf>
90008174:	80000000 	or	r0, r0, r0
    motionData.door.homePinFound = true;
90008178:	30600001 	addik	r3, r0, 1
9000817c:	b0009002 	imm	-28670
90008180:	f8604d18 	swi	r3, r0, 19736
    stepper_reset_home_pin_location();
90008184:	b9f42a78 	brlid	r15, 10872	// 9000abfc <stepper_reset_home_pin_location>
90008188:	80000000 	or	r0, r0, r0

    return true;
9000818c:	30600001 	addik	r3, r0, 1
90008190:	f873001c 	swi	r3, r19, 28
90008194:	e873001c 	lwi	r3, r19, 28
}
90008198:	e9e10000 	lwi	r15, r1, 0
9000819c:	10330000 	addk	r1, r19, r0
900081a0:	ea610020 	lwi	r19, r1, 32
900081a4:	30210024 	addik	r1, r1, 36
900081a8:	b60f0008 	rtsd	r15, 8
900081ac:	80000000 	or	r0, r0, r0

900081b0 <doorCloseAltSensorMakeCallback>:



static bool doorCloseAltSensorMakeCallback(int position)
{
900081b0:	3021ffdc 	addik	r1, r1, -36
900081b4:	f9e10000 	swi	r15, r1, 0
900081b8:	fa610020 	swi	r19, r1, 32
900081bc:	12610000 	addk	r19, r1, r0
900081c0:	f8b30028 	swi	r5, r19, 40
    stepper_set_alt_sensor_make_hook(stepperF, NULL);
900081c4:	30a00001 	addik	r5, r0, 1
900081c8:	10c00000 	addk	r6, r0, r0
900081cc:	b9f430ec 	brlid	r15, 12524	// 9000b2b8 <stepper_set_alt_sensor_make_hook>
900081d0:	80000000 	or	r0, r0, r0

    motionData.door.altPinFoundPos = position;
900081d4:	e8730028 	lwi	r3, r19, 40
900081d8:	b0009002 	imm	-28670
900081dc:	f8604d24 	swi	r3, r0, 19748

    if(motionData.door.closedPosition - position > door_max_alt_sensor_steps)
900081e0:	b0009002 	imm	-28670
900081e4:	e8804d10 	lwi	r4, r0, 19728
900081e8:	e8730028 	lwi	r3, r19, 40
900081ec:	14632000 	rsubk	r3, r3, r4
900081f0:	324002bc 	addik	r18, r0, 700
900081f4:	16439001 	cmp	r18, r3, r18
900081f8:	bcb20070 	bgei	r18, 112		// 90008268
    {
        motionData.state = state_error;
900081fc:	3060000b 	addik	r3, r0, 11
90008200:	b0009002 	imm	-28670
90008204:	f8604d74 	swi	r3, r0, 19828
        motionData.error = err_doorCloseFailure;
90008208:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
9000820c:	b0009002 	imm	-28670
90008210:	f8604d80 	swi	r3, r0, 19840

        snprintf(motionData.errorDesc, sizeof(motionData.errorDesc),
90008214:	b0009002 	imm	-28670
90008218:	e8604d10 	lwi	r3, r0, 19728
9000821c:	b0009002 	imm	-28670
90008220:	30a04d84 	addik	r5, r0, 19844
90008224:	30c000c8 	addik	r6, r0, 200
90008228:	b0009002 	imm	-28670
9000822c:	30e0178c 	addik	r7, r0, 6028
90008230:	e9130028 	lwi	r8, r19, 40
90008234:	11230000 	addk	r9, r3, r0
90008238:	314002bc 	addik	r10, r0, 700
9000823c:	b0000000 	imm	0
90008240:	b9f4bfe8 	brlid	r15, -16408	// 90014228 <snprintf>
90008244:	80000000 	or	r0, r0, r0
                "Close pin found at pos %d, should be %d +/- %d",
                position, motionData.door.closedPosition, door_max_alt_sensor_steps);
        puts(motionData.errorDesc);
90008248:	b0009002 	imm	-28670
9000824c:	30a04d84 	addik	r5, r0, 19844
90008250:	b0000000 	imm	0
90008254:	b9f47ce4 	brlid	r15, 31972	// 9000ff38 <puts>
90008258:	80000000 	or	r0, r0, r0
        
        return false;
9000825c:	10600000 	addk	r3, r0, r0
90008260:	f873001c 	swi	r3, r19, 28
90008264:	b8000030 	bri	48		// 90008294
    }

    printf("Door alt pin at %d\n", position);
90008268:	b0009002 	imm	-28670
9000826c:	30a017bc 	addik	r5, r0, 6076
90008270:	e8d30028 	lwi	r6, r19, 40
90008274:	b0000000 	imm	0
90008278:	b9f47bcc 	brlid	r15, 31692	// 9000fe44 <printf>
9000827c:	80000000 	or	r0, r0, r0
    motionData.door.altPinFound = true;
90008280:	30600001 	addik	r3, r0, 1
90008284:	b0009002 	imm	-28670
90008288:	f8604d1c 	swi	r3, r0, 19740

    return true;
9000828c:	30600001 	addik	r3, r0, 1
90008290:	f873001c 	swi	r3, r19, 28
90008294:	e873001c 	lwi	r3, r19, 28
}
90008298:	e9e10000 	lwi	r15, r1, 0
9000829c:	10330000 	addk	r1, r19, r0
900082a0:	ea610020 	lwi	r19, r1, 32
900082a4:	30210024 	addik	r1, r1, 36
900082a8:	b60f0008 	rtsd	r15, 8
900082ac:	80000000 	or	r0, r0, r0

900082b0 <RotateArm>:

void RotateArm(StepperMotor stepperMotor, RotationDirection direction, TurnSize turnSize, int rotations)
{
900082b0:	3021ffdc 	addik	r1, r1, -36
900082b4:	f9e10000 	swi	r15, r1, 0
900082b8:	fa610020 	swi	r19, r1, 32
900082bc:	12610000 	addk	r19, r1, r0
900082c0:	f8b30028 	swi	r5, r19, 40
900082c4:	f8d3002c 	swi	r6, r19, 44
900082c8:	f8f30030 	swi	r7, r19, 48
900082cc:	f9130034 	swi	r8, r19, 52
    armMotionData.motor           = stepperMotor;
900082d0:	e8730028 	lwi	r3, r19, 40
900082d4:	b0009002 	imm	-28670
900082d8:	f8604e4c 	swi	r3, r0, 20044
    armMotionData.direction       = direction;
900082dc:	e873002c 	lwi	r3, r19, 44
900082e0:	b0009002 	imm	-28670
900082e4:	f8604e54 	swi	r3, r0, 20052
    armMotionData.turnSize        = turnSize;
900082e8:	e8730030 	lwi	r3, r19, 48
900082ec:	b0009002 	imm	-28670
900082f0:	f8604e50 	swi	r3, r0, 20048
    armMotionData.currentRotation = 0;
900082f4:	b0009002 	imm	-28670
900082f8:	f8004e5c 	swi	r0, r0, 20060
    armMotionData.totalRotations  = rotations;
900082fc:	e8730034 	lwi	r3, r19, 52
90008300:	b0009002 	imm	-28670
90008304:	f8604e58 	swi	r3, r0, 20056

    startTimer(&armMotionData.timer, MSEC_TO_TICKS(armMotionTimeout_ms));
90008308:	b0009002 	imm	-28670
9000830c:	30a04e60 	addik	r5, r0, 20064
90008310:	30c00001 	addik	r6, r0, 1
90008314:	b0008d5c 	imm	-29348
90008318:	30e03e40 	addik	r7, r0, 15936
9000831c:	b9f43bd4 	brlid	r15, 15316	// 9000bef0 <startTimer>
90008320:	80000000 	or	r0, r0, r0
    startTimer(&armMotionData.actuateTimer, MSEC_TO_TICKS(actuateTimeout_ms));
90008324:	b0009002 	imm	-28670
90008328:	30a04e70 	addik	r5, r0, 20080
9000832c:	30c00000 	addik	r6, r0, 0
90008330:	b00003f9 	imm	1017
90008334:	30e03e10 	addik	r7, r0, 15888
90008338:	b9f43bb8 	brlid	r15, 15288	// 9000bef0 <startTimer>
9000833c:	80000000 	or	r0, r0, r0

    switch(armMotionData.motor)
90008340:	b0009002 	imm	-28670
90008344:	e8604e4c 	lwi	r3, r0, 20044
90008348:	f873001c 	swi	r3, r19, 28
9000834c:	e873001c 	lwi	r3, r19, 28
90008350:	aa430001 	xori	r18, r3, 1
90008354:	bc120034 	beqi	r18, 52		// 90008388
90008358:	e873001c 	lwi	r3, r19, 28
9000835c:	22400001 	addi	r18, r0, 1
90008360:	16521803 	cmpu	r18, r18, r3
90008364:	bc520014 	blti	r18, 20		// 90008378
90008368:	e873001c 	lwi	r3, r19, 28
9000836c:	aa430002 	xori	r18, r3, 2
90008370:	bc120028 	beqi	r18, 40		// 90008398
90008374:	b8000030 	bri	48		// 900083a4
    {
        case stepperU:
            ActuateArmIn('U');
90008378:	30a00055 	addik	r5, r0, 85
9000837c:	b9f40b28 	brlid	r15, 2856	// 90008ea4 <ActuateArmIn>
90008380:	80000000 	or	r0, r0, r0
            break;
90008384:	b8000020 	bri	32		// 900083a4

        case stepperF:
            ActuateArmIn('F');
90008388:	30a00046 	addik	r5, r0, 70
9000838c:	b9f40b18 	brlid	r15, 2840	// 90008ea4 <ActuateArmIn>
90008390:	80000000 	or	r0, r0, r0
            break;
90008394:	b8000010 	bri	16		// 900083a4

        case stepperR:
            ActuateArmIn('R');
90008398:	30a00052 	addik	r5, r0, 82
9000839c:	b9f40b08 	brlid	r15, 2824	// 90008ea4 <ActuateArmIn>
900083a0:	80000000 	or	r0, r0, r0
            break;

        default:
            break;
    }

    motionData.state = state_actuatingArmIn;
900083a4:	3060000d 	addik	r3, r0, 13
900083a8:	b0009002 	imm	-28670
900083ac:	f8604d74 	swi	r3, r0, 19828
}
900083b0:	e9e10000 	lwi	r15, r1, 0
900083b4:	10330000 	addk	r1, r19, r0
900083b8:	ea610020 	lwi	r19, r1, 32
900083bc:	30210024 	addik	r1, r1, 36
900083c0:	b60f0008 	rtsd	r15, 8
900083c4:	80000000 	or	r0, r0, r0

900083c8 <getDoorStartPosition>:


///////////////////////////////////////////////////
// Debug functions

int getDoorStartPosition(void)
{
900083c8:	3021fff8 	addik	r1, r1, -8
900083cc:	fa610004 	swi	r19, r1, 4
900083d0:	12610000 	addk	r19, r1, r0
    return motionData.door.startPosition;
900083d4:	b0009002 	imm	-28670
900083d8:	e8604d14 	lwi	r3, r0, 19732
}
900083dc:	10330000 	addk	r1, r19, r0
900083e0:	ea610004 	lwi	r19, r1, 4
900083e4:	30210008 	addik	r1, r1, 8
900083e8:	b60f0008 	rtsd	r15, 8
900083ec:	80000000 	or	r0, r0, r0

900083f0 <getDoorHomePinFound>:


bool getDoorHomePinFound(void)
{
900083f0:	3021fff8 	addik	r1, r1, -8
900083f4:	fa610004 	swi	r19, r1, 4
900083f8:	12610000 	addk	r19, r1, r0
    return motionData.door.homePinFound;
900083fc:	b0009002 	imm	-28670
90008400:	e8604d18 	lwi	r3, r0, 19736
}
90008404:	10330000 	addk	r1, r19, r0
90008408:	ea610004 	lwi	r19, r1, 4
9000840c:	30210008 	addik	r1, r1, 8
90008410:	b60f0008 	rtsd	r15, 8
90008414:	80000000 	or	r0, r0, r0

90008418 <getDoorAltPinFound>:


bool getDoorAltPinFound(void)
{
90008418:	3021fff8 	addik	r1, r1, -8
9000841c:	fa610004 	swi	r19, r1, 4
90008420:	12610000 	addk	r19, r1, r0
    return motionData.door.altPinFound;
90008424:	b0009002 	imm	-28670
90008428:	e8604d1c 	lwi	r3, r0, 19740
}
9000842c:	10330000 	addk	r1, r19, r0
90008430:	ea610004 	lwi	r19, r1, 4
90008434:	30210008 	addik	r1, r1, 8
90008438:	b60f0008 	rtsd	r15, 8
9000843c:	80000000 	or	r0, r0, r0

90008440 <getDoorHomePinFoundPos>:


int getDoorHomePinFoundPos(void)
{
90008440:	3021fff8 	addik	r1, r1, -8
90008444:	fa610004 	swi	r19, r1, 4
90008448:	12610000 	addk	r19, r1, r0
    return motionData.door.homePinFoundPos;
9000844c:	b0009002 	imm	-28670
90008450:	e8604d20 	lwi	r3, r0, 19744
}
90008454:	10330000 	addk	r1, r19, r0
90008458:	ea610004 	lwi	r19, r1, 4
9000845c:	30210008 	addik	r1, r1, 8
90008460:	b60f0008 	rtsd	r15, 8
90008464:	80000000 	or	r0, r0, r0

90008468 <getDoorAltPinFoundPos>:


int getDoorAltPinFoundPos(void)
{
90008468:	3021fff8 	addik	r1, r1, -8
9000846c:	fa610004 	swi	r19, r1, 4
90008470:	12610000 	addk	r19, r1, r0
    return motionData.door.altPinFoundPos;
90008474:	b0009002 	imm	-28670
90008478:	e8604d24 	lwi	r3, r0, 19748
}
9000847c:	10330000 	addk	r1, r19, r0
90008480:	ea610004 	lwi	r19, r1, 4
90008484:	30210008 	addik	r1, r1, 8
90008488:	b60f0008 	rtsd	r15, 8
9000848c:	80000000 	or	r0, r0, r0

90008490 <getLidStartPosition>:


int getLidStartPosition(void)
{
90008490:	3021fff8 	addik	r1, r1, -8
90008494:	fa610004 	swi	r19, r1, 4
90008498:	12610000 	addk	r19, r1, r0
    return motionData.lid.startPosition;
9000849c:	b0009002 	imm	-28670
900084a0:	e8604d40 	lwi	r3, r0, 19776
}
900084a4:	10330000 	addk	r1, r19, r0
900084a8:	ea610004 	lwi	r19, r1, 4
900084ac:	30210008 	addik	r1, r1, 8
900084b0:	b60f0008 	rtsd	r15, 8
900084b4:	80000000 	or	r0, r0, r0

900084b8 <getLidHomePinFound>:


bool getLidHomePinFound(void)
{
900084b8:	3021fff8 	addik	r1, r1, -8
900084bc:	fa610004 	swi	r19, r1, 4
900084c0:	12610000 	addk	r19, r1, r0
    return motionData.lid.homePinFound;
900084c4:	b0009002 	imm	-28670
900084c8:	e8604d44 	lwi	r3, r0, 19780
}
900084cc:	10330000 	addk	r1, r19, r0
900084d0:	ea610004 	lwi	r19, r1, 4
900084d4:	30210008 	addik	r1, r1, 8
900084d8:	b60f0008 	rtsd	r15, 8
900084dc:	80000000 	or	r0, r0, r0

900084e0 <getLidAltPinCount>:


int getLidAltPinCount(void)
{
900084e0:	3021fff8 	addik	r1, r1, -8
900084e4:	fa610004 	swi	r19, r1, 4
900084e8:	12610000 	addk	r19, r1, r0
    return motionData.lid.altPinCount;
900084ec:	b0009002 	imm	-28670
900084f0:	e8604d48 	lwi	r3, r0, 19784
}
900084f4:	10330000 	addk	r1, r19, r0
900084f8:	ea610004 	lwi	r19, r1, 4
900084fc:	30210008 	addik	r1, r1, 8
90008500:	b60f0008 	rtsd	r15, 8
90008504:	80000000 	or	r0, r0, r0

90008508 <getLidAltSpaceCount>:


int getLidAltSpaceCount(void)
{
90008508:	3021fff8 	addik	r1, r1, -8
9000850c:	fa610004 	swi	r19, r1, 4
90008510:	12610000 	addk	r19, r1, r0
    return motionData.lid.altSpaceCount;
90008514:	b0009002 	imm	-28670
90008518:	e8604d4c 	lwi	r3, r0, 19788
}
9000851c:	10330000 	addk	r1, r19, r0
90008520:	ea610004 	lwi	r19, r1, 4
90008524:	30210008 	addik	r1, r1, 8
90008528:	b60f0008 	rtsd	r15, 8
9000852c:	80000000 	or	r0, r0, r0

90008530 <getLidHomePinMakePos>:


int getLidHomePinMakePos(void)
{
90008530:	3021fff8 	addik	r1, r1, -8
90008534:	fa610004 	swi	r19, r1, 4
90008538:	12610000 	addk	r19, r1, r0
    return motionData.lid.homePinMakePos;
9000853c:	b0009002 	imm	-28670
90008540:	e8604d50 	lwi	r3, r0, 19792
}
90008544:	10330000 	addk	r1, r19, r0
90008548:	ea610004 	lwi	r19, r1, 4
9000854c:	30210008 	addik	r1, r1, 8
90008550:	b60f0008 	rtsd	r15, 8
90008554:	80000000 	or	r0, r0, r0

90008558 <getLidAltPinMake1Pos>:


int getLidAltPinMake1Pos(void)
{
90008558:	3021fff8 	addik	r1, r1, -8
9000855c:	fa610004 	swi	r19, r1, 4
90008560:	12610000 	addk	r19, r1, r0
    return motionData.lid.altPinMake1Pos;
90008564:	b0009002 	imm	-28670
90008568:	e8604d54 	lwi	r3, r0, 19796
}
9000856c:	10330000 	addk	r1, r19, r0
90008570:	ea610004 	lwi	r19, r1, 4
90008574:	30210008 	addik	r1, r1, 8
90008578:	b60f0008 	rtsd	r15, 8
9000857c:	80000000 	or	r0, r0, r0

90008580 <getLidAltPinBreak1Pos>:


int getLidAltPinBreak1Pos(void)
{
90008580:	3021fff8 	addik	r1, r1, -8
90008584:	fa610004 	swi	r19, r1, 4
90008588:	12610000 	addk	r19, r1, r0
    return motionData.lid.altPinBreak1Pos;
9000858c:	b0009002 	imm	-28670
90008590:	e8604d58 	lwi	r3, r0, 19800
}
90008594:	10330000 	addk	r1, r19, r0
90008598:	ea610004 	lwi	r19, r1, 4
9000859c:	30210008 	addik	r1, r1, 8
900085a0:	b60f0008 	rtsd	r15, 8
900085a4:	80000000 	or	r0, r0, r0

900085a8 <getLidAltPinMake2Pos>:


int getLidAltPinMake2Pos(void)
{
900085a8:	3021fff8 	addik	r1, r1, -8
900085ac:	fa610004 	swi	r19, r1, 4
900085b0:	12610000 	addk	r19, r1, r0
    return motionData.lid.altPinMake2Pos;
900085b4:	b0009002 	imm	-28670
900085b8:	e8604d5c 	lwi	r3, r0, 19804
}
900085bc:	10330000 	addk	r1, r19, r0
900085c0:	ea610004 	lwi	r19, r1, 4
900085c4:	30210008 	addik	r1, r1, 8
900085c8:	b60f0008 	rtsd	r15, 8
900085cc:	80000000 	or	r0, r0, r0

900085d0 <getLidAltPinBreak2Pos>:


int getLidAltPinBreak2Pos(void)
{
900085d0:	3021fff8 	addik	r1, r1, -8
900085d4:	fa610004 	swi	r19, r1, 4
900085d8:	12610000 	addk	r19, r1, r0
    return motionData.lid.altPinBreak2Pos;
900085dc:	b0009002 	imm	-28670
900085e0:	e8604d60 	lwi	r3, r0, 19808
}
900085e4:	10330000 	addk	r1, r19, r0
900085e8:	ea610004 	lwi	r19, r1, 4
900085ec:	30210008 	addik	r1, r1, 8
900085f0:	b60f0008 	rtsd	r15, 8
900085f4:	80000000 	or	r0, r0, r0

900085f8 <getStepperParameter>:


int getStepperParameter(StepperMotor motor, StepperParameter stepperParam)
{
900085f8:	3021ffcc 	addik	r1, r1, -52
900085fc:	f9e10000 	swi	r15, r1, 0
90008600:	fa610030 	swi	r19, r1, 48
90008604:	12610000 	addk	r19, r1, r0
90008608:	f8b30038 	swi	r5, r19, 56
9000860c:	f8d3003c 	swi	r6, r19, 60
    switch(motor)
90008610:	e8730038 	lwi	r3, r19, 56
90008614:	f8730020 	swi	r3, r19, 32
90008618:	e8730020 	lwi	r3, r19, 32
9000861c:	aa430001 	xori	r18, r3, 1
90008620:	bc120088 	beqi	r18, 136		// 900086a8
90008624:	e8730020 	lwi	r3, r19, 32
90008628:	22400001 	addi	r18, r0, 1
9000862c:	16521803 	cmpu	r18, r18, r3
90008630:	bc520014 	blti	r18, 20		// 90008644
90008634:	e8730020 	lwi	r3, r19, 32
90008638:	aa430002 	xori	r18, r3, 2
9000863c:	bc1200d0 	beqi	r18, 208		// 9000870c
90008640:	b8000130 	bri	304		// 90008770
    {
        case stepperU:
            switch(stepperParam)
90008644:	e873003c 	lwi	r3, r19, 60
90008648:	f8730024 	swi	r3, r19, 36
9000864c:	e8730024 	lwi	r3, r19, 36
90008650:	aa430001 	xori	r18, r3, 1
90008654:	bc120034 	beqi	r18, 52		// 90008688
90008658:	e8730024 	lwi	r3, r19, 36
9000865c:	22400001 	addi	r18, r0, 1
90008660:	16521803 	cmpu	r18, r18, r3
90008664:	bc520014 	blti	r18, 20		// 90008678
90008668:	e8730024 	lwi	r3, r19, 36
9000866c:	aa430002 	xori	r18, r3, 2
90008670:	bc120028 	beqi	r18, 40		// 90008698
90008674:	b8000034 	bri	52		// 900086a8
            {
                case stepperFastFrequency: return motionData.lid.fastFrequency;
90008678:	b0009002 	imm	-28670
9000867c:	e8604d6c 	lwi	r3, r0, 19820
90008680:	f873001c 	swi	r3, r19, 28
90008684:	b8000110 	bri	272		// 90008794
                case stepperSlowFrequency: return motionData.lid.slowFrequency;
90008688:	b0009002 	imm	-28670
9000868c:	e8604d68 	lwi	r3, r0, 19816
90008690:	f873001c 	swi	r3, r19, 28
90008694:	b8000100 	bri	256		// 90008794
                case stepperRampSteps:     return motionData.lid.rampSteps;
90008698:	b0009002 	imm	-28670
9000869c:	e8604d70 	lwi	r3, r0, 19824
900086a0:	f873001c 	swi	r3, r19, 28
900086a4:	b80000f0 	bri	240		// 90008794
                default: break;
            }
        case stepperF:
            switch(stepperParam)
900086a8:	e873003c 	lwi	r3, r19, 60
900086ac:	f8730028 	swi	r3, r19, 40
900086b0:	e8730028 	lwi	r3, r19, 40
900086b4:	aa430001 	xori	r18, r3, 1
900086b8:	bc120034 	beqi	r18, 52		// 900086ec
900086bc:	e8730028 	lwi	r3, r19, 40
900086c0:	22400001 	addi	r18, r0, 1
900086c4:	16521803 	cmpu	r18, r18, r3
900086c8:	bc520014 	blti	r18, 20		// 900086dc
900086cc:	e8730028 	lwi	r3, r19, 40
900086d0:	aa430002 	xori	r18, r3, 2
900086d4:	bc120028 	beqi	r18, 40		// 900086fc
900086d8:	b8000034 	bri	52		// 9000870c
            {
                case stepperFastFrequency: return motionData.door.fastFrequency;
900086dc:	b0009002 	imm	-28670
900086e0:	e8604d2c 	lwi	r3, r0, 19756
900086e4:	f873001c 	swi	r3, r19, 28
900086e8:	b80000ac 	bri	172		// 90008794
                case stepperSlowFrequency: return motionData.door.slowFrequency;
900086ec:	b0009002 	imm	-28670
900086f0:	e8604d28 	lwi	r3, r0, 19752
900086f4:	f873001c 	swi	r3, r19, 28
900086f8:	b800009c 	bri	156		// 90008794
                case stepperRampSteps:     return motionData.door.rampSteps;
900086fc:	b0009002 	imm	-28670
90008700:	e8604d30 	lwi	r3, r0, 19760
90008704:	f873001c 	swi	r3, r19, 28
90008708:	b800008c 	bri	140		// 90008794
                default: break;
            }
        case stepperR:
            switch(stepperParam)
9000870c:	e873003c 	lwi	r3, r19, 60
90008710:	f873002c 	swi	r3, r19, 44
90008714:	e873002c 	lwi	r3, r19, 44
90008718:	aa430001 	xori	r18, r3, 1
9000871c:	bc120034 	beqi	r18, 52		// 90008750
90008720:	e873002c 	lwi	r3, r19, 44
90008724:	22400001 	addi	r18, r0, 1
90008728:	16521803 	cmpu	r18, r18, r3
9000872c:	bc520014 	blti	r18, 20		// 90008740
90008730:	e873002c 	lwi	r3, r19, 44
90008734:	aa430002 	xori	r18, r3, 2
90008738:	bc120028 	beqi	r18, 40		// 90008760
9000873c:	b8000034 	bri	52		// 90008770
            {
                case stepperFastFrequency: return motionData.filter.fastFrequency;
90008740:	b0009002 	imm	-28670
90008744:	e8604d00 	lwi	r3, r0, 19712
90008748:	f873001c 	swi	r3, r19, 28
9000874c:	b8000048 	bri	72		// 90008794
                case stepperSlowFrequency: return motionData.filter.slowFrequency;
90008750:	b0009002 	imm	-28670
90008754:	e8604cfc 	lwi	r3, r0, 19708
90008758:	f873001c 	swi	r3, r19, 28
9000875c:	b8000038 	bri	56		// 90008794
                case stepperRampSteps:     return motionData.filter.rampSteps;
90008760:	b0009002 	imm	-28670
90008764:	e8604d04 	lwi	r3, r0, 19716
90008768:	f873001c 	swi	r3, r19, 28
9000876c:	b8000028 	bri	40		// 90008794
                default: break;
            }
        default: break;
    }

    ASSERT(false);
90008770:	94110002 	msrclr	r0, 2
90008774:	b0009002 	imm	-28670
90008778:	30a00de0 	addik	r5, r0, 3552
9000877c:	b0009002 	imm	-28670
90008780:	30c00c2c 	addik	r6, r0, 3116
90008784:	30e009a9 	addik	r7, r0, 2473
90008788:	b9f43c9c 	brlid	r15, 15516	// 9000c424 <printAssert>
9000878c:	80000000 	or	r0, r0, r0
90008790:	b8000000 	bri	0		// 90008790
90008794:	e873001c 	lwi	r3, r19, 28
    return 0;
}
90008798:	e9e10000 	lwi	r15, r1, 0
9000879c:	10330000 	addk	r1, r19, r0
900087a0:	ea610030 	lwi	r19, r1, 48
900087a4:	30210034 	addik	r1, r1, 52
900087a8:	b60f0008 	rtsd	r15, 8
900087ac:	80000000 	or	r0, r0, r0

900087b0 <setStepperParameter>:


void setStepperParameter(StepperMotor motor, StepperParameter stepperParam, int value)
{
900087b0:	3021ffd0 	addik	r1, r1, -48
900087b4:	f9e10000 	swi	r15, r1, 0
900087b8:	fa61002c 	swi	r19, r1, 44
900087bc:	12610000 	addk	r19, r1, r0
900087c0:	f8b30034 	swi	r5, r19, 52
900087c4:	f8d30038 	swi	r6, r19, 56
900087c8:	f8f3003c 	swi	r7, r19, 60
    stepper_set_parameter(motor, stepperParam, value);
900087cc:	e8b30034 	lwi	r5, r19, 52
900087d0:	e8d30038 	lwi	r6, r19, 56
900087d4:	e8f3003c 	lwi	r7, r19, 60
900087d8:	b9f42208 	brlid	r15, 8712	// 9000a9e0 <stepper_set_parameter>
900087dc:	80000000 	or	r0, r0, r0
    switch(motor)
900087e0:	e8730034 	lwi	r3, r19, 52
900087e4:	f873001c 	swi	r3, r19, 28
900087e8:	e873001c 	lwi	r3, r19, 28
900087ec:	aa430001 	xori	r18, r3, 1
900087f0:	bc120088 	beqi	r18, 136		// 90008878
900087f4:	e873001c 	lwi	r3, r19, 28
900087f8:	22400001 	addi	r18, r0, 1
900087fc:	16521803 	cmpu	r18, r18, r3
90008800:	bc520014 	blti	r18, 20		// 90008814
90008804:	e873001c 	lwi	r3, r19, 28
90008808:	aa430002 	xori	r18, r3, 2
9000880c:	bc1200d0 	beqi	r18, 208		// 900088dc
90008810:	b8000130 	bri	304		// 90008940
    {
        case stepperU:
            switch(stepperParam)
90008814:	e8730038 	lwi	r3, r19, 56
90008818:	f8730020 	swi	r3, r19, 32
9000881c:	e8730020 	lwi	r3, r19, 32
90008820:	aa430001 	xori	r18, r3, 1
90008824:	bc120034 	beqi	r18, 52		// 90008858
90008828:	e8730020 	lwi	r3, r19, 32
9000882c:	22400001 	addi	r18, r0, 1
90008830:	16521803 	cmpu	r18, r18, r3
90008834:	bc520014 	blti	r18, 20		// 90008848
90008838:	e8730020 	lwi	r3, r19, 32
9000883c:	aa430002 	xori	r18, r3, 2
90008840:	bc120028 	beqi	r18, 40		// 90008868
90008844:	b8000034 	bri	52		// 90008878
            {
                case stepperFastFrequency: motionData.lid.fastFrequency = value; return;
90008848:	e873003c 	lwi	r3, r19, 60
9000884c:	b0009002 	imm	-28670
90008850:	f8604d6c 	swi	r3, r0, 19820
90008854:	b8000110 	bri	272		// 90008964
                case stepperSlowFrequency: motionData.lid.slowFrequency = value; return;
90008858:	e873003c 	lwi	r3, r19, 60
9000885c:	b0009002 	imm	-28670
90008860:	f8604d68 	swi	r3, r0, 19816
90008864:	b8000100 	bri	256		// 90008964
                case stepperRampSteps:     motionData.lid.rampSteps     = value; return;
90008868:	e873003c 	lwi	r3, r19, 60
9000886c:	b0009002 	imm	-28670
90008870:	f8604d70 	swi	r3, r0, 19824
90008874:	b80000f0 	bri	240		// 90008964
                default: break;
            }
        case stepperF:
            switch(stepperParam)
90008878:	e8730038 	lwi	r3, r19, 56
9000887c:	f8730024 	swi	r3, r19, 36
90008880:	e8730024 	lwi	r3, r19, 36
90008884:	aa430001 	xori	r18, r3, 1
90008888:	bc120034 	beqi	r18, 52		// 900088bc
9000888c:	e8730024 	lwi	r3, r19, 36
90008890:	22400001 	addi	r18, r0, 1
90008894:	16521803 	cmpu	r18, r18, r3
90008898:	bc520014 	blti	r18, 20		// 900088ac
9000889c:	e8730024 	lwi	r3, r19, 36
900088a0:	aa430002 	xori	r18, r3, 2
900088a4:	bc120028 	beqi	r18, 40		// 900088cc
900088a8:	b8000034 	bri	52		// 900088dc
            {
                case stepperFastFrequency: motionData.door.fastFrequency = value; return;
900088ac:	e873003c 	lwi	r3, r19, 60
900088b0:	b0009002 	imm	-28670
900088b4:	f8604d2c 	swi	r3, r0, 19756
900088b8:	b80000ac 	bri	172		// 90008964
                case stepperSlowFrequency: motionData.door.slowFrequency = value; return;
900088bc:	e873003c 	lwi	r3, r19, 60
900088c0:	b0009002 	imm	-28670
900088c4:	f8604d28 	swi	r3, r0, 19752
900088c8:	b800009c 	bri	156		// 90008964
                case stepperRampSteps:     motionData.door.rampSteps     = value; return;
900088cc:	e873003c 	lwi	r3, r19, 60
900088d0:	b0009002 	imm	-28670
900088d4:	f8604d30 	swi	r3, r0, 19760
900088d8:	b800008c 	bri	140		// 90008964
                default: break;
            }
        case stepperR:
            switch(stepperParam)
900088dc:	e8730038 	lwi	r3, r19, 56
900088e0:	f8730028 	swi	r3, r19, 40
900088e4:	e8730028 	lwi	r3, r19, 40
900088e8:	aa430001 	xori	r18, r3, 1
900088ec:	bc120034 	beqi	r18, 52		// 90008920
900088f0:	e8730028 	lwi	r3, r19, 40
900088f4:	22400001 	addi	r18, r0, 1
900088f8:	16521803 	cmpu	r18, r18, r3
900088fc:	bc520014 	blti	r18, 20		// 90008910
90008900:	e8730028 	lwi	r3, r19, 40
90008904:	aa430002 	xori	r18, r3, 2
90008908:	bc120028 	beqi	r18, 40		// 90008930
9000890c:	b8000034 	bri	52		// 90008940
            {
                case stepperFastFrequency: motionData.filter.fastFrequency = value; return;
90008910:	e873003c 	lwi	r3, r19, 60
90008914:	b0009002 	imm	-28670
90008918:	f8604d00 	swi	r3, r0, 19712
9000891c:	b8000048 	bri	72		// 90008964
                case stepperSlowFrequency: motionData.filter.slowFrequency = value; return;
90008920:	e873003c 	lwi	r3, r19, 60
90008924:	b0009002 	imm	-28670
90008928:	f8604cfc 	swi	r3, r0, 19708
9000892c:	b8000038 	bri	56		// 90008964
                case stepperRampSteps:     motionData.filter.rampSteps     = value; return;
90008930:	e873003c 	lwi	r3, r19, 60
90008934:	b0009002 	imm	-28670
90008938:	f8604d04 	swi	r3, r0, 19716
9000893c:	b8000028 	bri	40		// 90008964
                default: break;
            }
        default: break;
    }

    ASSERT(false);
90008940:	94110002 	msrclr	r0, 2
90008944:	b0009002 	imm	-28670
90008948:	30a00de0 	addik	r5, r0, 3552
9000894c:	b0009002 	imm	-28670
90008950:	30c00c2c 	addik	r6, r0, 3116
90008954:	30e009ce 	addik	r7, r0, 2510
90008958:	b9f43acc 	brlid	r15, 15052	// 9000c424 <printAssert>
9000895c:	80000000 	or	r0, r0, r0
90008960:	b8000000 	bri	0		// 90008960
}
90008964:	e9e10000 	lwi	r15, r1, 0
90008968:	10330000 	addk	r1, r19, r0
9000896c:	ea61002c 	lwi	r19, r1, 44
90008970:	30210030 	addik	r1, r1, 48
90008974:	b60f0008 	rtsd	r15, 8
90008978:	80000000 	or	r0, r0, r0

9000897c <osInit>:
///////////////////////////////////////////////////
// Interface functions

void osInit()
{
9000897c:	3021ffdc 	addik	r1, r1, -36
90008980:	f9e10000 	swi	r15, r1, 0
90008984:	fa610020 	swi	r19, r1, 32
90008988:	12610000 	addk	r19, r1, r0
    osData.freeContextBufferQueue.first = NULL;
9000898c:	b0009002 	imm	-28670
90008990:	f8005060 	swi	r0, r0, 20576
    osData.freeContextBufferQueue.last  = NULL;
90008994:	b0009002 	imm	-28670
90008998:	f8005064 	swi	r0, r0, 20580
    osData.freeContextBufferQueue.count = 0;
9000899c:	b0009002 	imm	-28670
900089a0:	f8005068 	swi	r0, r0, 20584

    osData.pendingHighTaskQueue.first   = NULL;
900089a4:	b0009002 	imm	-28670
900089a8:	f800506c 	swi	r0, r0, 20588
    osData.pendingHighTaskQueue.last    = NULL;
900089ac:	b0009002 	imm	-28670
900089b0:	f8005070 	swi	r0, r0, 20592
    osData.pendingHighTaskQueue.count   = 0;
900089b4:	b0009002 	imm	-28670
900089b8:	f8005074 	swi	r0, r0, 20596
    
    osData.pendingLowTaskQueue.first    = NULL;
900089bc:	b0009002 	imm	-28670
900089c0:	f8005078 	swi	r0, r0, 20600
    osData.pendingLowTaskQueue.last     = NULL;
900089c4:	b0009002 	imm	-28670
900089c8:	f800507c 	swi	r0, r0, 20604
    osData.pendingLowTaskQueue.count    = 0;
900089cc:	b0009002 	imm	-28670
900089d0:	f8005080 	swi	r0, r0, 20608

    osData.runTaskProcessor             = true;
900089d4:	30600001 	addik	r3, r0, 1
900089d8:	b0009002 	imm	-28670
900089dc:	f8605084 	swi	r3, r0, 20612
    
    int i;
    
    for(i = 0; i < MAX_TASKS; i++)
900089e0:	f813001c 	swi	r0, r19, 28
900089e4:	b8000040 	bri	64		// 90008a24
    {
        enqueueTaskContext(&osData.freeContextBufferQueue, &staticTaskContexts[i]);
900089e8:	e893001c 	lwi	r4, r19, 28
900089ec:	3060000c 	addik	r3, r0, 12
900089f0:	40641800 	mul	r3, r4, r3
900089f4:	10830000 	addk	r4, r3, r0
900089f8:	b0009002 	imm	-28670
900089fc:	30604e80 	addik	r3, r0, 20096
90008a00:	10641800 	addk	r3, r4, r3
90008a04:	b0009002 	imm	-28670
90008a08:	30a05060 	addik	r5, r0, 20576
90008a0c:	10c30000 	addk	r6, r3, r0
90008a10:	b9f40320 	brlid	r15, 800	// 90008d30 <enqueueTaskContext>
90008a14:	80000000 	or	r0, r0, r0
90008a18:	e873001c 	lwi	r3, r19, 28
90008a1c:	30630001 	addik	r3, r3, 1
90008a20:	f873001c 	swi	r3, r19, 28
90008a24:	e873001c 	lwi	r3, r19, 28
90008a28:	32400027 	addik	r18, r0, 39
90008a2c:	16439001 	cmp	r18, r3, r18
90008a30:	bcb2ffb8 	bgei	r18, -72		// 900089e8
    }
}
90008a34:	e9e10000 	lwi	r15, r1, 0
90008a38:	10330000 	addk	r1, r19, r0
90008a3c:	ea610020 	lwi	r19, r1, 32
90008a40:	30210024 	addik	r1, r1, 36
90008a44:	b60f0008 	rtsd	r15, 8
90008a48:	80000000 	or	r0, r0, r0

90008a4c <osStart>:



void osStart()
{
90008a4c:	3021ffe0 	addik	r1, r1, -32
90008a50:	f9e10000 	swi	r15, r1, 0
90008a54:	fa61001c 	swi	r19, r1, 28
90008a58:	12610000 	addk	r19, r1, r0
    osTaskProcessor();
90008a5c:	b9f40120 	brlid	r15, 288	// 90008b7c <osTaskProcessor>
90008a60:	80000000 	or	r0, r0, r0
}
90008a64:	e9e10000 	lwi	r15, r1, 0
90008a68:	10330000 	addk	r1, r19, r0
90008a6c:	ea61001c 	lwi	r19, r1, 28
90008a70:	30210020 	addik	r1, r1, 32
90008a74:	b60f0008 	rtsd	r15, 8
90008a78:	80000000 	or	r0, r0, r0

90008a7c <scheduleTask>:



bool scheduleTask(Task task, void* reference, bool high)
{
90008a7c:	3021ffd4 	addik	r1, r1, -44
90008a80:	f9e10000 	swi	r15, r1, 0
90008a84:	fa610028 	swi	r19, r1, 40
90008a88:	12610000 	addk	r19, r1, r0
90008a8c:	f8b30030 	swi	r5, r19, 48
90008a90:	f8d30034 	swi	r6, r19, 52
90008a94:	f8f30038 	swi	r7, r19, 56
    ASSERT(task);
90008a98:	e8730030 	lwi	r3, r19, 48
90008a9c:	bc230028 	bnei	r3, 40		// 90008ac4
90008aa0:	94110002 	msrclr	r0, 2
90008aa4:	b0009002 	imm	-28670
90008aa8:	30a017d0 	addik	r5, r0, 6096
90008aac:	b0009002 	imm	-28670
90008ab0:	30c017d8 	addik	r6, r0, 6104
90008ab4:	30e00070 	addik	r7, r0, 112
90008ab8:	b9f4396c 	brlid	r15, 14700	// 9000c424 <printAssert>
90008abc:	80000000 	or	r0, r0, r0
90008ac0:	b8000000 	bri	0		// 90008ac0

    printf("\nGot Schedule Task\n");
90008ac4:	b0009002 	imm	-28670
90008ac8:	30a017e4 	addik	r5, r0, 6116
90008acc:	b9f4746c 	brlid	r15, 29804	// 9000ff38 <puts>
90008ad0:	80000000 	or	r0, r0, r0

    TaskContext* taskContext = dequeueTaskContext(&osData.freeContextBufferQueue);
90008ad4:	b0009002 	imm	-28670
90008ad8:	30a05060 	addik	r5, r0, 20576
90008adc:	b9f40188 	brlid	r15, 392	// 90008c64 <dequeueTaskContext>
90008ae0:	80000000 	or	r0, r0, r0
90008ae4:	f873001c 	swi	r3, r19, 28
    
    if(taskContext)
90008ae8:	e873001c 	lwi	r3, r19, 28
90008aec:	bc03005c 	beqi	r3, 92		// 90008b48
    {
        taskContext->task      = task;
90008af0:	e893001c 	lwi	r4, r19, 28
90008af4:	e8730030 	lwi	r3, r19, 48
90008af8:	f8640000 	swi	r3, r4, 0
        taskContext->reference = reference;
90008afc:	e893001c 	lwi	r4, r19, 28
90008b00:	e8730034 	lwi	r3, r19, 52
90008b04:	f8640004 	swi	r3, r4, 4
        enqueueTaskContext(high ? &osData.pendingHighTaskQueue :
90008b08:	e8730038 	lwi	r3, r19, 56
90008b0c:	bc030014 	beqi	r3, 20		// 90008b20
90008b10:	b0009002 	imm	-28670
90008b14:	3060506c 	addik	r3, r0, 20588
90008b18:	f8730024 	swi	r3, r19, 36
90008b1c:	b8000010 	bri	16		// 90008b2c
90008b20:	b0009002 	imm	-28670
90008b24:	30605078 	addik	r3, r0, 20600
90008b28:	f8730024 	swi	r3, r19, 36
90008b2c:	e8b30024 	lwi	r5, r19, 36
90008b30:	e8d3001c 	lwi	r6, r19, 28
90008b34:	b9f401fc 	brlid	r15, 508	// 90008d30 <enqueueTaskContext>
90008b38:	80000000 	or	r0, r0, r0
                                  &osData.pendingLowTaskQueue, taskContext);
        return true;
90008b3c:	30600001 	addik	r3, r0, 1
90008b40:	f8730020 	swi	r3, r19, 32
90008b44:	b800001c 	bri	28		// 90008b60
    }
    else
    {
        puts("Task Sched error");
90008b48:	b0009002 	imm	-28670
90008b4c:	30a017f8 	addik	r5, r0, 6136
90008b50:	b9f473e8 	brlid	r15, 29672	// 9000ff38 <puts>
90008b54:	80000000 	or	r0, r0, r0
        //TODO: Handle/report error
        return false;
90008b58:	10600000 	addk	r3, r0, r0
90008b5c:	f8730020 	swi	r3, r19, 32
90008b60:	e8730020 	lwi	r3, r19, 32
    }
}
90008b64:	e9e10000 	lwi	r15, r1, 0
90008b68:	10330000 	addk	r1, r19, r0
90008b6c:	ea610028 	lwi	r19, r1, 40
90008b70:	3021002c 	addik	r1, r1, 44
90008b74:	b60f0008 	rtsd	r15, 8
90008b78:	80000000 	or	r0, r0, r0

90008b7c <osTaskProcessor>:



///////////////////////////////////////////////////
// Local functions

static void osTaskProcessor()
{
90008b7c:	3021ffd4 	addik	r1, r1, -44
90008b80:	f9e10000 	swi	r15, r1, 0
90008b84:	fa610028 	swi	r19, r1, 40
90008b88:	12610000 	addk	r19, r1, r0
    // Loop processing scheduled tasks
    // Shouldn't return (outside of unit testing)

    while(osData.runTaskProcessor)
90008b8c:	b80000b4 	bri	180		// 90008c40
    {
        bool high = true;
90008b90:	30600001 	addik	r3, r0, 1
90008b94:	f8730020 	swi	r3, r19, 32
        TaskContext* taskContext = dequeueTaskContext(&osData.pendingHighTaskQueue);
90008b98:	b0009002 	imm	-28670
90008b9c:	30a0506c 	addik	r5, r0, 20588
90008ba0:	b9f400c4 	brlid	r15, 196	// 90008c64 <dequeueTaskContext>
90008ba4:	80000000 	or	r0, r0, r0
90008ba8:	f873001c 	swi	r3, r19, 28
        
        if(!taskContext)
90008bac:	e873001c 	lwi	r3, r19, 28
90008bb0:	bc23001c 	bnei	r3, 28		// 90008bcc
        {
            high = false;
90008bb4:	f8130020 	swi	r0, r19, 32
            taskContext = dequeueTaskContext(&osData.pendingLowTaskQueue);
90008bb8:	b0009002 	imm	-28670
90008bbc:	30a05078 	addik	r5, r0, 20600
90008bc0:	b9f400a4 	brlid	r15, 164	// 90008c64 <dequeueTaskContext>
90008bc4:	80000000 	or	r0, r0, r0
90008bc8:	f873001c 	swi	r3, r19, 28
        }

        if(taskContext)
90008bcc:	e873001c 	lwi	r3, r19, 28
90008bd0:	bc030070 	beqi	r3, 112		// 90008c40
        {
            if(taskContext->task(taskContext->reference))
90008bd4:	e873001c 	lwi	r3, r19, 28
90008bd8:	e8830000 	lwi	r4, r3, 0
90008bdc:	e873001c 	lwi	r3, r19, 28
90008be0:	e8630004 	lwi	r3, r3, 4
90008be4:	10a30000 	addk	r5, r3, r0
90008be8:	99fc2000 	brald	r15, r4
90008bec:	80000000 	or	r0, r0, r0
90008bf0:	bc03003c 	beqi	r3, 60		// 90008c2c
            {
                enqueueTaskContext(high ? &osData.pendingHighTaskQueue :
90008bf4:	e8730020 	lwi	r3, r19, 32
90008bf8:	bc030014 	beqi	r3, 20		// 90008c0c
90008bfc:	b0009002 	imm	-28670
90008c00:	3060506c 	addik	r3, r0, 20588
90008c04:	f8730024 	swi	r3, r19, 36
90008c08:	b8000010 	bri	16		// 90008c18
90008c0c:	b0009002 	imm	-28670
90008c10:	30605078 	addik	r3, r0, 20600
90008c14:	f8730024 	swi	r3, r19, 36
90008c18:	e8b30024 	lwi	r5, r19, 36
90008c1c:	e8d3001c 	lwi	r6, r19, 28
90008c20:	b9f40110 	brlid	r15, 272	// 90008d30 <enqueueTaskContext>
90008c24:	80000000 	or	r0, r0, r0
90008c28:	b8000018 	bri	24		// 90008c40
                                          &osData.pendingLowTaskQueue, taskContext);
            }
            else
            {
                enqueueTaskContext(&osData.freeContextBufferQueue, taskContext);
90008c2c:	b0009002 	imm	-28670
90008c30:	30a05060 	addik	r5, r0, 20576
90008c34:	e8d3001c 	lwi	r6, r19, 28
90008c38:	b9f400f8 	brlid	r15, 248	// 90008d30 <enqueueTaskContext>
90008c3c:	80000000 	or	r0, r0, r0
90008c40:	b0009002 	imm	-28670
90008c44:	e8605084 	lwi	r3, r0, 20612
90008c48:	bc23ff48 	bnei	r3, -184		// 90008b90
            }
        }

        // else - TODO: handle idle tasks here
    }
}
90008c4c:	e9e10000 	lwi	r15, r1, 0
90008c50:	10330000 	addk	r1, r19, r0
90008c54:	ea610028 	lwi	r19, r1, 40
90008c58:	3021002c 	addik	r1, r1, 44
90008c5c:	b60f0008 	rtsd	r15, 8
90008c60:	80000000 	or	r0, r0, r0

90008c64 <dequeueTaskContext>:



static TaskContext* dequeueTaskContext(TaskQueue* taskQueue)
{
90008c64:	3021ffd8 	addik	r1, r1, -40
90008c68:	f9e10000 	swi	r15, r1, 0
90008c6c:	fa610024 	swi	r19, r1, 36
90008c70:	12610000 	addk	r19, r1, r0
90008c74:	f8b3002c 	swi	r5, r19, 44
    ASSERT(taskQueue);
90008c78:	e873002c 	lwi	r3, r19, 44
90008c7c:	bc230028 	bnei	r3, 40		// 90008ca4
90008c80:	94110002 	msrclr	r0, 2
90008c84:	b0009002 	imm	-28670
90008c88:	30a0180c 	addik	r5, r0, 6156
90008c8c:	b0009002 	imm	-28670
90008c90:	30c017d8 	addik	r6, r0, 6104
90008c94:	30e000b0 	addik	r7, r0, 176
90008c98:	b9f4378c 	brlid	r15, 14220	// 9000c424 <printAssert>
90008c9c:	80000000 	or	r0, r0, r0
90008ca0:	b8000000 	bri	0		// 90008ca0
    
    TaskContext* taskContext;
    
    CRData crdata = enterCriticalRegion();
90008ca4:	b9f47354 	brlid	r15, 29524	// 9000fff8 <enterCriticalRegion>
90008ca8:	80000000 	or	r0, r0, r0
90008cac:	f873001c 	swi	r3, r19, 28
    {
        taskContext = taskQueue->first;
90008cb0:	e873002c 	lwi	r3, r19, 44
90008cb4:	e8630000 	lwi	r3, r3, 0
90008cb8:	f8730020 	swi	r3, r19, 32

        if(taskContext)
90008cbc:	e8730020 	lwi	r3, r19, 32
90008cc0:	bc030048 	beqi	r3, 72		// 90008d08
        {
            taskQueue->count--;
90008cc4:	e873002c 	lwi	r3, r19, 44
90008cc8:	e8630008 	lwi	r3, r3, 8
90008ccc:	3083ffff 	addik	r4, r3, -1
90008cd0:	e873002c 	lwi	r3, r19, 44
90008cd4:	f8830008 	swi	r4, r3, 8
            taskQueue->first  = taskQueue->first->next;
90008cd8:	e873002c 	lwi	r3, r19, 44
90008cdc:	e8630000 	lwi	r3, r3, 0
90008ce0:	e8830008 	lwi	r4, r3, 8
90008ce4:	e873002c 	lwi	r3, r19, 44
90008ce8:	f8830000 	swi	r4, r3, 0
            taskContext->next = NULL;
90008cec:	e8730020 	lwi	r3, r19, 32
90008cf0:	f8030008 	swi	r0, r3, 8
            
            if(!taskQueue->first)
90008cf4:	e873002c 	lwi	r3, r19, 44
90008cf8:	e8630000 	lwi	r3, r3, 0
90008cfc:	bc23000c 	bnei	r3, 12		// 90008d08
            {
                taskQueue->last = NULL;
90008d00:	e873002c 	lwi	r3, r19, 44
90008d04:	f8030004 	swi	r0, r3, 4
            }
        }
    }
    exitCriticalRegion(crdata);
90008d08:	e8b3001c 	lwi	r5, r19, 28
90008d0c:	b9f4732c 	brlid	r15, 29484	// 90010038 <exitCriticalRegion>
90008d10:	80000000 	or	r0, r0, r0
    
    return taskContext;
90008d14:	e8730020 	lwi	r3, r19, 32
}
90008d18:	e9e10000 	lwi	r15, r1, 0
90008d1c:	10330000 	addk	r1, r19, r0
90008d20:	ea610024 	lwi	r19, r1, 36
90008d24:	30210028 	addik	r1, r1, 40
90008d28:	b60f0008 	rtsd	r15, 8
90008d2c:	80000000 	or	r0, r0, r0

90008d30 <enqueueTaskContext>:



static void enqueueTaskContext(TaskQueue* taskQueue, TaskContext* taskContext)
{
90008d30:	3021ffdc 	addik	r1, r1, -36
90008d34:	f9e10000 	swi	r15, r1, 0
90008d38:	fa610020 	swi	r19, r1, 32
90008d3c:	12610000 	addk	r19, r1, r0
90008d40:	f8b30028 	swi	r5, r19, 40
90008d44:	f8d3002c 	swi	r6, r19, 44
    ASSERT(taskQueue);
90008d48:	e8730028 	lwi	r3, r19, 40
90008d4c:	bc230028 	bnei	r3, 40		// 90008d74
90008d50:	94110002 	msrclr	r0, 2
90008d54:	b0009002 	imm	-28670
90008d58:	30a0180c 	addik	r5, r0, 6156
90008d5c:	b0009002 	imm	-28670
90008d60:	30c017d8 	addik	r6, r0, 6104
90008d64:	30e000cd 	addik	r7, r0, 205
90008d68:	b9f436bc 	brlid	r15, 14012	// 9000c424 <printAssert>
90008d6c:	80000000 	or	r0, r0, r0
90008d70:	b8000000 	bri	0		// 90008d70
    ASSERT(taskContext);
90008d74:	e873002c 	lwi	r3, r19, 44
90008d78:	bc230028 	bnei	r3, 40		// 90008da0
90008d7c:	94110002 	msrclr	r0, 2
90008d80:	b0009002 	imm	-28670
90008d84:	30a01818 	addik	r5, r0, 6168
90008d88:	b0009002 	imm	-28670
90008d8c:	30c017d8 	addik	r6, r0, 6104
90008d90:	30e000ce 	addik	r7, r0, 206
90008d94:	b9f43690 	brlid	r15, 13968	// 9000c424 <printAssert>
90008d98:	80000000 	or	r0, r0, r0
90008d9c:	b8000000 	bri	0		// 90008d9c
    
    taskContext->next = NULL;
90008da0:	e873002c 	lwi	r3, r19, 44
90008da4:	f8030008 	swi	r0, r3, 8

    CRData crdata = enterCriticalRegion();
90008da8:	b9f47250 	brlid	r15, 29264	// 9000fff8 <enterCriticalRegion>
90008dac:	80000000 	or	r0, r0, r0
90008db0:	f873001c 	swi	r3, r19, 28
    {
        taskQueue->count++;
90008db4:	e8730028 	lwi	r3, r19, 40
90008db8:	e8630008 	lwi	r3, r3, 8
90008dbc:	30830001 	addik	r4, r3, 1
90008dc0:	e8730028 	lwi	r3, r19, 40
90008dc4:	f8830008 	swi	r4, r3, 8
        
        if(taskQueue->last)
90008dc8:	e8730028 	lwi	r3, r19, 40
90008dcc:	e8630004 	lwi	r3, r3, 4
90008dd0:	bc030018 	beqi	r3, 24		// 90008de8
        {
            taskQueue->last->next = taskContext;
90008dd4:	e8730028 	lwi	r3, r19, 40
90008dd8:	e8830004 	lwi	r4, r3, 4
90008ddc:	e873002c 	lwi	r3, r19, 44
90008de0:	f8640008 	swi	r3, r4, 8
90008de4:	b8000010 	bri	16		// 90008df4
        }
        else
        {
            taskQueue->first = taskContext;
90008de8:	e8930028 	lwi	r4, r19, 40
90008dec:	e873002c 	lwi	r3, r19, 44
90008df0:	f8640000 	swi	r3, r4, 0
        }

        taskQueue->last = taskContext;
90008df4:	e8930028 	lwi	r4, r19, 40
90008df8:	e873002c 	lwi	r3, r19, 44
90008dfc:	f8640004 	swi	r3, r4, 4
    }
    exitCriticalRegion(crdata);
90008e00:	e8b3001c 	lwi	r5, r19, 28
90008e04:	b9f47234 	brlid	r15, 29236	// 90010038 <exitCriticalRegion>
90008e08:	80000000 	or	r0, r0, r0
}
90008e0c:	e9e10000 	lwi	r15, r1, 0
90008e10:	10330000 	addk	r1, r19, r0
90008e14:	ea610020 	lwi	r19, r1, 32
90008e18:	30210024 	addik	r1, r1, 36
90008e1c:	b60f0008 	rtsd	r15, 8
90008e20:	80000000 	or	r0, r0, r0

90008e24 <InitializeAirCylinders>:
// Interface functions


void InitializeAirCylinders()
{
90008e24:	3021fff8 	addik	r1, r1, -8
90008e28:	fa610004 	swi	r19, r1, 4
90008e2c:	12610000 	addk	r19, r1, r0
	RELAY.relay_U = OFF;
90008e30:	b000cbe0 	imm	-13344
90008e34:	30800000 	addik	r4, r0, 0
90008e38:	30600001 	addik	r3, r0, 1
90008e3c:	f8640000 	swi	r3, r4, 0
	RELAY.relay_F = OFF;
90008e40:	b000cbe0 	imm	-13344
90008e44:	30800000 	addik	r4, r0, 0
90008e48:	30600001 	addik	r3, r0, 1
90008e4c:	f8640004 	swi	r3, r4, 4
	RELAY.relay_R = OFF;
90008e50:	b000cbe0 	imm	-13344
90008e54:	30800000 	addik	r4, r0, 0
90008e58:	30600001 	addik	r3, r0, 1
90008e5c:	f8640008 	swi	r3, r4, 8
	RELAY.relay_D = OFF;
90008e60:	b000cbe0 	imm	-13344
90008e64:	30800000 	addik	r4, r0, 0
90008e68:	30600001 	addik	r3, r0, 1
90008e6c:	f864000c 	swi	r3, r4, 12
	RELAY.relay_B = OFF;
90008e70:	b000cbe0 	imm	-13344
90008e74:	30800000 	addik	r4, r0, 0
90008e78:	30600001 	addik	r3, r0, 1
90008e7c:	f8640010 	swi	r3, r4, 16
	RELAY.relay_L = OFF;
90008e80:	b000cbe0 	imm	-13344
90008e84:	30800000 	addik	r4, r0, 0
90008e88:	30600001 	addik	r3, r0, 1
90008e8c:	f8640014 	swi	r3, r4, 20
}
90008e90:	10330000 	addk	r1, r19, r0
90008e94:	ea610004 	lwi	r19, r1, 4
90008e98:	30210008 	addik	r1, r1, 8
90008e9c:	b60f0008 	rtsd	r15, 8
90008ea0:	80000000 	or	r0, r0, r0

90008ea4 <ActuateArmIn>:

void ActuateArmIn(char armFace)
{
90008ea4:	3021ffe0 	addik	r1, r1, -32
90008ea8:	f9e10000 	swi	r15, r1, 0
90008eac:	fa61001c 	swi	r19, r1, 28
90008eb0:	12610000 	addk	r19, r1, r0
90008eb4:	f0b30024 	sbi	r5, r19, 36
	InitializeAirCylinders();
90008eb8:	b9f4ff6c 	brlid	r15, -148	// 90008e24 <InitializeAirCylinders>
90008ebc:	80000000 	or	r0, r0, r0
	if(armFace == 'U')      { RELAY.relay_U = ON; ;}
90008ec0:	e0730024 	lbui	r3, r19, 36
90008ec4:	90630060 	sext8	r3, r3
90008ec8:	aa430055 	xori	r18, r3, 85
90008ecc:	bc320014 	bnei	r18, 20		// 90008ee0
90008ed0:	b000cbe0 	imm	-13344
90008ed4:	30600000 	addik	r3, r0, 0
90008ed8:	f8030000 	swi	r0, r3, 0
90008edc:	b80000a0 	bri	160		// 90008f7c
	else if(armFace == 'F') { RELAY.relay_F = ON; }
90008ee0:	e0730024 	lbui	r3, r19, 36
90008ee4:	90630060 	sext8	r3, r3
90008ee8:	aa430046 	xori	r18, r3, 70
90008eec:	bc320014 	bnei	r18, 20		// 90008f00
90008ef0:	b000cbe0 	imm	-13344
90008ef4:	30600000 	addik	r3, r0, 0
90008ef8:	f8030004 	swi	r0, r3, 4
90008efc:	b8000080 	bri	128		// 90008f7c
	else if(armFace == 'R') { RELAY.relay_R = ON; }
90008f00:	e0730024 	lbui	r3, r19, 36
90008f04:	90630060 	sext8	r3, r3
90008f08:	aa430052 	xori	r18, r3, 82
90008f0c:	bc320014 	bnei	r18, 20		// 90008f20
90008f10:	b000cbe0 	imm	-13344
90008f14:	30600000 	addik	r3, r0, 0
90008f18:	f8030008 	swi	r0, r3, 8
90008f1c:	b8000060 	bri	96		// 90008f7c
	else if(armFace == 'D') { RELAY.relay_D = ON; }
90008f20:	e0730024 	lbui	r3, r19, 36
90008f24:	90630060 	sext8	r3, r3
90008f28:	aa430044 	xori	r18, r3, 68
90008f2c:	bc320014 	bnei	r18, 20		// 90008f40
90008f30:	b000cbe0 	imm	-13344
90008f34:	30600000 	addik	r3, r0, 0
90008f38:	f803000c 	swi	r0, r3, 12
90008f3c:	b8000040 	bri	64		// 90008f7c
	else if(armFace == 'B') { RELAY.relay_B = ON; }
90008f40:	e0730024 	lbui	r3, r19, 36
90008f44:	90630060 	sext8	r3, r3
90008f48:	aa430042 	xori	r18, r3, 66
90008f4c:	bc320014 	bnei	r18, 20		// 90008f60
90008f50:	b000cbe0 	imm	-13344
90008f54:	30600000 	addik	r3, r0, 0
90008f58:	f8030010 	swi	r0, r3, 16
90008f5c:	b8000020 	bri	32		// 90008f7c
	else if(armFace == 'L') { RELAY.relay_L = ON; }
90008f60:	e0730024 	lbui	r3, r19, 36
90008f64:	90630060 	sext8	r3, r3
90008f68:	aa43004c 	xori	r18, r3, 76
90008f6c:	bc320010 	bnei	r18, 16		// 90008f7c
90008f70:	b000cbe0 	imm	-13344
90008f74:	30600000 	addik	r3, r0, 0
90008f78:	f8030014 	swi	r0, r3, 20
	else {/*Do Nothing*/}

}
90008f7c:	e9e10000 	lwi	r15, r1, 0
90008f80:	10330000 	addk	r1, r19, r0
90008f84:	ea61001c 	lwi	r19, r1, 28
90008f88:	30210020 	addik	r1, r1, 32
90008f8c:	b60f0008 	rtsd	r15, 8
90008f90:	80000000 	or	r0, r0, r0

90008f94 <ActuateArmsOut>:

void ActuateArmsOut()
{
90008f94:	3021ffe0 	addik	r1, r1, -32
90008f98:	f9e10000 	swi	r15, r1, 0
90008f9c:	fa61001c 	swi	r19, r1, 28
90008fa0:	12610000 	addk	r19, r1, r0
	InitializeAirCylinders();
90008fa4:	b9f4fe80 	brlid	r15, -384	// 90008e24 <InitializeAirCylinders>
90008fa8:	80000000 	or	r0, r0, r0
}
90008fac:	e9e10000 	lwi	r15, r1, 0
90008fb0:	10330000 	addk	r1, r19, r0
90008fb4:	ea61001c 	lwi	r19, r1, 28
90008fb8:	30210020 	addik	r1, r1, 32
90008fbc:	b60f0008 	rtsd	r15, 8
90008fc0:	80000000 	or	r0, r0, r0

90008fc4 <serialInit>:
///////////////////////////////////////////////////
// Interface functions

void serialInit()
{
90008fc4:	3021ffe0 	addik	r1, r1, -32
90008fc8:	f9e10000 	swi	r15, r1, 0
90008fcc:	fa61001c 	swi	r19, r1, 28
90008fd0:	12610000 	addk	r19, r1, r0
    initUart(&serialData.sbcUart, SBC_SERIAL_PORT, XPAR_SBC_UART_BASEADDR, XPAR_INTC_SBC_UART_INTERRUPT_INTR);
90008fd4:	b0009002 	imm	-28670
90008fd8:	30a05088 	addik	r5, r0, 20616
90008fdc:	10c00000 	addk	r6, r0, r0
90008fe0:	b0008400 	imm	-31744
90008fe4:	30e00000 	addik	r7, r0, 0
90008fe8:	31000008 	addik	r8, r0, 8	// 8 <_vector_sw_exception>
90008fec:	b9f4050c 	brlid	r15, 1292	// 900094f8 <initUart>
90008ff0:	80000000 	or	r0, r0, r0
    registerInterruptHandler(XPAR_INTC_SBC_UART_INTERRUPT_INTR, (XInterruptHandler)uartInterruptHandler, &serialData.sbcUart);
90008ff4:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
90008ff8:	b0009000 	imm	-28672
90008ffc:	30c09b2c 	addik	r6, r0, -25812
90009000:	b0009002 	imm	-28670
90009004:	30e05088 	addik	r7, r0, 20616
90009008:	b9f467e8 	brlid	r15, 26600	// 9000f7f0 <registerInterruptHandler>
9000900c:	80000000 	or	r0, r0, r0
    enableInterrupt(XPAR_INTC_SBC_UART_INTERRUPT_INTR);
90009010:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
90009014:	b9f46830 	brlid	r15, 26672	// 9000f844 <enableInterrupt>
90009018:	80000000 	or	r0, r0, r0
}
9000901c:	e9e10000 	lwi	r15, r1, 0
90009020:	10330000 	addk	r1, r19, r0
90009024:	ea61001c 	lwi	r19, r1, 28
90009028:	30210020 	addik	r1, r1, 32
9000902c:	b60f0008 	rtsd	r15, 8
90009030:	80000000 	or	r0, r0, r0

90009034 <setSerialPortRxSignal>:



void setSerialPortRxSignal(SerialPort port, Signal* signal)
{
90009034:	3021ffdc 	addik	r1, r1, -36
90009038:	f9e10000 	swi	r15, r1, 0
9000903c:	fa610020 	swi	r19, r1, 32
90009040:	12610000 	addk	r19, r1, r0
90009044:	f8b30028 	swi	r5, r19, 40
90009048:	f8d3002c 	swi	r6, r19, 44
    ASSERT(signal);
9000904c:	e873002c 	lwi	r3, r19, 44
90009050:	bc230028 	bnei	r3, 40		// 90009078
90009054:	94110002 	msrclr	r0, 2
90009058:	b0009002 	imm	-28670
9000905c:	30a01824 	addik	r5, r0, 6180
90009060:	b0009002 	imm	-28670
90009064:	30c0182c 	addik	r6, r0, 6188
90009068:	30e000b3 	addik	r7, r0, 179
9000906c:	b9f433b8 	brlid	r15, 13240	// 9000c424 <printAssert>
90009070:	80000000 	or	r0, r0, r0
90009074:	b8000000 	bri	0		// 90009074
    
    Uart* uart = getUart(port);
90009078:	e8b30028 	lwi	r5, r19, 40
9000907c:	b9f40660 	brlid	r15, 1632	// 900096dc <getUart>
90009080:	80000000 	or	r0, r0, r0
90009084:	f873001c 	swi	r3, r19, 28
    
    disableUartInterrupts(uart);
90009088:	e8b3001c 	lwi	r5, r19, 28
9000908c:	b9f406c0 	brlid	r15, 1728	// 9000974c <disableUartInterrupts>
90009090:	80000000 	or	r0, r0, r0
    {
       uart->rxSignal = signal;
90009094:	e893001c 	lwi	r4, r19, 28
90009098:	e873002c 	lwi	r3, r19, 44
9000909c:	f8640414 	swi	r3, r4, 1044
    }
    enableUartInterrupts(uart);
900090a0:	e8b3001c 	lwi	r5, r19, 28
900090a4:	b9f406e8 	brlid	r15, 1768	// 9000978c <enableUartInterrupts>
900090a8:	80000000 	or	r0, r0, r0
}
900090ac:	e9e10000 	lwi	r15, r1, 0
900090b0:	10330000 	addk	r1, r19, r0
900090b4:	ea610020 	lwi	r19, r1, 32
900090b8:	30210024 	addik	r1, r1, 36
900090bc:	b60f0008 	rtsd	r15, 8
900090c0:	80000000 	or	r0, r0, r0

900090c4 <serialGetPkt>:



unsigned serialGetPkt(SerialPort port, uint8* pkt, unsigned maxLength)
{
900090c4:	3021ffd8 	addik	r1, r1, -40
900090c8:	f9e10000 	swi	r15, r1, 0
900090cc:	fa610024 	swi	r19, r1, 36
900090d0:	12610000 	addk	r19, r1, r0
900090d4:	f8b3002c 	swi	r5, r19, 44
900090d8:	f8d30030 	swi	r6, r19, 48
900090dc:	f8f30034 	swi	r7, r19, 52
    ASSERT(pkt);
900090e0:	e8730030 	lwi	r3, r19, 48
900090e4:	bc230028 	bnei	r3, 40		// 9000910c
900090e8:	94110002 	msrclr	r0, 2
900090ec:	b0009002 	imm	-28670
900090f0:	30a0183c 	addik	r5, r0, 6204
900090f4:	b0009002 	imm	-28670
900090f8:	30c0182c 	addik	r6, r0, 6188
900090fc:	30e000c2 	addik	r7, r0, 194
90009100:	b9f43324 	brlid	r15, 13092	// 9000c424 <printAssert>
90009104:	80000000 	or	r0, r0, r0
90009108:	b8000000 	bri	0		// 90009108

    unsigned count = 0;
9000910c:	f8130020 	swi	r0, r19, 32
    Uart* uart = getUart(port);
90009110:	e8b3002c 	lwi	r5, r19, 44
90009114:	b9f405c8 	brlid	r15, 1480	// 900096dc <getUart>
90009118:	80000000 	or	r0, r0, r0
9000911c:	f873001c 	swi	r3, r19, 28
    disableUartInterrupts(uart);
90009120:	e8b3001c 	lwi	r5, r19, 28
90009124:	b9f40628 	brlid	r15, 1576	// 9000974c <disableUartInterrupts>
90009128:	80000000 	or	r0, r0, r0
    {
        if(uart->rxState == RxComplete)
9000912c:	e873001c 	lwi	r3, r19, 28
90009130:	e863000c 	lwi	r3, r3, 12
90009134:	aa430002 	xori	r18, r3, 2
90009138:	bc320050 	bnei	r18, 80		// 90009188
        {
            if(uart->rxCount <= maxLength)
9000913c:	e873001c 	lwi	r3, r19, 28
90009140:	e8830010 	lwi	r4, r3, 16
90009144:	e8730034 	lwi	r3, r19, 52
90009148:	16441803 	cmpu	r18, r4, r3
9000914c:	bc520034 	blti	r18, 52		// 90009180
            {
                count = uart->rxCount;
90009150:	e873001c 	lwi	r3, r19, 28
90009154:	e8630010 	lwi	r3, r3, 16
90009158:	f8730020 	swi	r3, r19, 32
                memcpy(pkt, uart->rxBuffer, count);
9000915c:	e873001c 	lwi	r3, r19, 28
90009160:	30830014 	addik	r4, r3, 20
90009164:	e8730030 	lwi	r3, r19, 48
90009168:	e8f30020 	lwi	r7, r19, 32
9000916c:	10a30000 	addk	r5, r3, r0
90009170:	10c40000 	addk	r6, r4, r0
90009174:	b0000000 	imm	0
90009178:	b9f4ad98 	brlid	r15, -21096	// 90013f10 <memcpy>
9000917c:	80000000 	or	r0, r0, r0
            }
            //Else - Error: unable to copy whole buffer

            uart->rxState = RxIdle;
90009180:	e873001c 	lwi	r3, r19, 28
90009184:	f803000c 	swi	r0, r3, 12
        }
    }
    enableUartInterrupts(uart);
90009188:	e8b3001c 	lwi	r5, r19, 28
9000918c:	b9f40600 	brlid	r15, 1536	// 9000978c <enableUartInterrupts>
90009190:	80000000 	or	r0, r0, r0

    return count;
90009194:	e8730020 	lwi	r3, r19, 32
}
90009198:	e9e10000 	lwi	r15, r1, 0
9000919c:	10330000 	addk	r1, r19, r0
900091a0:	ea610024 	lwi	r19, r1, 36
900091a4:	30210028 	addik	r1, r1, 40
900091a8:	b60f0008 	rtsd	r15, 8
900091ac:	80000000 	or	r0, r0, r0

900091b0 <serialSendPkt>:



bool serialSendPkt(SerialPort port, const uint8* pkt, unsigned length, uint32 timeout_us)
{
900091b0:	3021ffc0 	addik	r1, r1, -64
900091b4:	f9e10000 	swi	r15, r1, 0
900091b8:	fa61003c 	swi	r19, r1, 60
900091bc:	12610000 	addk	r19, r1, r0
900091c0:	f8b30044 	swi	r5, r19, 68
900091c4:	f8d30048 	swi	r6, r19, 72
900091c8:	f8f3004c 	swi	r7, r19, 76
900091cc:	f9130050 	swi	r8, r19, 80
    ASSERT(length <= MAX_TX_DATA_SIZE);
900091d0:	e873004c 	lwi	r3, r19, 76
900091d4:	22400400 	addi	r18, r0, 1024
900091d8:	16439003 	cmpu	r18, r3, r18
900091dc:	bcb20028 	bgei	r18, 40		// 90009204
900091e0:	94110002 	msrclr	r0, 2
900091e4:	b0009002 	imm	-28670
900091e8:	30a01840 	addik	r5, r0, 6208
900091ec:	b0009002 	imm	-28670
900091f0:	30c0182c 	addik	r6, r0, 6188
900091f4:	30e000dd 	addik	r7, r0, 221
900091f8:	b9f4322c 	brlid	r15, 12844	// 9000c424 <printAssert>
900091fc:	80000000 	or	r0, r0, r0
90009200:	b8000000 	bri	0		// 90009200
    ASSERT(length  > 0);
90009204:	e873004c 	lwi	r3, r19, 76
90009208:	bc230028 	bnei	r3, 40		// 90009230
9000920c:	94110002 	msrclr	r0, 2
90009210:	b0009002 	imm	-28670
90009214:	30a0185c 	addik	r5, r0, 6236
90009218:	b0009002 	imm	-28670
9000921c:	30c0182c 	addik	r6, r0, 6188
90009220:	30e000de 	addik	r7, r0, 222
90009224:	b9f43200 	brlid	r15, 12800	// 9000c424 <printAssert>
90009228:	80000000 	or	r0, r0, r0
9000922c:	b8000000 	bri	0		// 9000922c

    Uart* uart = getUart(port);
90009230:	e8b30044 	lwi	r5, r19, 68
90009234:	b9f404a8 	brlid	r15, 1192	// 900096dc <getUart>
90009238:	80000000 	or	r0, r0, r0
9000923c:	f8730024 	swi	r3, r19, 36
    Timer timer;
    startTimer(&timer, USEC_TO_TICKS(timeout_us));
90009240:	e8930050 	lwi	r4, r19, 80
90009244:	10a02000 	addk	r5, r0, r4
90009248:	10800000 	addk	r4, r0, r0
9000924c:	10c50000 	addk	r6, r5, r0
90009250:	10a40000 	addk	r5, r4, r0
90009254:	30e00000 	addik	r7, r0, 0
90009258:	31000042 	addik	r8, r0, 66
9000925c:	b0000000 	imm	0
90009260:	b9f4852c 	brlid	r15, -31444	// 9001178c <__muldi3>
90009264:	80000000 	or	r0, r0, r0
90009268:	10a40000 	addk	r5, r4, r0
9000926c:	10830000 	addk	r4, r3, r0
90009270:	10c40000 	addk	r6, r4, r0
90009274:	10e50000 	addk	r7, r5, r0
90009278:	30730028 	addik	r3, r19, 40
9000927c:	10a30000 	addk	r5, r3, r0
90009280:	b9f42c70 	brlid	r15, 11376	// 9000bef0 <startTimer>
90009284:	80000000 	or	r0, r0, r0
    
    do
    {
        TxBuffer* buffer = dequeueTxBuffer(&uart->freeQueue);
90009288:	e8730024 	lwi	r3, r19, 36
9000928c:	3063555c 	addik	r3, r3, 21852
90009290:	10a30000 	addk	r5, r3, r0
90009294:	b9f405a8 	brlid	r15, 1448	// 9000983c <dequeueTxBuffer>
90009298:	80000000 	or	r0, r0, r0
9000929c:	f873001c 	swi	r3, r19, 28
        if(buffer)
900092a0:	e873001c 	lwi	r3, r19, 28
900092a4:	bc030088 	beqi	r3, 136		// 9000932c
        {
            // Load buffer including packet frame
            buffer->data[0] = FRAME_START_CHAR;
900092a8:	e893001c 	lwi	r4, r19, 28
900092ac:	3060005b 	addik	r3, r0, 91
900092b0:	f0640000 	sbi	r3, r4, 0
            memcpy(&buffer->data[1], pkt, length);
900092b4:	e873001c 	lwi	r3, r19, 28
900092b8:	30630001 	addik	r3, r3, 1
900092bc:	e8930048 	lwi	r4, r19, 72
900092c0:	e8f3004c 	lwi	r7, r19, 76
900092c4:	10a30000 	addk	r5, r3, r0
900092c8:	10c40000 	addk	r6, r4, r0
900092cc:	b0000000 	imm	0
900092d0:	b9f4ac40 	brlid	r15, -21440	// 90013f10 <memcpy>
900092d4:	80000000 	or	r0, r0, r0
            buffer->data[1 + length] = FRAME_END_CHAR;
900092d8:	e873004c 	lwi	r3, r19, 76
900092dc:	30a30001 	addik	r5, r3, 1
900092e0:	e893001c 	lwi	r4, r19, 28
900092e4:	3060005d 	addik	r3, r0, 93
900092e8:	d0652000 	sb	r3, r5, r4
            buffer->count = length + 2; // Add 2 for frame characters
900092ec:	e873004c 	lwi	r3, r19, 76
900092f0:	30830002 	addik	r4, r3, 2
900092f4:	e873001c 	lwi	r3, r19, 28
900092f8:	f8830408 	swi	r4, r3, 1032

            enqueueTxBuffer(&uart->txQueue, buffer);
900092fc:	e8730024 	lwi	r3, r19, 36
90009300:	30635568 	addik	r3, r3, 21864
90009304:	10a30000 	addk	r5, r3, r0
90009308:	e8d3001c 	lwi	r6, r19, 28
9000930c:	b9f40604 	brlid	r15, 1540	// 90009910 <enqueueTxBuffer>
90009310:	80000000 	or	r0, r0, r0
            updateTxFifo(uart);
90009314:	e8b30024 	lwi	r5, r19, 36
90009318:	b9f406ec 	brlid	r15, 1772	// 90009a04 <updateTxFifo>
9000931c:	80000000 	or	r0, r0, r0
            
            return true;
90009320:	30600001 	addik	r3, r0, 1
90009324:	f8730038 	swi	r3, r19, 56
90009328:	b80000a8 	bri	168		// 900093d0
        }
    } while(!timerExpired(&timer));
9000932c:	30730028 	addik	r3, r19, 40
90009330:	10a30000 	addk	r5, r3, r0
90009334:	b9f42c20 	brlid	r15, 11296	// 9000bf54 <timerExpired>
90009338:	80000000 	or	r0, r0, r0
9000933c:	bc03ff4c 	beqi	r3, -180		// 90009288
    
    

    // Couldn't enqueue TX packet - Start up UART Error Check Task
    CRData crdata = enterCriticalRegion();
90009340:	b9f46cb8 	brlid	r15, 27832	// 9000fff8 <enterCriticalRegion>
90009344:	80000000 	or	r0, r0, r0
90009348:	f8730020 	swi	r3, r19, 32
    {
        if(!uart->errorCheck.running)
9000934c:	e8730024 	lwi	r3, r19, 36
90009350:	e8635578 	lwi	r3, r3, 21880
90009354:	bc230068 	bnei	r3, 104		// 900093bc
        {
            uart->errorCheck.running = true;
90009358:	e8930024 	lwi	r4, r19, 36
9000935c:	30600001 	addik	r3, r0, 1
90009360:	f8645578 	swi	r3, r4, 21880
            uart->errorCheck.startTxCount = uart->txCount;
90009364:	e8730024 	lwi	r3, r19, 36
90009368:	e8835574 	lwi	r4, r3, 21876
9000936c:	e8730024 	lwi	r3, r19, 36
90009370:	f883558c 	swi	r4, r3, 21900
            
            startTimer(&uart->errorCheck.timer, MSEC_TO_TICKS(UART_ERROR_CHECK_TIMEOUT_ms));
90009374:	e8730024 	lwi	r3, r19, 36
90009378:	3063557c 	addik	r3, r3, 21884
9000937c:	10a30000 	addk	r5, r3, r0
90009380:	30c00000 	addik	r6, r0, 0
90009384:	b000000a 	imm	10
90009388:	30e02c24 	addik	r7, r0, 11300
9000938c:	b9f42b64 	brlid	r15, 11108	// 9000bef0 <startTimer>
90009390:	80000000 	or	r0, r0, r0
            scheduleTask(uartErrorCheckTask, uart, false);
90009394:	b0009000 	imm	-28672
90009398:	30a093ec 	addik	r5, r0, -27668
9000939c:	e8d30024 	lwi	r6, r19, 36
900093a0:	10e00000 	addk	r7, r0, r0
900093a4:	b9f4f6d8 	brlid	r15, -2344	// 90008a7c <scheduleTask>
900093a8:	80000000 	or	r0, r0, r0

            printf("Starting UART Error Check Task\n");
900093ac:	b0009002 	imm	-28670
900093b0:	30a01868 	addik	r5, r0, 6248
900093b4:	b9f46b84 	brlid	r15, 27524	// 9000ff38 <puts>
900093b8:	80000000 	or	r0, r0, r0
        }
    }
    exitCriticalRegion(crdata);
900093bc:	e8b30020 	lwi	r5, r19, 32
900093c0:	b9f46c78 	brlid	r15, 27768	// 90010038 <exitCriticalRegion>
900093c4:	80000000 	or	r0, r0, r0


    return false;
900093c8:	10600000 	addk	r3, r0, r0
900093cc:	f8730038 	swi	r3, r19, 56
900093d0:	e8730038 	lwi	r3, r19, 56
}
900093d4:	e9e10000 	lwi	r15, r1, 0
900093d8:	10330000 	addk	r1, r19, r0
900093dc:	ea61003c 	lwi	r19, r1, 60
900093e0:	30210040 	addik	r1, r1, 64
900093e4:	b60f0008 	rtsd	r15, 8
900093e8:	80000000 	or	r0, r0, r0

900093ec <uartErrorCheckTask>:




///////////////////////////////////////////////////
// Local functions

static bool uartErrorCheckTask(void* reference)
{
900093ec:	3021ffd4 	addik	r1, r1, -44
900093f0:	f9e10000 	swi	r15, r1, 0
900093f4:	fa610028 	swi	r19, r1, 40
900093f8:	12610000 	addk	r19, r1, r0
900093fc:	f8b30030 	swi	r5, r19, 48
    ASSERT(reference);
90009400:	e8730030 	lwi	r3, r19, 48
90009404:	bc230028 	bnei	r3, 40		// 9000942c
90009408:	94110002 	msrclr	r0, 2
9000940c:	b0009002 	imm	-28670
90009410:	30a01888 	addik	r5, r0, 6280
90009414:	b0009002 	imm	-28670
90009418:	30c0182c 	addik	r6, r0, 6188
9000941c:	30e00114 	addik	r7, r0, 276
90009420:	b9f43004 	brlid	r15, 12292	// 9000c424 <printAssert>
90009424:	80000000 	or	r0, r0, r0
90009428:	b8000000 	bri	0		// 90009428
    
    Uart* uart     = (Uart*)reference;
9000942c:	e8730030 	lwi	r3, r19, 48
90009430:	f8730024 	swi	r3, r19, 36
    bool  runAgain = true;
90009434:	30600001 	addik	r3, r0, 1
90009438:	f8730020 	swi	r3, r19, 32
    
    printf("Checking UART error...\n");
9000943c:	b0009002 	imm	-28670
90009440:	30a01894 	addik	r5, r0, 6292
90009444:	b9f46af4 	brlid	r15, 27380	// 9000ff38 <puts>
90009448:	80000000 	or	r0, r0, r0

    CRData crdata = enterCriticalRegion();
9000944c:	b9f46bac 	brlid	r15, 27564	// 9000fff8 <enterCriticalRegion>
90009450:	80000000 	or	r0, r0, r0
90009454:	f873001c 	swi	r3, r19, 28
    {
        if(uart->errorCheck.startTxCount != uart->txCount)
90009458:	e8730024 	lwi	r3, r19, 36
9000945c:	e883558c 	lwi	r4, r3, 21900
90009460:	e8730024 	lwi	r3, r19, 36
90009464:	e8635574 	lwi	r3, r3, 21876
90009468:	16432000 	rsubk	r18, r3, r4
9000946c:	bc120024 	beqi	r18, 36		// 90009490
        {
            printf("UART OK\n");
90009470:	b0009002 	imm	-28670
90009474:	30a018ac 	addik	r5, r0, 6316
90009478:	b9f46ac0 	brlid	r15, 27328	// 9000ff38 <puts>
9000947c:	80000000 	or	r0, r0, r0
            runAgain                 = false;
90009480:	f8130020 	swi	r0, r19, 32
            uart->errorCheck.running = false;
90009484:	e8730024 	lwi	r3, r19, 36
90009488:	f8035578 	swi	r0, r3, 21880
9000948c:	b8000044 	bri	68		// 900094d0
        }
        else if(timerExpired(&uart->errorCheck.timer))
90009490:	e8730024 	lwi	r3, r19, 36
90009494:	3063557c 	addik	r3, r3, 21884
90009498:	10a30000 	addk	r5, r3, r0
9000949c:	b9f42ab8 	brlid	r15, 10936	// 9000bf54 <timerExpired>
900094a0:	80000000 	or	r0, r0, r0
900094a4:	bc03002c 	beqi	r3, 44		// 900094d0
        {
            printf("Resetting UART\n");
900094a8:	b0009002 	imm	-28670
900094ac:	30a018b4 	addik	r5, r0, 6324
900094b0:	b9f46a88 	brlid	r15, 27272	// 9000ff38 <puts>
900094b4:	80000000 	or	r0, r0, r0
            resetUart(uart);
900094b8:	e8b30024 	lwi	r5, r19, 36
900094bc:	b9f40150 	brlid	r15, 336	// 9000960c <resetUart>
900094c0:	80000000 	or	r0, r0, r0
            runAgain                 = false;
900094c4:	f8130020 	swi	r0, r19, 32
            uart->errorCheck.running = false;
900094c8:	e8730024 	lwi	r3, r19, 36
900094cc:	f8035578 	swi	r0, r3, 21880
        }
    }
    exitCriticalRegion(crdata);
900094d0:	e8b3001c 	lwi	r5, r19, 28
900094d4:	b9f46b64 	brlid	r15, 27492	// 90010038 <exitCriticalRegion>
900094d8:	80000000 	or	r0, r0, r0
    
    return runAgain;
900094dc:	e8730020 	lwi	r3, r19, 32
}
900094e0:	e9e10000 	lwi	r15, r1, 0
900094e4:	10330000 	addk	r1, r19, r0
900094e8:	ea610028 	lwi	r19, r1, 40
900094ec:	3021002c 	addik	r1, r1, 44
900094f0:	b60f0008 	rtsd	r15, 8
900094f4:	80000000 	or	r0, r0, r0

900094f8 <initUart>:



static void initUart(Uart* uart, SerialPort port, uint32 regsBaseAddr, uint8 interruptId)
{
900094f8:	3021ffdc 	addik	r1, r1, -36
900094fc:	f9e10000 	swi	r15, r1, 0
90009500:	fa610020 	swi	r19, r1, 32
90009504:	12610000 	addk	r19, r1, r0
90009508:	f8b30028 	swi	r5, r19, 40
9000950c:	f8d3002c 	swi	r6, r19, 44
90009510:	f8f30030 	swi	r7, r19, 48
90009514:	f1130034 	sbi	r8, r19, 52
    uart->regs               = (UartLiteRegs*)regsBaseAddr;
90009518:	e8930030 	lwi	r4, r19, 48
9000951c:	e8730028 	lwi	r3, r19, 40
90009520:	f8830000 	swi	r4, r3, 0
    uart->port               = port;
90009524:	e8930028 	lwi	r4, r19, 40
90009528:	e873002c 	lwi	r3, r19, 44
9000952c:	f8640004 	swi	r3, r4, 4
    uart->rxSignal           = NULL;
90009530:	e8730028 	lwi	r3, r19, 40
90009534:	f8030414 	swi	r0, r3, 1044
    uart->interruptId        = interruptId;
90009538:	e8930028 	lwi	r4, r19, 40
9000953c:	e0730034 	lbui	r3, r19, 52
90009540:	f0640008 	sbi	r3, r4, 8
    uart->rxCount            = 0;
90009544:	e8730028 	lwi	r3, r19, 40
90009548:	f8030010 	swi	r0, r3, 16
    uart->rxState            = RxIdle;
9000954c:	e8730028 	lwi	r3, r19, 40
90009550:	f803000c 	swi	r0, r3, 12
    uart->txBuffer           = NULL;
90009554:	e8730028 	lwi	r3, r19, 40
90009558:	f8035558 	swi	r0, r3, 21848
    uart->txCount            = 0;
9000955c:	e8730028 	lwi	r3, r19, 40
90009560:	f8035574 	swi	r0, r3, 21876
    uart->errorCheck.running = false;
90009564:	e8730028 	lwi	r3, r19, 40
90009568:	f8035578 	swi	r0, r3, 21880
    
    initTxQueue(&uart->freeQueue);
9000956c:	e8730028 	lwi	r3, r19, 40
90009570:	3063555c 	addik	r3, r3, 21852
90009574:	10a30000 	addk	r5, r3, r0
90009578:	b9f40254 	brlid	r15, 596	// 900097cc <initTxQueue>
9000957c:	80000000 	or	r0, r0, r0
    initTxQueue(&uart->txQueue);
90009580:	e8730028 	lwi	r3, r19, 40
90009584:	30635568 	addik	r3, r3, 21864
90009588:	10a30000 	addk	r5, r3, r0
9000958c:	b9f40240 	brlid	r15, 576	// 900097cc <initTxQueue>
90009590:	80000000 	or	r0, r0, r0
    
    unsigned i;
    for(i = 0; i < TX_BUFFER_COUNT; ++i)
90009594:	f813001c 	swi	r0, r19, 28
90009598:	b8000040 	bri	64		// 900095d8
    {
        enqueueTxBuffer(&uart->freeQueue, &uart->txBuffers[i]);
9000959c:	e8730028 	lwi	r3, r19, 40
900095a0:	30c3555c 	addik	r6, r3, 21852
900095a4:	e8730028 	lwi	r3, r19, 40
900095a8:	30a30418 	addik	r5, r3, 1048
900095ac:	e893001c 	lwi	r4, r19, 28
900095b0:	30600410 	addik	r3, r0, 1040
900095b4:	40641800 	mul	r3, r4, r3
900095b8:	10651800 	addk	r3, r5, r3
900095bc:	10a60000 	addk	r5, r6, r0
900095c0:	10c30000 	addk	r6, r3, r0
900095c4:	b9f4034c 	brlid	r15, 844	// 90009910 <enqueueTxBuffer>
900095c8:	80000000 	or	r0, r0, r0
900095cc:	e873001c 	lwi	r3, r19, 28
900095d0:	30630001 	addik	r3, r3, 1
900095d4:	f873001c 	swi	r3, r19, 28
900095d8:	e873001c 	lwi	r3, r19, 28
900095dc:	22400013 	addi	r18, r0, 19
900095e0:	16439003 	cmpu	r18, r3, r18
900095e4:	bcb2ffb8 	bgei	r18, -72		// 9000959c
    }
    
    resetUart(uart);
900095e8:	e8b30028 	lwi	r5, r19, 40
900095ec:	b9f40020 	brlid	r15, 32	// 9000960c <resetUart>
900095f0:	80000000 	or	r0, r0, r0
}
900095f4:	e9e10000 	lwi	r15, r1, 0
900095f8:	10330000 	addk	r1, r19, r0
900095fc:	ea610020 	lwi	r19, r1, 32
90009600:	30210024 	addik	r1, r1, 36
90009604:	b60f0008 	rtsd	r15, 8
90009608:	80000000 	or	r0, r0, r0

9000960c <resetUart>:



static void resetUart(Uart* uart)
{
9000960c:	3021ffdc 	addik	r1, r1, -36
90009610:	f9e10000 	swi	r15, r1, 0
90009614:	fa610020 	swi	r19, r1, 32
90009618:	12610000 	addk	r19, r1, r0
9000961c:	f8b30028 	swi	r5, r19, 40
    ASSERT(uart);
90009620:	e8730028 	lwi	r3, r19, 40
90009624:	bc230028 	bnei	r3, 40		// 9000964c
90009628:	94110002 	msrclr	r0, 2
9000962c:	b0009002 	imm	-28670
90009630:	30a018c4 	addik	r5, r0, 6340
90009634:	b0009002 	imm	-28670
90009638:	30c0182c 	addik	r6, r0, 6188
9000963c:	30e0014e 	addik	r7, r0, 334
90009640:	b9f42de4 	brlid	r15, 11748	// 9000c424 <printAssert>
90009644:	80000000 	or	r0, r0, r0
90009648:	b8000000 	bri	0		// 90009648
    
    CRData crdata = enterCriticalRegion();
9000964c:	b9f469ac 	brlid	r15, 27052	// 9000fff8 <enterCriticalRegion>
90009650:	80000000 	or	r0, r0, r0
90009654:	f873001c 	swi	r3, r19, 28
    {
        uart->rxCount = 0;
90009658:	e8730028 	lwi	r3, r19, 40
9000965c:	f8030010 	swi	r0, r3, 16
        uart->rxState = RxIdle;
90009660:	e8730028 	lwi	r3, r19, 40
90009664:	f803000c 	swi	r0, r3, 12
        
        if(uart->txBuffer)
90009668:	e8730028 	lwi	r3, r19, 40
9000966c:	e8635558 	lwi	r3, r3, 21848
90009670:	bc03002c 	beqi	r3, 44		// 9000969c
        {
            enqueueTxBuffer(&uart->freeQueue, uart->txBuffer);
90009674:	e8730028 	lwi	r3, r19, 40
90009678:	3083555c 	addik	r4, r3, 21852
9000967c:	e8730028 	lwi	r3, r19, 40
90009680:	e8635558 	lwi	r3, r3, 21848
90009684:	10a40000 	addk	r5, r4, r0
90009688:	10c30000 	addk	r6, r3, r0
9000968c:	b9f40284 	brlid	r15, 644	// 90009910 <enqueueTxBuffer>
90009690:	80000000 	or	r0, r0, r0
            uart->txBuffer  = NULL;
90009694:	e8730028 	lwi	r3, r19, 40
90009698:	f8035558 	swi	r0, r3, 21848
        }

        uart->regs->controlReg = CTRL_RST_TX_FIFO_MASK |
9000969c:	e8730028 	lwi	r3, r19, 40
900096a0:	e8830000 	lwi	r4, r3, 0
900096a4:	30600013 	addik	r3, r0, 19
900096a8:	f864000c 	swi	r3, r4, 12
                                 CTRL_RST_RX_FIFO_MASK |
                                 CTRL_ENABLE_INTR_MASK;
    }
    exitCriticalRegion(crdata);
900096ac:	e8b3001c 	lwi	r5, r19, 28
900096b0:	b9f46988 	brlid	r15, 27016	// 90010038 <exitCriticalRegion>
900096b4:	80000000 	or	r0, r0, r0
    
    updateTxFifo(uart);
900096b8:	e8b30028 	lwi	r5, r19, 40
900096bc:	b9f40348 	brlid	r15, 840	// 90009a04 <updateTxFifo>
900096c0:	80000000 	or	r0, r0, r0
}
900096c4:	e9e10000 	lwi	r15, r1, 0
900096c8:	10330000 	addk	r1, r19, r0
900096cc:	ea610020 	lwi	r19, r1, 32
900096d0:	30210024 	addik	r1, r1, 36
900096d4:	b60f0008 	rtsd	r15, 8
900096d8:	80000000 	or	r0, r0, r0

900096dc <getUart>:



static Uart* getUart(SerialPort port)
{
900096dc:	3021ffdc 	addik	r1, r1, -36
900096e0:	f9e10000 	swi	r15, r1, 0
900096e4:	fa610020 	swi	r19, r1, 32
900096e8:	12610000 	addk	r19, r1, r0
900096ec:	f8b30028 	swi	r5, r19, 40
    switch(port)
900096f0:	e8730028 	lwi	r3, r19, 40
900096f4:	bc030008 	beqi	r3, 8		// 900096fc
900096f8:	b8000014 	bri	20		// 9000970c
    {
        case SBC_SERIAL_PORT:
            return &serialData.sbcUart;
900096fc:	b0009002 	imm	-28670
90009700:	30605088 	addik	r3, r0, 20616
90009704:	f873001c 	swi	r3, r19, 28
90009708:	b8000028 	bri	40		// 90009730

        default:
            //Error: invalid port specified
            ASSERT(false);
9000970c:	94110002 	msrclr	r0, 2
90009710:	b0009002 	imm	-28670
90009714:	30a018cc 	addik	r5, r0, 6348
90009718:	b0009002 	imm	-28670
9000971c:	30c0182c 	addik	r6, r0, 6188
90009720:	30e0016f 	addik	r7, r0, 367
90009724:	b9f42d00 	brlid	r15, 11520	// 9000c424 <printAssert>
90009728:	80000000 	or	r0, r0, r0
9000972c:	b8000000 	bri	0		// 9000972c
    }

    return NULL;
}
90009730:	e873001c 	lwi	r3, r19, 28
90009734:	e9e10000 	lwi	r15, r1, 0
90009738:	10330000 	addk	r1, r19, r0
9000973c:	ea610020 	lwi	r19, r1, 32
90009740:	30210024 	addik	r1, r1, 36
90009744:	b60f0008 	rtsd	r15, 8
90009748:	80000000 	or	r0, r0, r0

9000974c <disableUartInterrupts>:



static void disableUartInterrupts(Uart* uart)
{
9000974c:	3021ffe0 	addik	r1, r1, -32
90009750:	f9e10000 	swi	r15, r1, 0
90009754:	fa61001c 	swi	r19, r1, 28
90009758:	12610000 	addk	r19, r1, r0
9000975c:	f8b30024 	swi	r5, r19, 36
    disableInterrupt(uart->interruptId);
90009760:	e8730024 	lwi	r3, r19, 36
90009764:	e0630008 	lbui	r3, r3, 8
90009768:	10a30000 	addk	r5, r3, r0
9000976c:	b9f46118 	brlid	r15, 24856	// 9000f884 <disableInterrupt>
90009770:	80000000 	or	r0, r0, r0
}
90009774:	e9e10000 	lwi	r15, r1, 0
90009778:	10330000 	addk	r1, r19, r0
9000977c:	ea61001c 	lwi	r19, r1, 28
90009780:	30210020 	addik	r1, r1, 32
90009784:	b60f0008 	rtsd	r15, 8
90009788:	80000000 	or	r0, r0, r0

9000978c <enableUartInterrupts>:



static void enableUartInterrupts(Uart* uart)
{
9000978c:	3021ffe0 	addik	r1, r1, -32
90009790:	f9e10000 	swi	r15, r1, 0
90009794:	fa61001c 	swi	r19, r1, 28
90009798:	12610000 	addk	r19, r1, r0
9000979c:	f8b30024 	swi	r5, r19, 36
    enableInterrupt(uart->interruptId);
900097a0:	e8730024 	lwi	r3, r19, 36
900097a4:	e0630008 	lbui	r3, r3, 8
900097a8:	10a30000 	addk	r5, r3, r0
900097ac:	b9f46098 	brlid	r15, 24728	// 9000f844 <enableInterrupt>
900097b0:	80000000 	or	r0, r0, r0
}
900097b4:	e9e10000 	lwi	r15, r1, 0
900097b8:	10330000 	addk	r1, r19, r0
900097bc:	ea61001c 	lwi	r19, r1, 28
900097c0:	30210020 	addik	r1, r1, 32
900097c4:	b60f0008 	rtsd	r15, 8
900097c8:	80000000 	or	r0, r0, r0

900097cc <initTxQueue>:




static void initTxQueue(TxQueue* queue)
{
900097cc:	3021ffe0 	addik	r1, r1, -32
900097d0:	f9e10000 	swi	r15, r1, 0
900097d4:	fa61001c 	swi	r19, r1, 28
900097d8:	12610000 	addk	r19, r1, r0
900097dc:	f8b30024 	swi	r5, r19, 36
    ASSERT(queue);
900097e0:	e8730024 	lwi	r3, r19, 36
900097e4:	bc230028 	bnei	r3, 40		// 9000980c
900097e8:	94110002 	msrclr	r0, 2
900097ec:	b0009002 	imm	-28670
900097f0:	30a018d4 	addik	r5, r0, 6356
900097f4:	b0009002 	imm	-28670
900097f8:	30c0182c 	addik	r6, r0, 6188
900097fc:	30e00188 	addik	r7, r0, 392
90009800:	b9f42c24 	brlid	r15, 11300	// 9000c424 <printAssert>
90009804:	80000000 	or	r0, r0, r0
90009808:	b8000000 	bri	0		// 90009808
    
    queue->head  = NULL;
9000980c:	e8730024 	lwi	r3, r19, 36
90009810:	f8030000 	swi	r0, r3, 0
    queue->tail  = NULL;
90009814:	e8730024 	lwi	r3, r19, 36
90009818:	f8030004 	swi	r0, r3, 4
    queue->count = 0;
9000981c:	e8730024 	lwi	r3, r19, 36
90009820:	f8030008 	swi	r0, r3, 8
}
90009824:	e9e10000 	lwi	r15, r1, 0
90009828:	10330000 	addk	r1, r19, r0
9000982c:	ea61001c 	lwi	r19, r1, 28
90009830:	30210020 	addik	r1, r1, 32
90009834:	b60f0008 	rtsd	r15, 8
90009838:	80000000 	or	r0, r0, r0

9000983c <dequeueTxBuffer>:



static TxBuffer* dequeueTxBuffer(TxQueue* queue)
{
9000983c:	3021ffd8 	addik	r1, r1, -40
90009840:	f9e10000 	swi	r15, r1, 0
90009844:	fa610024 	swi	r19, r1, 36
90009848:	12610000 	addk	r19, r1, r0
9000984c:	f8b3002c 	swi	r5, r19, 44
    ASSERT(queue);
90009850:	e873002c 	lwi	r3, r19, 44
90009854:	bc230028 	bnei	r3, 40		// 9000987c
90009858:	94110002 	msrclr	r0, 2
9000985c:	b0009002 	imm	-28670
90009860:	30a018d4 	addik	r5, r0, 6356
90009864:	b0009002 	imm	-28670
90009868:	30c0182c 	addik	r6, r0, 6188
9000986c:	30e00193 	addik	r7, r0, 403
90009870:	b9f42bb4 	brlid	r15, 11188	// 9000c424 <printAssert>
90009874:	80000000 	or	r0, r0, r0
90009878:	b8000000 	bri	0		// 90009878
    
    TxBuffer* buffer = NULL;
9000987c:	f8130020 	swi	r0, r19, 32
    
    CRData crdata = enterCriticalRegion();
90009880:	b9f46778 	brlid	r15, 26488	// 9000fff8 <enterCriticalRegion>
90009884:	80000000 	or	r0, r0, r0
90009888:	f873001c 	swi	r3, r19, 28
    {
        if(queue->head)
9000988c:	e873002c 	lwi	r3, r19, 44
90009890:	e8630000 	lwi	r3, r3, 0
90009894:	bc030054 	beqi	r3, 84		// 900098e8
        {
            buffer = queue->head;
90009898:	e873002c 	lwi	r3, r19, 44
9000989c:	e8630000 	lwi	r3, r3, 0
900098a0:	f8730020 	swi	r3, r19, 32
            queue->head = queue->head->next;
900098a4:	e873002c 	lwi	r3, r19, 44
900098a8:	e8630000 	lwi	r3, r3, 0
900098ac:	e883040c 	lwi	r4, r3, 1036
900098b0:	e873002c 	lwi	r3, r19, 44
900098b4:	f8830000 	swi	r4, r3, 0
            
            if(!queue->head)
900098b8:	e873002c 	lwi	r3, r19, 44
900098bc:	e8630000 	lwi	r3, r3, 0
900098c0:	bc23000c 	bnei	r3, 12		// 900098cc
            {
                queue->tail = NULL;
900098c4:	e873002c 	lwi	r3, r19, 44
900098c8:	f8030004 	swi	r0, r3, 4
            }
            
            buffer->next = NULL;
900098cc:	e8730020 	lwi	r3, r19, 32
900098d0:	f803040c 	swi	r0, r3, 1036
            --queue->count;
900098d4:	e873002c 	lwi	r3, r19, 44
900098d8:	e8630008 	lwi	r3, r3, 8
900098dc:	3083ffff 	addik	r4, r3, -1
900098e0:	e873002c 	lwi	r3, r19, 44
900098e4:	f8830008 	swi	r4, r3, 8
        }
    }
    exitCriticalRegion(crdata);
900098e8:	e8b3001c 	lwi	r5, r19, 28
900098ec:	b9f4674c 	brlid	r15, 26444	// 90010038 <exitCriticalRegion>
900098f0:	80000000 	or	r0, r0, r0
    
    return buffer;
900098f4:	e8730020 	lwi	r3, r19, 32
}
900098f8:	e9e10000 	lwi	r15, r1, 0
900098fc:	10330000 	addk	r1, r19, r0
90009900:	ea610024 	lwi	r19, r1, 36
90009904:	30210028 	addik	r1, r1, 40
90009908:	b60f0008 	rtsd	r15, 8
9000990c:	80000000 	or	r0, r0, r0

90009910 <enqueueTxBuffer>:



static void enqueueTxBuffer(TxQueue* queue, TxBuffer* buffer)
{
90009910:	3021ffdc 	addik	r1, r1, -36
90009914:	f9e10000 	swi	r15, r1, 0
90009918:	fa610020 	swi	r19, r1, 32
9000991c:	12610000 	addk	r19, r1, r0
90009920:	f8b30028 	swi	r5, r19, 40
90009924:	f8d3002c 	swi	r6, r19, 44
    ASSERT(queue);
90009928:	e8730028 	lwi	r3, r19, 40
9000992c:	bc230028 	bnei	r3, 40		// 90009954
90009930:	94110002 	msrclr	r0, 2
90009934:	b0009002 	imm	-28670
90009938:	30a018d4 	addik	r5, r0, 6356
9000993c:	b0009002 	imm	-28670
90009940:	30c0182c 	addik	r6, r0, 6188
90009944:	30e001b0 	addik	r7, r0, 432
90009948:	b9f42adc 	brlid	r15, 10972	// 9000c424 <printAssert>
9000994c:	80000000 	or	r0, r0, r0
90009950:	b8000000 	bri	0		// 90009950
    ASSERT(buffer);
90009954:	e873002c 	lwi	r3, r19, 44
90009958:	bc230028 	bnei	r3, 40		// 90009980
9000995c:	94110002 	msrclr	r0, 2
90009960:	b0009002 	imm	-28670
90009964:	30a018dc 	addik	r5, r0, 6364
90009968:	b0009002 	imm	-28670
9000996c:	30c0182c 	addik	r6, r0, 6188
90009970:	30e001b1 	addik	r7, r0, 433
90009974:	b9f42ab0 	brlid	r15, 10928	// 9000c424 <printAssert>
90009978:	80000000 	or	r0, r0, r0
9000997c:	b8000000 	bri	0		// 9000997c
    
    CRData crdata = enterCriticalRegion();
90009980:	b9f46678 	brlid	r15, 26232	// 9000fff8 <enterCriticalRegion>
90009984:	80000000 	or	r0, r0, r0
90009988:	f873001c 	swi	r3, r19, 28
    {
        buffer->next = NULL;
9000998c:	e873002c 	lwi	r3, r19, 44
90009990:	f803040c 	swi	r0, r3, 1036
        
        if(!queue->tail)
90009994:	e8730028 	lwi	r3, r19, 40
90009998:	e8630004 	lwi	r3, r3, 4
9000999c:	bc230014 	bnei	r3, 20		// 900099b0
        {
            queue->head = buffer;
900099a0:	e8930028 	lwi	r4, r19, 40
900099a4:	e873002c 	lwi	r3, r19, 44
900099a8:	f8640000 	swi	r3, r4, 0
900099ac:	b8000014 	bri	20		// 900099c0
        }
        else
        {
            queue->tail->next = buffer;
900099b0:	e8730028 	lwi	r3, r19, 40
900099b4:	e8830004 	lwi	r4, r3, 4
900099b8:	e873002c 	lwi	r3, r19, 44
900099bc:	f864040c 	swi	r3, r4, 1036
        }
        
        queue->tail = buffer;
900099c0:	e8930028 	lwi	r4, r19, 40
900099c4:	e873002c 	lwi	r3, r19, 44
900099c8:	f8640004 	swi	r3, r4, 4
        ++queue->count;
900099cc:	e8730028 	lwi	r3, r19, 40
900099d0:	e8630008 	lwi	r3, r3, 8
900099d4:	30830001 	addik	r4, r3, 1
900099d8:	e8730028 	lwi	r3, r19, 40
900099dc:	f8830008 	swi	r4, r3, 8
    }
    exitCriticalRegion(crdata);
900099e0:	e8b3001c 	lwi	r5, r19, 28
900099e4:	b9f46654 	brlid	r15, 26196	// 90010038 <exitCriticalRegion>
900099e8:	80000000 	or	r0, r0, r0
}
900099ec:	e9e10000 	lwi	r15, r1, 0
900099f0:	10330000 	addk	r1, r19, r0
900099f4:	ea610020 	lwi	r19, r1, 32
900099f8:	30210024 	addik	r1, r1, 36
900099fc:	b60f0008 	rtsd	r15, 8
90009a00:	80000000 	or	r0, r0, r0

90009a04 <updateTxFifo>:



static void updateTxFifo(Uart* uart)
{
90009a04:	3021ffdc 	addik	r1, r1, -36
90009a08:	f9e10000 	swi	r15, r1, 0
90009a0c:	fa610020 	swi	r19, r1, 32
90009a10:	12610000 	addk	r19, r1, r0
90009a14:	f8b30028 	swi	r5, r19, 40
    CRData crdata = enterCriticalRegion();
90009a18:	b9f465e0 	brlid	r15, 26080	// 9000fff8 <enterCriticalRegion>
90009a1c:	80000000 	or	r0, r0, r0
90009a20:	f873001c 	swi	r3, r19, 28
    {
        while(!(uart->regs->statusReg & STATUS_TX_FIFO_FULL_MASK))
90009a24:	b80000d0 	bri	208		// 90009af4
        {
            if(!uart->txBuffer)
90009a28:	e8730028 	lwi	r3, r19, 40
90009a2c:	e8635558 	lwi	r3, r3, 21848
90009a30:	bc230044 	bnei	r3, 68		// 90009a74
            {
                uart->txBuffer = dequeueTxBuffer(&uart->txQueue);
90009a34:	e8730028 	lwi	r3, r19, 40
90009a38:	30635568 	addik	r3, r3, 21864
90009a3c:	10a30000 	addk	r5, r3, r0
90009a40:	b9f4fdfc 	brlid	r15, -516	// 9000983c <dequeueTxBuffer>
90009a44:	80000000 	or	r0, r0, r0
90009a48:	10830000 	addk	r4, r3, r0
90009a4c:	e8730028 	lwi	r3, r19, 40
90009a50:	f8835558 	swi	r4, r3, 21848
                
                if(!uart->txBuffer)
90009a54:	e8730028 	lwi	r3, r19, 40
90009a58:	e8635558 	lwi	r3, r3, 21848
90009a5c:	bc0300ac 	beqi	r3, 172		// 90009b08
                {
                    break;
                }
                
                uart->txBuffer->dataPtr = uart->txBuffer->data;
90009a60:	e8730028 	lwi	r3, r19, 40
90009a64:	e8835558 	lwi	r4, r3, 21848
90009a68:	e8730028 	lwi	r3, r19, 40
90009a6c:	e8635558 	lwi	r3, r3, 21848
90009a70:	f8640404 	swi	r3, r4, 1028
            }

            if(!uart->txBuffer->count)
90009a74:	e8730028 	lwi	r3, r19, 40
90009a78:	e8635558 	lwi	r3, r3, 21848
90009a7c:	e8630408 	lwi	r3, r3, 1032
90009a80:	bc230030 	bnei	r3, 48		// 90009ab0
            {
                enqueueTxBuffer(&uart->freeQueue, uart->txBuffer);
90009a84:	e8730028 	lwi	r3, r19, 40
90009a88:	3083555c 	addik	r4, r3, 21852
90009a8c:	e8730028 	lwi	r3, r19, 40
90009a90:	e8635558 	lwi	r3, r3, 21848
90009a94:	10a40000 	addk	r5, r4, r0
90009a98:	10c30000 	addk	r6, r3, r0
90009a9c:	b9f4fe74 	brlid	r15, -396	// 90009910 <enqueueTxBuffer>
90009aa0:	80000000 	or	r0, r0, r0
                uart->txBuffer = NULL;
90009aa4:	e8730028 	lwi	r3, r19, 40
90009aa8:	f8035558 	swi	r0, r3, 21848
                continue;
90009aac:	b8000048 	bri	72		// 90009af4
            }

            uart->regs->txFifoReg = *uart->txBuffer->dataPtr;
90009ab0:	e8730028 	lwi	r3, r19, 40
90009ab4:	e8830000 	lwi	r4, r3, 0
90009ab8:	e8730028 	lwi	r3, r19, 40
90009abc:	e8635558 	lwi	r3, r3, 21848
90009ac0:	e8630404 	lwi	r3, r3, 1028
90009ac4:	e0630000 	lbui	r3, r3, 0
90009ac8:	f8640004 	swi	r3, r4, 4
            ++uart->txBuffer->dataPtr;
90009acc:	e8730028 	lwi	r3, r19, 40
90009ad0:	e8835558 	lwi	r4, r3, 21848
90009ad4:	e8640404 	lwi	r3, r4, 1028
90009ad8:	30630001 	addik	r3, r3, 1
90009adc:	f8640404 	swi	r3, r4, 1028
            --uart->txBuffer->count;
90009ae0:	e8730028 	lwi	r3, r19, 40
90009ae4:	e8835558 	lwi	r4, r3, 21848
90009ae8:	e8640408 	lwi	r3, r4, 1032
90009aec:	3063ffff 	addik	r3, r3, -1
90009af0:	f8640408 	swi	r3, r4, 1032
90009af4:	e8730028 	lwi	r3, r19, 40
90009af8:	e8630000 	lwi	r3, r3, 0
90009afc:	e8630008 	lwi	r3, r3, 8
90009b00:	a4630008 	andi	r3, r3, 8
90009b04:	bc03ff24 	beqi	r3, -220		// 90009a28
        }
    }
    exitCriticalRegion(crdata);
90009b08:	e8b3001c 	lwi	r5, r19, 28
90009b0c:	b9f4652c 	brlid	r15, 25900	// 90010038 <exitCriticalRegion>
90009b10:	80000000 	or	r0, r0, r0
}
90009b14:	e9e10000 	lwi	r15, r1, 0
90009b18:	10330000 	addk	r1, r19, r0
90009b1c:	ea610020 	lwi	r19, r1, 32
90009b20:	30210024 	addik	r1, r1, 36
90009b24:	b60f0008 	rtsd	r15, 8
90009b28:	80000000 	or	r0, r0, r0

90009b2c <uartInterruptHandler>:



static void uartInterruptHandler(void* callBackRef)
{
90009b2c:	3021ffd8 	addik	r1, r1, -40
90009b30:	f9e10000 	swi	r15, r1, 0
90009b34:	fa610024 	swi	r19, r1, 36
90009b38:	12610000 	addk	r19, r1, r0
90009b3c:	f8b3002c 	swi	r5, r19, 44
    ASSERT(callBackRef);
90009b40:	e873002c 	lwi	r3, r19, 44
90009b44:	bc230028 	bnei	r3, 40		// 90009b6c
90009b48:	94110002 	msrclr	r0, 2
90009b4c:	b0009002 	imm	-28670
90009b50:	30a018e4 	addik	r5, r0, 6372
90009b54:	b0009002 	imm	-28670
90009b58:	30c0182c 	addik	r6, r0, 6188
90009b5c:	30e001ed 	addik	r7, r0, 493
90009b60:	b9f428c4 	brlid	r15, 10436	// 9000c424 <printAssert>
90009b64:	80000000 	or	r0, r0, r0
90009b68:	b8000000 	bri	0		// 90009b68

    Uart* uart = (Uart*)callBackRef;
90009b6c:	e873002c 	lwi	r3, r19, 44
90009b70:	f8730020 	swi	r3, r19, 32
    uint32 status = uart->regs->statusReg;
90009b74:	e8730020 	lwi	r3, r19, 32
90009b78:	e8630000 	lwi	r3, r3, 0
90009b7c:	e8630008 	lwi	r3, r3, 8
90009b80:	f873001c 	swi	r3, r19, 28

    if(status & STATUS_TX_FIFO_EMPTY_MASK)
90009b84:	e873001c 	lwi	r3, r19, 28
90009b88:	a4630004 	andi	r3, r3, 4
90009b8c:	bc030010 	beqi	r3, 16		// 90009b9c
    {
        txHandler(uart);
90009b90:	e8b30020 	lwi	r5, r19, 32
90009b94:	b9f40174 	brlid	r15, 372	// 90009d08 <txHandler>
90009b98:	80000000 	or	r0, r0, r0
    }

    if(status & STATUS_RX_FIFO_VALID_DATA_MASK)
90009b9c:	e873001c 	lwi	r3, r19, 28
90009ba0:	a4630001 	andi	r3, r3, 1
90009ba4:	a46300ff 	andi	r3, r3, 255
90009ba8:	bc030010 	beqi	r3, 16		// 90009bb8
    {
        rxHandler(uart);
90009bac:	e8b30020 	lwi	r5, r19, 32
90009bb0:	b9f40020 	brlid	r15, 32	// 90009bd0 <rxHandler>
90009bb4:	80000000 	or	r0, r0, r0
    }

    // TODO: Handle other interrupts
    //    STATUS_RX_FIFO_FULL_MASK
    //    STATUS_TX_FIFO_FULL_MASK
    //    STATUS_INTR_ENABLED_MASK
    //    STATUS_OVERRUN_ERROR_MASK
    //    STATUS_FRAME_ERROR_MASK
    //    STATUS_PARITY_ERROR_MASK
}
90009bb8:	e9e10000 	lwi	r15, r1, 0
90009bbc:	10330000 	addk	r1, r19, r0
90009bc0:	ea610024 	lwi	r19, r1, 36
90009bc4:	30210028 	addik	r1, r1, 40
90009bc8:	b60f0008 	rtsd	r15, 8
90009bcc:	80000000 	or	r0, r0, r0

90009bd0 <rxHandler>:



static void rxHandler(Uart* uart)
{
90009bd0:	3021ffdc 	addik	r1, r1, -36
90009bd4:	f9e10000 	swi	r15, r1, 0
90009bd8:	fa610020 	swi	r19, r1, 32
90009bdc:	12610000 	addk	r19, r1, r0
90009be0:	f8b30028 	swi	r5, r19, 40
//    puts("RX Handler");
    while(uart->regs->statusReg & STATUS_RX_FIFO_VALID_DATA_MASK)
90009be4:	b80000f4 	bri	244		// 90009cd8
    {
        uint8 byte = uart->regs->rxFifoReg;
90009be8:	e8730028 	lwi	r3, r19, 40
90009bec:	e8630000 	lwi	r3, r3, 0
90009bf0:	e8630000 	lwi	r3, r3, 0
90009bf4:	f073001c 	sbi	r3, r19, 28

        if(uart->rxState == RxIdle)
90009bf8:	e8730028 	lwi	r3, r19, 40
90009bfc:	e863000c 	lwi	r3, r3, 12
90009c00:	bc230028 	bnei	r3, 40		// 90009c28
        {
            if(byte == FRAME_START_CHAR)
90009c04:	e073001c 	lbui	r3, r19, 28
90009c08:	aa43005b 	xori	r18, r3, 91
90009c0c:	bc3200cc 	bnei	r18, 204		// 90009cd8
            {
                // Pkt start detected
                uart->rxCount = 0;
90009c10:	e8730028 	lwi	r3, r19, 40
90009c14:	f8030010 	swi	r0, r3, 16
                uart->rxState = RxInProgress;
90009c18:	e8930028 	lwi	r4, r19, 40
90009c1c:	30600001 	addik	r3, r0, 1
90009c20:	f864000c 	swi	r3, r4, 12
90009c24:	b80000b4 	bri	180		// 90009cd8
            }
            // Else - no start of pkt - ignore
        }
        else if(uart->rxState == RxInProgress)
90009c28:	e8730028 	lwi	r3, r19, 40
90009c2c:	e863000c 	lwi	r3, r3, 12
90009c30:	aa430001 	xori	r18, r3, 1
90009c34:	bc3200a4 	bnei	r18, 164		// 90009cd8
        {
            if(byte == FRAME_START_CHAR)
90009c38:	e073001c 	lbui	r3, r19, 28
90009c3c:	aa43005b 	xori	r18, r3, 91
90009c40:	bc320010 	bnei	r18, 16		// 90009c50
            {
                // Restart detected - clear pkt and start over
                uart->rxCount = 0;
90009c44:	e8730028 	lwi	r3, r19, 40
90009c48:	f8030010 	swi	r0, r3, 16
90009c4c:	b800008c 	bri	140		// 90009cd8
            }
            else if(byte == FRAME_END_CHAR)
90009c50:	e073001c 	lbui	r3, r19, 28
90009c54:	aa43005d 	xori	r18, r3, 93
90009c58:	bc320048 	bnei	r18, 72		// 90009ca0
            {
                // End of pkt detected
                uart->rxState = RxComplete;
90009c5c:	e8930028 	lwi	r4, r19, 40
90009c60:	30600002 	addik	r3, r0, 2
90009c64:	f864000c 	swi	r3, r4, 12

                uart->rxBuffer[uart->rxCount] = 0; // Null terminate
90009c68:	e8730028 	lwi	r3, r19, 40
90009c6c:	e8830010 	lwi	r4, r3, 16
90009c70:	e8730028 	lwi	r3, r19, 40
90009c74:	10641800 	addk	r3, r4, r3
90009c78:	f0030014 	sbi	r0, r3, 20
                
                if(uart->rxSignal)
90009c7c:	e8730028 	lwi	r3, r19, 40
90009c80:	e8630414 	lwi	r3, r3, 1044
90009c84:	bc030054 	beqi	r3, 84		// 90009cd8
                {
                    setSignal(uart->rxSignal);
90009c88:	e8730028 	lwi	r3, r19, 40
90009c8c:	e8630414 	lwi	r3, r3, 1044
90009c90:	10a30000 	addk	r5, r3, r0
90009c94:	b9f4019c 	brlid	r15, 412	// 90009e30 <setSignal>
90009c98:	80000000 	or	r0, r0, r0
90009c9c:	b800003c 	bri	60		// 90009cd8
                }
            }
            else
            {
                // Pkt byte
                if(uart->rxCount < RX_BUFFER_SIZE)
90009ca0:	e8730028 	lwi	r3, r19, 40
90009ca4:	e8630010 	lwi	r3, r3, 16
90009ca8:	224003ff 	addi	r18, r0, 1023
90009cac:	16439003 	cmpu	r18, r3, r18
90009cb0:	bc520028 	blti	r18, 40		// 90009cd8
                {
                    uart->rxBuffer[uart->rxCount++] = byte;
90009cb4:	e8730028 	lwi	r3, r19, 40
90009cb8:	e8a30010 	lwi	r5, r3, 16
90009cbc:	e8730028 	lwi	r3, r19, 40
90009cc0:	10851800 	addk	r4, r5, r3
90009cc4:	e073001c 	lbui	r3, r19, 28
90009cc8:	f0640014 	sbi	r3, r4, 20
90009ccc:	30850001 	addik	r4, r5, 1
90009cd0:	e8730028 	lwi	r3, r19, 40
90009cd4:	f8830010 	swi	r4, r3, 16
90009cd8:	e8730028 	lwi	r3, r19, 40
90009cdc:	e8630000 	lwi	r3, r3, 0
90009ce0:	e8630008 	lwi	r3, r3, 8
90009ce4:	a4630001 	andi	r3, r3, 1
90009ce8:	a46300ff 	andi	r3, r3, 255
90009cec:	bc23fefc 	bnei	r3, -260		// 90009be8
                }
                // else - buffer full - drop data
            }
        }
        // else - uart->rxByte == RxComplete -- ignore data
    }
}
90009cf0:	e9e10000 	lwi	r15, r1, 0
90009cf4:	10330000 	addk	r1, r19, r0
90009cf8:	ea610020 	lwi	r19, r1, 32
90009cfc:	30210024 	addik	r1, r1, 36
90009d00:	b60f0008 	rtsd	r15, 8
90009d04:	80000000 	or	r0, r0, r0

90009d08 <txHandler>:



static void txHandler(Uart* uart)
{
90009d08:	3021ffe0 	addik	r1, r1, -32
90009d0c:	f9e10000 	swi	r15, r1, 0
90009d10:	fa61001c 	swi	r19, r1, 28
90009d14:	12610000 	addk	r19, r1, r0
90009d18:	f8b30024 	swi	r5, r19, 36
    updateTxFifo(uart);
90009d1c:	e8b30024 	lwi	r5, r19, 36
90009d20:	b9f4fce4 	brlid	r15, -796	// 90009a04 <updateTxFifo>
90009d24:	80000000 	or	r0, r0, r0
}
90009d28:	e9e10000 	lwi	r15, r1, 0
90009d2c:	10330000 	addk	r1, r19, r0
90009d30:	ea61001c 	lwi	r19, r1, 28
90009d34:	30210020 	addik	r1, r1, 32
90009d38:	b60f0008 	rtsd	r15, 8
90009d3c:	80000000 	or	r0, r0, r0

90009d40 <initSignal>:
///////////////////////////////////////////////////
// Interface functions

void initSignal(Signal* signal, uint32 initialCount, uint32 maxCount)
{
90009d40:	3021ffdc 	addik	r1, r1, -36
90009d44:	f9e10000 	swi	r15, r1, 0
90009d48:	fa610020 	swi	r19, r1, 32
90009d4c:	12610000 	addk	r19, r1, r0
90009d50:	f8b30028 	swi	r5, r19, 40
90009d54:	f8d3002c 	swi	r6, r19, 44
90009d58:	f8f30030 	swi	r7, r19, 48
    ASSERT(signal);
90009d5c:	e8730028 	lwi	r3, r19, 40
90009d60:	bc230028 	bnei	r3, 40		// 90009d88
90009d64:	94110002 	msrclr	r0, 2
90009d68:	b0009002 	imm	-28670
90009d6c:	30a018f0 	addik	r5, r0, 6384
90009d70:	b0009002 	imm	-28670
90009d74:	30c018f8 	addik	r6, r0, 6392
90009d78:	30e00019 	addik	r7, r0, 25
90009d7c:	b9f426a8 	brlid	r15, 9896	// 9000c424 <printAssert>
90009d80:	80000000 	or	r0, r0, r0
90009d84:	b8000000 	bri	0		// 90009d84
    ASSERT(maxCount > 0);
90009d88:	e8730030 	lwi	r3, r19, 48
90009d8c:	bc230028 	bnei	r3, 40		// 90009db4
90009d90:	94110002 	msrclr	r0, 2
90009d94:	b0009002 	imm	-28670
90009d98:	30a01908 	addik	r5, r0, 6408
90009d9c:	b0009002 	imm	-28670
90009da0:	30c018f8 	addik	r6, r0, 6392
90009da4:	30e0001a 	addik	r7, r0, 26
90009da8:	b9f4267c 	brlid	r15, 9852	// 9000c424 <printAssert>
90009dac:	80000000 	or	r0, r0, r0
90009db0:	b8000000 	bri	0		// 90009db0
    ASSERT(initialCount <= maxCount);
90009db4:	e893002c 	lwi	r4, r19, 44
90009db8:	e8730030 	lwi	r3, r19, 48
90009dbc:	16441803 	cmpu	r18, r4, r3
90009dc0:	bcb20028 	bgei	r18, 40		// 90009de8
90009dc4:	94110002 	msrclr	r0, 2
90009dc8:	b0009002 	imm	-28670
90009dcc:	30a01918 	addik	r5, r0, 6424
90009dd0:	b0009002 	imm	-28670
90009dd4:	30c018f8 	addik	r6, r0, 6392
90009dd8:	30e0001b 	addik	r7, r0, 27
90009ddc:	b9f42648 	brlid	r15, 9800	// 9000c424 <printAssert>
90009de0:	80000000 	or	r0, r0, r0
90009de4:	b8000000 	bri	0		// 90009de4

    CRData crdata = enterCriticalRegion();
90009de8:	b9f46210 	brlid	r15, 25104	// 9000fff8 <enterCriticalRegion>
90009dec:	80000000 	or	r0, r0, r0
90009df0:	f873001c 	swi	r3, r19, 28
    {
        signal->count    = initialCount;
90009df4:	e8930028 	lwi	r4, r19, 40
90009df8:	e873002c 	lwi	r3, r19, 44
90009dfc:	f8640000 	swi	r3, r4, 0
        signal->maxCount = maxCount;
90009e00:	e8930028 	lwi	r4, r19, 40
90009e04:	e8730030 	lwi	r3, r19, 48
90009e08:	f8640004 	swi	r3, r4, 4
    }
    exitCriticalRegion(crdata);
90009e0c:	e8b3001c 	lwi	r5, r19, 28
90009e10:	b9f46228 	brlid	r15, 25128	// 90010038 <exitCriticalRegion>
90009e14:	80000000 	or	r0, r0, r0
}
90009e18:	e9e10000 	lwi	r15, r1, 0
90009e1c:	10330000 	addk	r1, r19, r0
90009e20:	ea610020 	lwi	r19, r1, 32
90009e24:	30210024 	addik	r1, r1, 36
90009e28:	b60f0008 	rtsd	r15, 8
90009e2c:	80000000 	or	r0, r0, r0

90009e30 <setSignal>:



void setSignal(Signal* signal)
{
90009e30:	3021ffdc 	addik	r1, r1, -36
90009e34:	f9e10000 	swi	r15, r1, 0
90009e38:	fa610020 	swi	r19, r1, 32
90009e3c:	12610000 	addk	r19, r1, r0
90009e40:	f8b30028 	swi	r5, r19, 40
    ASSERT(signal);
90009e44:	e8730028 	lwi	r3, r19, 40
90009e48:	bc230028 	bnei	r3, 40		// 90009e70
90009e4c:	94110002 	msrclr	r0, 2
90009e50:	b0009002 	imm	-28670
90009e54:	30a018f0 	addik	r5, r0, 6384
90009e58:	b0009002 	imm	-28670
90009e5c:	30c018f8 	addik	r6, r0, 6392
90009e60:	30e00029 	addik	r7, r0, 41
90009e64:	b9f425c0 	brlid	r15, 9664	// 9000c424 <printAssert>
90009e68:	80000000 	or	r0, r0, r0
90009e6c:	b8000000 	bri	0		// 90009e6c

    CRData crdata = enterCriticalRegion();
90009e70:	b9f46188 	brlid	r15, 24968	// 9000fff8 <enterCriticalRegion>
90009e74:	80000000 	or	r0, r0, r0
90009e78:	f873001c 	swi	r3, r19, 28
    {
        if(signal->count < signal->maxCount)
90009e7c:	e8730028 	lwi	r3, r19, 40
90009e80:	e8830000 	lwi	r4, r3, 0
90009e84:	e8730028 	lwi	r3, r19, 40
90009e88:	e8630004 	lwi	r3, r3, 4
90009e8c:	16432003 	cmpu	r18, r3, r4
90009e90:	bcb20018 	bgei	r18, 24		// 90009ea8
        {
            signal->count++;
90009e94:	e8730028 	lwi	r3, r19, 40
90009e98:	e8630000 	lwi	r3, r3, 0
90009e9c:	30830001 	addik	r4, r3, 1
90009ea0:	e8730028 	lwi	r3, r19, 40
90009ea4:	f8830000 	swi	r4, r3, 0
        }
    }
    exitCriticalRegion(crdata);
90009ea8:	e8b3001c 	lwi	r5, r19, 28
90009eac:	b9f4618c 	brlid	r15, 24972	// 90010038 <exitCriticalRegion>
90009eb0:	80000000 	or	r0, r0, r0
}
90009eb4:	e9e10000 	lwi	r15, r1, 0
90009eb8:	10330000 	addk	r1, r19, r0
90009ebc:	ea610020 	lwi	r19, r1, 32
90009ec0:	30210024 	addik	r1, r1, 36
90009ec4:	b60f0008 	rtsd	r15, 8
90009ec8:	80000000 	or	r0, r0, r0

90009ecc <getSignal>:



bool getSignal(Signal* signal)
{
90009ecc:	3021ffd8 	addik	r1, r1, -40
90009ed0:	f9e10000 	swi	r15, r1, 0
90009ed4:	fa610024 	swi	r19, r1, 36
90009ed8:	12610000 	addk	r19, r1, r0
90009edc:	f8b3002c 	swi	r5, r19, 44
    ASSERT(signal);
90009ee0:	e873002c 	lwi	r3, r19, 44
90009ee4:	bc230028 	bnei	r3, 40		// 90009f0c
90009ee8:	94110002 	msrclr	r0, 2
90009eec:	b0009002 	imm	-28670
90009ef0:	30a018f0 	addik	r5, r0, 6384
90009ef4:	b0009002 	imm	-28670
90009ef8:	30c018f8 	addik	r6, r0, 6392
90009efc:	30e00039 	addik	r7, r0, 57
90009f00:	b9f42524 	brlid	r15, 9508	// 9000c424 <printAssert>
90009f04:	80000000 	or	r0, r0, r0
90009f08:	b8000000 	bri	0		// 90009f08

    bool signaled = false;
90009f0c:	f8130020 	swi	r0, r19, 32

    CRData crdata = enterCriticalRegion();
90009f10:	b9f460e8 	brlid	r15, 24808	// 9000fff8 <enterCriticalRegion>
90009f14:	80000000 	or	r0, r0, r0
90009f18:	f873001c 	swi	r3, r19, 28
    {
        if(signal->count)
90009f1c:	e873002c 	lwi	r3, r19, 44
90009f20:	e8630000 	lwi	r3, r3, 0
90009f24:	bc030020 	beqi	r3, 32		// 90009f44
        {
            signal->count--;
90009f28:	e873002c 	lwi	r3, r19, 44
90009f2c:	e8630000 	lwi	r3, r3, 0
90009f30:	3083ffff 	addik	r4, r3, -1
90009f34:	e873002c 	lwi	r3, r19, 44
90009f38:	f8830000 	swi	r4, r3, 0
            signaled = true;
90009f3c:	30600001 	addik	r3, r0, 1
90009f40:	f8730020 	swi	r3, r19, 32
        }
    }
    exitCriticalRegion(crdata);
90009f44:	e8b3001c 	lwi	r5, r19, 28
90009f48:	b9f460f0 	brlid	r15, 24816	// 90010038 <exitCriticalRegion>
90009f4c:	80000000 	or	r0, r0, r0

    return signaled;
90009f50:	e8730020 	lwi	r3, r19, 32
}
90009f54:	e9e10000 	lwi	r15, r1, 0
90009f58:	10330000 	addk	r1, r19, r0
90009f5c:	ea610024 	lwi	r19, r1, 36
90009f60:	30210028 	addik	r1, r1, 40
90009f64:	b60f0008 	rtsd	r15, 8
90009f68:	80000000 	or	r0, r0, r0

90009f6c <systemStartup>:
///////////////////////////////////////////////////
// Interface functions

void systemStartup()
{
90009f6c:	3021ffe0 	addik	r1, r1, -32
90009f70:	f9e10000 	swi	r15, r1, 0
90009f74:	fa61001c 	swi	r19, r1, 28
90009f78:	12610000 	addk	r19, r1, r0
    disableInterrupts();
90009f7c:	94110002 	msrclr	r0, 2

    SYSTEM.bootloaderLED = LED_OFF;
90009f80:	b000c540 	imm	-15040
90009f84:	30600000 	addik	r3, r0, 0
90009f88:	f8030004 	swi	r0, r3, 4
    SYSTEM.heartbeatLED  = LED_ON;
90009f8c:	b000c540 	imm	-15040
90009f90:	30800000 	addik	r4, r0, 0
90009f94:	30600001 	addik	r3, r0, 1
90009f98:	f8640008 	swi	r3, r4, 8
    SYSTEM.activityLED   = LED_ON;
90009f9c:	b000c540 	imm	-15040
90009fa0:	30800000 	addik	r4, r0, 0
90009fa4:	30600001 	addik	r3, r0, 1
90009fa8:	f864000c 	swi	r3, r4, 12

    printf("\n\n");
90009fac:	b0009002 	imm	-28670
90009fb0:	30a01934 	addik	r5, r0, 6452
90009fb4:	b9f45f84 	brlid	r15, 24452	// 9000ff38 <puts>
90009fb8:	80000000 	or	r0, r0, r0
    printf("-------------------------------------------\n");
90009fbc:	b0009002 	imm	-28670
90009fc0:	30a01938 	addik	r5, r0, 6456
90009fc4:	b9f45f74 	brlid	r15, 24436	// 9000ff38 <puts>
90009fc8:	80000000 	or	r0, r0, r0
    printf("   Plate Cycler App Firmware\n");
90009fcc:	b0009002 	imm	-28670
90009fd0:	30a01964 	addik	r5, r0, 6500
90009fd4:	b9f45f64 	brlid	r15, 24420	// 9000ff38 <puts>
90009fd8:	80000000 	or	r0, r0, r0
    printf("     FPGA Version: %lu.%lu\n", FPGA_MAJOR_VER(), FPGA_MINOR_VER());
90009fdc:	b000c540 	imm	-15040
90009fe0:	30600000 	addik	r3, r0, 0
90009fe4:	e8630000 	lwi	r3, r3, 0
90009fe8:	b000ffff 	imm	-1
90009fec:	a4630000 	andi	r3, r3, 0
90009ff0:	64830010 	bsrli	r4, r3, 16
90009ff4:	b000c540 	imm	-15040
90009ff8:	30600000 	addik	r3, r0, 0
90009ffc:	e8630000 	lwi	r3, r3, 0
9000a000:	b0000000 	imm	0
9000a004:	a463ffff 	andi	r3, r3, -1
9000a008:	b0009002 	imm	-28670
9000a00c:	30a01984 	addik	r5, r0, 6532
9000a010:	10c40000 	addk	r6, r4, r0
9000a014:	10e30000 	addk	r7, r3, r0
9000a018:	b9f45e2c 	brlid	r15, 24108	// 9000fe44 <printf>
9000a01c:	80000000 	or	r0, r0, r0
    printf("     FW Version:   " FW_VER_APP "\n");
9000a020:	b0009002 	imm	-28670
9000a024:	30a019a0 	addik	r5, r0, 6560
9000a028:	b9f45f10 	brlid	r15, 24336	// 9000ff38 <puts>
9000a02c:	80000000 	or	r0, r0, r0
    printf("     Built:        " __DATE__ " " __TIME__ "\n");
9000a030:	b0009002 	imm	-28670
9000a034:	30a019b8 	addik	r5, r0, 6584
9000a038:	b9f45f00 	brlid	r15, 24320	// 9000ff38 <puts>
9000a03c:	80000000 	or	r0, r0, r0
    printf("-------------------------------------------\n\n");
9000a040:	b0009002 	imm	-28670
9000a044:	30a019e0 	addik	r5, r0, 6624
9000a048:	b9f45ef0 	brlid	r15, 24304	// 9000ff38 <puts>
9000a04c:	80000000 	or	r0, r0, r0

    // Pre-interrupt initialization
    cacheInit();
9000a050:	b000ffff 	imm	-1
9000a054:	b9f46158 	brlid	r15, 24920	// 900001ac <cacheInit>
9000a058:	80000000 	or	r0, r0, r0
    osInit();
9000a05c:	b9f4e920 	brlid	r15, -5856	// 9000897c <osInit>
9000a060:	80000000 	or	r0, r0, r0
    intcInit();
9000a064:	b9f456dc 	brlid	r15, 22236	// 9000f740 <intcInit>
9000a068:	80000000 	or	r0, r0, r0
    timerInit();
9000a06c:	b9f41d48 	brlid	r15, 7496	// 9000bdb4 <timerInit>
9000a070:	80000000 	or	r0, r0, r0
    lcdInit();
9000a074:	b9f45850 	brlid	r15, 22608	// 9000f8c4 <lcdInit>
9000a078:	80000000 	or	r0, r0, r0
    serialInit();
9000a07c:	b9f4ef48 	brlid	r15, -4280	// 90008fc4 <serialInit>
9000a080:	80000000 	or	r0, r0, r0
    commInit();
9000a084:	b000ffff 	imm	-1
9000a088:	b9f461ac 	brlid	r15, 25004	// 90000234 <commInit>
9000a08c:	80000000 	or	r0, r0, r0
    initializationInit();
9000a090:	b9f4980c 	brlid	r15, -26612	// 9000389c <initializationInit>
9000a094:	80000000 	or	r0, r0, r0

    // Enable interrupts
    enableInterrupts();
9000a098:	94100002 	msrset	r0, 2

    // Post-interrupt initialization
    serialFlashInit();
9000a09c:	b9f42430 	brlid	r15, 9264	// 9000c4cc <serialFlashInit>
9000a0a0:	80000000 	or	r0, r0, r0
    motionInit();
9000a0a4:	b9f49c8c 	brlid	r15, -25460	// 90003d30 <motionInit>
9000a0a8:	80000000 	or	r0, r0, r0
    InitializeAirCylinders();
9000a0ac:	b9f4ed78 	brlid	r15, -4744	// 90008e24 <InitializeAirCylinders>
9000a0b0:	80000000 	or	r0, r0, r0

    // Schedule Tasks
    scheduleTask(commProcess, NULL, false);
9000a0b4:	b0009000 	imm	-28672
9000a0b8:	30a002e8 	addik	r5, r0, 744
9000a0bc:	10c00000 	addk	r6, r0, r0
9000a0c0:	10e00000 	addk	r7, r0, r0
9000a0c4:	b9f4e9b8 	brlid	r15, -5704	// 90008a7c <scheduleTask>
9000a0c8:	80000000 	or	r0, r0, r0
    scheduleTask(motionProcess, NULL, false);
9000a0cc:	b0009000 	imm	-28672
9000a0d0:	30a04214 	addik	r5, r0, 16916
9000a0d4:	10c00000 	addk	r6, r0, r0
9000a0d8:	10e00000 	addk	r7, r0, r0
9000a0dc:	b9f4e9a0 	brlid	r15, -5728	// 90008a7c <scheduleTask>
9000a0e0:	80000000 	or	r0, r0, r0

    // Start Systems
    systemStart();
9000a0e4:	b9f4004c 	brlid	r15, 76	// 9000a130 <systemStart>
9000a0e8:	80000000 	or	r0, r0, r0

    printf("System Ready.\n");
9000a0ec:	b0009002 	imm	-28670
9000a0f0:	30a01a10 	addik	r5, r0, 6672
9000a0f4:	b9f45e44 	brlid	r15, 24132	// 9000ff38 <puts>
9000a0f8:	80000000 	or	r0, r0, r0

    sendLogMsg("FPGA Firmware version " FW_VER_APP " starting.");
9000a0fc:	b0009002 	imm	-28670
9000a100:	30a01a20 	addik	r5, r0, 6688
9000a104:	b000ffff 	imm	-1
9000a108:	b9f463e0 	brlid	r15, 25568	// 900004e8 <sendLogMsg>
9000a10c:	80000000 	or	r0, r0, r0

    // Start task processor - never returns
    osStart();
9000a110:	b9f4e93c 	brlid	r15, -5828	// 90008a4c <osStart>
9000a114:	80000000 	or	r0, r0, r0
}
9000a118:	e9e10000 	lwi	r15, r1, 0
9000a11c:	10330000 	addk	r1, r19, r0
9000a120:	ea61001c 	lwi	r19, r1, 28
9000a124:	30210020 	addik	r1, r1, 32
9000a128:	b60f0008 	rtsd	r15, 8
9000a12c:	80000000 	or	r0, r0, r0

9000a130 <systemStart>:



void systemStart()
{
9000a130:	3021fff8 	addik	r1, r1, -8
9000a134:	fa610004 	swi	r19, r1, 4
9000a138:	12610000 	addk	r19, r1, r0

}
9000a13c:	10330000 	addk	r1, r19, r0
9000a140:	ea610004 	lwi	r19, r1, 4
9000a144:	30210008 	addik	r1, r1, 8
9000a148:	b60f0008 	rtsd	r15, 8
9000a14c:	80000000 	or	r0, r0, r0

9000a150 <systemStop>:



void systemStop()
{
9000a150:	3021fff8 	addik	r1, r1, -8
9000a154:	fa610004 	swi	r19, r1, 4
9000a158:	12610000 	addk	r19, r1, r0

}
9000a15c:	10330000 	addk	r1, r19, r0
9000a160:	ea610004 	lwi	r19, r1, 4
9000a164:	30210008 	addik	r1, r1, 8
9000a168:	b60f0008 	rtsd	r15, 8
9000a16c:	80000000 	or	r0, r0, r0

9000a170 <InitStepperHW_UFR>:


//------------------------------------------------------------------------------
void InitStepperHW_UFR(void(*step_callback)(void))
{
9000a170:	3021ffe0 	addik	r1, r1, -32
9000a174:	f9e10000 	swi	r15, r1, 0
9000a178:	fa61001c 	swi	r19, r1, 28
9000a17c:	12610000 	addk	r19, r1, r0
9000a180:	f8b30024 	swi	r5, r19, 36
    ASSERT(step_callback);
9000a184:	e8730024 	lwi	r3, r19, 36
9000a188:	bc230028 	bnei	r3, 40		// 9000a1b0
9000a18c:	94110002 	msrclr	r0, 2
9000a190:	b0009002 	imm	-28670
9000a194:	30a01a48 	addik	r5, r0, 6728
9000a198:	b0009002 	imm	-28670
9000a19c:	30c01a58 	addik	r6, r0, 6744
9000a1a0:	30e0009c 	addik	r7, r0, 156
9000a1a4:	b9f42280 	brlid	r15, 8832	// 9000c424 <printAssert>
9000a1a8:	80000000 	or	r0, r0, r0
9000a1ac:	b8000000 	bri	0		// 9000a1ac
    
    MOTOR_REGS_UFR.control       = interrupt_clear_mask;
9000a1b0:	b000c362 	imm	-15518
9000a1b4:	30800000 	addik	r4, r0, 0
9000a1b8:	30600002 	addik	r3, r0, 2
9000a1bc:	f8640000 	swi	r3, r4, 0
    MOTOR_REGS_UFR.enable        = 0;
9000a1c0:	b000c362 	imm	-15518
9000a1c4:	30600000 	addik	r3, r0, 0
9000a1c8:	f8030004 	swi	r0, r3, 4
    MOTOR_REGS_UFR.channelSelect = 0;
9000a1cc:	b000c362 	imm	-15518
9000a1d0:	30600000 	addik	r3, r0, 0
9000a1d4:	f8030008 	swi	r0, r3, 8
    MOTOR_REGS_UFR.direction     = 0;
9000a1d8:	b000c362 	imm	-15518
9000a1dc:	30600000 	addik	r3, r0, 0
9000a1e0:	f8030010 	swi	r0, r3, 16
    MOTOR_REGS_UFR.pulseWidth    = USEC_TO_TICKS(PULSE_WIDTH_us);
9000a1e4:	b000c362 	imm	-15518
9000a1e8:	30800000 	addik	r4, r0, 0
9000a1ec:	30600084 	addik	r3, r0, 132
9000a1f0:	f8640018 	swi	r3, r4, 24

    registerInterruptHandler(XPAR_INTC_MOTOR_INTERRUPT_INTR, stepper_hw_isr, step_callback);
9000a1f4:	30a00002 	addik	r5, r0, 2
9000a1f8:	b0009000 	imm	-28672
9000a1fc:	30c0a708 	addik	r6, r0, -22776
9000a200:	e8f30024 	lwi	r7, r19, 36
9000a204:	b9f455ec 	brlid	r15, 21996	// 9000f7f0 <registerInterruptHandler>
9000a208:	80000000 	or	r0, r0, r0
    enableInterrupt(XPAR_INTC_MOTOR_INTERRUPT_INTR);
9000a20c:	30a00002 	addik	r5, r0, 2
9000a210:	b9f45634 	brlid	r15, 22068	// 9000f844 <enableInterrupt>
9000a214:	80000000 	or	r0, r0, r0
    
    MOTOR_REGS_UFR.control = interrupt_enable_mask | interrupt_clear_mask;
9000a218:	b000c362 	imm	-15518
9000a21c:	30800000 	addik	r4, r0, 0
9000a220:	30600003 	addik	r3, r0, 3
9000a224:	f8640000 	swi	r3, r4, 0
}
9000a228:	e9e10000 	lwi	r15, r1, 0
9000a22c:	10330000 	addk	r1, r19, r0
9000a230:	ea61001c 	lwi	r19, r1, 28
9000a234:	30210020 	addik	r1, r1, 32
9000a238:	b60f0008 	rtsd	r15, 8
9000a23c:	80000000 	or	r0, r0, r0

9000a240 <InitStepperHW_DBL>:

//------------------------------------------------------------------------------
void InitStepperHW_DBL(void(*step_callback2)(void))
{
9000a240:	3021ffe0 	addik	r1, r1, -32
9000a244:	f9e10000 	swi	r15, r1, 0
9000a248:	fa61001c 	swi	r19, r1, 28
9000a24c:	12610000 	addk	r19, r1, r0
9000a250:	f8b30024 	swi	r5, r19, 36
    ASSERT(step_callback2);
9000a254:	e8730024 	lwi	r3, r19, 36
9000a258:	bc230028 	bnei	r3, 40		// 9000a280
9000a25c:	94110002 	msrclr	r0, 2
9000a260:	b0009002 	imm	-28670
9000a264:	30a01a6c 	addik	r5, r0, 6764
9000a268:	b0009002 	imm	-28670
9000a26c:	30c01a58 	addik	r6, r0, 6744
9000a270:	30e000ad 	addik	r7, r0, 173
9000a274:	b9f421b0 	brlid	r15, 8624	// 9000c424 <printAssert>
9000a278:	80000000 	or	r0, r0, r0
9000a27c:	b8000000 	bri	0		// 9000a27c
    
    MOTOR_REGS_DBL.control       = interrupt_clear_mask2;
9000a280:	b000c940 	imm	-14016
9000a284:	30800000 	addik	r4, r0, 0
9000a288:	30600002 	addik	r3, r0, 2
9000a28c:	f8640000 	swi	r3, r4, 0
    MOTOR_REGS_DBL.enable        = 0;
9000a290:	b000c940 	imm	-14016
9000a294:	30600000 	addik	r3, r0, 0
9000a298:	f8030004 	swi	r0, r3, 4
    MOTOR_REGS_DBL.channelSelect = 0;
9000a29c:	b000c940 	imm	-14016
9000a2a0:	30600000 	addik	r3, r0, 0
9000a2a4:	f8030008 	swi	r0, r3, 8
    MOTOR_REGS_DBL.direction     = 0;
9000a2a8:	b000c940 	imm	-14016
9000a2ac:	30600000 	addik	r3, r0, 0
9000a2b0:	f8030010 	swi	r0, r3, 16
    MOTOR_REGS_DBL.pulseWidth    = USEC_TO_TICKS(PULSE_WIDTH_us);
9000a2b4:	b000c940 	imm	-14016
9000a2b8:	30800000 	addik	r4, r0, 0
9000a2bc:	30600084 	addik	r3, r0, 132
9000a2c0:	f8640018 	swi	r3, r4, 24

    registerInterruptHandler(XPAR_INTC_MOTOR2_INTERRUPT_INTR, stepper_hw_isr2, step_callback2);
9000a2c4:	30a00001 	addik	r5, r0, 1
9000a2c8:	b0009000 	imm	-28672
9000a2cc:	30c0a758 	addik	r6, r0, -22696
9000a2d0:	e8f30024 	lwi	r7, r19, 36
9000a2d4:	b9f4551c 	brlid	r15, 21788	// 9000f7f0 <registerInterruptHandler>
9000a2d8:	80000000 	or	r0, r0, r0
    enableInterrupt(XPAR_INTC_MOTOR2_INTERRUPT_INTR);
9000a2dc:	30a00001 	addik	r5, r0, 1
9000a2e0:	b9f45564 	brlid	r15, 21860	// 9000f844 <enableInterrupt>
9000a2e4:	80000000 	or	r0, r0, r0
    
    MOTOR_REGS_DBL.control = interrupt_enable_mask2 | interrupt_clear_mask2;
9000a2e8:	b000c940 	imm	-14016
9000a2ec:	30800000 	addik	r4, r0, 0
9000a2f0:	30600003 	addik	r3, r0, 3
9000a2f4:	f8640000 	swi	r3, r4, 0
}
9000a2f8:	e9e10000 	lwi	r15, r1, 0
9000a2fc:	10330000 	addk	r1, r19, r0
9000a300:	ea61001c 	lwi	r19, r1, 28
9000a304:	30210020 	addik	r1, r1, 32
9000a308:	b60f0008 	rtsd	r15, 8
9000a30c:	80000000 	or	r0, r0, r0

9000a310 <stepper_set_address_hw>:



//------------------------------------------------------------------------------
void stepper_set_address_hw(uint32 select)
{
9000a310:	3021fff8 	addik	r1, r1, -8
9000a314:	fa610004 	swi	r19, r1, 4
9000a318:	12610000 	addk	r19, r1, r0
9000a31c:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_UFR.channelSelect = select;
9000a320:	b000c362 	imm	-15518
9000a324:	30800000 	addik	r4, r0, 0
9000a328:	e873000c 	lwi	r3, r19, 12
9000a32c:	f8640008 	swi	r3, r4, 8
}
9000a330:	10330000 	addk	r1, r19, r0
9000a334:	ea610004 	lwi	r19, r1, 4
9000a338:	30210008 	addik	r1, r1, 8
9000a33c:	b60f0008 	rtsd	r15, 8
9000a340:	80000000 	or	r0, r0, r0

9000a344 <stepper_set_address_hw2>:

//------------------------------------------------------------------------------
void stepper_set_address_hw2(uint32 select)
{
9000a344:	3021fff8 	addik	r1, r1, -8
9000a348:	fa610004 	swi	r19, r1, 4
9000a34c:	12610000 	addk	r19, r1, r0
9000a350:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_DBL.channelSelect = select;
9000a354:	b000c940 	imm	-14016
9000a358:	30800000 	addik	r4, r0, 0
9000a35c:	e873000c 	lwi	r3, r19, 12
9000a360:	f8640008 	swi	r3, r4, 8
}
9000a364:	10330000 	addk	r1, r19, r0
9000a368:	ea610004 	lwi	r19, r1, 4
9000a36c:	30210008 	addik	r1, r1, 8
9000a370:	b60f0008 	rtsd	r15, 8
9000a374:	80000000 	or	r0, r0, r0

9000a378 <stepper_set_enable_hw>:



//------------------------------------------------------------------------------
void stepper_set_enable_hw(uint32 enable)
{
9000a378:	3021fff8 	addik	r1, r1, -8
9000a37c:	fa610004 	swi	r19, r1, 4
9000a380:	12610000 	addk	r19, r1, r0
9000a384:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_UFR.enable |= enable;
9000a388:	b000c362 	imm	-15518
9000a38c:	30a00000 	addik	r5, r0, 0
9000a390:	b000c362 	imm	-15518
9000a394:	30600000 	addik	r3, r0, 0
9000a398:	e8830004 	lwi	r4, r3, 4
9000a39c:	e873000c 	lwi	r3, r19, 12
9000a3a0:	80641800 	or	r3, r4, r3
9000a3a4:	f8650004 	swi	r3, r5, 4
}
9000a3a8:	10330000 	addk	r1, r19, r0
9000a3ac:	ea610004 	lwi	r19, r1, 4
9000a3b0:	30210008 	addik	r1, r1, 8
9000a3b4:	b60f0008 	rtsd	r15, 8
9000a3b8:	80000000 	or	r0, r0, r0

9000a3bc <stepper_set_enable_hw2>:
//------------------------------------------------------------------------------
void stepper_set_enable_hw2(uint32 enable)
{
9000a3bc:	3021fff8 	addik	r1, r1, -8
9000a3c0:	fa610004 	swi	r19, r1, 4
9000a3c4:	12610000 	addk	r19, r1, r0
9000a3c8:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_DBL.enable |= enable;
9000a3cc:	b000c940 	imm	-14016
9000a3d0:	30a00000 	addik	r5, r0, 0
9000a3d4:	b000c940 	imm	-14016
9000a3d8:	30600000 	addik	r3, r0, 0
9000a3dc:	e8830004 	lwi	r4, r3, 4
9000a3e0:	e873000c 	lwi	r3, r19, 12
9000a3e4:	80641800 	or	r3, r4, r3
9000a3e8:	f8650004 	swi	r3, r5, 4
}
9000a3ec:	10330000 	addk	r1, r19, r0
9000a3f0:	ea610004 	lwi	r19, r1, 4
9000a3f4:	30210008 	addik	r1, r1, 8
9000a3f8:	b60f0008 	rtsd	r15, 8
9000a3fc:	80000000 	or	r0, r0, r0

9000a400 <stepper_clear_enable_hw>:



//------------------------------------------------------------------------------
void stepper_clear_enable_hw(uint32 enable)
{
9000a400:	3021fff8 	addik	r1, r1, -8
9000a404:	fa610004 	swi	r19, r1, 4
9000a408:	12610000 	addk	r19, r1, r0
9000a40c:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_UFR.enable &= ~enable;
9000a410:	b000c362 	imm	-15518
9000a414:	30a00000 	addik	r5, r0, 0
9000a418:	b000c362 	imm	-15518
9000a41c:	30600000 	addik	r3, r0, 0
9000a420:	e8830004 	lwi	r4, r3, 4
9000a424:	e873000c 	lwi	r3, r19, 12
9000a428:	a863ffff 	xori	r3, r3, -1
9000a42c:	84641800 	and	r3, r4, r3
9000a430:	f8650004 	swi	r3, r5, 4
}
9000a434:	10330000 	addk	r1, r19, r0
9000a438:	ea610004 	lwi	r19, r1, 4
9000a43c:	30210008 	addik	r1, r1, 8
9000a440:	b60f0008 	rtsd	r15, 8
9000a444:	80000000 	or	r0, r0, r0

9000a448 <stepper_clear_enable_hw2>:
//------------------------------------------------------------------------------
void stepper_clear_enable_hw2(uint32 enable)
{
9000a448:	3021fff8 	addik	r1, r1, -8
9000a44c:	fa610004 	swi	r19, r1, 4
9000a450:	12610000 	addk	r19, r1, r0
9000a454:	f8b3000c 	swi	r5, r19, 12
    MOTOR_REGS_DBL.enable &= ~enable;
9000a458:	b000c940 	imm	-14016
9000a45c:	30a00000 	addik	r5, r0, 0
9000a460:	b000c940 	imm	-14016
9000a464:	30600000 	addik	r3, r0, 0
9000a468:	e8830004 	lwi	r4, r3, 4
9000a46c:	e873000c 	lwi	r3, r19, 12
9000a470:	a863ffff 	xori	r3, r3, -1
9000a474:	84641800 	and	r3, r4, r3
9000a478:	f8650004 	swi	r3, r5, 4
}
9000a47c:	10330000 	addk	r1, r19, r0
9000a480:	ea610004 	lwi	r19, r1, 4
9000a484:	30210008 	addik	r1, r1, 8
9000a488:	b60f0008 	rtsd	r15, 8
9000a48c:	80000000 	or	r0, r0, r0

9000a490 <stepper_start_step_hw>:



//------------------------------------------------------------------------------
void stepper_start_step_hw(uint32 frequency)
{
9000a490:	3021fff4 	addik	r1, r1, -12
9000a494:	fa610008 	swi	r19, r1, 8
9000a498:	12610000 	addk	r19, r1, r0
9000a49c:	f8b30010 	swi	r5, r19, 16
    if(frequency < min_stepper_frequency )
9000a4a0:	e8730010 	lwi	r3, r19, 16
9000a4a4:	22400009 	addi	r18, r0, 9
9000a4a8:	16439003 	cmpu	r18, r3, r18
9000a4ac:	bc52000c 	blti	r18, 12		// 9000a4b8
    {
        frequency = min_stepper_frequency;
9000a4b0:	3060000a 	addik	r3, r0, 10
9000a4b4:	f8730010 	swi	r3, r19, 16
    }


    uint32 period = XPAR_MICROBLAZE_CORE_CLOCK_FREQ_HZ / frequency - 2;
9000a4b8:	b00003f9 	imm	1017
9000a4bc:	308040ab 	addik	r4, r0, 16555
9000a4c0:	e8730010 	lwi	r3, r19, 16
9000a4c4:	48632002 	idivu	r3, r3, r4
9000a4c8:	3063fffe 	addik	r3, r3, -2
9000a4cc:	f8730004 	swi	r3, r19, 4

    if(period < USEC_TO_TICKS(PULSE_WIDTH_us + MIN_LOW_TIME_us))
9000a4d0:	e8730004 	lwi	r3, r19, 4
9000a4d4:	224000c5 	addi	r18, r0, 197
9000a4d8:	16439003 	cmpu	r18, r3, r18
9000a4dc:	bc52000c 	blti	r18, 12		// 9000a4e8
    {
        period = USEC_TO_TICKS(PULSE_WIDTH_us + MIN_LOW_TIME_us);
9000a4e0:	306000c6 	addik	r3, r0, 198
9000a4e4:	f8730004 	swi	r3, r19, 4
    }

    MOTOR_REGS_UFR.period = period;
9000a4e8:	b000c362 	imm	-15518
9000a4ec:	30800000 	addik	r4, r0, 0
9000a4f0:	e8730004 	lwi	r3, r19, 4
9000a4f4:	f8640014 	swi	r3, r4, 20
}
9000a4f8:	10330000 	addk	r1, r19, r0
9000a4fc:	ea610008 	lwi	r19, r1, 8
9000a500:	3021000c 	addik	r1, r1, 12
9000a504:	b60f0008 	rtsd	r15, 8
9000a508:	80000000 	or	r0, r0, r0

9000a50c <stepper_start_step_hw2>:
//------------------------------------------------------------------------------
void stepper_start_step_hw2(uint32 frequency)
{
9000a50c:	3021fff4 	addik	r1, r1, -12
9000a510:	fa610008 	swi	r19, r1, 8
9000a514:	12610000 	addk	r19, r1, r0
9000a518:	f8b30010 	swi	r5, r19, 16
    if(frequency < min_stepper_frequency2 )
9000a51c:	e8730010 	lwi	r3, r19, 16
9000a520:	22400009 	addi	r18, r0, 9
9000a524:	16439003 	cmpu	r18, r3, r18
9000a528:	bc52000c 	blti	r18, 12		// 9000a534
    {
        frequency = min_stepper_frequency2;
9000a52c:	3060000a 	addik	r3, r0, 10
9000a530:	f8730010 	swi	r3, r19, 16
    }


    uint32 period = XPAR_MICROBLAZE_CORE_CLOCK_FREQ_HZ / frequency - 2;
9000a534:	b00003f9 	imm	1017
9000a538:	308040ab 	addik	r4, r0, 16555
9000a53c:	e8730010 	lwi	r3, r19, 16
9000a540:	48632002 	idivu	r3, r3, r4
9000a544:	3063fffe 	addik	r3, r3, -2
9000a548:	f8730004 	swi	r3, r19, 4

    if(period < USEC_TO_TICKS(PULSE_WIDTH_us + MIN_LOW_TIME_us))
9000a54c:	e8730004 	lwi	r3, r19, 4
9000a550:	224000c5 	addi	r18, r0, 197
9000a554:	16439003 	cmpu	r18, r3, r18
9000a558:	bc52000c 	blti	r18, 12		// 9000a564
    {
        period = USEC_TO_TICKS(PULSE_WIDTH_us + MIN_LOW_TIME_us);
9000a55c:	306000c6 	addik	r3, r0, 198
9000a560:	f8730004 	swi	r3, r19, 4
    }

    MOTOR_REGS_DBL.period = period;
9000a564:	b000c940 	imm	-14016
9000a568:	30800000 	addik	r4, r0, 0
9000a56c:	e8730004 	lwi	r3, r19, 4
9000a570:	f8640014 	swi	r3, r4, 20
}
9000a574:	10330000 	addk	r1, r19, r0
9000a578:	ea610008 	lwi	r19, r1, 8
9000a57c:	3021000c 	addik	r1, r1, 12
9000a580:	b60f0008 	rtsd	r15, 8
9000a584:	80000000 	or	r0, r0, r0

9000a588 <stepper_get_home_sensor_hw>:


//------------------------------------------------------------------------------
bool stepper_get_home_sensor_hw()
{
9000a588:	3021fff8 	addik	r1, r1, -8
9000a58c:	fa610004 	swi	r19, r1, 4
9000a590:	12610000 	addk	r19, r1, r0
    return !!(MOTOR_REGS_UFR.sensors & home_sensor_mask);
9000a594:	b000c362 	imm	-15518
9000a598:	30600000 	addik	r3, r0, 0
9000a59c:	e863000c 	lwi	r3, r3, 12
9000a5a0:	a4630002 	andi	r3, r3, 2
9000a5a4:	8c630400 	pcmpne	r3, r3, r0
}
9000a5a8:	10330000 	addk	r1, r19, r0
9000a5ac:	ea610004 	lwi	r19, r1, 4
9000a5b0:	30210008 	addik	r1, r1, 8
9000a5b4:	b60f0008 	rtsd	r15, 8
9000a5b8:	80000000 	or	r0, r0, r0

9000a5bc <stepper_get_home_sensor_hw2>:
//------------------------------------------------------------------------------
bool stepper_get_home_sensor_hw2()
{
9000a5bc:	3021fff8 	addik	r1, r1, -8
9000a5c0:	fa610004 	swi	r19, r1, 4
9000a5c4:	12610000 	addk	r19, r1, r0
    return !!(MOTOR_REGS_DBL.sensors & home_sensor_mask2);
9000a5c8:	b000c940 	imm	-14016
9000a5cc:	30600000 	addik	r3, r0, 0
9000a5d0:	e863000c 	lwi	r3, r3, 12
9000a5d4:	a4630002 	andi	r3, r3, 2
9000a5d8:	8c630400 	pcmpne	r3, r3, r0
}
9000a5dc:	10330000 	addk	r1, r19, r0
9000a5e0:	ea610004 	lwi	r19, r1, 4
9000a5e4:	30210008 	addik	r1, r1, 8
9000a5e8:	b60f0008 	rtsd	r15, 8
9000a5ec:	80000000 	or	r0, r0, r0

9000a5f0 <stepper_get_alt_sensor_hw>:


//------------------------------------------------------------------------------
bool stepper_get_alt_sensor_hw()
{
9000a5f0:	3021fff8 	addik	r1, r1, -8
9000a5f4:	fa610004 	swi	r19, r1, 4
9000a5f8:	12610000 	addk	r19, r1, r0
    return !!(MOTOR_REGS_UFR.sensors & alt_sensor_mask);
9000a5fc:	b000c362 	imm	-15518
9000a600:	30600000 	addik	r3, r0, 0
9000a604:	e863000c 	lwi	r3, r3, 12
9000a608:	a4630001 	andi	r3, r3, 1
}
9000a60c:	10330000 	addk	r1, r19, r0
9000a610:	ea610004 	lwi	r19, r1, 4
9000a614:	30210008 	addik	r1, r1, 8
9000a618:	b60f0008 	rtsd	r15, 8
9000a61c:	80000000 	or	r0, r0, r0

9000a620 <stepper_get_alt_sensor_hw2>:
//------------------------------------------------------------------------------
bool stepper_get_alt_sensor_hw2()
{
9000a620:	3021fff8 	addik	r1, r1, -8
9000a624:	fa610004 	swi	r19, r1, 4
9000a628:	12610000 	addk	r19, r1, r0
    return !!(MOTOR_REGS_DBL.sensors & alt_sensor_mask2);
9000a62c:	b000c940 	imm	-14016
9000a630:	30600000 	addik	r3, r0, 0
9000a634:	e863000c 	lwi	r3, r3, 12
9000a638:	a4630001 	andi	r3, r3, 1
}
9000a63c:	10330000 	addk	r1, r19, r0
9000a640:	ea610004 	lwi	r19, r1, 4
9000a644:	30210008 	addik	r1, r1, 8
9000a648:	b60f0008 	rtsd	r15, 8
9000a64c:	80000000 	or	r0, r0, r0

9000a650 <stepper_clear_direction_hw>:


//------------------------------------------------------------------------------
void stepper_clear_direction_hw()
{
9000a650:	3021fff8 	addik	r1, r1, -8
9000a654:	fa610004 	swi	r19, r1, 4
9000a658:	12610000 	addk	r19, r1, r0
    MOTOR_REGS_UFR.direction = 0;
9000a65c:	b000c362 	imm	-15518
9000a660:	30600000 	addik	r3, r0, 0
9000a664:	f8030010 	swi	r0, r3, 16
}
9000a668:	10330000 	addk	r1, r19, r0
9000a66c:	ea610004 	lwi	r19, r1, 4
9000a670:	30210008 	addik	r1, r1, 8
9000a674:	b60f0008 	rtsd	r15, 8
9000a678:	80000000 	or	r0, r0, r0

9000a67c <stepper_clear_direction_hw2>:
//------------------------------------------------------------------------------
void stepper_clear_direction_hw2()
{
9000a67c:	3021fff8 	addik	r1, r1, -8
9000a680:	fa610004 	swi	r19, r1, 4
9000a684:	12610000 	addk	r19, r1, r0
    MOTOR_REGS_DBL.direction = 0;
9000a688:	b000c940 	imm	-14016
9000a68c:	30600000 	addik	r3, r0, 0
9000a690:	f8030010 	swi	r0, r3, 16
}
9000a694:	10330000 	addk	r1, r19, r0
9000a698:	ea610004 	lwi	r19, r1, 4
9000a69c:	30210008 	addik	r1, r1, 8
9000a6a0:	b60f0008 	rtsd	r15, 8
9000a6a4:	80000000 	or	r0, r0, r0

9000a6a8 <stepper_set_direction_hw>:

//------------------------------------------------------------------------------
void stepper_set_direction_hw()
{
9000a6a8:	3021fff8 	addik	r1, r1, -8
9000a6ac:	fa610004 	swi	r19, r1, 4
9000a6b0:	12610000 	addk	r19, r1, r0
    MOTOR_REGS_UFR.direction = 1;
9000a6b4:	b000c362 	imm	-15518
9000a6b8:	30800000 	addik	r4, r0, 0
9000a6bc:	30600001 	addik	r3, r0, 1
9000a6c0:	f8640010 	swi	r3, r4, 16
}
9000a6c4:	10330000 	addk	r1, r19, r0
9000a6c8:	ea610004 	lwi	r19, r1, 4
9000a6cc:	30210008 	addik	r1, r1, 8
9000a6d0:	b60f0008 	rtsd	r15, 8
9000a6d4:	80000000 	or	r0, r0, r0

9000a6d8 <stepper_set_direction_hw2>:
//------------------------------------------------------------------------------
void stepper_set_direction_hw2()
{
9000a6d8:	3021fff8 	addik	r1, r1, -8
9000a6dc:	fa610004 	swi	r19, r1, 4
9000a6e0:	12610000 	addk	r19, r1, r0
    MOTOR_REGS_DBL.direction = 1;
9000a6e4:	b000c940 	imm	-14016
9000a6e8:	30800000 	addik	r4, r0, 0
9000a6ec:	30600001 	addik	r3, r0, 1
9000a6f0:	f8640010 	swi	r3, r4, 16
}
9000a6f4:	10330000 	addk	r1, r19, r0
9000a6f8:	ea610004 	lwi	r19, r1, 4
9000a6fc:	30210008 	addik	r1, r1, 8
9000a700:	b60f0008 	rtsd	r15, 8
9000a704:	80000000 	or	r0, r0, r0

9000a708 <stepper_hw_isr>:

//------------------------------------------------------------------------------
static void stepper_hw_isr(void *callbackRef)
{
9000a708:	3021ffe0 	addik	r1, r1, -32
9000a70c:	f9e10000 	swi	r15, r1, 0
9000a710:	fa61001c 	swi	r19, r1, 28
9000a714:	12610000 	addk	r19, r1, r0
9000a718:	f8b30024 	swi	r5, r19, 36
    // Clear interrupt
    MOTOR_REGS_UFR.control = interrupt_enable_mask | interrupt_clear_mask;
9000a71c:	b000c362 	imm	-15518
9000a720:	30600000 	addik	r3, r0, 0
9000a724:	30800003 	addik	r4, r0, 3
9000a728:	f8830000 	swi	r4, r3, 0

    if(callbackRef)
9000a72c:	e8730024 	lwi	r3, r19, 36
9000a730:	bc030010 	beqi	r3, 16		// 9000a740
    {
        ((void(*)())callbackRef)();
9000a734:	e8730024 	lwi	r3, r19, 36
9000a738:	99fc1800 	brald	r15, r3
9000a73c:	80000000 	or	r0, r0, r0
    }
}
9000a740:	e9e10000 	lwi	r15, r1, 0
9000a744:	10330000 	addk	r1, r19, r0
9000a748:	ea61001c 	lwi	r19, r1, 28
9000a74c:	30210020 	addik	r1, r1, 32
9000a750:	b60f0008 	rtsd	r15, 8
9000a754:	80000000 	or	r0, r0, r0

9000a758 <stepper_hw_isr2>:
//------------------------------------------------------------------------------
static void stepper_hw_isr2(void *callbackRef2)
{
9000a758:	3021ffe0 	addik	r1, r1, -32
9000a75c:	f9e10000 	swi	r15, r1, 0
9000a760:	fa61001c 	swi	r19, r1, 28
9000a764:	12610000 	addk	r19, r1, r0
9000a768:	f8b30024 	swi	r5, r19, 36
    // Clear interrupt
    MOTOR_REGS_DBL.control = interrupt_enable_mask2 | interrupt_clear_mask2;
9000a76c:	b000c940 	imm	-14016
9000a770:	30600000 	addik	r3, r0, 0
9000a774:	30800003 	addik	r4, r0, 3
9000a778:	f8830000 	swi	r4, r3, 0

    if(callbackRef2)
9000a77c:	e8730024 	lwi	r3, r19, 36
9000a780:	bc030010 	beqi	r3, 16		// 9000a790
    {
        ((void(*)())callbackRef2)();
9000a784:	e8730024 	lwi	r3, r19, 36
9000a788:	99fc1800 	brald	r15, r3
9000a78c:	80000000 	or	r0, r0, r0
    }
}
9000a790:	e9e10000 	lwi	r15, r1, 0
9000a794:	10330000 	addk	r1, r19, r0
9000a798:	ea61001c 	lwi	r19, r1, 28
9000a79c:	30210020 	addik	r1, r1, 32
9000a7a0:	b60f0008 	rtsd	r15, 8
9000a7a4:	80000000 	or	r0, r0, r0

9000a7a8 <disableMotors>:

void disableMotors()
{    
9000a7a8:	3021fff8 	addik	r1, r1, -8
9000a7ac:	fa610004 	swi	r19, r1, 4
9000a7b0:	12610000 	addk	r19, r1, r0
    MOTOR_REGS_UFR.enable = 0;
9000a7b4:	b000c362 	imm	-15518
9000a7b8:	30600000 	addik	r3, r0, 0
9000a7bc:	f8030004 	swi	r0, r3, 4
    MOTOR_REGS_DBL.enable = 0;
9000a7c0:	b000c940 	imm	-14016
9000a7c4:	30600000 	addik	r3, r0, 0
9000a7c8:	f8030004 	swi	r0, r3, 4
}
9000a7cc:	10330000 	addk	r1, r19, r0
9000a7d0:	ea610004 	lwi	r19, r1, 4
9000a7d4:	30210008 	addik	r1, r1, 8
9000a7d8:	b60f0008 	rtsd	r15, 8
9000a7dc:	80000000 	or	r0, r0, r0

9000a7e0 <stepper_init>:
//
//! This function initializes the stepper motor module.
//!
void stepper_init( void )
{
9000a7e0:	3021ffdc 	addik	r1, r1, -36
9000a7e4:	f9e10000 	swi	r15, r1, 0
9000a7e8:	fa610020 	swi	r19, r1, 32
9000a7ec:	12610000 	addk	r19, r1, r0
    int stepper_index;

    stepper_abort();
9000a7f0:	b9f40094 	brlid	r15, 148	// 9000a884 <stepper_abort>
9000a7f4:	80000000 	or	r0, r0, r0

    for( stepper_index = 0; stepper_index < numSteppers; ++stepper_index )
9000a7f8:	f813001c 	swi	r0, r19, 28
9000a7fc:	b8000040 	bri	64		// 9000a83c
    {
        stepper_init_instance( &stepper_data.steppers[ stepper_index ],
9000a800:	e893001c 	lwi	r4, r19, 28
9000a804:	3060004c 	addik	r3, r0, 76
9000a808:	40641800 	mul	r3, r4, r3
9000a80c:	10830000 	addk	r4, r3, r0
9000a810:	b0009002 	imm	-28670
9000a814:	3060ffe4 	addik	r3, r0, -28
9000a818:	10641800 	addk	r3, r4, r3
9000a81c:	e893001c 	lwi	r4, r19, 28
9000a820:	10a30000 	addk	r5, r3, r0
9000a824:	10c40000 	addk	r6, r4, r0
9000a828:	b9f41154 	brlid	r15, 4436	// 9000b97c <stepper_init_instance>
9000a82c:	80000000 	or	r0, r0, r0
9000a830:	e873001c 	lwi	r3, r19, 28
9000a834:	30630001 	addik	r3, r3, 1
9000a838:	f873001c 	swi	r3, r19, 28
9000a83c:	e873001c 	lwi	r3, r19, 28
9000a840:	32400002 	addik	r18, r0, 2
9000a844:	16439001 	cmp	r18, r3, r18
9000a848:	bcb2ffb8 	bgei	r18, -72		// 9000a800
                                stepper_index );
    }

    InitStepperHW_UFR(stepper_motor_callback);
9000a84c:	b0009000 	imm	-28672
9000a850:	30a0b594 	addik	r5, r0, -19052
9000a854:	b9f4f91c 	brlid	r15, -1764	// 9000a170 <InitStepperHW_UFR>
9000a858:	80000000 	or	r0, r0, r0
    InitStepperHW_DBL(stepper_motor_callback);
9000a85c:	b0009000 	imm	-28672
9000a860:	30a0b594 	addik	r5, r0, -19052
9000a864:	b9f4f9dc 	brlid	r15, -1572	// 9000a240 <InitStepperHW_DBL>
9000a868:	80000000 	or	r0, r0, r0
}
9000a86c:	e9e10000 	lwi	r15, r1, 0
9000a870:	10330000 	addk	r1, r19, r0
9000a874:	ea610020 	lwi	r19, r1, 32
9000a878:	30210024 	addik	r1, r1, 36
9000a87c:	b60f0008 	rtsd	r15, 8
9000a880:	80000000 	or	r0, r0, r0

9000a884 <stepper_abort>:



//------------------------------------------------------------------------------
void stepper_abort( void )
{
9000a884:	3021ffd4 	addik	r1, r1, -44
9000a888:	f9e10000 	swi	r15, r1, 0
9000a88c:	fa610028 	swi	r19, r1, 40
9000a890:	12610000 	addk	r19, r1, r0
    CRData crdata = enterCriticalRegion();
9000a894:	b9f45764 	brlid	r15, 22372	// 9000fff8 <enterCriticalRegion>
9000a898:	80000000 	or	r0, r0, r0
9000a89c:	f8730024 	swi	r3, r19, 36
    {
        // If not ramping down already, start.
        if( stepper_data.moving_stepper)
9000a8a0:	b0009003 	imm	-28669
9000a8a4:	e86000c8 	lwi	r3, r0, 200
9000a8a8:	bc030114 	beqi	r3, 276		// 9000a9bc
        {
            if(!stepper_data.remaining_steps)
9000a8ac:	b0009003 	imm	-28669
9000a8b0:	e86000d0 	lwi	r3, r0, 208
9000a8b4:	bc230024 	bnei	r3, 36		// 9000a8d8
            {
                stepper_disable( stepper_data.moving_stepper );
9000a8b8:	b0009003 	imm	-28669
9000a8bc:	e86000c8 	lwi	r3, r0, 200
9000a8c0:	10a30000 	addk	r5, r3, r0
9000a8c4:	b9f4131c 	brlid	r15, 4892	// 9000bbe0 <stepper_disable>
9000a8c8:	80000000 	or	r0, r0, r0
                stepper_data.moving_stepper = NULL;
9000a8cc:	b0009003 	imm	-28669
9000a8d0:	f80000c8 	swi	r0, r0, 200
9000a8d4:	b80000e8 	bri	232		// 9000a9bc
            }
            else if(stepper_data.up_steps ||
9000a8d8:	b0009003 	imm	-28669
9000a8dc:	e86000d4 	lwi	r3, r0, 212
9000a8e0:	bc23001c 	bnei	r3, 28		// 9000a8fc
9000a8e4:	b0009003 	imm	-28669
9000a8e8:	e88000d0 	lwi	r4, r0, 208
9000a8ec:	b0009003 	imm	-28669
9000a8f0:	e86000d8 	lwi	r3, r0, 216
9000a8f4:	16432001 	cmp	r18, r3, r4
9000a8f8:	bc5200c4 	blti	r18, 196		// 9000a9bc
                    stepper_data.remaining_steps >= stepper_data.down_steps)
            {
                int new_remaining_steps = stepper_data.moving_stepper->ramp_steps - stepper_data.up_steps;
9000a8fc:	b0009003 	imm	-28669
9000a900:	e86000c8 	lwi	r3, r0, 200
9000a904:	e883001c 	lwi	r4, r3, 28
9000a908:	b0009003 	imm	-28669
9000a90c:	e86000d4 	lwi	r3, r0, 212
9000a910:	14632000 	rsubk	r3, r3, r4
9000a914:	f8730020 	swi	r3, r19, 32
                int new_target_position = stepper_data.moving_stepper->position +
                                          stepper_data.increment * new_remaining_steps;
9000a918:	b0009003 	imm	-28669
9000a91c:	e86000c8 	lwi	r3, r0, 200
9000a920:	e8a30000 	lwi	r5, r3, 0
9000a924:	b0009003 	imm	-28669
9000a928:	e88000e4 	lwi	r4, r0, 228
9000a92c:	e8730020 	lwi	r3, r19, 32
9000a930:	40641800 	mul	r3, r4, r3
9000a934:	10651800 	addk	r3, r5, r3
9000a938:	f873001c 	swi	r3, r19, 28
                
                if(((stepper_data.target_position - new_target_position) * stepper_data.increment) < 0)
9000a93c:	b0009003 	imm	-28669
9000a940:	e88000cc 	lwi	r4, r0, 204
9000a944:	e873001c 	lwi	r3, r19, 28
9000a948:	14832000 	rsubk	r4, r3, r4
9000a94c:	b0009003 	imm	-28669
9000a950:	e86000e4 	lwi	r3, r0, 228
9000a954:	40641800 	mul	r3, r4, r3
9000a958:	bca30038 	bgei	r3, 56		// 9000a990
                {
                    // New target position would move beyond the old target temp
                    new_remaining_steps = abs(stepper_data.target_position - stepper_data.moving_stepper->position);
9000a95c:	b0009003 	imm	-28669
9000a960:	e88000cc 	lwi	r4, r0, 204
9000a964:	b0009003 	imm	-28669
9000a968:	e86000c8 	lwi	r3, r0, 200
9000a96c:	e8630000 	lwi	r3, r3, 0
9000a970:	14632000 	rsubk	r3, r3, r4
9000a974:	6483021f 	bsrai	r4, r3, 31
9000a978:	88641800 	xor	r3, r4, r3
9000a97c:	14641800 	rsubk	r3, r4, r3
9000a980:	f8730020 	swi	r3, r19, 32
                    new_target_position = stepper_data.target_position;
9000a984:	b0009003 	imm	-28669
9000a988:	e86000cc 	lwi	r3, r0, 204
9000a98c:	f873001c 	swi	r3, r19, 28
                }

                stepper_data.remaining_steps = new_remaining_steps;
9000a990:	e8730020 	lwi	r3, r19, 32
9000a994:	b0009003 	imm	-28669
9000a998:	f86000d0 	swi	r3, r0, 208
                stepper_data.down_steps      = new_remaining_steps;
9000a99c:	e8730020 	lwi	r3, r19, 32
9000a9a0:	b0009003 	imm	-28669
9000a9a4:	f86000d8 	swi	r3, r0, 216
                stepper_data.target_position = new_target_position;
9000a9a8:	e873001c 	lwi	r3, r19, 28
9000a9ac:	b0009003 	imm	-28669
9000a9b0:	f86000cc 	swi	r3, r0, 204

                stepper_data.up_steps = 0;
9000a9b4:	b0009003 	imm	-28669
9000a9b8:	f80000d4 	swi	r0, r0, 212
            }
        }
    }
    exitCriticalRegion(crdata);
9000a9bc:	e8b30024 	lwi	r5, r19, 36
9000a9c0:	b9f45678 	brlid	r15, 22136	// 90010038 <exitCriticalRegion>
9000a9c4:	80000000 	or	r0, r0, r0
}
9000a9c8:	e9e10000 	lwi	r15, r1, 0
9000a9cc:	10330000 	addk	r1, r19, r0
9000a9d0:	ea610028 	lwi	r19, r1, 40
9000a9d4:	3021002c 	addik	r1, r1, 44
9000a9d8:	b60f0008 	rtsd	r15, 8
9000a9dc:	80000000 	or	r0, r0, r0

9000a9e0 <stepper_set_parameter>:



//------------------------------------------------------------------------------
//! Function to set the various stepper parameters.
//
//! This function sets the \a param of the \a stepper to \a value.
//!
bool stepper_set_parameter( StepperMotor stepper, StepperParameter param, int value )
{
9000a9e0:	3021ffd8 	addik	r1, r1, -40
9000a9e4:	f9e10000 	swi	r15, r1, 0
9000a9e8:	fa610024 	swi	r19, r1, 36
9000a9ec:	12610000 	addk	r19, r1, r0
9000a9f0:	f8b3002c 	swi	r5, r19, 44
9000a9f4:	f8d30030 	swi	r6, r19, 48
9000a9f8:	f8f30034 	swi	r7, r19, 52
    if( stepper < numSteppers )
9000a9fc:	e873002c 	lwi	r3, r19, 44
9000aa00:	22400002 	addi	r18, r0, 2
9000aa04:	16439003 	cmpu	r18, r3, r18
9000aa08:	bc520104 	blti	r18, 260		// 9000ab0c
    {
        switch( param )
9000aa0c:	e8730030 	lwi	r3, r19, 48
9000aa10:	f8730020 	swi	r3, r19, 32
9000aa14:	e8730020 	lwi	r3, r19, 32
9000aa18:	aa430001 	xori	r18, r3, 1
9000aa1c:	bc120054 	beqi	r18, 84		// 9000aa70
9000aa20:	e8730020 	lwi	r3, r19, 32
9000aa24:	22400001 	addi	r18, r0, 1
9000aa28:	16521803 	cmpu	r18, r18, r3
9000aa2c:	bc520020 	blti	r18, 32		// 9000aa4c
9000aa30:	e8730020 	lwi	r3, r19, 32
9000aa34:	aa430002 	xori	r18, r3, 2
9000aa38:	bc12005c 	beqi	r18, 92		// 9000aa94
9000aa3c:	e8730020 	lwi	r3, r19, 32
9000aa40:	aa430003 	xori	r18, r3, 3
9000aa44:	bc120074 	beqi	r18, 116		// 9000aab8
9000aa48:	b8000094 	bri	148		// 9000aadc
        {
        case stepperFastFrequency:
            stepper_data.steppers[ stepper ].fast_freq = value;
9000aa4c:	e893002c 	lwi	r4, r19, 44
9000aa50:	3060004c 	addik	r3, r0, 76
9000aa54:	40841800 	mul	r4, r4, r3
9000aa58:	b0009002 	imm	-28670
9000aa5c:	3060fff8 	addik	r3, r0, -8
9000aa60:	10841800 	addk	r4, r4, r3
9000aa64:	e8730034 	lwi	r3, r19, 52
9000aa68:	f8640000 	swi	r3, r4, 0
            break;
9000aa6c:	b8000094 	bri	148		// 9000ab00
        case stepperSlowFrequency:
            stepper_data.steppers[ stepper ].slow_freq = value;
9000aa70:	e893002c 	lwi	r4, r19, 44
9000aa74:	3060004c 	addik	r3, r0, 76
9000aa78:	40841800 	mul	r4, r4, r3
9000aa7c:	b0009002 	imm	-28670
9000aa80:	3060fff4 	addik	r3, r0, -12
9000aa84:	10841800 	addk	r4, r4, r3
9000aa88:	e8730034 	lwi	r3, r19, 52
9000aa8c:	f8640000 	swi	r3, r4, 0
            break;
9000aa90:	b8000070 	bri	112		// 9000ab00
        case stepperRampSteps:
            stepper_data.steppers[ stepper ].ramp_steps = value;
9000aa94:	e893002c 	lwi	r4, r19, 44
9000aa98:	3060004c 	addik	r3, r0, 76
9000aa9c:	40841800 	mul	r4, r4, r3
9000aaa0:	b0009003 	imm	-28669
9000aaa4:	30600000 	addik	r3, r0, 0
9000aaa8:	10841800 	addk	r4, r4, r3
9000aaac:	e8730034 	lwi	r3, r19, 52
9000aab0:	f8640000 	swi	r3, r4, 0
            break;
9000aab4:	b800004c 	bri	76		// 9000ab00
        case stepperMaxSteps:
            stepper_data.steppers[ stepper ].max_steps = value;
9000aab8:	e893002c 	lwi	r4, r19, 44
9000aabc:	3060004c 	addik	r3, r0, 76
9000aac0:	40841800 	mul	r4, r4, r3
9000aac4:	b0009002 	imm	-28670
9000aac8:	3060fff0 	addik	r3, r0, -16
9000aacc:	10841800 	addk	r4, r4, r3
9000aad0:	e8730034 	lwi	r3, r19, 52
9000aad4:	f8640000 	swi	r3, r4, 0
            break;
9000aad8:	b8000028 	bri	40		// 9000ab00
        default:
            ASSERT( 0 );
9000aadc:	94110002 	msrclr	r0, 2
9000aae0:	b0009002 	imm	-28670
9000aae4:	30a01a7c 	addik	r5, r0, 6780
9000aae8:	b0009002 	imm	-28670
9000aaec:	30c01a80 	addik	r6, r0, 6784
9000aaf0:	30e000b7 	addik	r7, r0, 183
9000aaf4:	b9f41930 	brlid	r15, 6448	// 9000c424 <printAssert>
9000aaf8:	80000000 	or	r0, r0, r0
9000aafc:	b8000000 	bri	0		// 9000aafc
            return false;
        }
        return true;
9000ab00:	30600001 	addik	r3, r0, 1
9000ab04:	f873001c 	swi	r3, r19, 28
9000ab08:	b8000028 	bri	40		// 9000ab30
    }
    ASSERT( 0 );
9000ab0c:	94110002 	msrclr	r0, 2
9000ab10:	b0009002 	imm	-28670
9000ab14:	30a01a7c 	addik	r5, r0, 6780
9000ab18:	b0009002 	imm	-28670
9000ab1c:	30c01a80 	addik	r6, r0, 6784
9000ab20:	30e000bc 	addik	r7, r0, 188
9000ab24:	b9f41900 	brlid	r15, 6400	// 9000c424 <printAssert>
9000ab28:	80000000 	or	r0, r0, r0
9000ab2c:	b8000000 	bri	0		// 9000ab2c
    return false;
}
9000ab30:	e873001c 	lwi	r3, r19, 28
9000ab34:	e9e10000 	lwi	r15, r1, 0
9000ab38:	10330000 	addk	r1, r19, r0
9000ab3c:	ea610024 	lwi	r19, r1, 36
9000ab40:	30210028 	addik	r1, r1, 40
9000ab44:	b60f0008 	rtsd	r15, 8
9000ab48:	80000000 	or	r0, r0, r0

9000ab4c <stepper_busy_wait>:

//------------------------------------------------------------------------------
bool stepper_busy_wait( uint32 ticks )
{
9000ab4c:	3021ffcc 	addik	r1, r1, -52
9000ab50:	f9e10000 	swi	r15, r1, 0
9000ab54:	fa610030 	swi	r19, r1, 48
9000ab58:	12610000 	addk	r19, r1, r0
9000ab5c:	f8b30038 	swi	r5, r19, 56
    Timer wait_timer;

    startTimer( &wait_timer, ticks );
9000ab60:	e8d30038 	lwi	r6, r19, 56
9000ab64:	10e03000 	addk	r7, r0, r6
9000ab68:	10c00000 	addk	r6, r0, r0
9000ab6c:	3073001c 	addik	r3, r19, 28
9000ab70:	10a30000 	addk	r5, r3, r0
9000ab74:	b9f4137c 	brlid	r15, 4988	// 9000bef0 <startTimer>
9000ab78:	80000000 	or	r0, r0, r0

    while( stepper_busy() )
9000ab7c:	b8000024 	bri	36		// 9000aba0
    {
        if( timerExpired( &wait_timer ) )
9000ab80:	3073001c 	addik	r3, r19, 28
9000ab84:	10a30000 	addk	r5, r3, r0
9000ab88:	b9f413cc 	brlid	r15, 5068	// 9000bf54 <timerExpired>
9000ab8c:	80000000 	or	r0, r0, r0
9000ab90:	bc030010 	beqi	r3, 16		// 9000aba0
            return false;
9000ab94:	10600000 	addk	r3, r0, r0
9000ab98:	f873002c 	swi	r3, r19, 44
9000ab9c:	b8000018 	bri	24		// 9000abb4
9000aba0:	b9f40030 	brlid	r15, 48	// 9000abd0 <stepper_busy>
9000aba4:	80000000 	or	r0, r0, r0
9000aba8:	bc23ffd8 	bnei	r3, -40		// 9000ab80
    }
    return true;
9000abac:	30600001 	addik	r3, r0, 1
9000abb0:	f873002c 	swi	r3, r19, 44
9000abb4:	e873002c 	lwi	r3, r19, 44
}
9000abb8:	e9e10000 	lwi	r15, r1, 0
9000abbc:	10330000 	addk	r1, r19, r0
9000abc0:	ea610030 	lwi	r19, r1, 48
9000abc4:	30210034 	addik	r1, r1, 52
9000abc8:	b60f0008 	rtsd	r15, 8
9000abcc:	80000000 	or	r0, r0, r0

9000abd0 <stepper_busy>:

//------------------------------------------------------------------------------
bool stepper_busy( void )
{
9000abd0:	3021fff8 	addik	r1, r1, -8
9000abd4:	fa610004 	swi	r19, r1, 4
9000abd8:	12610000 	addk	r19, r1, r0
    return stepper_data.moving_stepper != NULL;
9000abdc:	b0009003 	imm	-28669
9000abe0:	e86000c8 	lwi	r3, r0, 200
9000abe4:	8c630400 	pcmpne	r3, r3, r0
}
9000abe8:	10330000 	addk	r1, r19, r0
9000abec:	ea610004 	lwi	r19, r1, 4
9000abf0:	30210008 	addik	r1, r1, 8
9000abf4:	b60f0008 	rtsd	r15, 8
9000abf8:	80000000 	or	r0, r0, r0

9000abfc <stepper_reset_home_pin_location>:

//------------------------------------------------------------------------------
void stepper_reset_home_pin_location( void )
{
9000abfc:	3021ffe0 	addik	r1, r1, -32
9000ac00:	f9e10000 	swi	r15, r1, 0
9000ac04:	fa61001c 	swi	r19, r1, 28
9000ac08:	12610000 	addk	r19, r1, r0
    // Called at ISR context
    
    if( stepper_data.moving_stepper &&
9000ac0c:	b0009003 	imm	-28669
9000ac10:	e86000c8 	lwi	r3, r0, 200
9000ac14:	bc03006c 	beqi	r3, 108		// 9000ac80
9000ac18:	b0009003 	imm	-28669
9000ac1c:	e86000c8 	lwi	r3, r0, 200
9000ac20:	e8830000 	lwi	r4, r3, 0
9000ac24:	b0009003 	imm	-28669
9000ac28:	e86000c8 	lwi	r3, r0, 200
9000ac2c:	e8630008 	lwi	r3, r3, 8
9000ac30:	16432000 	rsubk	r18, r3, r4
9000ac34:	bc12004c 	beqi	r18, 76		// 9000ac80
        stepper_data.moving_stepper->position != stepper_data.moving_stepper->home_pin_location )
    {
        printf("Adjusting stepper home pin position from %d to %d.\n",
9000ac38:	b0009003 	imm	-28669
9000ac3c:	e86000c8 	lwi	r3, r0, 200
9000ac40:	e8830000 	lwi	r4, r3, 0
9000ac44:	b0009003 	imm	-28669
9000ac48:	e86000c8 	lwi	r3, r0, 200
9000ac4c:	e8630008 	lwi	r3, r3, 8
9000ac50:	b0009002 	imm	-28670
9000ac54:	30a01a90 	addik	r5, r0, 6800
9000ac58:	10c40000 	addk	r6, r4, r0
9000ac5c:	10e30000 	addk	r7, r3, r0
9000ac60:	b9f451e4 	brlid	r15, 20964	// 9000fe44 <printf>
9000ac64:	80000000 	or	r0, r0, r0
               stepper_data.moving_stepper->position,
               stepper_data.moving_stepper->home_pin_location);
        stepper_data.moving_stepper->position = stepper_data.moving_stepper->home_pin_location;
9000ac68:	b0009003 	imm	-28669
9000ac6c:	e88000c8 	lwi	r4, r0, 200
9000ac70:	b0009003 	imm	-28669
9000ac74:	e86000c8 	lwi	r3, r0, 200
9000ac78:	e8630008 	lwi	r3, r3, 8
9000ac7c:	f8640000 	swi	r3, r4, 0
    }
}
9000ac80:	e9e10000 	lwi	r15, r1, 0
9000ac84:	10330000 	addk	r1, r19, r0
9000ac88:	ea61001c 	lwi	r19, r1, 28
9000ac8c:	30210020 	addik	r1, r1, 32
9000ac90:	b60f0008 	rtsd	r15, 8
9000ac94:	80000000 	or	r0, r0, r0

9000ac98 <stepper_get_home_pin_location>:

//------------------------------------------------------------------------------
int stepper_get_home_pin_location( StepperMotor stepper )
{
9000ac98:	3021ffe0 	addik	r1, r1, -32
9000ac9c:	f9e10000 	swi	r15, r1, 0
9000aca0:	fa61001c 	swi	r19, r1, 28
9000aca4:	12610000 	addk	r19, r1, r0
9000aca8:	f8b30024 	swi	r5, r19, 36
    ASSERT( stepper < numSteppers );
9000acac:	e8730024 	lwi	r3, r19, 36
9000acb0:	22400002 	addi	r18, r0, 2
9000acb4:	16439003 	cmpu	r18, r3, r18
9000acb8:	bcb20028 	bgei	r18, 40		// 9000ace0
9000acbc:	94110002 	msrclr	r0, 2
9000acc0:	b0009002 	imm	-28670
9000acc4:	30a01ac4 	addik	r5, r0, 6852
9000acc8:	b0009002 	imm	-28670
9000accc:	30c01a80 	addik	r6, r0, 6784
9000acd0:	30e000e7 	addik	r7, r0, 231
9000acd4:	b9f41750 	brlid	r15, 5968	// 9000c424 <printAssert>
9000acd8:	80000000 	or	r0, r0, r0
9000acdc:	b8000000 	bri	0		// 9000acdc
    return stepper_data.steppers[ stepper ].home_pin_location;
9000ace0:	e8930024 	lwi	r4, r19, 36
9000ace4:	3060004c 	addik	r3, r0, 76
9000ace8:	40841800 	mul	r4, r4, r3
9000acec:	b0009002 	imm	-28670
9000acf0:	3060ffec 	addik	r3, r0, -20
9000acf4:	10641800 	addk	r3, r4, r3
9000acf8:	e8630000 	lwi	r3, r3, 0
}
9000acfc:	e9e10000 	lwi	r15, r1, 0
9000ad00:	10330000 	addk	r1, r19, r0
9000ad04:	ea61001c 	lwi	r19, r1, 28
9000ad08:	30210020 	addik	r1, r1, 32
9000ad0c:	b60f0008 	rtsd	r15, 8
9000ad10:	80000000 	or	r0, r0, r0

9000ad14 <stepper_enable>:

//------------------------------------------------------------------------------
bool stepper_enable( StepperMotor stepper, bool enable )
{
9000ad14:	3021ffdc 	addik	r1, r1, -36
9000ad18:	f9e10000 	swi	r15, r1, 0
9000ad1c:	fa610020 	swi	r19, r1, 32
9000ad20:	12610000 	addk	r19, r1, r0
9000ad24:	f8b30028 	swi	r5, r19, 40
9000ad28:	f8d3002c 	swi	r6, r19, 44
    ASSERT( stepper < numSteppers );
9000ad2c:	e8730028 	lwi	r3, r19, 40
9000ad30:	22400002 	addi	r18, r0, 2
9000ad34:	16439003 	cmpu	r18, r3, r18
9000ad38:	bcb20028 	bgei	r18, 40		// 9000ad60
9000ad3c:	94110002 	msrclr	r0, 2
9000ad40:	b0009002 	imm	-28670
9000ad44:	30a01ac4 	addik	r5, r0, 6852
9000ad48:	b0009002 	imm	-28670
9000ad4c:	30c01a80 	addik	r6, r0, 6784
9000ad50:	30e000ee 	addik	r7, r0, 238
9000ad54:	b9f416d0 	brlid	r15, 5840	// 9000c424 <printAssert>
9000ad58:	80000000 	or	r0, r0, r0
9000ad5c:	b8000000 	bri	0		// 9000ad5c
    if( stepper_data.moving_stepper != &stepper_data.steppers[ stepper ] )
9000ad60:	b0009003 	imm	-28669
9000ad64:	e8a000c8 	lwi	r5, r0, 200
9000ad68:	e8930028 	lwi	r4, r19, 40
9000ad6c:	3060004c 	addik	r3, r0, 76
9000ad70:	40641800 	mul	r3, r4, r3
9000ad74:	10830000 	addk	r4, r3, r0
9000ad78:	b0009002 	imm	-28670
9000ad7c:	3060ffe4 	addik	r3, r0, -28
9000ad80:	10641800 	addk	r3, r4, r3
9000ad84:	16432800 	rsubk	r18, r3, r5
9000ad88:	bc12006c 	beqi	r18, 108		// 9000adf4
    {
        if( enable )
9000ad8c:	e873002c 	lwi	r3, r19, 44
9000ad90:	bc030030 	beqi	r3, 48		// 9000adc0
            stepper_set_enable_hw( stepper_data.steppers[ stepper ].hw_enable_mask );
9000ad94:	e8930028 	lwi	r4, r19, 40
9000ad98:	3060004c 	addik	r3, r0, 76
9000ad9c:	40841800 	mul	r4, r4, r3
9000ada0:	b0009003 	imm	-28669
9000ada4:	3060001c 	addik	r3, r0, 28
9000ada8:	10641800 	addk	r3, r4, r3
9000adac:	e8630000 	lwi	r3, r3, 0
9000adb0:	10a30000 	addk	r5, r3, r0
9000adb4:	b9f4f5c4 	brlid	r15, -2620	// 9000a378 <stepper_set_enable_hw>
9000adb8:	80000000 	or	r0, r0, r0
9000adbc:	b800002c 	bri	44		// 9000ade8
        else
            stepper_clear_enable_hw( stepper_data.steppers[ stepper ].hw_enable_mask );
9000adc0:	e8930028 	lwi	r4, r19, 40
9000adc4:	3060004c 	addik	r3, r0, 76
9000adc8:	40841800 	mul	r4, r4, r3
9000adcc:	b0009003 	imm	-28669
9000add0:	3060001c 	addik	r3, r0, 28
9000add4:	10641800 	addk	r3, r4, r3
9000add8:	e8630000 	lwi	r3, r3, 0
9000addc:	10a30000 	addk	r5, r3, r0
9000ade0:	b9f4f620 	brlid	r15, -2528	// 9000a400 <stepper_clear_enable_hw>
9000ade4:	80000000 	or	r0, r0, r0

        return true;
9000ade8:	30600001 	addik	r3, r0, 1
9000adec:	f873001c 	swi	r3, r19, 28
9000adf0:	b800000c 	bri	12		// 9000adfc
    }

    return false;
9000adf4:	10600000 	addk	r3, r0, r0
9000adf8:	f873001c 	swi	r3, r19, 28
9000adfc:	e873001c 	lwi	r3, r19, 28
}
9000ae00:	e9e10000 	lwi	r15, r1, 0
9000ae04:	10330000 	addk	r1, r19, r0
9000ae08:	ea610020 	lwi	r19, r1, 32
9000ae0c:	30210024 	addik	r1, r1, 36
9000ae10:	b60f0008 	rtsd	r15, 8
9000ae14:	80000000 	or	r0, r0, r0

9000ae18 <stepper_move_relative>:

//------------------------------------------------------------------------------
bool stepper_move_relative( StepperMotor stepper, int steps )
{
9000ae18:	3021ffe0 	addik	r1, r1, -32
9000ae1c:	f9e10000 	swi	r15, r1, 0
9000ae20:	fa61001c 	swi	r19, r1, 28
9000ae24:	12610000 	addk	r19, r1, r0
9000ae28:	f8b30024 	swi	r5, r19, 36
9000ae2c:	f8d30028 	swi	r6, r19, 40
    ASSERT( stepper < numSteppers );
9000ae30:	e8730024 	lwi	r3, r19, 36
9000ae34:	22400002 	addi	r18, r0, 2
9000ae38:	16439003 	cmpu	r18, r3, r18
9000ae3c:	bcb20028 	bgei	r18, 40		// 9000ae64
9000ae40:	94110002 	msrclr	r0, 2
9000ae44:	b0009002 	imm	-28670
9000ae48:	30a01ac4 	addik	r5, r0, 6852
9000ae4c:	b0009002 	imm	-28670
9000ae50:	30c01a80 	addik	r6, r0, 6784
9000ae54:	30e000ff 	addik	r7, r0, 255
9000ae58:	b9f415cc 	brlid	r15, 5580	// 9000c424 <printAssert>
9000ae5c:	80000000 	or	r0, r0, r0
9000ae60:	b8000000 	bri	0		// 9000ae60
    return stepper_move_to_position( stepper,
9000ae64:	e8930024 	lwi	r4, r19, 36
9000ae68:	3060004c 	addik	r3, r0, 76
9000ae6c:	40841800 	mul	r4, r4, r3
9000ae70:	b0009002 	imm	-28670
9000ae74:	3060ffe4 	addik	r3, r0, -28
9000ae78:	10641800 	addk	r3, r4, r3
9000ae7c:	e8830000 	lwi	r4, r3, 0
9000ae80:	e8730028 	lwi	r3, r19, 40
9000ae84:	10641800 	addk	r3, r4, r3
9000ae88:	e8b30024 	lwi	r5, r19, 36
9000ae8c:	10c30000 	addk	r6, r3, r0
9000ae90:	b9f40020 	brlid	r15, 32	// 9000aeb0 <stepper_move_to_position>
9000ae94:	80000000 	or	r0, r0, r0
                                     stepper_data.steppers[ stepper ].position + steps );
}
9000ae98:	e9e10000 	lwi	r15, r1, 0
9000ae9c:	10330000 	addk	r1, r19, r0
9000aea0:	ea61001c 	lwi	r19, r1, 28
9000aea4:	30210020 	addik	r1, r1, 32
9000aea8:	b60f0008 	rtsd	r15, 8
9000aeac:	80000000 	or	r0, r0, r0

9000aeb0 <stepper_move_to_position>:

//------------------------------------------------------------------------------
bool stepper_move_to_position( StepperMotor stepper, int position )
{
9000aeb0:	3021ffdc 	addik	r1, r1, -36
9000aeb4:	f9e10000 	swi	r15, r1, 0
9000aeb8:	fa610020 	swi	r19, r1, 32
9000aebc:	12610000 	addk	r19, r1, r0
9000aec0:	f8b30028 	swi	r5, r19, 40
9000aec4:	f8d3002c 	swi	r6, r19, 44
    ASSERT( stepper < numSteppers );
9000aec8:	e8730028 	lwi	r3, r19, 40
9000aecc:	22400002 	addi	r18, r0, 2
9000aed0:	16439003 	cmpu	r18, r3, r18
9000aed4:	bcb20028 	bgei	r18, 40		// 9000aefc
9000aed8:	94110002 	msrclr	r0, 2
9000aedc:	b0009002 	imm	-28670
9000aee0:	30a01ac4 	addik	r5, r0, 6852
9000aee4:	b0009002 	imm	-28670
9000aee8:	30c01a80 	addik	r6, r0, 6784
9000aeec:	30e00107 	addik	r7, r0, 263
9000aef0:	b9f41534 	brlid	r15, 5428	// 9000c424 <printAssert>
9000aef4:	80000000 	or	r0, r0, r0
9000aef8:	b8000000 	bri	0		// 9000aef8
    if( stepper_data.moving_stepper )
9000aefc:	b0009003 	imm	-28669
9000af00:	e86000c8 	lwi	r3, r0, 200
9000af04:	bc030010 	beqi	r3, 16		// 9000af14
        return false;
9000af08:	10600000 	addk	r3, r0, r0
9000af0c:	f873001c 	swi	r3, r19, 28
9000af10:	b8000284 	bri	644		// 9000b194

    stepper_set_address_hw( stepper_data.steppers[ stepper ].hw_address );
9000af14:	e8930028 	lwi	r4, r19, 40
9000af18:	3060004c 	addik	r3, r0, 76
9000af1c:	40841800 	mul	r4, r4, r3
9000af20:	b0009003 	imm	-28669
9000af24:	30600018 	addik	r3, r0, 24
9000af28:	10641800 	addk	r3, r4, r3
9000af2c:	e8630000 	lwi	r3, r3, 0
9000af30:	10a30000 	addk	r5, r3, r0
9000af34:	b9f4f3dc 	brlid	r15, -3108	// 9000a310 <stepper_set_address_hw>
9000af38:	80000000 	or	r0, r0, r0

    if( ( stepper_data.steppers[ stepper ].position == position ) ||
9000af3c:	e8930028 	lwi	r4, r19, 40
9000af40:	3060004c 	addik	r3, r0, 76
9000af44:	40841800 	mul	r4, r4, r3
9000af48:	b0009002 	imm	-28670
9000af4c:	3060ffe4 	addik	r3, r0, -28
9000af50:	10641800 	addk	r3, r4, r3
9000af54:	e8830000 	lwi	r4, r3, 0
9000af58:	e873002c 	lwi	r3, r19, 44
9000af5c:	16432000 	rsubk	r18, r3, r4
9000af60:	bc120020 	beqi	r18, 32		// 9000af80
9000af64:	b9f4f624 	brlid	r15, -2524	// 9000a588 <stepper_get_home_sensor_hw>
9000af68:	80000000 	or	r0, r0, r0
9000af6c:	bc030020 	beqi	r3, 32		// 9000af8c
9000af70:	e873002c 	lwi	r3, r19, 44
9000af74:	b0007fff 	imm	32767
9000af78:	aa43ffff 	xori	r18, r3, -1
9000af7c:	bc320010 	bnei	r18, 16		// 9000af8c
        ( stepper_get_home_sensor_hw() && position == stepperHome ) )
    {
        return true; // No need to move, we are already there.
9000af80:	30600001 	addik	r3, r0, 1
9000af84:	f873001c 	swi	r3, r19, 28
9000af88:	b800020c 	bri	524		// 9000b194
    }

    stepper_data.moving_stepper  = &stepper_data.steppers[ stepper ];
9000af8c:	e8930028 	lwi	r4, r19, 40
9000af90:	3060004c 	addik	r3, r0, 76
9000af94:	40641800 	mul	r3, r4, r3
9000af98:	10830000 	addk	r4, r3, r0
9000af9c:	b0009002 	imm	-28670
9000afa0:	3060ffe4 	addik	r3, r0, -28
9000afa4:	10641800 	addk	r3, r4, r3
9000afa8:	b0009003 	imm	-28669
9000afac:	f86000c8 	swi	r3, r0, 200
    stepper_data.target_position = position;
9000afb0:	e873002c 	lwi	r3, r19, 44
9000afb4:	b0009003 	imm	-28669
9000afb8:	f86000cc 	swi	r3, r0, 204
    stepper_data.steps_taken     = 0;
9000afbc:	b0009003 	imm	-28669
9000afc0:	f80000dc 	swi	r0, r0, 220
    stepper_data.freq_adjust     =
9000afc4:	b0009003 	imm	-28669
9000afc8:	e86000c8 	lwi	r3, r0, 200
9000afcc:	10a30000 	addk	r5, r3, r0
9000afd0:	b9f40934 	brlid	r15, 2356	// 9000b904 <stepper_find_ramp_freq_adjust>
9000afd4:	80000000 	or	r0, r0, r0
9000afd8:	b0009003 	imm	-28669
9000afdc:	f86000e0 	swi	r3, r0, 224
        stepper_find_ramp_freq_adjust( stepper_data.moving_stepper );
    stepper_set_enable_hw( stepper_data.moving_stepper->hw_enable_mask );
9000afe0:	b0009003 	imm	-28669
9000afe4:	e86000c8 	lwi	r3, r0, 200
9000afe8:	e8630038 	lwi	r3, r3, 56
9000afec:	10a30000 	addk	r5, r3, r0
9000aff0:	b9f4f388 	brlid	r15, -3192	// 9000a378 <stepper_set_enable_hw>
9000aff4:	80000000 	or	r0, r0, r0

    if( position == stepperHome )
9000aff8:	e873002c 	lwi	r3, r19, 44
9000affc:	b0007fff 	imm	32767
9000b000:	aa43ffff 	xori	r18, r3, -1
9000b004:	bc320054 	bnei	r18, 84		// 9000b058
    {
        stepper_data.increment = -1;
9000b008:	3060ffff 	addik	r3, r0, -1
9000b00c:	b0009003 	imm	-28669
9000b010:	f86000e4 	swi	r3, r0, 228
        stepper_clear_direction_hw( stepper_data.moving_stepper );
9000b014:	b0009003 	imm	-28669
9000b018:	e86000c8 	lwi	r3, r0, 200
9000b01c:	10a30000 	addk	r5, r3, r0
9000b020:	b9f4f630 	brlid	r15, -2512	// 9000a650 <stepper_clear_direction_hw>
9000b024:	80000000 	or	r0, r0, r0

        stepper_data.down_steps = stepper_data.remaining_steps = 0;
9000b028:	b0009003 	imm	-28669
9000b02c:	f80000d0 	swi	r0, r0, 208
9000b030:	b0009003 	imm	-28669
9000b034:	e86000d0 	lwi	r3, r0, 208
9000b038:	b0009003 	imm	-28669
9000b03c:	f86000d8 	swi	r3, r0, 216
        stepper_data.up_steps = stepper_data.moving_stepper->ramp_steps;
9000b040:	b0009003 	imm	-28669
9000b044:	e86000c8 	lwi	r3, r0, 200
9000b048:	e863001c 	lwi	r3, r3, 28
9000b04c:	b0009003 	imm	-28669
9000b050:	f86000d4 	swi	r3, r0, 212
9000b054:	b8000108 	bri	264		// 9000b15c
    }
    else
    {
        stepper_data.remaining_steps =
9000b058:	b0009003 	imm	-28669
9000b05c:	e86000c8 	lwi	r3, r0, 200
9000b060:	e8830000 	lwi	r4, r3, 0
9000b064:	e873002c 	lwi	r3, r19, 44
9000b068:	14632000 	rsubk	r3, r3, r4
9000b06c:	6483021f 	bsrai	r4, r3, 31
9000b070:	88641800 	xor	r3, r4, r3
9000b074:	14641800 	rsubk	r3, r4, r3
9000b078:	b0009003 	imm	-28669
9000b07c:	f86000d0 	swi	r3, r0, 208
            abs( stepper_data.moving_stepper->position - position );

        if( position < stepper_data.moving_stepper->position )
9000b080:	b0009003 	imm	-28669
9000b084:	e86000c8 	lwi	r3, r0, 200
9000b088:	e8830000 	lwi	r4, r3, 0
9000b08c:	e873002c 	lwi	r3, r19, 44
9000b090:	16441801 	cmp	r18, r4, r3
9000b094:	bcb20028 	bgei	r18, 40		// 9000b0bc
        {
            stepper_data.increment = -1;
9000b098:	3060ffff 	addik	r3, r0, -1
9000b09c:	b0009003 	imm	-28669
9000b0a0:	f86000e4 	swi	r3, r0, 228
            stepper_clear_direction_hw( stepper_data.moving_stepper );
9000b0a4:	b0009003 	imm	-28669
9000b0a8:	e86000c8 	lwi	r3, r0, 200
9000b0ac:	10a30000 	addk	r5, r3, r0
9000b0b0:	b9f4f5a0 	brlid	r15, -2656	// 9000a650 <stepper_clear_direction_hw>
9000b0b4:	80000000 	or	r0, r0, r0
9000b0b8:	b8000024 	bri	36		// 9000b0dc
        }
        else
        {
            stepper_data.increment = 1;
9000b0bc:	30600001 	addik	r3, r0, 1
9000b0c0:	b0009003 	imm	-28669
9000b0c4:	f86000e4 	swi	r3, r0, 228
            stepper_set_direction_hw( stepper_data.moving_stepper );
9000b0c8:	b0009003 	imm	-28669
9000b0cc:	e86000c8 	lwi	r3, r0, 200
9000b0d0:	10a30000 	addk	r5, r3, r0
9000b0d4:	b9f4f5d4 	brlid	r15, -2604	// 9000a6a8 <stepper_set_direction_hw>
9000b0d8:	80000000 	or	r0, r0, r0
        }

        if ( stepper_data.remaining_steps >=
9000b0dc:	b0009003 	imm	-28669
9000b0e0:	e88000d0 	lwi	r4, r0, 208
9000b0e4:	b0009003 	imm	-28669
9000b0e8:	e86000c8 	lwi	r3, r0, 200
9000b0ec:	e863001c 	lwi	r3, r3, 28
9000b0f0:	10631800 	addk	r3, r3, r3
9000b0f4:	16432001 	cmp	r18, r3, r4
9000b0f8:	bc52002c 	blti	r18, 44		// 9000b124
             2 * stepper_data.moving_stepper->ramp_steps )
        {
            stepper_data.up_steps =
9000b0fc:	b0009003 	imm	-28669
9000b100:	e86000c8 	lwi	r3, r0, 200
9000b104:	e863001c 	lwi	r3, r3, 28
9000b108:	b0009003 	imm	-28669
9000b10c:	f86000d8 	swi	r3, r0, 216
9000b110:	b0009003 	imm	-28669
9000b114:	e86000d8 	lwi	r3, r0, 216
9000b118:	b0009003 	imm	-28669
9000b11c:	f86000d4 	swi	r3, r0, 212
9000b120:	b800003c 	bri	60		// 9000b15c
                stepper_data.down_steps = stepper_data.moving_stepper->ramp_steps;
        }
        else
        {
            stepper_data.up_steps   = stepper_data.remaining_steps / 2;
9000b124:	b0009003 	imm	-28669
9000b128:	e88000d0 	lwi	r4, r0, 208
9000b12c:	6464001f 	bsrli	r3, r4, 31
9000b130:	10632000 	addk	r3, r3, r4
9000b134:	90630001 	sra	r3, r3
9000b138:	b0009003 	imm	-28669
9000b13c:	f86000d4 	swi	r3, r0, 212
            stepper_data.down_steps = stepper_data.remaining_steps - stepper_data.up_steps;
9000b140:	b0009003 	imm	-28669
9000b144:	e88000d0 	lwi	r4, r0, 208
9000b148:	b0009003 	imm	-28669
9000b14c:	e86000d4 	lwi	r3, r0, 212
9000b150:	14632000 	rsubk	r3, r3, r4
9000b154:	b0009003 	imm	-28669
9000b158:	f86000d8 	swi	r3, r0, 216
        }
    }

    stepper_data.moving_stepper->current_freq = stepper_data.moving_stepper->slow_freq;
9000b15c:	b0009003 	imm	-28669
9000b160:	e88000c8 	lwi	r4, r0, 200
9000b164:	b0009003 	imm	-28669
9000b168:	e86000c8 	lwi	r3, r0, 200
9000b16c:	e8630010 	lwi	r3, r3, 16
9000b170:	f8640018 	swi	r3, r4, 24

    stepper_start_step_hw( stepper_data.moving_stepper->current_freq );
9000b174:	b0009003 	imm	-28669
9000b178:	e86000c8 	lwi	r3, r0, 200
9000b17c:	e8630018 	lwi	r3, r3, 24
9000b180:	10a30000 	addk	r5, r3, r0
9000b184:	b9f4f30c 	brlid	r15, -3316	// 9000a490 <stepper_start_step_hw>
9000b188:	80000000 	or	r0, r0, r0

    return true;
9000b18c:	30600001 	addik	r3, r0, 1
9000b190:	f873001c 	swi	r3, r19, 28
9000b194:	e873001c 	lwi	r3, r19, 28
}
9000b198:	e9e10000 	lwi	r15, r1, 0
9000b19c:	10330000 	addk	r1, r19, r0
9000b1a0:	ea610020 	lwi	r19, r1, 32
9000b1a4:	30210024 	addik	r1, r1, 36
9000b1a8:	b60f0008 	rtsd	r15, 8
9000b1ac:	80000000 	or	r0, r0, r0

9000b1b0 <stepper_set_home_sensor_make_hook>:


//------------------------------------------------------------------------------
void stepper_set_home_sensor_make_hook( StepperMotor stepper, bool ( *hook_func )( int ) )
{
9000b1b0:	3021ffe0 	addik	r1, r1, -32
9000b1b4:	f9e10000 	swi	r15, r1, 0
9000b1b8:	fa61001c 	swi	r19, r1, 28
9000b1bc:	12610000 	addk	r19, r1, r0
9000b1c0:	f8b30024 	swi	r5, r19, 36
9000b1c4:	f8d30028 	swi	r6, r19, 40
    ASSERT( stepper < numSteppers );
9000b1c8:	e8730024 	lwi	r3, r19, 36
9000b1cc:	22400002 	addi	r18, r0, 2
9000b1d0:	16439003 	cmpu	r18, r3, r18
9000b1d4:	bcb20028 	bgei	r18, 40		// 9000b1fc
9000b1d8:	94110002 	msrclr	r0, 2
9000b1dc:	b0009002 	imm	-28670
9000b1e0:	30a01ac4 	addik	r5, r0, 6852
9000b1e4:	b0009002 	imm	-28670
9000b1e8:	30c01a80 	addik	r6, r0, 6784
9000b1ec:	30e0014a 	addik	r7, r0, 330
9000b1f0:	b9f41234 	brlid	r15, 4660	// 9000c424 <printAssert>
9000b1f4:	80000000 	or	r0, r0, r0
9000b1f8:	b8000000 	bri	0		// 9000b1f8
    stepper_data.steppers[ stepper ].home_sensor_make_hook = hook_func;
9000b1fc:	e8930024 	lwi	r4, r19, 36
9000b200:	3060004c 	addik	r3, r0, 76
9000b204:	40841800 	mul	r4, r4, r3
9000b208:	b0009003 	imm	-28669
9000b20c:	30600020 	addik	r3, r0, 32
9000b210:	10841800 	addk	r4, r4, r3
9000b214:	e8730028 	lwi	r3, r19, 40
9000b218:	f8640000 	swi	r3, r4, 0
}
9000b21c:	e9e10000 	lwi	r15, r1, 0
9000b220:	10330000 	addk	r1, r19, r0
9000b224:	ea61001c 	lwi	r19, r1, 28
9000b228:	30210020 	addik	r1, r1, 32
9000b22c:	b60f0008 	rtsd	r15, 8
9000b230:	80000000 	or	r0, r0, r0

9000b234 <stepper_set_home_sensor_break_hook>:


//------------------------------------------------------------------------------
void stepper_set_home_sensor_break_hook( StepperMotor stepper, bool ( *hook_func )( int ) )
{
9000b234:	3021ffe0 	addik	r1, r1, -32
9000b238:	f9e10000 	swi	r15, r1, 0
9000b23c:	fa61001c 	swi	r19, r1, 28
9000b240:	12610000 	addk	r19, r1, r0
9000b244:	f8b30024 	swi	r5, r19, 36
9000b248:	f8d30028 	swi	r6, r19, 40
    ASSERT( stepper < numSteppers );
9000b24c:	e8730024 	lwi	r3, r19, 36
9000b250:	22400002 	addi	r18, r0, 2
9000b254:	16439003 	cmpu	r18, r3, r18
9000b258:	bcb20028 	bgei	r18, 40		// 9000b280
9000b25c:	94110002 	msrclr	r0, 2
9000b260:	b0009002 	imm	-28670
9000b264:	30a01ac4 	addik	r5, r0, 6852
9000b268:	b0009002 	imm	-28670
9000b26c:	30c01a80 	addik	r6, r0, 6784
9000b270:	30e00152 	addik	r7, r0, 338
9000b274:	b9f411b0 	brlid	r15, 4528	// 9000c424 <printAssert>
9000b278:	80000000 	or	r0, r0, r0
9000b27c:	b8000000 	bri	0		// 9000b27c
    stepper_data.steppers[ stepper ].home_sensor_break_hook = hook_func;
9000b280:	e8930024 	lwi	r4, r19, 36
9000b284:	3060004c 	addik	r3, r0, 76
9000b288:	40841800 	mul	r4, r4, r3
9000b28c:	b0009003 	imm	-28669
9000b290:	30600024 	addik	r3, r0, 36
9000b294:	10841800 	addk	r4, r4, r3
9000b298:	e8730028 	lwi	r3, r19, 40
9000b29c:	f8640000 	swi	r3, r4, 0
}
9000b2a0:	e9e10000 	lwi	r15, r1, 0
9000b2a4:	10330000 	addk	r1, r19, r0
9000b2a8:	ea61001c 	lwi	r19, r1, 28
9000b2ac:	30210020 	addik	r1, r1, 32
9000b2b0:	b60f0008 	rtsd	r15, 8
9000b2b4:	80000000 	or	r0, r0, r0

9000b2b8 <stepper_set_alt_sensor_make_hook>:


//------------------------------------------------------------------------------
void stepper_set_alt_sensor_make_hook( StepperMotor stepper, bool ( *hook_func )( int ) )
{
9000b2b8:	3021ffe0 	addik	r1, r1, -32
9000b2bc:	f9e10000 	swi	r15, r1, 0
9000b2c0:	fa61001c 	swi	r19, r1, 28
9000b2c4:	12610000 	addk	r19, r1, r0
9000b2c8:	f8b30024 	swi	r5, r19, 36
9000b2cc:	f8d30028 	swi	r6, r19, 40
    ASSERT( stepper < numSteppers );
9000b2d0:	e8730024 	lwi	r3, r19, 36
9000b2d4:	22400002 	addi	r18, r0, 2
9000b2d8:	16439003 	cmpu	r18, r3, r18
9000b2dc:	bcb20028 	bgei	r18, 40		// 9000b304
9000b2e0:	94110002 	msrclr	r0, 2
9000b2e4:	b0009002 	imm	-28670
9000b2e8:	30a01ac4 	addik	r5, r0, 6852
9000b2ec:	b0009002 	imm	-28670
9000b2f0:	30c01a80 	addik	r6, r0, 6784
9000b2f4:	30e0015a 	addik	r7, r0, 346
9000b2f8:	b9f4112c 	brlid	r15, 4396	// 9000c424 <printAssert>
9000b2fc:	80000000 	or	r0, r0, r0
9000b300:	b8000000 	bri	0		// 9000b300
    stepper_data.steppers[ stepper ].alt_sensor_make_hook = hook_func;
9000b304:	e8930024 	lwi	r4, r19, 36
9000b308:	3060004c 	addik	r3, r0, 76
9000b30c:	40841800 	mul	r4, r4, r3
9000b310:	b0009003 	imm	-28669
9000b314:	30600028 	addik	r3, r0, 40
9000b318:	10841800 	addk	r4, r4, r3
9000b31c:	e8730028 	lwi	r3, r19, 40
9000b320:	f8640000 	swi	r3, r4, 0
}
9000b324:	e9e10000 	lwi	r15, r1, 0
9000b328:	10330000 	addk	r1, r19, r0
9000b32c:	ea61001c 	lwi	r19, r1, 28
9000b330:	30210020 	addik	r1, r1, 32
9000b334:	b60f0008 	rtsd	r15, 8
9000b338:	80000000 	or	r0, r0, r0

9000b33c <stepper_set_alt_sensor_break_hook>:


//------------------------------------------------------------------------------
void stepper_set_alt_sensor_break_hook( StepperMotor stepper, bool ( *hook_func )( int ) )
{
9000b33c:	3021ffe0 	addik	r1, r1, -32
9000b340:	f9e10000 	swi	r15, r1, 0
9000b344:	fa61001c 	swi	r19, r1, 28
9000b348:	12610000 	addk	r19, r1, r0
9000b34c:	f8b30024 	swi	r5, r19, 36
9000b350:	f8d30028 	swi	r6, r19, 40
    ASSERT( stepper < numSteppers );
9000b354:	e8730024 	lwi	r3, r19, 36
9000b358:	22400002 	addi	r18, r0, 2
9000b35c:	16439003 	cmpu	r18, r3, r18
9000b360:	bcb20028 	bgei	r18, 40		// 9000b388
9000b364:	94110002 	msrclr	r0, 2
9000b368:	b0009002 	imm	-28670
9000b36c:	30a01ac4 	addik	r5, r0, 6852
9000b370:	b0009002 	imm	-28670
9000b374:	30c01a80 	addik	r6, r0, 6784
9000b378:	30e00162 	addik	r7, r0, 354
9000b37c:	b9f410a8 	brlid	r15, 4264	// 9000c424 <printAssert>
9000b380:	80000000 	or	r0, r0, r0
9000b384:	b8000000 	bri	0		// 9000b384
    stepper_data.steppers[ stepper ].alt_sensor_break_hook = hook_func;
9000b388:	e8930024 	lwi	r4, r19, 36
9000b38c:	3060004c 	addik	r3, r0, 76
9000b390:	40841800 	mul	r4, r4, r3
9000b394:	b0009003 	imm	-28669
9000b398:	3060002c 	addik	r3, r0, 44
9000b39c:	10841800 	addk	r4, r4, r3
9000b3a0:	e8730028 	lwi	r3, r19, 40
9000b3a4:	f8640000 	swi	r3, r4, 0
}
9000b3a8:	e9e10000 	lwi	r15, r1, 0
9000b3ac:	10330000 	addk	r1, r19, r0
9000b3b0:	ea61001c 	lwi	r19, r1, 28
9000b3b4:	30210020 	addik	r1, r1, 32
9000b3b8:	b60f0008 	rtsd	r15, 8
9000b3bc:	80000000 	or	r0, r0, r0

9000b3c0 <stepper_is_at_home_position>:


//------------------------------------------------------------------------------
bool stepper_is_at_home_position( StepperMotor stepper )
{
9000b3c0:	3021ffe0 	addik	r1, r1, -32
9000b3c4:	f9e10000 	swi	r15, r1, 0
9000b3c8:	fa61001c 	swi	r19, r1, 28
9000b3cc:	12610000 	addk	r19, r1, r0
9000b3d0:	f8b30024 	swi	r5, r19, 36
    ASSERT( stepper < numSteppers );
9000b3d4:	e8730024 	lwi	r3, r19, 36
9000b3d8:	22400002 	addi	r18, r0, 2
9000b3dc:	16439003 	cmpu	r18, r3, r18
9000b3e0:	bcb20028 	bgei	r18, 40		// 9000b408
9000b3e4:	94110002 	msrclr	r0, 2
9000b3e8:	b0009002 	imm	-28670
9000b3ec:	30a01ac4 	addik	r5, r0, 6852
9000b3f0:	b0009002 	imm	-28670
9000b3f4:	30c01a80 	addik	r6, r0, 6784
9000b3f8:	30e0016a 	addik	r7, r0, 362
9000b3fc:	b9f41028 	brlid	r15, 4136	// 9000c424 <printAssert>
9000b400:	80000000 	or	r0, r0, r0
9000b404:	b8000000 	bri	0		// 9000b404
    if( !stepper_busy() )
9000b408:	b9f4f7c8 	brlid	r15, -2104	// 9000abd0 <stepper_busy>
9000b40c:	80000000 	or	r0, r0, r0
9000b410:	bc23002c 	bnei	r3, 44		// 9000b43c
        stepper_set_address_hw( stepper_data.steppers[ stepper ].hw_address );
9000b414:	e8930024 	lwi	r4, r19, 36
9000b418:	3060004c 	addik	r3, r0, 76
9000b41c:	40841800 	mul	r4, r4, r3
9000b420:	b0009003 	imm	-28669
9000b424:	30600018 	addik	r3, r0, 24
9000b428:	10641800 	addk	r3, r4, r3
9000b42c:	e8630000 	lwi	r3, r3, 0
9000b430:	10a30000 	addk	r5, r3, r0
9000b434:	b9f4eedc 	brlid	r15, -4388	// 9000a310 <stepper_set_address_hw>
9000b438:	80000000 	or	r0, r0, r0
    return stepper_get_home_sensor_hw();
9000b43c:	b9f4f14c 	brlid	r15, -3764	// 9000a588 <stepper_get_home_sensor_hw>
9000b440:	80000000 	or	r0, r0, r0
}
9000b444:	e9e10000 	lwi	r15, r1, 0
9000b448:	10330000 	addk	r1, r19, r0
9000b44c:	ea61001c 	lwi	r19, r1, 28
9000b450:	30210020 	addik	r1, r1, 32
9000b454:	b60f0008 	rtsd	r15, 8
9000b458:	80000000 	or	r0, r0, r0

9000b45c <stepper_is_at_alt_position>:


//------------------------------------------------------------------------------
bool stepper_is_at_alt_position( StepperMotor stepper )
{
9000b45c:	3021ffe0 	addik	r1, r1, -32
9000b460:	f9e10000 	swi	r15, r1, 0
9000b464:	fa61001c 	swi	r19, r1, 28
9000b468:	12610000 	addk	r19, r1, r0
9000b46c:	f8b30024 	swi	r5, r19, 36
    ASSERT( stepper < numSteppers );
9000b470:	e8730024 	lwi	r3, r19, 36
9000b474:	22400002 	addi	r18, r0, 2
9000b478:	16439003 	cmpu	r18, r3, r18
9000b47c:	bcb20028 	bgei	r18, 40		// 9000b4a4
9000b480:	94110002 	msrclr	r0, 2
9000b484:	b0009002 	imm	-28670
9000b488:	30a01ac4 	addik	r5, r0, 6852
9000b48c:	b0009002 	imm	-28670
9000b490:	30c01a80 	addik	r6, r0, 6784
9000b494:	30e00174 	addik	r7, r0, 372
9000b498:	b9f40f8c 	brlid	r15, 3980	// 9000c424 <printAssert>
9000b49c:	80000000 	or	r0, r0, r0
9000b4a0:	b8000000 	bri	0		// 9000b4a0
    if( !stepper_busy() )
9000b4a4:	b9f4f72c 	brlid	r15, -2260	// 9000abd0 <stepper_busy>
9000b4a8:	80000000 	or	r0, r0, r0
9000b4ac:	bc23002c 	bnei	r3, 44		// 9000b4d8
        stepper_set_address_hw( stepper_data.steppers[ stepper ].hw_address );
9000b4b0:	e8930024 	lwi	r4, r19, 36
9000b4b4:	3060004c 	addik	r3, r0, 76
9000b4b8:	40841800 	mul	r4, r4, r3
9000b4bc:	b0009003 	imm	-28669
9000b4c0:	30600018 	addik	r3, r0, 24
9000b4c4:	10641800 	addk	r3, r4, r3
9000b4c8:	e8630000 	lwi	r3, r3, 0
9000b4cc:	10a30000 	addk	r5, r3, r0
9000b4d0:	b9f4ee40 	brlid	r15, -4544	// 9000a310 <stepper_set_address_hw>
9000b4d4:	80000000 	or	r0, r0, r0
    return stepper_get_alt_sensor_hw( &stepper_data.steppers[ stepper ] );
9000b4d8:	e8930024 	lwi	r4, r19, 36
9000b4dc:	3060004c 	addik	r3, r0, 76
9000b4e0:	40641800 	mul	r3, r4, r3
9000b4e4:	10830000 	addk	r4, r3, r0
9000b4e8:	b0009002 	imm	-28670
9000b4ec:	3060ffe4 	addik	r3, r0, -28
9000b4f0:	10641800 	addk	r3, r4, r3
9000b4f4:	10a30000 	addk	r5, r3, r0
9000b4f8:	b9f4f0f8 	brlid	r15, -3848	// 9000a5f0 <stepper_get_alt_sensor_hw>
9000b4fc:	80000000 	or	r0, r0, r0
}
9000b500:	e9e10000 	lwi	r15, r1, 0
9000b504:	10330000 	addk	r1, r19, r0
9000b508:	ea61001c 	lwi	r19, r1, 28
9000b50c:	30210020 	addik	r1, r1, 32
9000b510:	b60f0008 	rtsd	r15, 8
9000b514:	80000000 	or	r0, r0, r0

9000b518 <get_stepper_position>:


//------------------------------------------------------------------------------
int get_stepper_position( StepperMotor stepper )
{
9000b518:	3021ffe0 	addik	r1, r1, -32
9000b51c:	f9e10000 	swi	r15, r1, 0
9000b520:	fa61001c 	swi	r19, r1, 28
9000b524:	12610000 	addk	r19, r1, r0
9000b528:	f8b30024 	swi	r5, r19, 36
    ASSERT( stepper < numSteppers );
9000b52c:	e8730024 	lwi	r3, r19, 36
9000b530:	22400002 	addi	r18, r0, 2
9000b534:	16439003 	cmpu	r18, r3, r18
9000b538:	bcb20028 	bgei	r18, 40		// 9000b560
9000b53c:	94110002 	msrclr	r0, 2
9000b540:	b0009002 	imm	-28670
9000b544:	30a01ac4 	addik	r5, r0, 6852
9000b548:	b0009002 	imm	-28670
9000b54c:	30c01a80 	addik	r6, r0, 6784
9000b550:	30e0017e 	addik	r7, r0, 382
9000b554:	b9f40ed0 	brlid	r15, 3792	// 9000c424 <printAssert>
9000b558:	80000000 	or	r0, r0, r0
9000b55c:	b8000000 	bri	0		// 9000b55c
    return stepper_data.steppers[ stepper ].position;
9000b560:	e8930024 	lwi	r4, r19, 36
9000b564:	3060004c 	addik	r3, r0, 76
9000b568:	40841800 	mul	r4, r4, r3
9000b56c:	b0009002 	imm	-28670
9000b570:	3060ffe4 	addik	r3, r0, -28
9000b574:	10641800 	addk	r3, r4, r3
9000b578:	e8630000 	lwi	r3, r3, 0
}
9000b57c:	e9e10000 	lwi	r15, r1, 0
9000b580:	10330000 	addk	r1, r19, r0
9000b584:	ea61001c 	lwi	r19, r1, 28
9000b588:	30210020 	addik	r1, r1, 32
9000b58c:	b60f0008 	rtsd	r15, 8
9000b590:	80000000 	or	r0, r0, r0

9000b594 <stepper_motor_callback>:


//------------------------------------------------------------------------------
//! Stepper motor ISR callback.
//
//! This function is the interrupt service routine for the stepper motors.  The
//! stepper motor module uses a timer to control the stepper motors.  This
//! function is called when the timer expires.
//!
//! The interrupt service routine is responsible for tracking the location of
//! the steppers and moving the steppers to their target locations.  The home
//! sensors are monitored here.  This function is responsible for ramping
//! the step frequency up and down during each move to avoid misstepping
//! and jarring motion on the steppers.
//
static void stepper_motor_callback( void )
{
9000b594:	3021ffd8 	addik	r1, r1, -40
9000b598:	f9e10000 	swi	r15, r1, 0
9000b59c:	fa610024 	swi	r19, r1, 36
9000b5a0:	12610000 	addk	r19, r1, r0
    bool abort_move = false;
9000b5a4:	f8130020 	swi	r0, r19, 32
    stepper_instance * moving_stepper = stepper_data.moving_stepper;
9000b5a8:	b0009003 	imm	-28669
9000b5ac:	e86000c8 	lwi	r3, r0, 200
9000b5b0:	f873001c 	swi	r3, r19, 28

    if(!moving_stepper)
9000b5b4:	e873001c 	lwi	r3, r19, 28
9000b5b8:	bc030334 	beqi	r3, 820		// 9000b8ec
    {
        return;
    }

    moving_stepper->position += stepper_data.increment;
9000b5bc:	e873001c 	lwi	r3, r19, 28
9000b5c0:	e8830000 	lwi	r4, r3, 0
9000b5c4:	b0009003 	imm	-28669
9000b5c8:	e86000e4 	lwi	r3, r0, 228
9000b5cc:	10841800 	addk	r4, r4, r3
9000b5d0:	e873001c 	lwi	r3, r19, 28
9000b5d4:	f8830000 	swi	r4, r3, 0
    ++stepper_data.steps_taken;
9000b5d8:	b0009003 	imm	-28669
9000b5dc:	e86000dc 	lwi	r3, r0, 220
9000b5e0:	30630001 	addik	r3, r3, 1
9000b5e4:	b0009003 	imm	-28669
9000b5e8:	f86000dc 	swi	r3, r0, 220

    if( stepper_get_home_sensor_hw() )
9000b5ec:	b9f4ef9c 	brlid	r15, -4196	// 9000a588 <stepper_get_home_sensor_hw>
9000b5f0:	80000000 	or	r0, r0, r0
9000b5f4:	bc030038 	beqi	r3, 56		// 9000b62c
    {
        if( moving_stepper->home_sensor_make_hook )
9000b5f8:	e873001c 	lwi	r3, r19, 28
9000b5fc:	e863003c 	lwi	r3, r3, 60
9000b600:	bc03005c 	beqi	r3, 92		// 9000b65c
        {
            abort_move = !moving_stepper->home_sensor_make_hook( moving_stepper->position );
9000b604:	e873001c 	lwi	r3, r19, 28
9000b608:	e883003c 	lwi	r4, r3, 60
9000b60c:	e873001c 	lwi	r3, r19, 28
9000b610:	e8630000 	lwi	r3, r3, 0
9000b614:	10a30000 	addk	r5, r3, r0
9000b618:	99fc2000 	brald	r15, r4
9000b61c:	80000000 	or	r0, r0, r0
9000b620:	88630400 	pcmpeq	r3, r3, r0
9000b624:	f8730020 	swi	r3, r19, 32
9000b628:	b8000034 	bri	52		// 9000b65c
        }
    }
    else
    {
        if( moving_stepper->home_sensor_break_hook )
9000b62c:	e873001c 	lwi	r3, r19, 28
9000b630:	e8630040 	lwi	r3, r3, 64
9000b634:	bc030028 	beqi	r3, 40		// 9000b65c
        {
            abort_move = !moving_stepper->home_sensor_break_hook( moving_stepper->position );
9000b638:	e873001c 	lwi	r3, r19, 28
9000b63c:	e8830040 	lwi	r4, r3, 64
9000b640:	e873001c 	lwi	r3, r19, 28
9000b644:	e8630000 	lwi	r3, r3, 0
9000b648:	10a30000 	addk	r5, r3, r0
9000b64c:	99fc2000 	brald	r15, r4
9000b650:	80000000 	or	r0, r0, r0
9000b654:	88630400 	pcmpeq	r3, r3, r0
9000b658:	f8730020 	swi	r3, r19, 32
        }
    }

    if( stepper_get_alt_sensor_hw() )
9000b65c:	b9f4ef94 	brlid	r15, -4204	// 9000a5f0 <stepper_get_alt_sensor_hw>
9000b660:	80000000 	or	r0, r0, r0
9000b664:	bc030038 	beqi	r3, 56		// 9000b69c
    {
        if( moving_stepper->alt_sensor_make_hook )
9000b668:	e873001c 	lwi	r3, r19, 28
9000b66c:	e8630044 	lwi	r3, r3, 68
9000b670:	bc03005c 	beqi	r3, 92		// 9000b6cc
        {
            abort_move = !moving_stepper->alt_sensor_make_hook( moving_stepper->position );
9000b674:	e873001c 	lwi	r3, r19, 28
9000b678:	e8830044 	lwi	r4, r3, 68
9000b67c:	e873001c 	lwi	r3, r19, 28
9000b680:	e8630000 	lwi	r3, r3, 0
9000b684:	10a30000 	addk	r5, r3, r0
9000b688:	99fc2000 	brald	r15, r4
9000b68c:	80000000 	or	r0, r0, r0
9000b690:	88630400 	pcmpeq	r3, r3, r0
9000b694:	f8730020 	swi	r3, r19, 32
9000b698:	b8000034 	bri	52		// 9000b6cc
        }
    }
    else
    {
        if( moving_stepper->alt_sensor_break_hook)
9000b69c:	e873001c 	lwi	r3, r19, 28
9000b6a0:	e8630048 	lwi	r3, r3, 72
9000b6a4:	bc030028 	beqi	r3, 40		// 9000b6cc
        {
            abort_move = !moving_stepper->alt_sensor_break_hook( moving_stepper->position );
9000b6a8:	e873001c 	lwi	r3, r19, 28
9000b6ac:	e8830048 	lwi	r4, r3, 72
9000b6b0:	e873001c 	lwi	r3, r19, 28
9000b6b4:	e8630000 	lwi	r3, r3, 0
9000b6b8:	10a30000 	addk	r5, r3, r0
9000b6bc:	99fc2000 	brald	r15, r4
9000b6c0:	80000000 	or	r0, r0, r0
9000b6c4:	88630400 	pcmpeq	r3, r3, r0
9000b6c8:	f8730020 	swi	r3, r19, 32
        }
    }

    if( stepper_data.target_position == stepperHome && !abort_move )
9000b6cc:	b0009003 	imm	-28669
9000b6d0:	e86000cc 	lwi	r3, r0, 204
9000b6d4:	b0007fff 	imm	32767
9000b6d8:	aa43ffff 	xori	r18, r3, -1
9000b6dc:	bc3200ac 	bnei	r18, 172		// 9000b788
9000b6e0:	e8730020 	lwi	r3, r19, 32
9000b6e4:	bc2300a4 	bnei	r3, 164		// 9000b788
    {
        if( stepper_data.steps_taken > moving_stepper->max_steps )
9000b6e8:	b0009003 	imm	-28669
9000b6ec:	e86000dc 	lwi	r3, r0, 220
9000b6f0:	e893001c 	lwi	r4, r19, 28
9000b6f4:	e884000c 	lwi	r4, r4, 12
9000b6f8:	16432001 	cmp	r18, r3, r4
9000b6fc:	bcb2001c 	bgei	r18, 28		// 9000b718
        {
            moving_stepper->fault = 1;
9000b700:	e873001c 	lwi	r3, r19, 28
9000b704:	30800001 	addik	r4, r0, 1
9000b708:	f8830020 	swi	r4, r3, 32
            abort_move = true;
9000b70c:	30600001 	addik	r3, r0, 1
9000b710:	f8730020 	swi	r3, r19, 32
9000b714:	b8000074 	bri	116		// 9000b788
        }
        else if( stepper_get_home_sensor_hw( moving_stepper ) )
9000b718:	e8b3001c 	lwi	r5, r19, 28
9000b71c:	b9f4ee6c 	brlid	r15, -4500	// 9000a588 <stepper_get_home_sensor_hw>
9000b720:	80000000 	or	r0, r0, r0
9000b724:	bc030064 	beqi	r3, 100		// 9000b788
        {
            moving_stepper->fault = 0;
9000b728:	e873001c 	lwi	r3, r19, 28
9000b72c:	f8030020 	swi	r0, r3, 32
            moving_stepper->position = moving_stepper->home_pin_location;
9000b730:	e873001c 	lwi	r3, r19, 28
9000b734:	e8830008 	lwi	r4, r3, 8
9000b738:	e873001c 	lwi	r3, r19, 28
9000b73c:	f8830000 	swi	r4, r3, 0

            // Step past home enough to ramp the frequency down.
            stepper_data.remaining_steps =
9000b740:	e873001c 	lwi	r3, r19, 28
9000b744:	e883001c 	lwi	r4, r3, 28
9000b748:	b0009003 	imm	-28669
9000b74c:	e86000d4 	lwi	r3, r0, 212
9000b750:	14632000 	rsubk	r3, r3, r4
9000b754:	b0009003 	imm	-28669
9000b758:	f86000d8 	swi	r3, r0, 216
9000b75c:	b0009003 	imm	-28669
9000b760:	e86000d8 	lwi	r3, r0, 216
9000b764:	b0009003 	imm	-28669
9000b768:	f86000d0 	swi	r3, r0, 208
                stepper_data.down_steps =
                moving_stepper->ramp_steps - stepper_data.up_steps;

            stepper_data.target_position =
9000b76c:	e873001c 	lwi	r3, r19, 28
9000b770:	e8830008 	lwi	r4, r3, 8
9000b774:	b0009003 	imm	-28669
9000b778:	e86000d0 	lwi	r3, r0, 208
9000b77c:	14632000 	rsubk	r3, r3, r4
9000b780:	b0009003 	imm	-28669
9000b784:	f86000cc 	swi	r3, r0, 204
                moving_stepper->home_pin_location - stepper_data.remaining_steps;
        }
    }

    if( abort_move ||
9000b788:	e8730020 	lwi	r3, r19, 32
9000b78c:	bc23003c 	bnei	r3, 60		// 9000b7c8
9000b790:	b0009003 	imm	-28669
9000b794:	e86000cc 	lwi	r3, r0, 204
9000b798:	b0007fff 	imm	32767
9000b79c:	aa43ffff 	xori	r18, r3, -1
9000b7a0:	bc120040 	beqi	r18, 64		// 9000b7e0
9000b7a4:	b0009003 	imm	-28669
9000b7a8:	e88000cc 	lwi	r4, r0, 204
9000b7ac:	e873001c 	lwi	r3, r19, 28
9000b7b0:	e8630000 	lwi	r3, r3, 0
9000b7b4:	14832000 	rsubk	r4, r3, r4
9000b7b8:	b0009003 	imm	-28669
9000b7bc:	e86000e4 	lwi	r3, r0, 228
9000b7c0:	40641800 	mul	r3, r4, r3
9000b7c4:	bc83001c 	bgti	r3, 28		// 9000b7e0
       ( stepper_data.target_position != stepperHome &&
        ( ( stepper_data.target_position - moving_stepper->position ) * stepper_data.increment ) <= 0 ) )
    {
        stepper_disable( moving_stepper );
9000b7c8:	e8b3001c 	lwi	r5, r19, 28
9000b7cc:	b9f40414 	brlid	r15, 1044	// 9000bbe0 <stepper_disable>
9000b7d0:	80000000 	or	r0, r0, r0
        stepper_data.moving_stepper = NULL;
9000b7d4:	b0009003 	imm	-28669
9000b7d8:	f80000c8 	swi	r0, r0, 200
9000b7dc:	b8000110 	bri	272		// 9000b8ec
    }
    else
    {
        // Ramp the stepper frequency up or down.
        if( stepper_data.remaining_steps )
9000b7e0:	b0009003 	imm	-28669
9000b7e4:	e86000d0 	lwi	r3, r0, 208
9000b7e8:	bc030018 	beqi	r3, 24		// 9000b800
            --stepper_data.remaining_steps;
9000b7ec:	b0009003 	imm	-28669
9000b7f0:	e86000d0 	lwi	r3, r0, 208
9000b7f4:	3063ffff 	addik	r3, r3, -1
9000b7f8:	b0009003 	imm	-28669
9000b7fc:	f86000d0 	swi	r3, r0, 208

        if( stepper_data.up_steps )
9000b800:	b0009003 	imm	-28669
9000b804:	e86000d4 	lwi	r3, r0, 212
9000b808:	bc030018 	beqi	r3, 24		// 9000b820
            --stepper_data.up_steps;
9000b80c:	b0009003 	imm	-28669
9000b810:	e86000d4 	lwi	r3, r0, 212
9000b814:	3063ffff 	addik	r3, r3, -1
9000b818:	b0009003 	imm	-28669
9000b81c:	f86000d4 	swi	r3, r0, 212

        if( stepper_data.up_steps )
9000b820:	b0009003 	imm	-28669
9000b824:	e86000d4 	lwi	r3, r0, 212
9000b828:	bc03002c 	beqi	r3, 44		// 9000b854
        {
            stepper_data.moving_stepper->current_freq += stepper_data.freq_adjust;
9000b82c:	b0009003 	imm	-28669
9000b830:	e8a000c8 	lwi	r5, r0, 200
9000b834:	b0009003 	imm	-28669
9000b838:	e86000c8 	lwi	r3, r0, 200
9000b83c:	e8830018 	lwi	r4, r3, 24
9000b840:	b0009003 	imm	-28669
9000b844:	e86000e0 	lwi	r3, r0, 224
9000b848:	10641800 	addk	r3, r4, r3
9000b84c:	f8650018 	swi	r3, r5, 24
9000b850:	b800004c 	bri	76		// 9000b89c
        }
        else if( stepper_data.down_steps && stepper_data.remaining_steps <=
9000b854:	b0009003 	imm	-28669
9000b858:	e86000d8 	lwi	r3, r0, 216
9000b85c:	bc030040 	beqi	r3, 64		// 9000b89c
9000b860:	b0009003 	imm	-28669
9000b864:	e88000d0 	lwi	r4, r0, 208
9000b868:	b0009003 	imm	-28669
9000b86c:	e86000d8 	lwi	r3, r0, 216
9000b870:	16441801 	cmp	r18, r4, r3
9000b874:	bc520028 	blti	r18, 40		// 9000b89c
                 stepper_data.down_steps )
        {
            stepper_data.moving_stepper->current_freq -= stepper_data.freq_adjust;
9000b878:	b0009003 	imm	-28669
9000b87c:	e8a000c8 	lwi	r5, r0, 200
9000b880:	b0009003 	imm	-28669
9000b884:	e86000c8 	lwi	r3, r0, 200
9000b888:	e8830018 	lwi	r4, r3, 24
9000b88c:	b0009003 	imm	-28669
9000b890:	e86000e0 	lwi	r3, r0, 224
9000b894:	14632000 	rsubk	r3, r3, r4
9000b898:	f8650018 	swi	r3, r5, 24
        }
        
        if( stepper_data.moving_stepper->current_freq <
9000b89c:	b0009003 	imm	-28669
9000b8a0:	e86000c8 	lwi	r3, r0, 200
9000b8a4:	e8830018 	lwi	r4, r3, 24
9000b8a8:	b0009003 	imm	-28669
9000b8ac:	e86000c8 	lwi	r3, r0, 200
9000b8b0:	e8630010 	lwi	r3, r3, 16
9000b8b4:	16432001 	cmp	r18, r3, r4
9000b8b8:	bcb2001c 	bgei	r18, 28		// 9000b8d4
            stepper_data.moving_stepper->slow_freq )
        {
            stepper_data.moving_stepper->current_freq =
9000b8bc:	b0009003 	imm	-28669
9000b8c0:	e86000c8 	lwi	r3, r0, 200
9000b8c4:	b0009003 	imm	-28669
9000b8c8:	e88000c8 	lwi	r4, r0, 200
9000b8cc:	e8840010 	lwi	r4, r4, 16
9000b8d0:	f8830018 	swi	r4, r3, 24
                stepper_data.moving_stepper->slow_freq;
        }

        stepper_start_step_hw( stepper_data.moving_stepper->current_freq );
9000b8d4:	b0009003 	imm	-28669
9000b8d8:	e86000c8 	lwi	r3, r0, 200
9000b8dc:	e8630018 	lwi	r3, r3, 24
9000b8e0:	10a30000 	addk	r5, r3, r0
9000b8e4:	b9f4ebac 	brlid	r15, -5204	// 9000a490 <stepper_start_step_hw>
9000b8e8:	80000000 	or	r0, r0, r0
    }
}
9000b8ec:	e9e10000 	lwi	r15, r1, 0
9000b8f0:	10330000 	addk	r1, r19, r0
9000b8f4:	ea610024 	lwi	r19, r1, 36
9000b8f8:	30210028 	addik	r1, r1, 40
9000b8fc:	b60f0008 	rtsd	r15, 8
9000b900:	80000000 	or	r0, r0, r0

9000b904 <stepper_find_ramp_freq_adjust>:



//------------------------------------------------------------------------------
static int stepper_find_ramp_freq_adjust( stepper_instance *stepper )
{
9000b904:	3021ffe0 	addik	r1, r1, -32
9000b908:	f9e10000 	swi	r15, r1, 0
9000b90c:	fa61001c 	swi	r19, r1, 28
9000b910:	12610000 	addk	r19, r1, r0
9000b914:	f8b30024 	swi	r5, r19, 36
    ASSERT(stepper);
9000b918:	e8730024 	lwi	r3, r19, 36
9000b91c:	bc230028 	bnei	r3, 40		// 9000b944
9000b920:	94110002 	msrclr	r0, 2
9000b924:	b0009002 	imm	-28670
9000b928:	30a01adc 	addik	r5, r0, 6876
9000b92c:	b0009002 	imm	-28670
9000b930:	30c01a80 	addik	r6, r0, 6784
9000b934:	30e001fb 	addik	r7, r0, 507
9000b938:	b9f40aec 	brlid	r15, 2796	// 9000c424 <printAssert>
9000b93c:	80000000 	or	r0, r0, r0
9000b940:	b8000000 	bri	0		// 9000b940
    return (stepper->fast_freq - stepper->slow_freq) / stepper->ramp_steps;
9000b944:	e8730024 	lwi	r3, r19, 36
9000b948:	e8830014 	lwi	r4, r3, 20
9000b94c:	e8730024 	lwi	r3, r19, 36
9000b950:	e8630010 	lwi	r3, r3, 16
9000b954:	14832000 	rsubk	r4, r3, r4
9000b958:	e8730024 	lwi	r3, r19, 36
9000b95c:	e863001c 	lwi	r3, r3, 28
9000b960:	48632000 	idiv	r3, r3, r4
}
9000b964:	e9e10000 	lwi	r15, r1, 0
9000b968:	10330000 	addk	r1, r19, r0
9000b96c:	ea61001c 	lwi	r19, r1, 28
9000b970:	30210020 	addik	r1, r1, 32
9000b974:	b60f0008 	rtsd	r15, 8
9000b978:	80000000 	or	r0, r0, r0

9000b97c <stepper_init_instance>:



//------------------------------------------------------------------------------
static void stepper_init_instance( stepper_instance *stepper, StepperMotor id )
{
9000b97c:	3021ffdc 	addik	r1, r1, -36
9000b980:	f9e10000 	swi	r15, r1, 0
9000b984:	fa610020 	swi	r19, r1, 32
9000b988:	12610000 	addk	r19, r1, r0
9000b98c:	f8b30028 	swi	r5, r19, 40
9000b990:	f8d3002c 	swi	r6, r19, 44
    stepper->position               = 0;
9000b994:	e8730028 	lwi	r3, r19, 40
9000b998:	f8030000 	swi	r0, r3, 0
    stepper->fault                  = 0;
9000b99c:	e8730028 	lwi	r3, r19, 40
9000b9a0:	f8030020 	swi	r0, r3, 32
    stepper->home_sensor_make_hook  = NULL;
9000b9a4:	e8730028 	lwi	r3, r19, 40
9000b9a8:	f803003c 	swi	r0, r3, 60
    stepper->home_sensor_break_hook = NULL;
9000b9ac:	e8730028 	lwi	r3, r19, 40
9000b9b0:	f8030040 	swi	r0, r3, 64
    stepper->alt_sensor_make_hook   = NULL;
9000b9b4:	e8730028 	lwi	r3, r19, 40
9000b9b8:	f8030044 	swi	r0, r3, 68
    stepper->alt_sensor_break_hook  = NULL;
9000b9bc:	e8730028 	lwi	r3, r19, 40
9000b9c0:	f8030048 	swi	r0, r3, 72

    switch( id )
9000b9c4:	e873002c 	lwi	r3, r19, 44
9000b9c8:	f873001c 	swi	r3, r19, 28
9000b9cc:	e873001c 	lwi	r3, r19, 28
9000b9d0:	aa430001 	xori	r18, r3, 1
9000b9d4:	bc1200b0 	beqi	r18, 176		// 9000ba84
9000b9d8:	e873001c 	lwi	r3, r19, 28
9000b9dc:	22400001 	addi	r18, r0, 1
9000b9e0:	16521803 	cmpu	r18, r18, r3
9000b9e4:	bc520014 	blti	r18, 20		// 9000b9f8
9000b9e8:	e873001c 	lwi	r3, r19, 28
9000b9ec:	aa430002 	xori	r18, r3, 2
9000b9f0:	bc12011c 	beqi	r18, 284		// 9000bb0c
9000b9f4:	b800019c 	bri	412		// 9000bb90
    {
    case stepperU:
        stepper->hw_address                 = lid_hw_address;
9000b9f8:	e8930028 	lwi	r4, r19, 40
9000b9fc:	30600001 	addik	r3, r0, 1
9000ba00:	f8640034 	swi	r3, r4, 52
        stepper->hw_enable_mask             = lid_hw_enable_mask;
9000ba04:	e8930028 	lwi	r4, r19, 40
9000ba08:	30600004 	addik	r3, r0, 4
9000ba0c:	f8640038 	swi	r3, r4, 56
        stepper->max_steps                  = max_lid_steps;
9000ba10:	e8930028 	lwi	r4, r19, 40
9000ba14:	30604e20 	addik	r3, r0, 20000
9000ba18:	f864000c 	swi	r3, r4, 12
        stepper->slow_freq                  = defaultSlowFrequency;
9000ba1c:	e8930028 	lwi	r4, r19, 40
9000ba20:	30600064 	addik	r3, r0, 100
9000ba24:	f8640010 	swi	r3, r4, 16
        stepper->fast_freq                  = defaultFastFrequency;
9000ba28:	e8930028 	lwi	r4, r19, 40
9000ba2c:	306005dc 	addik	r3, r0, 1500
9000ba30:	f8640014 	swi	r3, r4, 20
        stepper->ramp_steps                 = defaultRampSteps;
9000ba34:	e8930028 	lwi	r4, r19, 40
9000ba38:	3060000a 	addik	r3, r0, 10
9000ba3c:	f864001c 	swi	r3, r4, 28
        stepper->home_position              = lid_home_position;
9000ba40:	e8730028 	lwi	r3, r19, 40
9000ba44:	f8030004 	swi	r0, r3, 4
        stepper->home_pin_location          = lid_home_pin_location;
9000ba48:	e8930028 	lwi	r4, r19, 40
9000ba4c:	30600032 	addik	r3, r0, 50
9000ba50:	f8640008 	swi	r3, r4, 8
        stepper->disable_after_move_at_home = true;
9000ba54:	e8930028 	lwi	r4, r19, 40
9000ba58:	30600001 	addik	r3, r0, 1
9000ba5c:	f8640024 	swi	r3, r4, 36
        stepper->disable_after_move_at_alt  = false;
9000ba60:	e8730028 	lwi	r3, r19, 40
9000ba64:	f8030028 	swi	r0, r3, 40
        stepper->disable_after_move_between = true;
9000ba68:	e8930028 	lwi	r4, r19, 40
9000ba6c:	30600001 	addik	r3, r0, 1
9000ba70:	f864002c 	swi	r3, r4, 44
        stepper->adjust_home_position       = true;
9000ba74:	e8930028 	lwi	r4, r19, 40
9000ba78:	30600001 	addik	r3, r0, 1
9000ba7c:	f8640030 	swi	r3, r4, 48
        break;
9000ba80:	b8000134 	bri	308		// 9000bbb4
    case stepperF:
        stepper->hw_address                 = door_hw_address;
9000ba84:	e8730028 	lwi	r3, r19, 40
9000ba88:	f8030034 	swi	r0, r3, 52
        stepper->hw_enable_mask             = door_hw_enable_mask;
9000ba8c:	e8930028 	lwi	r4, r19, 40
9000ba90:	30600001 	addik	r3, r0, 1
9000ba94:	f8640038 	swi	r3, r4, 56
        stepper->max_steps                  = max_door_steps;
9000ba98:	e8930028 	lwi	r4, r19, 40
9000ba9c:	b0000000 	imm	0
9000baa0:	306088b8 	addik	r3, r0, -30536
9000baa4:	f864000c 	swi	r3, r4, 12
        stepper->slow_freq                  = defaultSlowFrequency;
9000baa8:	e8930028 	lwi	r4, r19, 40
9000baac:	30600064 	addik	r3, r0, 100
9000bab0:	f8640010 	swi	r3, r4, 16
        stepper->fast_freq                  = defaultFastFrequency;
9000bab4:	e8930028 	lwi	r4, r19, 40
9000bab8:	306005dc 	addik	r3, r0, 1500
9000babc:	f8640014 	swi	r3, r4, 20
        stepper->ramp_steps                 = defaultRampSteps;
9000bac0:	e8930028 	lwi	r4, r19, 40
9000bac4:	3060000a 	addik	r3, r0, 10
9000bac8:	f864001c 	swi	r3, r4, 28
        stepper->home_position              = door_home_position;
9000bacc:	e8730028 	lwi	r3, r19, 40
9000bad0:	f8030004 	swi	r0, r3, 4
        stepper->home_pin_location          = door_home_pin_location;
9000bad4:	e8930028 	lwi	r4, r19, 40
9000bad8:	30600014 	addik	r3, r0, 20
9000badc:	f8640008 	swi	r3, r4, 8
        stepper->disable_after_move_at_home = false;
9000bae0:	e8730028 	lwi	r3, r19, 40
9000bae4:	f8030024 	swi	r0, r3, 36
        stepper->disable_after_move_at_alt  = false;
9000bae8:	e8730028 	lwi	r3, r19, 40
9000baec:	f8030028 	swi	r0, r3, 40
        stepper->disable_after_move_between = true;
9000baf0:	e8930028 	lwi	r4, r19, 40
9000baf4:	30600001 	addik	r3, r0, 1
9000baf8:	f864002c 	swi	r3, r4, 44
        stepper->adjust_home_position       = true;
9000bafc:	e8930028 	lwi	r4, r19, 40
9000bb00:	30600001 	addik	r3, r0, 1
9000bb04:	f8640030 	swi	r3, r4, 48
        break;
9000bb08:	b80000ac 	bri	172		// 9000bbb4
    case stepperR:
        stepper->hw_address                 = filter_hw_address;
9000bb0c:	e8930028 	lwi	r4, r19, 40
9000bb10:	30600003 	addik	r3, r0, 3
9000bb14:	f8640034 	swi	r3, r4, 52
        stepper->hw_enable_mask             = filter_hw_enable_mask;
9000bb18:	e8930028 	lwi	r4, r19, 40
9000bb1c:	30600002 	addik	r3, r0, 2
9000bb20:	f8640038 	swi	r3, r4, 56
        stepper->max_steps                  = max_filter_steps;
9000bb24:	e8930028 	lwi	r4, r19, 40
9000bb28:	b0000000 	imm	0
9000bb2c:	306088b8 	addik	r3, r0, -30536
9000bb30:	f864000c 	swi	r3, r4, 12
        stepper->slow_freq                  = defaultSlowFrequency;
9000bb34:	e8930028 	lwi	r4, r19, 40
9000bb38:	30600064 	addik	r3, r0, 100
9000bb3c:	f8640010 	swi	r3, r4, 16
        stepper->fast_freq                  = defaultFastFrequency;
9000bb40:	e8930028 	lwi	r4, r19, 40
9000bb44:	306005dc 	addik	r3, r0, 1500
9000bb48:	f8640014 	swi	r3, r4, 20
        stepper->ramp_steps                 = defaultRampSteps;
9000bb4c:	e8930028 	lwi	r4, r19, 40
9000bb50:	3060000a 	addik	r3, r0, 10
9000bb54:	f864001c 	swi	r3, r4, 28
        stepper->home_position              = filter_home_position;
9000bb58:	e8730028 	lwi	r3, r19, 40
9000bb5c:	f8030004 	swi	r0, r3, 4
        stepper->home_pin_location          = filter_home_pin_location;
9000bb60:	e8730028 	lwi	r3, r19, 40
9000bb64:	f8030008 	swi	r0, r3, 8
        stepper->disable_after_move_at_home = false;
9000bb68:	e8730028 	lwi	r3, r19, 40
9000bb6c:	f8030024 	swi	r0, r3, 36
        stepper->disable_after_move_at_alt  = false;
9000bb70:	e8730028 	lwi	r3, r19, 40
9000bb74:	f8030028 	swi	r0, r3, 40
        stepper->disable_after_move_between = true;
9000bb78:	e8930028 	lwi	r4, r19, 40
9000bb7c:	30600001 	addik	r3, r0, 1
9000bb80:	f864002c 	swi	r3, r4, 44
        stepper->adjust_home_position       = false;
9000bb84:	e8730028 	lwi	r3, r19, 40
9000bb88:	f8030030 	swi	r0, r3, 48
        break;
9000bb8c:	b8000028 	bri	40		// 9000bbb4
    default:
        ASSERT( 0 );
9000bb90:	94110002 	msrclr	r0, 2
9000bb94:	b0009002 	imm	-28670
9000bb98:	30a01a7c 	addik	r5, r0, 6780
9000bb9c:	b0009002 	imm	-28670
9000bba0:	30c01a80 	addik	r6, r0, 6784
9000bba4:	30e00238 	addik	r7, r0, 568
9000bba8:	b9f4087c 	brlid	r15, 2172	// 9000c424 <printAssert>
9000bbac:	80000000 	or	r0, r0, r0
9000bbb0:	b8000000 	bri	0		// 9000bbb0
    }

    stepper_clear_enable_hw( stepper->hw_enable_mask );
9000bbb4:	e8730028 	lwi	r3, r19, 40
9000bbb8:	e8630038 	lwi	r3, r3, 56
9000bbbc:	10a30000 	addk	r5, r3, r0
9000bbc0:	b9f4e840 	brlid	r15, -6080	// 9000a400 <stepper_clear_enable_hw>
9000bbc4:	80000000 	or	r0, r0, r0
}
9000bbc8:	e9e10000 	lwi	r15, r1, 0
9000bbcc:	10330000 	addk	r1, r19, r0
9000bbd0:	ea610020 	lwi	r19, r1, 32
9000bbd4:	30210024 	addik	r1, r1, 36
9000bbd8:	b60f0008 	rtsd	r15, 8
9000bbdc:	80000000 	or	r0, r0, r0

9000bbe0 <stepper_disable>:



//------------------------------------------------------------------------------
static void stepper_disable( stepper_instance * moving_stepper )
{
9000bbe0:	3021ffe0 	addik	r1, r1, -32
9000bbe4:	f9e10000 	swi	r15, r1, 0
9000bbe8:	fa61001c 	swi	r19, r1, 28
9000bbec:	12610000 	addk	r19, r1, r0
9000bbf0:	f8b30024 	swi	r5, r19, 36
    if(!moving_stepper)
9000bbf4:	e8730024 	lwi	r3, r19, 36
9000bbf8:	bc03009c 	beqi	r3, 156		// 9000bc94
    {
        return;
    }
    if( moving_stepper->position == moving_stepper->home_position )
9000bbfc:	e8730024 	lwi	r3, r19, 36
9000bc00:	e8830000 	lwi	r4, r3, 0
9000bc04:	e8730024 	lwi	r3, r19, 36
9000bc08:	e8630004 	lwi	r3, r3, 4
9000bc0c:	16432000 	rsubk	r18, r3, r4
9000bc10:	bc320028 	bnei	r18, 40		// 9000bc38
    {
        // Home
        if( moving_stepper->disable_after_move_at_home )
9000bc14:	e8730024 	lwi	r3, r19, 36
9000bc18:	e8630024 	lwi	r3, r3, 36
9000bc1c:	bc030078 	beqi	r3, 120		// 9000bc94
        {
            stepper_clear_enable_hw( moving_stepper->hw_enable_mask );
9000bc20:	e8730024 	lwi	r3, r19, 36
9000bc24:	e8630038 	lwi	r3, r3, 56
9000bc28:	10a30000 	addk	r5, r3, r0
9000bc2c:	b9f4e7d4 	brlid	r15, -6188	// 9000a400 <stepper_clear_enable_hw>
9000bc30:	80000000 	or	r0, r0, r0
9000bc34:	b8000060 	bri	96		// 9000bc94
        }
    }
    else if( moving_stepper->position == stepper_data.target_position )
9000bc38:	e8730024 	lwi	r3, r19, 36
9000bc3c:	e8830000 	lwi	r4, r3, 0
9000bc40:	b0009003 	imm	-28669
9000bc44:	e86000cc 	lwi	r3, r0, 204
9000bc48:	16432000 	rsubk	r18, r3, r4
9000bc4c:	bc320028 	bnei	r18, 40		// 9000bc74
    {
        // Alt
        if( moving_stepper->disable_after_move_at_alt )
9000bc50:	e8730024 	lwi	r3, r19, 36
9000bc54:	e8630028 	lwi	r3, r3, 40
9000bc58:	bc03003c 	beqi	r3, 60		// 9000bc94
        {
            stepper_clear_enable_hw( moving_stepper->hw_enable_mask );
9000bc5c:	e8730024 	lwi	r3, r19, 36
9000bc60:	e8630038 	lwi	r3, r3, 56
9000bc64:	10a30000 	addk	r5, r3, r0
9000bc68:	b9f4e798 	brlid	r15, -6248	// 9000a400 <stepper_clear_enable_hw>
9000bc6c:	80000000 	or	r0, r0, r0
9000bc70:	b8000024 	bri	36		// 9000bc94
        }
    }
    else
    {
        // In between
        if( moving_stepper->disable_after_move_between )
9000bc74:	e8730024 	lwi	r3, r19, 36
9000bc78:	e863002c 	lwi	r3, r3, 44
9000bc7c:	bc030018 	beqi	r3, 24		// 9000bc94
        {
            stepper_clear_enable_hw( moving_stepper->hw_enable_mask );
9000bc80:	e8730024 	lwi	r3, r19, 36
9000bc84:	e8630038 	lwi	r3, r3, 56
9000bc88:	10a30000 	addk	r5, r3, r0
9000bc8c:	b9f4e774 	brlid	r15, -6284	// 9000a400 <stepper_clear_enable_hw>
9000bc90:	80000000 	or	r0, r0, r0
        }
    }
}
9000bc94:	e9e10000 	lwi	r15, r1, 0
9000bc98:	10330000 	addk	r1, r19, r0
9000bc9c:	ea61001c 	lwi	r19, r1, 28
9000bca0:	30210020 	addik	r1, r1, 32
9000bca4:	b60f0008 	rtsd	r15, 8
9000bca8:	80000000 	or	r0, r0, r0

9000bcac <InitializeSwitches>:
// Interface functions


void InitializeSwitches()
{
9000bcac:	3021fff8 	addik	r1, r1, -8
9000bcb0:	fa610004 	swi	r19, r1, 4
9000bcb4:	12610000 	addk	r19, r1, r0
	// Stimulate the switches so triggers can be detected
	SWITCH.SWITCH_L_IN_STIMULUS  = 1; 
9000bcb8:	b000cb21 	imm	-13535
9000bcbc:	30800000 	addik	r4, r0, 0
9000bcc0:	30600001 	addik	r3, r0, 1
9000bcc4:	f8640004 	swi	r3, r4, 4
	SWITCH.SWITCH_L_OUT_STIMULUS = 1; 
9000bcc8:	b000cb21 	imm	-13535
9000bccc:	30800000 	addik	r4, r0, 0
9000bcd0:	30600001 	addik	r3, r0, 1
9000bcd4:	f864000c 	swi	r3, r4, 12
	SWITCH.SWITCH_F_IN_STIMULUS  = 1; 
9000bcd8:	b000cb21 	imm	-13535
9000bcdc:	30800000 	addik	r4, r0, 0
9000bce0:	30600001 	addik	r3, r0, 1
9000bce4:	f8640014 	swi	r3, r4, 20
	SWITCH.SWITCH_F_OUT_STIMULUS = 1; 
9000bce8:	b000cb21 	imm	-13535
9000bcec:	30800000 	addik	r4, r0, 0
9000bcf0:	30600001 	addik	r3, r0, 1
9000bcf4:	f864001c 	swi	r3, r4, 28
	SWITCH.SWITCH_R_IN_STIMULUS  = 1; 
9000bcf8:	b000cb21 	imm	-13535
9000bcfc:	30800000 	addik	r4, r0, 0
9000bd00:	30600001 	addik	r3, r0, 1
9000bd04:	f8640024 	swi	r3, r4, 36
	SWITCH.SWITCH_R_OUT_STIMULUS = 1; 
9000bd08:	b000cb21 	imm	-13535
9000bd0c:	30800000 	addik	r4, r0, 0
9000bd10:	30600001 	addik	r3, r0, 1
9000bd14:	f864002c 	swi	r3, r4, 44
	SWITCH.SWITCH_B_IN_STIMULUS  = 1; 
9000bd18:	b000cb21 	imm	-13535
9000bd1c:	30800000 	addik	r4, r0, 0
9000bd20:	30600001 	addik	r3, r0, 1
9000bd24:	f8640034 	swi	r3, r4, 52
	SWITCH.SWITCH_B_OUT_STIMULUS = 1; 
9000bd28:	b000cb21 	imm	-13535
9000bd2c:	30800000 	addik	r4, r0, 0
9000bd30:	30600001 	addik	r3, r0, 1
9000bd34:	f864003c 	swi	r3, r4, 60
	SWITCH.SWITCH_U_IN_STIMULUS  = 1; 
9000bd38:	b000cb21 	imm	-13535
9000bd3c:	30800000 	addik	r4, r0, 0
9000bd40:	30600001 	addik	r3, r0, 1
9000bd44:	f8640044 	swi	r3, r4, 68
	SWITCH.SWITCH_U_OUT_STIMULUS = 1; 
9000bd48:	b000cb21 	imm	-13535
9000bd4c:	30800000 	addik	r4, r0, 0
9000bd50:	30600001 	addik	r3, r0, 1
9000bd54:	f864004c 	swi	r3, r4, 76
	SWITCH.SWITCH_D_IN_STIMULUS  = 1; 
9000bd58:	b000cb21 	imm	-13535
9000bd5c:	30800000 	addik	r4, r0, 0
9000bd60:	30600001 	addik	r3, r0, 1
9000bd64:	f8640054 	swi	r3, r4, 84
	SWITCH.SWITCH_D_OUT_STIMULUS = 1; 
9000bd68:	b000cb21 	imm	-13535
9000bd6c:	30800000 	addik	r4, r0, 0
9000bd70:	30600001 	addik	r3, r0, 1
9000bd74:	f864005c 	swi	r3, r4, 92
}
9000bd78:	10330000 	addk	r1, r19, r0
9000bd7c:	ea610004 	lwi	r19, r1, 4
9000bd80:	30210008 	addik	r1, r1, 8
9000bd84:	b60f0008 	rtsd	r15, 8
9000bd88:	80000000 	or	r0, r0, r0

9000bd8c <IsSwitchTriggered>:

bool IsSwitchTriggered(SwitchLocation switchLoc)
{
9000bd8c:	3021fff8 	addik	r1, r1, -8
9000bd90:	fa610004 	swi	r19, r1, 4
9000bd94:	12610000 	addk	r19, r1, r0
9000bd98:	f8b3000c 	swi	r5, r19, 12
	/*InitializeSwitches();
	if     (switchLoc == LInSwitch)  {return SWITCH.SWITCH_L_IN_SIGNAL; }
	else if(switchLoc == LOutSwitch) {return SWITCH.SWITCH_L_OUT_SIGNAL;}
	else if(switchLoc == FInSwitch)  {return SWITCH.SWITCH_F_IN_SIGNAL; }
	else if(switchLoc == FOutSwitch) {return SWITCH.SWITCH_F_OUT_SIGNAL;}
	else if(switchLoc == RInSwitch)  {return SWITCH.SWITCH_R_IN_SIGNAL; }
	else if(switchLoc == ROutSwitch) {return SWITCH.SWITCH_R_OUT_SIGNAL;}
	else if(switchLoc == BInSwitch)  {return SWITCH.SWITCH_B_IN_SIGNAL; }
	else if(switchLoc == BOutSwitch) {return SWITCH.SWITCH_B_OUT_SIGNAL;}
	else if(switchLoc == UInSwitch)  {return SWITCH.SWITCH_U_IN_SIGNAL; }
	else if(switchLoc == UOutSwitch) {return SWITCH.SWITCH_U_OUT_SIGNAL;}
	else if(switchLoc == DInSwitch)  {return SWITCH.SWITCH_D_IN_SIGNAL; }
	else if(switchLoc == DOutSwitch) {return SWITCH.SWITCH_D_OUT_SIGNAL;}
	else {return false;}
	return false;*/
	return 0;
9000bd9c:	10600000 	addk	r3, r0, r0
}
9000bda0:	10330000 	addk	r1, r19, r0
9000bda4:	ea610004 	lwi	r19, r1, 4
9000bda8:	30210008 	addik	r1, r1, 8
9000bdac:	b60f0008 	rtsd	r15, 8
9000bdb0:	80000000 	or	r0, r0, r0

9000bdb4 <timerInit>:
///////////////////////////////////////////////////
// Interface functions

void timerInit()
{
9000bdb4:	3021ffe0 	addik	r1, r1, -32
9000bdb8:	f9e10000 	swi	r15, r1, 0
9000bdbc:	fa61001c 	swi	r19, r1, 28
9000bdc0:	12610000 	addk	r19, r1, r0
    TLR0_REG  = 0;
9000bdc4:	b00083c0 	imm	-31808
9000bdc8:	30600004 	addik	r3, r0, 4
9000bdcc:	f8030000 	swi	r0, r3, 0
    TCR0_REG  = 0;
9000bdd0:	b00083c0 	imm	-31808
9000bdd4:	30600008 	addik	r3, r0, 8
9000bdd8:	f8030000 	swi	r0, r3, 0
    highTimer = 0;
9000bddc:	b0009002 	imm	-28670
9000bde0:	f800fbb0 	swi	r0, r0, -1104
    
    TCSR0_REG = TSCR_ENALL_MASK |
9000bde4:	b00083c0 	imm	-31808
9000bde8:	30800000 	addik	r4, r0, 0
9000bdec:	306005d0 	addik	r3, r0, 1488
9000bdf0:	f8640000 	swi	r3, r4, 0
                TSCR_ENT_MASK   |
                TSCR_TINT_MASK  |
                TSCR_ENIT_MASK  |
                TSCR_ARHT_MASK;

    TCSR1_REG = 0;
9000bdf4:	b00083c0 	imm	-31808
9000bdf8:	30600010 	addik	r3, r0, 16
9000bdfc:	f8030000 	swi	r0, r3, 0
                    
    registerInterruptHandler(XPAR_INTC_TIMER_INTERRUPT_INTR, timerIsr, 0);
9000be00:	10a00000 	addk	r5, r0, r0
9000be04:	b0009000 	imm	-28672
9000be08:	30c0c2a8 	addik	r6, r0, -15704
9000be0c:	10e00000 	addk	r7, r0, r0
9000be10:	b9f439e0 	brlid	r15, 14816	// 9000f7f0 <registerInterruptHandler>
9000be14:	80000000 	or	r0, r0, r0
    enableInterrupt(XPAR_INTC_TIMER_INTERRUPT_INTR);
9000be18:	10a00000 	addk	r5, r0, r0
9000be1c:	b9f43a28 	brlid	r15, 14888	// 9000f844 <enableInterrupt>
9000be20:	80000000 	or	r0, r0, r0
}
9000be24:	e9e10000 	lwi	r15, r1, 0
9000be28:	10330000 	addk	r1, r19, r0
9000be2c:	ea61001c 	lwi	r19, r1, 28
9000be30:	30210020 	addik	r1, r1, 32
9000be34:	b60f0008 	rtsd	r15, 8
9000be38:	80000000 	or	r0, r0, r0

9000be3c <getSystemTicks>:



uint64 getSystemTicks()
{
9000be3c:	3021ffd0 	addik	r1, r1, -48
9000be40:	f9e10000 	swi	r15, r1, 0
9000be44:	fa61002c 	swi	r19, r1, 44
9000be48:	12610000 	addk	r19, r1, r0
    uint32 high;
    uint32 low;
    uint32 highCheck;

    do
    {
        high = highTimer;
9000be4c:	b0009002 	imm	-28670
9000be50:	e860fbb0 	lwi	r3, r0, -1104
9000be54:	f8730028 	swi	r3, r19, 40
        low  = TCR0_REG;
9000be58:	b00083c0 	imm	-31808
9000be5c:	30600008 	addik	r3, r0, 8
9000be60:	e8630000 	lwi	r3, r3, 0
9000be64:	f8730024 	swi	r3, r19, 36

        CRData crdata = enterCriticalRegion();
9000be68:	b9f44190 	brlid	r15, 16784	// 9000fff8 <enterCriticalRegion>
9000be6c:	80000000 	or	r0, r0, r0
9000be70:	f873001c 	swi	r3, r19, 28
        {
            timerIsr( NULL );
9000be74:	10a00000 	addk	r5, r0, r0
9000be78:	b9f40430 	brlid	r15, 1072	// 9000c2a8 <timerIsr>
9000be7c:	80000000 	or	r0, r0, r0
        }
        exitCriticalRegion(crdata);
9000be80:	e8b3001c 	lwi	r5, r19, 28
9000be84:	b9f441b4 	brlid	r15, 16820	// 90010038 <exitCriticalRegion>
9000be88:	80000000 	or	r0, r0, r0
    
        highCheck = highTimer;
9000be8c:	b0009002 	imm	-28670
9000be90:	e860fbb0 	lwi	r3, r0, -1104
9000be94:	f8730020 	swi	r3, r19, 32
    } while( high != highCheck );
9000be98:	e8930028 	lwi	r4, r19, 40
9000be9c:	e8730020 	lwi	r3, r19, 32
9000bea0:	16432000 	rsubk	r18, r3, r4
9000bea4:	bc32ffa8 	bnei	r18, -88		// 9000be4c

    return ((uint64)high << 32) | low;
9000bea8:	e8d30028 	lwi	r6, r19, 40
9000beac:	10e03000 	addk	r7, r0, r6
9000beb0:	10c00000 	addk	r6, r0, r0
9000beb4:	64870400 	bslli	r4, r7, 0
9000beb8:	10a00000 	addk	r5, r0, r0
9000bebc:	e8d30024 	lwi	r6, r19, 36
9000bec0:	10e03000 	addk	r7, r0, r6
9000bec4:	10c00000 	addk	r6, r0, r0
9000bec8:	80843000 	or	r4, r4, r6
9000becc:	80a53800 	or	r5, r5, r7
}
9000bed0:	10640000 	addk	r3, r4, r0
9000bed4:	10850000 	addk	r4, r5, r0
9000bed8:	e9e10000 	lwi	r15, r1, 0
9000bedc:	10330000 	addk	r1, r19, r0
9000bee0:	ea61002c 	lwi	r19, r1, 44
9000bee4:	30210030 	addik	r1, r1, 48
9000bee8:	b60f0008 	rtsd	r15, 8
9000beec:	80000000 	or	r0, r0, r0

9000bef0 <startTimer>:


void startTimer(Timer* timer, uint64 ticks)
{
9000bef0:	3021ffe0 	addik	r1, r1, -32
9000bef4:	f9e10000 	swi	r15, r1, 0
9000bef8:	fa61001c 	swi	r19, r1, 28
9000befc:	12610000 	addk	r19, r1, r0
9000bf00:	f8b30024 	swi	r5, r19, 36
9000bf04:	f8d30028 	swi	r6, r19, 40
9000bf08:	f8f3002c 	swi	r7, r19, 44
    timer->tickCount       = ticks;
9000bf0c:	e8730024 	lwi	r3, r19, 36
9000bf10:	e8930028 	lwi	r4, r19, 40
9000bf14:	e8b3002c 	lwi	r5, r19, 44
9000bf18:	f8830000 	swi	r4, r3, 0
9000bf1c:	f8a30004 	swi	r5, r3, 4
    timer->initialTimerVal = getSystemTicks();
9000bf20:	b9f4ff1c 	brlid	r15, -228	// 9000be3c <getSystemTicks>
9000bf24:	80000000 	or	r0, r0, r0
9000bf28:	10a40000 	addk	r5, r4, r0
9000bf2c:	10830000 	addk	r4, r3, r0
9000bf30:	e8730024 	lwi	r3, r19, 36
9000bf34:	f8830008 	swi	r4, r3, 8
9000bf38:	f8a3000c 	swi	r5, r3, 12
}
9000bf3c:	e9e10000 	lwi	r15, r1, 0
9000bf40:	10330000 	addk	r1, r19, r0
9000bf44:	ea61001c 	lwi	r19, r1, 28
9000bf48:	30210020 	addik	r1, r1, 32
9000bf4c:	b60f0008 	rtsd	r15, 8
9000bf50:	80000000 	or	r0, r0, r0

9000bf54 <timerExpired>:


bool timerExpired(Timer* timer)
{
9000bf54:	3021ffcc 	addik	r1, r1, -52
9000bf58:	f9e10000 	swi	r15, r1, 0
9000bf5c:	fa610030 	swi	r19, r1, 48
9000bf60:	12610000 	addk	r19, r1, r0
9000bf64:	f8b30038 	swi	r5, r19, 56
    return (getSystemTicks() - timer->initialTimerVal) >= timer->tickCount;
9000bf68:	b9f4fed4 	brlid	r15, -300	// 9000be3c <getSystemTicks>
9000bf6c:	80000000 	or	r0, r0, r0
9000bf70:	10c30000 	addk	r6, r3, r0
9000bf74:	10e40000 	addk	r7, r4, r0
9000bf78:	e8730038 	lwi	r3, r19, 56
9000bf7c:	e8830008 	lwi	r4, r3, 8
9000bf80:	e8a3000c 	lwi	r5, r3, 12
9000bf84:	04e53800 	rsub	r7, r5, r7
9000bf88:	0cc43000 	rsubc	r6, r4, r6
9000bf8c:	f8d30024 	swi	r6, r19, 36
9000bf90:	f8f30028 	swi	r7, r19, 40
9000bf94:	e8730038 	lwi	r3, r19, 56
9000bf98:	e8830000 	lwi	r4, r3, 0
9000bf9c:	e8a30004 	lwi	r5, r3, 4
9000bfa0:	f893001c 	swi	r4, r19, 28
9000bfa4:	f8b30020 	swi	r5, r19, 32
9000bfa8:	10a00000 	addk	r5, r0, r0
9000bfac:	f8b3002c 	swi	r5, r19, 44
9000bfb0:	e873001c 	lwi	r3, r19, 28
9000bfb4:	e8930024 	lwi	r4, r19, 36
9000bfb8:	16432003 	cmpu	r18, r3, r4
9000bfbc:	bc52002c 	blti	r18, 44		// 9000bfe8
9000bfc0:	e8b3001c 	lwi	r5, r19, 28
9000bfc4:	e8730024 	lwi	r3, r19, 36
9000bfc8:	16432800 	rsubk	r18, r3, r5
9000bfcc:	bc320014 	bnei	r18, 20		// 9000bfe0
9000bfd0:	e8930020 	lwi	r4, r19, 32
9000bfd4:	e8b30028 	lwi	r5, r19, 40
9000bfd8:	16442803 	cmpu	r18, r4, r5
9000bfdc:	bc52000c 	blti	r18, 12		// 9000bfe8
9000bfe0:	30600001 	addik	r3, r0, 1
9000bfe4:	f873002c 	swi	r3, r19, 44
9000bfe8:	e873002c 	lwi	r3, r19, 44
}
9000bfec:	e9e10000 	lwi	r15, r1, 0
9000bff0:	10330000 	addk	r1, r19, r0
9000bff4:	ea610030 	lwi	r19, r1, 48
9000bff8:	30210034 	addik	r1, r1, 52
9000bffc:	b60f0008 	rtsd	r15, 8
9000c000:	80000000 	or	r0, r0, r0

9000c004 <getTimer_ms>:

uint64 getTimer_ms(Timer* timer)
{
9000c004:	3021ffe0 	addik	r1, r1, -32
9000c008:	f9e10000 	swi	r15, r1, 0
9000c00c:	fa61001c 	swi	r19, r1, 28
9000c010:	12610000 	addk	r19, r1, r0
9000c014:	f8b30024 	swi	r5, r19, 36
    return TICKS_TO_MSEC(getSystemTicks() - timer->initialTimerVal);
9000c018:	b9f4fe24 	brlid	r15, -476	// 9000be3c <getSystemTicks>
9000c01c:	80000000 	or	r0, r0, r0
9000c020:	10c30000 	addk	r6, r3, r0
9000c024:	10e40000 	addk	r7, r4, r0
9000c028:	e8730024 	lwi	r3, r19, 36
9000c02c:	e8830008 	lwi	r4, r3, 8
9000c030:	e8a3000c 	lwi	r5, r3, 12
9000c034:	04a53800 	rsub	r5, r5, r7
9000c038:	0c843000 	rsubc	r4, r4, r6
9000c03c:	10c50000 	addk	r6, r5, r0
9000c040:	10a40000 	addk	r5, r4, r0
9000c044:	30e00000 	addik	r7, r0, 0
9000c048:	b0000001 	imm	1
9000c04c:	3100046a 	addik	r8, r0, 1130
9000c050:	b9f457f0 	brlid	r15, 22512	// 90011840 <__udivdi3>
9000c054:	80000000 	or	r0, r0, r0
9000c058:	10a40000 	addk	r5, r4, r0
9000c05c:	10830000 	addk	r4, r3, r0
}
9000c060:	10640000 	addk	r3, r4, r0
9000c064:	10850000 	addk	r4, r5, r0
9000c068:	e9e10000 	lwi	r15, r1, 0
9000c06c:	10330000 	addk	r1, r19, r0
9000c070:	ea61001c 	lwi	r19, r1, 28
9000c074:	30210020 	addik	r1, r1, 32
9000c078:	b60f0008 	rtsd	r15, 8
9000c07c:	80000000 	or	r0, r0, r0

9000c080 <udelay>:

void udelay(uint32 delay_us)
{
9000c080:	3021ffd0 	addik	r1, r1, -48
9000c084:	f9e10000 	swi	r15, r1, 0
9000c088:	fa61002c 	swi	r19, r1, 44
9000c08c:	12610000 	addk	r19, r1, r0
9000c090:	f8b30034 	swi	r5, r19, 52
    Timer timer;
    
    startTimer(&timer, USEC_TO_TICKS(delay_us));
9000c094:	e8930034 	lwi	r4, r19, 52
9000c098:	10a02000 	addk	r5, r0, r4
9000c09c:	10800000 	addk	r4, r0, r0
9000c0a0:	10c50000 	addk	r6, r5, r0
9000c0a4:	10a40000 	addk	r5, r4, r0
9000c0a8:	30e00000 	addik	r7, r0, 0
9000c0ac:	31000042 	addik	r8, r0, 66
9000c0b0:	b9f456dc 	brlid	r15, 22236	// 9001178c <__muldi3>
9000c0b4:	80000000 	or	r0, r0, r0
9000c0b8:	10a40000 	addk	r5, r4, r0
9000c0bc:	10830000 	addk	r4, r3, r0
9000c0c0:	10c40000 	addk	r6, r4, r0
9000c0c4:	10e50000 	addk	r7, r5, r0
9000c0c8:	3073001c 	addik	r3, r19, 28
9000c0cc:	10a30000 	addk	r5, r3, r0
9000c0d0:	b9f4fe20 	brlid	r15, -480	// 9000bef0 <startTimer>
9000c0d4:	80000000 	or	r0, r0, r0
    
    while(!timerExpired(&timer))
9000c0d8:	3073001c 	addik	r3, r19, 28
9000c0dc:	10a30000 	addk	r5, r3, r0
9000c0e0:	b9f4fe74 	brlid	r15, -396	// 9000bf54 <timerExpired>
9000c0e4:	80000000 	or	r0, r0, r0
9000c0e8:	bc03fff0 	beqi	r3, -16		// 9000c0d8
    {
        //Wait for timer to expire
    }
}
9000c0ec:	e9e10000 	lwi	r15, r1, 0
9000c0f0:	10330000 	addk	r1, r19, r0
9000c0f4:	ea61002c 	lwi	r19, r1, 44
9000c0f8:	30210030 	addik	r1, r1, 48
9000c0fc:	b60f0008 	rtsd	r15, 8
9000c100:	80000000 	or	r0, r0, r0

9000c104 <mdelay>:



void mdelay(uint32 delay_ms)
{
9000c104:	3021ffd0 	addik	r1, r1, -48
9000c108:	f9e10000 	swi	r15, r1, 0
9000c10c:	fa61002c 	swi	r19, r1, 44
9000c110:	12610000 	addk	r19, r1, r0
9000c114:	f8b30034 	swi	r5, r19, 52
    Timer timer;
    
    startTimer(&timer, MSEC_TO_TICKS(delay_ms));
9000c118:	e8930034 	lwi	r4, r19, 52
9000c11c:	10a02000 	addk	r5, r0, r4
9000c120:	10800000 	addk	r4, r0, r0
9000c124:	10c50000 	addk	r6, r5, r0
9000c128:	10a40000 	addk	r5, r4, r0
9000c12c:	30e00000 	addik	r7, r0, 0
9000c130:	b0000001 	imm	1
9000c134:	3100046a 	addik	r8, r0, 1130
9000c138:	b9f45654 	brlid	r15, 22100	// 9001178c <__muldi3>
9000c13c:	80000000 	or	r0, r0, r0
9000c140:	10a40000 	addk	r5, r4, r0
9000c144:	10830000 	addk	r4, r3, r0
9000c148:	10c40000 	addk	r6, r4, r0
9000c14c:	10e50000 	addk	r7, r5, r0
9000c150:	3073001c 	addik	r3, r19, 28
9000c154:	10a30000 	addk	r5, r3, r0
9000c158:	b9f4fd98 	brlid	r15, -616	// 9000bef0 <startTimer>
9000c15c:	80000000 	or	r0, r0, r0
    
    while(!timerExpired(&timer))
9000c160:	3073001c 	addik	r3, r19, 28
9000c164:	10a30000 	addk	r5, r3, r0
9000c168:	b9f4fdec 	brlid	r15, -532	// 9000bf54 <timerExpired>
9000c16c:	80000000 	or	r0, r0, r0
9000c170:	bc03fff0 	beqi	r3, -16		// 9000c160
    {
        //Wait for timer to expire
    }
}
9000c174:	e9e10000 	lwi	r15, r1, 0
9000c178:	10330000 	addk	r1, r19, r0
9000c17c:	ea61002c 	lwi	r19, r1, 44
9000c180:	30210030 	addik	r1, r1, 48
9000c184:	b60f0008 	rtsd	r15, 8
9000c188:	80000000 	or	r0, r0, r0

9000c18c <enablePeriodicTimer>:



void enablePeriodicTimer(PeriodicTimerCallBack callBackFunc, void* callBackRef,
                         uint32 ticks, TimerCallBackInfo * currentCallBackInfo)
{
9000c18c:	3021ffdc 	addik	r1, r1, -36
9000c190:	f9e10000 	swi	r15, r1, 0
9000c194:	fa610020 	swi	r19, r1, 32
9000c198:	12610000 	addk	r19, r1, r0
9000c19c:	f8b30028 	swi	r5, r19, 40
9000c1a0:	f8d3002c 	swi	r6, r19, 44
9000c1a4:	f8f30030 	swi	r7, r19, 48
9000c1a8:	f9130034 	swi	r8, r19, 52
    if( currentCallBackInfo )
9000c1ac:	e8730034 	lwi	r3, r19, 52
9000c1b0:	bc030024 	beqi	r3, 36		// 9000c1d4
    {
        currentCallBackInfo->func = periodicTimerCallBackFunc;
9000c1b4:	b0009002 	imm	-28670
9000c1b8:	e880fba8 	lwi	r4, r0, -1112
9000c1bc:	e8730034 	lwi	r3, r19, 52
9000c1c0:	f8830000 	swi	r4, r3, 0
        currentCallBackInfo->ref  = periodicTimercallBackRef;
9000c1c4:	b0009002 	imm	-28670
9000c1c8:	e880fbac 	lwi	r4, r0, -1108
9000c1cc:	e8730034 	lwi	r3, r19, 52
9000c1d0:	f8830004 	swi	r4, r3, 4
    }

    CRData crdata = enterCriticalRegion();
9000c1d4:	b9f43e24 	brlid	r15, 15908	// 9000fff8 <enterCriticalRegion>
9000c1d8:	80000000 	or	r0, r0, r0
9000c1dc:	f873001c 	swi	r3, r19, 28
    {
        TLR1_REG = ticks;
9000c1e0:	b00083c0 	imm	-31808
9000c1e4:	30800014 	addik	r4, r0, 20
9000c1e8:	e8730030 	lwi	r3, r19, 48
9000c1ec:	f8640000 	swi	r3, r4, 0
        TCR1_REG = ticks;
9000c1f0:	b00083c0 	imm	-31808
9000c1f4:	30800018 	addik	r4, r0, 24
9000c1f8:	e8730030 	lwi	r3, r19, 48
9000c1fc:	f8640000 	swi	r3, r4, 0
    
        TCSR1_REG = TSCR_ENALL_MASK |
9000c200:	b00083c0 	imm	-31808
9000c204:	30800010 	addik	r4, r0, 16
9000c208:	306005d2 	addik	r3, r0, 1490
9000c20c:	f8640000 	swi	r3, r4, 0
                    TSCR_ENT_MASK   |
                    TSCR_TINT_MASK  |
                    TSCR_ENIT_MASK  |
                    TSCR_ARHT_MASK  |
                    TSCR_UDT_MASK;
        
        periodicTimerCallBackFunc = callBackFunc;
9000c210:	e8730028 	lwi	r3, r19, 40
9000c214:	b0009002 	imm	-28670
9000c218:	f860fba8 	swi	r3, r0, -1112
        periodicTimercallBackRef  = callBackRef;
9000c21c:	e873002c 	lwi	r3, r19, 44
9000c220:	b0009002 	imm	-28670
9000c224:	f860fbac 	swi	r3, r0, -1108
    }
    exitCriticalRegion(crdata);
9000c228:	e8b3001c 	lwi	r5, r19, 28
9000c22c:	b9f43e0c 	brlid	r15, 15884	// 90010038 <exitCriticalRegion>
9000c230:	80000000 	or	r0, r0, r0
}
9000c234:	e9e10000 	lwi	r15, r1, 0
9000c238:	10330000 	addk	r1, r19, r0
9000c23c:	ea610020 	lwi	r19, r1, 32
9000c240:	30210024 	addik	r1, r1, 36
9000c244:	b60f0008 	rtsd	r15, 8
9000c248:	80000000 	or	r0, r0, r0

9000c24c <disablePeriodicTimer>:



void disablePeriodicTimer()
{
9000c24c:	3021ffdc 	addik	r1, r1, -36
9000c250:	f9e10000 	swi	r15, r1, 0
9000c254:	fa610020 	swi	r19, r1, 32
9000c258:	12610000 	addk	r19, r1, r0
    CRData crdata = enterCriticalRegion();
9000c25c:	b9f43d9c 	brlid	r15, 15772	// 9000fff8 <enterCriticalRegion>
9000c260:	80000000 	or	r0, r0, r0
9000c264:	f873001c 	swi	r3, r19, 28
    {
        TCSR1_REG = 0;
9000c268:	b00083c0 	imm	-31808
9000c26c:	30600010 	addik	r3, r0, 16
9000c270:	f8030000 	swi	r0, r3, 0

        periodicTimerCallBackFunc = NULL;
9000c274:	b0009002 	imm	-28670
9000c278:	f800fba8 	swi	r0, r0, -1112
        periodicTimercallBackRef  = NULL;
9000c27c:	b0009002 	imm	-28670
9000c280:	f800fbac 	swi	r0, r0, -1108
    }
    exitCriticalRegion(crdata);
9000c284:	e8b3001c 	lwi	r5, r19, 28
9000c288:	b9f43db0 	brlid	r15, 15792	// 90010038 <exitCriticalRegion>
9000c28c:	80000000 	or	r0, r0, r0
}
9000c290:	e9e10000 	lwi	r15, r1, 0
9000c294:	10330000 	addk	r1, r19, r0
9000c298:	ea610020 	lwi	r19, r1, 32
9000c29c:	30210024 	addik	r1, r1, 36
9000c2a0:	b60f0008 	rtsd	r15, 8
9000c2a4:	80000000 	or	r0, r0, r0

9000c2a8 <timerIsr>:



///////////////////////////////////////////////////
// Local functions

static void timerIsr(void *callbackRef)
{
9000c2a8:	3021ffe0 	addik	r1, r1, -32
9000c2ac:	f9e10000 	swi	r15, r1, 0
9000c2b0:	fa61001c 	swi	r19, r1, 28
9000c2b4:	12610000 	addk	r19, r1, r0
9000c2b8:	f8b30024 	swi	r5, r19, 36
    if( TCSR0_REG & TSCR_TINT_MASK )
9000c2bc:	b00083c0 	imm	-31808
9000c2c0:	30600000 	addik	r3, r0, 0
9000c2c4:	e8630000 	lwi	r3, r3, 0
9000c2c8:	a4630100 	andi	r3, r3, 256
9000c2cc:	bc030034 	beqi	r3, 52		// 9000c300
    {
        // Clear interrupt
        TCSR0_REG |= TSCR_TINT_MASK;
9000c2d0:	b00083c0 	imm	-31808
9000c2d4:	30800000 	addik	r4, r0, 0
9000c2d8:	b00083c0 	imm	-31808
9000c2dc:	30600000 	addik	r3, r0, 0
9000c2e0:	e8630000 	lwi	r3, r3, 0
9000c2e4:	a0630100 	ori	r3, r3, 256
9000c2e8:	f8640000 	swi	r3, r4, 0

        highTimer++;
9000c2ec:	b0009002 	imm	-28670
9000c2f0:	e860fbb0 	lwi	r3, r0, -1104
9000c2f4:	30630001 	addik	r3, r3, 1
9000c2f8:	b0009002 	imm	-28670
9000c2fc:	f860fbb0 	swi	r3, r0, -1104
    }

    if( TCSR1_REG & TSCR_TINT_MASK )
9000c300:	b00083c0 	imm	-31808
9000c304:	30600010 	addik	r3, r0, 16
9000c308:	e8630000 	lwi	r3, r3, 0
9000c30c:	a4630100 	andi	r3, r3, 256
9000c310:	bc030048 	beqi	r3, 72		// 9000c358
    {
        // Clear interrupt
        TCSR1_REG |= TSCR_TINT_MASK;
9000c314:	b00083c0 	imm	-31808
9000c318:	30800010 	addik	r4, r0, 16
9000c31c:	b00083c0 	imm	-31808
9000c320:	30600010 	addik	r3, r0, 16
9000c324:	e8630000 	lwi	r3, r3, 0
9000c328:	a0630100 	ori	r3, r3, 256
9000c32c:	f8640000 	swi	r3, r4, 0

        if(periodicTimerCallBackFunc)
9000c330:	b0009002 	imm	-28670
9000c334:	e860fba8 	lwi	r3, r0, -1112
9000c338:	bc030020 	beqi	r3, 32		// 9000c358
        {
            periodicTimerCallBackFunc(periodicTimercallBackRef);
9000c33c:	b0009002 	imm	-28670
9000c340:	e880fba8 	lwi	r4, r0, -1112
9000c344:	b0009002 	imm	-28670
9000c348:	e860fbac 	lwi	r3, r0, -1108
9000c34c:	10a30000 	addk	r5, r3, r0
9000c350:	99fc2000 	brald	r15, r4
9000c354:	80000000 	or	r0, r0, r0
        }
    }
}
9000c358:	e9e10000 	lwi	r15, r1, 0
9000c35c:	10330000 	addk	r1, r19, r0
9000c360:	ea61001c 	lwi	r19, r1, 28
9000c364:	30210020 	addik	r1, r1, 32
9000c368:	b60f0008 	rtsd	r15, 8
9000c36c:	80000000 	or	r0, r0, r0

9000c370 <waitForKey>:
///////////////////////////////////////////////////
// Interface functions

uint8 waitForKey()
{
9000c370:	3021ffd0 	addik	r1, r1, -48
9000c374:	f9e10000 	swi	r15, r1, 0
9000c378:	fa61002c 	swi	r19, r1, 44
9000c37c:	12610000 	addk	r19, r1, r0
    Timer ledTimer;
    
    startTimer(&ledTimer, 0);
9000c380:	3073001c 	addik	r3, r19, 28
9000c384:	10a30000 	addk	r5, r3, r0
9000c388:	10c00000 	addk	r6, r0, r0
9000c38c:	10e00000 	addk	r7, r0, r0
9000c390:	b9f4fb60 	brlid	r15, -1184	// 9000bef0 <startTimer>
9000c394:	80000000 	or	r0, r0, r0

	while(XUartLite_mIsReceiveEmpty(STDIN_BASEADDRESS))
9000c398:	b8000050 	bri	80		// 9000c3e8
	{
        if(timerExpired(&ledTimer))
9000c39c:	3073001c 	addik	r3, r19, 28
9000c3a0:	10a30000 	addk	r5, r3, r0
9000c3a4:	b9f4fbb0 	brlid	r15, -1104	// 9000bf54 <timerExpired>
9000c3a8:	80000000 	or	r0, r0, r0
9000c3ac:	bc03003c 	beqi	r3, 60		// 9000c3e8
        {
            SYSTEM.heartbeatLED = ~SYSTEM.heartbeatLED;
9000c3b0:	b000c540 	imm	-15040
9000c3b4:	30800000 	addik	r4, r0, 0
9000c3b8:	b000c540 	imm	-15040
9000c3bc:	30600000 	addik	r3, r0, 0
9000c3c0:	e8630008 	lwi	r3, r3, 8
9000c3c4:	a863ffff 	xori	r3, r3, -1
9000c3c8:	f8640008 	swi	r3, r4, 8
            startTimer(&ledTimer, MSEC_TO_TICKS(HEARTBEAT_ERROR_PERIOD_ms));
9000c3cc:	3073001c 	addik	r3, r19, 28
9000c3d0:	10a30000 	addk	r5, r3, r0
9000c3d4:	30c00000 	addik	r6, r0, 0
9000c3d8:	b000007f 	imm	127
9000c3dc:	30e027c2 	addik	r7, r0, 10178
9000c3e0:	b9f4fb10 	brlid	r15, -1264	// 9000bef0 <startTimer>
9000c3e4:	80000000 	or	r0, r0, r0
9000c3e8:	b0008402 	imm	-31742
9000c3ec:	30600008 	addik	r3, r0, 8
9000c3f0:	e8630000 	lwi	r3, r3, 0
9000c3f4:	a4630001 	andi	r3, r3, 1
9000c3f8:	bc03ffa4 	beqi	r3, -92		// 9000c39c
        }
	}

	return (uint8)XUartLite_mReadReg(STDIN_BASEADDRESS, XUL_RX_FIFO_OFFSET);
9000c3fc:	b0008402 	imm	-31742
9000c400:	30600000 	addik	r3, r0, 0
9000c404:	e8630000 	lwi	r3, r3, 0
9000c408:	a46300ff 	andi	r3, r3, 255
}
9000c40c:	e9e10000 	lwi	r15, r1, 0
9000c410:	10330000 	addk	r1, r19, r0
9000c414:	ea61002c 	lwi	r19, r1, 44
9000c418:	30210030 	addik	r1, r1, 48
9000c41c:	b60f0008 	rtsd	r15, 8
9000c420:	80000000 	or	r0, r0, r0

9000c424 <printAssert>:



void printAssert(char* expr, char* fileName, int lineNum)
{
9000c424:	3021ffdc 	addik	r1, r1, -36
9000c428:	f9e10000 	swi	r15, r1, 0
9000c42c:	fa610020 	swi	r19, r1, 32
9000c430:	12610000 	addk	r19, r1, r0
9000c434:	f8b30028 	swi	r5, r19, 40
9000c438:	f8d3002c 	swi	r6, r19, 44
9000c43c:	f8f30030 	swi	r7, r19, 48
    CRData crdata = enterCriticalRegion();
9000c440:	b9f43bb8 	brlid	r15, 15288	// 9000fff8 <enterCriticalRegion>
9000c444:	80000000 	or	r0, r0, r0
9000c448:	f873001c 	swi	r3, r19, 28
    {
        do
        {
            printf("\n\n\nAssertion Failure:\n");
9000c44c:	b0009002 	imm	-28670
9000c450:	30a01ae4 	addik	r5, r0, 6884
9000c454:	b9f43ae4 	brlid	r15, 15076	// 9000ff38 <puts>
9000c458:	80000000 	or	r0, r0, r0
            printf("  '%s'\n", expr);
9000c45c:	b0009002 	imm	-28670
9000c460:	30a01afc 	addik	r5, r0, 6908
9000c464:	e8d30028 	lwi	r6, r19, 40
9000c468:	b9f439dc 	brlid	r15, 14812	// 9000fe44 <printf>
9000c46c:	80000000 	or	r0, r0, r0
            printf("  %s @ Line %d\n", fileName, lineNum);
9000c470:	b0009002 	imm	-28670
9000c474:	30a01b04 	addik	r5, r0, 6916
9000c478:	e8d3002c 	lwi	r6, r19, 44
9000c47c:	e8f30030 	lwi	r7, r19, 48
9000c480:	b9f439c4 	brlid	r15, 14788	// 9000fe44 <printf>
9000c484:	80000000 	or	r0, r0, r0
        } while(waitForKey() != 0x03);  // Continue on Ctrl-C
9000c488:	b9f4fee8 	brlid	r15, -280	// 9000c370 <waitForKey>
9000c48c:	80000000 	or	r0, r0, r0
9000c490:	aa430003 	xori	r18, r3, 3
9000c494:	bc32ffb8 	bnei	r18, -72		// 9000c44c
    
        printf("\nContinuing after Assert\n");
9000c498:	b0009002 	imm	-28670
9000c49c:	30a01b14 	addik	r5, r0, 6932
9000c4a0:	b9f43a98 	brlid	r15, 15000	// 9000ff38 <puts>
9000c4a4:	80000000 	or	r0, r0, r0
    }
    exitCriticalRegion(crdata);
9000c4a8:	e8b3001c 	lwi	r5, r19, 28
9000c4ac:	b9f43b8c 	brlid	r15, 15244	// 90010038 <exitCriticalRegion>
9000c4b0:	80000000 	or	r0, r0, r0
}
9000c4b4:	e9e10000 	lwi	r15, r1, 0
9000c4b8:	10330000 	addk	r1, r19, r0
9000c4bc:	ea610020 	lwi	r19, r1, 32
9000c4c0:	30210024 	addik	r1, r1, 36
9000c4c4:	b60f0008 	rtsd	r15, 8
9000c4c8:	80000000 	or	r0, r0, r0

9000c4cc <serialFlashInit>:
///////////////////////////////////////////////////
// Interface functions

void serialFlashInit()
{
9000c4cc:	3021ffe0 	addik	r1, r1, -32
9000c4d0:	f9e10000 	swi	r15, r1, 0
9000c4d4:	fa61001c 	swi	r19, r1, 28
9000c4d8:	12610000 	addk	r19, r1, r0
    spiInterfaceInit(&spiInterfacePlatformFlash, XPAR_CONFIG_FLASH_SPI_DEVICE_ID,
9000c4dc:	b0009003 	imm	-28669
9000c4e0:	30a0285c 	addik	r5, r0, 10332
9000c4e4:	30c00002 	addik	r6, r0, 2
9000c4e8:	30e00007 	addik	r7, r0, 7
9000c4ec:	31000017 	addik	r8, r0, 23
9000c4f0:	11200000 	addk	r9, r0, r0
9000c4f4:	b9f43b9c 	brlid	r15, 15260	// 90010090 <spiInterfaceInit>
9000c4f8:	80000000 	or	r0, r0, r0
                     XPAR_INTC_CONFIG_FLASH_SPI_IP2INTC_IRPT_INTR,
                     XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION | XSP_CLK_ACTIVE_LOW_OPTION | XSP_CLK_PHASE_1_OPTION,
                     0);

    spiInterfaceInit(&spiInterfaceSoftwareFlash, XPAR_USER_FLASH_SPI_DEVICE_ID,
9000c4fc:	b0009003 	imm	-28669
9000c500:	30a000e8 	addik	r5, r0, 232
9000c504:	30c00003 	addik	r6, r0, 3
9000c508:	30e00006 	addik	r7, r0, 6
9000c50c:	31000017 	addik	r8, r0, 23
9000c510:	11200000 	addk	r9, r0, r0
9000c514:	b9f43b7c 	brlid	r15, 15228	// 90010090 <spiInterfaceInit>
9000c518:	80000000 	or	r0, r0, r0
                     XPAR_INTC_USER_FLASH_SPI_IP2INTC_IRPT_INTR,
                     XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION | XSP_CLK_ACTIVE_LOW_OPTION | XSP_CLK_PHASE_1_OPTION,
                     0);
}
9000c51c:	e9e10000 	lwi	r15, r1, 0
9000c520:	10330000 	addk	r1, r19, r0
9000c524:	ea61001c 	lwi	r19, r1, 28
9000c528:	30210020 	addik	r1, r1, 32
9000c52c:	b60f0008 	rtsd	r15, 8
9000c530:	80000000 	or	r0, r0, r0

9000c534 <readStatusRegister>:


uint8 readStatusRegister(SpiInterface* spiInterface)
{
9000c534:	3021d8cc 	addik	r1, r1, -10036
9000c538:	f9e10000 	swi	r15, r1, 0
9000c53c:	fa612730 	swi	r19, r1, 10032
9000c540:	12610000 	addk	r19, r1, r0
9000c544:	f8b32738 	swi	r5, r19, 10040
    uint8 writeBuffer[SPI_BUFFER_SIZE];
    uint8 readBuffer[SPI_BUFFER_SIZE];

    writeBuffer[0] = OP_STATUS_REGISTER_READ;
9000c548:	3060ffd7 	addik	r3, r0, -41
9000c54c:	f073001c 	sbi	r3, r19, 28
    writeBuffer[1] = 0x00;
9000c550:	f013001d 	sbi	r0, r19, 29

    if(!sendAndReceiveSpiData(spiInterface, writeBuffer, readBuffer, 2)) return 0;
9000c554:	309313a4 	addik	r4, r19, 5028
9000c558:	e8b32738 	lwi	r5, r19, 10040
9000c55c:	3073001c 	addik	r3, r19, 28
9000c560:	10c30000 	addk	r6, r3, r0
9000c564:	10e40000 	addk	r7, r4, r0
9000c568:	31000002 	addik	r8, r0, 2
9000c56c:	b9f40884 	brlid	r15, 2180	// 9000cdf0 <sendAndReceiveSpiData>
9000c570:	80000000 	or	r0, r0, r0
9000c574:	bc230010 	bnei	r3, 16		// 9000c584
9000c578:	10600000 	addk	r3, r0, r0
9000c57c:	f873272c 	swi	r3, r19, 10028
9000c580:	b800000c 	bri	12		// 9000c58c

    return readBuffer[1];
9000c584:	e07313a5 	lbui	r3, r19, 5029
9000c588:	f873272c 	swi	r3, r19, 10028
9000c58c:	e873272c 	lwi	r3, r19, 10028
}
9000c590:	e9e10000 	lwi	r15, r1, 0
9000c594:	10330000 	addk	r1, r19, r0
9000c598:	ea612730 	lwi	r19, r1, 10032
9000c59c:	30212734 	addik	r1, r1, 10036
9000c5a0:	b60f0008 	rtsd	r15, 8
9000c5a4:	80000000 	or	r0, r0, r0

9000c5a8 <eraseFlashBlock>:



bool eraseFlashBlock(uint32 blockNumber)
{
9000c5a8:	3021d8d0 	addik	r1, r1, -10032
9000c5ac:	f9e10000 	swi	r15, r1, 0
9000c5b0:	fa61272c 	swi	r19, r1, 10028
9000c5b4:	12610000 	addk	r19, r1, r0
9000c5b8:	f8b32734 	swi	r5, r19, 10036
    ASSERT(blockNumber < FLASH_BLOCK_COUNT);
9000c5bc:	e8732734 	lwi	r3, r19, 10036
9000c5c0:	224001ff 	addi	r18, r0, 511
9000c5c4:	16439003 	cmpu	r18, r3, r18
9000c5c8:	bcb20028 	bgei	r18, 40		// 9000c5f0
9000c5cc:	94110002 	msrclr	r0, 2
9000c5d0:	b0009002 	imm	-28670
9000c5d4:	30a01b30 	addik	r5, r0, 6960
9000c5d8:	b0009002 	imm	-28670
9000c5dc:	30c01b50 	addik	r6, r0, 6992
9000c5e0:	30e00076 	addik	r7, r0, 118
9000c5e4:	b9f4fe40 	brlid	r15, -448	// 9000c424 <printAssert>
9000c5e8:	80000000 	or	r0, r0, r0
9000c5ec:	b8000000 	bri	0		// 9000c5ec

    while(!isReady(&spiInterfaceSoftwareFlash))
9000c5f0:	b0009003 	imm	-28669
9000c5f4:	30a000e8 	addik	r5, r0, 232
9000c5f8:	b9f40ebc 	brlid	r15, 3772	// 9000d4b4 <isReady>
9000c5fc:	80000000 	or	r0, r0, r0
9000c600:	bc03fff0 	beqi	r3, -16		// 9000c5f0
    { ; }

    uint8 writeBuffer[SPI_BUFFER_SIZE];
    uint8 readBuffer[SPI_BUFFER_SIZE];

    writeBuffer[0] = OP_BLOCK_ERASE;
9000c604:	30600050 	addik	r3, r0, 80
9000c608:	f073001c 	sbi	r3, r19, 28
    writeBuffer[1] = blockNumber >> 3;
9000c60c:	e8732734 	lwi	r3, r19, 10036
9000c610:	64630003 	bsrli	r3, r3, 3
9000c614:	a46300ff 	andi	r3, r3, 255
9000c618:	f073001d 	sbi	r3, r19, 29
    writeBuffer[2] = 0x000000ff & (blockNumber << 5);
9000c61c:	e8732734 	lwi	r3, r19, 10036
9000c620:	a46300ff 	andi	r3, r3, 255
9000c624:	64630405 	bslli	r3, r3, 5
9000c628:	a46300ff 	andi	r3, r3, 255
9000c62c:	f073001e 	sbi	r3, r19, 30
    writeBuffer[3] = 0x00;
9000c630:	f013001f 	sbi	r0, r19, 31

    return sendAndReceiveSpiData(&spiInterfaceSoftwareFlash, writeBuffer, readBuffer, 4);
9000c634:	309313a4 	addik	r4, r19, 5028
9000c638:	b0009003 	imm	-28669
9000c63c:	30a000e8 	addik	r5, r0, 232
9000c640:	3073001c 	addik	r3, r19, 28
9000c644:	10c30000 	addk	r6, r3, r0
9000c648:	10e40000 	addk	r7, r4, r0
9000c64c:	31000004 	addik	r8, r0, 4
9000c650:	b9f407a0 	brlid	r15, 1952	// 9000cdf0 <sendAndReceiveSpiData>
9000c654:	80000000 	or	r0, r0, r0
}
9000c658:	e9e10000 	lwi	r15, r1, 0
9000c65c:	10330000 	addk	r1, r19, r0
9000c660:	ea61272c 	lwi	r19, r1, 10028
9000c664:	30212730 	addik	r1, r1, 10032
9000c668:	b60f0008 	rtsd	r15, 8
9000c66c:	80000000 	or	r0, r0, r0

9000c670 <readFlash>:




bool readFlash(uint32 addr, uint8* buffer, uint32 count)
{
9000c670:	3021ffd4 	addik	r1, r1, -44
9000c674:	f9e10000 	swi	r15, r1, 0
9000c678:	fa610028 	swi	r19, r1, 40
9000c67c:	12610000 	addk	r19, r1, r0
9000c680:	f8b30030 	swi	r5, r19, 48
9000c684:	f8d30034 	swi	r6, r19, 52
9000c688:	f8f30038 	swi	r7, r19, 56
    ASSERT(buffer);
9000c68c:	e8730034 	lwi	r3, r19, 52
9000c690:	bc230028 	bnei	r3, 40		// 9000c6b8
9000c694:	94110002 	msrclr	r0, 2
9000c698:	b0009002 	imm	-28670
9000c69c:	30a01b64 	addik	r5, r0, 7012
9000c6a0:	b0009002 	imm	-28670
9000c6a4:	30c01b50 	addik	r6, r0, 6992
9000c6a8:	30e0008b 	addik	r7, r0, 139
9000c6ac:	b9f4fd78 	brlid	r15, -648	// 9000c424 <printAssert>
9000c6b0:	80000000 	or	r0, r0, r0
9000c6b4:	b8000000 	bri	0		// 9000c6b4

    while(!isReady(&spiInterfaceSoftwareFlash))
9000c6b8:	b0009003 	imm	-28669
9000c6bc:	30a000e8 	addik	r5, r0, 232
9000c6c0:	b9f40df4 	brlid	r15, 3572	// 9000d4b4 <isReady>
9000c6c4:	80000000 	or	r0, r0, r0
9000c6c8:	bc03fff0 	beqi	r3, -16		// 9000c6b8
    { ; }

    while(count > 0)
9000c6cc:	b8000088 	bri	136		// 9000c754
    {
        uint32 readCount = MIN(count, MAX_SINGLE_READ_SIZE);
9000c6d0:	e8730038 	lwi	r3, r19, 56
9000c6d4:	f8730024 	swi	r3, r19, 36
9000c6d8:	e8730024 	lwi	r3, r19, 36
9000c6dc:	22401383 	addi	r18, r0, 4995
9000c6e0:	16439003 	cmpu	r18, r3, r18
9000c6e4:	bcb2000c 	bgei	r18, 12		// 9000c6f0
9000c6e8:	30601383 	addik	r3, r0, 4995
9000c6ec:	f8730024 	swi	r3, r19, 36
9000c6f0:	e8730024 	lwi	r3, r19, 36
9000c6f4:	f873001c 	swi	r3, r19, 28

        if(!singleRead(&spiInterfaceSoftwareFlash, addr, buffer, readCount)) return false;
9000c6f8:	b0009003 	imm	-28669
9000c6fc:	30a000e8 	addik	r5, r0, 232
9000c700:	e8d30030 	lwi	r6, r19, 48
9000c704:	e8f30034 	lwi	r7, r19, 52
9000c708:	e913001c 	lwi	r8, r19, 28
9000c70c:	b9f40858 	brlid	r15, 2136	// 9000cf64 <singleRead>
9000c710:	80000000 	or	r0, r0, r0
9000c714:	bc230010 	bnei	r3, 16		// 9000c724
9000c718:	10600000 	addk	r3, r0, r0
9000c71c:	f8730020 	swi	r3, r19, 32
9000c720:	b8000044 	bri	68		// 9000c764
        
        buffer += readCount;
9000c724:	e893001c 	lwi	r4, r19, 28
9000c728:	e8730034 	lwi	r3, r19, 52
9000c72c:	10632000 	addk	r3, r3, r4
9000c730:	f8730034 	swi	r3, r19, 52
        addr   += readCount;
9000c734:	e8930030 	lwi	r4, r19, 48
9000c738:	e873001c 	lwi	r3, r19, 28
9000c73c:	10641800 	addk	r3, r4, r3
9000c740:	f8730030 	swi	r3, r19, 48
        count  -= readCount;
9000c744:	e8930038 	lwi	r4, r19, 56
9000c748:	e873001c 	lwi	r3, r19, 28
9000c74c:	14632000 	rsubk	r3, r3, r4
9000c750:	f8730038 	swi	r3, r19, 56
9000c754:	e8730038 	lwi	r3, r19, 56
9000c758:	bc23ff78 	bnei	r3, -136		// 9000c6d0
    }

    return true;
9000c75c:	30600001 	addik	r3, r0, 1
9000c760:	f8730020 	swi	r3, r19, 32
9000c764:	e8730020 	lwi	r3, r19, 32
}
9000c768:	e9e10000 	lwi	r15, r1, 0
9000c76c:	10330000 	addk	r1, r19, r0
9000c770:	ea610028 	lwi	r19, r1, 40
9000c774:	3021002c 	addik	r1, r1, 44
9000c778:	b60f0008 	rtsd	r15, 8
9000c77c:	80000000 	or	r0, r0, r0

9000c780 <writeFlash>:



bool writeFlash(uint32 addr, uint8* buffer, uint32 count)
{
9000c780:	3021fdb8 	addik	r1, r1, -584
9000c784:	f9e10000 	swi	r15, r1, 0
9000c788:	fa610244 	swi	r19, r1, 580
9000c78c:	12610000 	addk	r19, r1, r0
9000c790:	f8b3024c 	swi	r5, r19, 588
9000c794:	f8d30250 	swi	r6, r19, 592
9000c798:	f8f30254 	swi	r7, r19, 596
    ASSERT(buffer);
9000c79c:	e8730250 	lwi	r3, r19, 592
9000c7a0:	bc230158 	bnei	r3, 344		// 9000c8f8
9000c7a4:	94110002 	msrclr	r0, 2
9000c7a8:	b0009002 	imm	-28670
9000c7ac:	30a01b64 	addik	r5, r0, 7012
9000c7b0:	b0009002 	imm	-28670
9000c7b4:	30c01b50 	addik	r6, r0, 6992
9000c7b8:	30e000a2 	addik	r7, r0, 162
9000c7bc:	b9f4fc68 	brlid	r15, -920	// 9000c424 <printAssert>
9000c7c0:	80000000 	or	r0, r0, r0
9000c7c4:	b8000000 	bri	0		// 9000c7c4

    while(count > 0)
    {
        uint32 page       = addr / FLASH_PAGE_SIZE;
9000c7c8:	e893024c 	lwi	r4, r19, 588
9000c7cc:	30600210 	addik	r3, r0, 528
9000c7d0:	48632002 	idivu	r3, r3, r4
9000c7d4:	f8730024 	swi	r3, r19, 36
        uint32 pageOffset = addr % FLASH_PAGE_SIZE;
9000c7d8:	e8b3024c 	lwi	r5, r19, 588
9000c7dc:	30600210 	addik	r3, r0, 528
9000c7e0:	48832802 	idivu	r4, r3, r5
9000c7e4:	30600210 	addik	r3, r0, 528
9000c7e8:	40641800 	mul	r3, r4, r3
9000c7ec:	14632800 	rsubk	r3, r3, r5
9000c7f0:	f8730020 	swi	r3, r19, 32
        uint32 writeCount = MIN(count, FLASH_PAGE_SIZE - pageOffset);
9000c7f4:	e8730020 	lwi	r3, r19, 32
9000c7f8:	34630210 	rsubik	r3, r3, 528
9000c7fc:	e8930254 	lwi	r4, r19, 596
9000c800:	f8930240 	swi	r4, r19, 576
9000c804:	f873023c 	swi	r3, r19, 572
9000c808:	e873023c 	lwi	r3, r19, 572
9000c80c:	e8930240 	lwi	r4, r19, 576
9000c810:	16432003 	cmpu	r18, r3, r4
9000c814:	bcb2000c 	bgei	r18, 12		// 9000c820
9000c818:	e8730240 	lwi	r3, r19, 576
9000c81c:	f873023c 	swi	r3, r19, 572
9000c820:	e893023c 	lwi	r4, r19, 572
9000c824:	f893001c 	swi	r4, r19, 28
        uint8  writeBuffer[FLASH_PAGE_SIZE];

        if(writeCount < FLASH_PAGE_SIZE)
9000c828:	e873001c 	lwi	r3, r19, 28
9000c82c:	2240020f 	addi	r18, r0, 527
9000c830:	16439003 	cmpu	r18, r3, r18
9000c834:	bc52006c 	blti	r18, 108		// 9000c8a0
        {
            memset(writeBuffer, 0xff, sizeof(writeBuffer));
9000c838:	30730028 	addik	r3, r19, 40
9000c83c:	10a30000 	addk	r5, r3, r0
9000c840:	30c000ff 	addik	r6, r0, 255
9000c844:	30e00210 	addik	r7, r0, 528
9000c848:	b9f47788 	brlid	r15, 30600	// 90013fd0 <memset>
9000c84c:	80000000 	or	r0, r0, r0
            memcpy(&writeBuffer[pageOffset], buffer, writeCount);
9000c850:	e8930020 	lwi	r4, r19, 32
9000c854:	30730028 	addik	r3, r19, 40
9000c858:	10632000 	addk	r3, r3, r4
9000c85c:	e8930250 	lwi	r4, r19, 592
9000c860:	e8f3001c 	lwi	r7, r19, 28
9000c864:	10a30000 	addk	r5, r3, r0
9000c868:	10c40000 	addk	r6, r4, r0
9000c86c:	b9f476a4 	brlid	r15, 30372	// 90013f10 <memcpy>
9000c870:	80000000 	or	r0, r0, r0

            if(!pageWrite(&spiInterfaceSoftwareFlash, page, writeBuffer)) return false;
9000c874:	30730028 	addik	r3, r19, 40
9000c878:	b0009003 	imm	-28669
9000c87c:	30a000e8 	addik	r5, r0, 232
9000c880:	e8d30024 	lwi	r6, r19, 36
9000c884:	10e30000 	addk	r7, r3, r0
9000c888:	b9f40830 	brlid	r15, 2096	// 9000d0b8 <pageWrite>
9000c88c:	80000000 	or	r0, r0, r0
9000c890:	bc230038 	bnei	r3, 56		// 9000c8c8
9000c894:	10600000 	addk	r3, r0, r0
9000c898:	f8730238 	swi	r3, r19, 568
9000c89c:	b800006c 	bri	108		// 9000c908
        }
        else
        {
            if(!pageWrite(&spiInterfaceSoftwareFlash, page, buffer)) return false;
9000c8a0:	b0009003 	imm	-28669
9000c8a4:	30a000e8 	addik	r5, r0, 232
9000c8a8:	e8d30024 	lwi	r6, r19, 36
9000c8ac:	e8f30250 	lwi	r7, r19, 592
9000c8b0:	b9f40808 	brlid	r15, 2056	// 9000d0b8 <pageWrite>
9000c8b4:	80000000 	or	r0, r0, r0
9000c8b8:	bc230010 	bnei	r3, 16		// 9000c8c8
9000c8bc:	10800000 	addk	r4, r0, r0
9000c8c0:	f8930238 	swi	r4, r19, 568
9000c8c4:	b8000044 	bri	68		// 9000c908
        }

        buffer += writeCount;
9000c8c8:	e893001c 	lwi	r4, r19, 28
9000c8cc:	e8730250 	lwi	r3, r19, 592
9000c8d0:	10632000 	addk	r3, r3, r4
9000c8d4:	f8730250 	swi	r3, r19, 592
        addr   += writeCount;
9000c8d8:	e893024c 	lwi	r4, r19, 588
9000c8dc:	e873001c 	lwi	r3, r19, 28
9000c8e0:	10641800 	addk	r3, r4, r3
9000c8e4:	f873024c 	swi	r3, r19, 588
        count  -= writeCount;
9000c8e8:	e8930254 	lwi	r4, r19, 596
9000c8ec:	e873001c 	lwi	r3, r19, 28
9000c8f0:	14632000 	rsubk	r3, r3, r4
9000c8f4:	f8730254 	swi	r3, r19, 596
9000c8f8:	e8730254 	lwi	r3, r19, 596
9000c8fc:	bc23fecc 	bnei	r3, -308		// 9000c7c8
    }

    return true;
9000c900:	30600001 	addik	r3, r0, 1
9000c904:	f8730238 	swi	r3, r19, 568
9000c908:	e8730238 	lwi	r3, r19, 568
}
9000c90c:	e9e10000 	lwi	r15, r1, 0
9000c910:	10330000 	addk	r1, r19, r0
9000c914:	ea610244 	lwi	r19, r1, 580
9000c918:	30210248 	addik	r1, r1, 584
9000c91c:	b60f0008 	rtsd	r15, 8
9000c920:	80000000 	or	r0, r0, r0

9000c924 <readPlatformFlash>:



#ifndef BOOTLOADER

bool readPlatformFlash(uint32 addr, uint8* buffer, uint32 count)
{
9000c924:	3021ffd4 	addik	r1, r1, -44
9000c928:	f9e10000 	swi	r15, r1, 0
9000c92c:	fa610028 	swi	r19, r1, 40
9000c930:	12610000 	addk	r19, r1, r0
9000c934:	f8b30030 	swi	r5, r19, 48
9000c938:	f8d30034 	swi	r6, r19, 52
9000c93c:	f8f30038 	swi	r7, r19, 56
    ASSERT(buffer);
9000c940:	e8730034 	lwi	r3, r19, 52
9000c944:	bc230028 	bnei	r3, 40		// 9000c96c
9000c948:	94110002 	msrclr	r0, 2
9000c94c:	b0009002 	imm	-28670
9000c950:	30a01b64 	addik	r5, r0, 7012
9000c954:	b0009002 	imm	-28670
9000c958:	30c01b50 	addik	r6, r0, 6992
9000c95c:	30e000c5 	addik	r7, r0, 197
9000c960:	b9f4fac4 	brlid	r15, -1340	// 9000c424 <printAssert>
9000c964:	80000000 	or	r0, r0, r0
9000c968:	b8000000 	bri	0		// 9000c968

    while(!isReady(&spiInterfacePlatformFlash))
9000c96c:	b0009003 	imm	-28669
9000c970:	30a0285c 	addik	r5, r0, 10332
9000c974:	b9f40b40 	brlid	r15, 2880	// 9000d4b4 <isReady>
9000c978:	80000000 	or	r0, r0, r0
9000c97c:	bc03fff0 	beqi	r3, -16		// 9000c96c
    { ; }

    while(count > 0)
9000c980:	b8000088 	bri	136		// 9000ca08
    {
        uint32 readCount = MIN(count, MAX_SINGLE_READ_SIZE);
9000c984:	e8730038 	lwi	r3, r19, 56
9000c988:	f8730024 	swi	r3, r19, 36
9000c98c:	e8730024 	lwi	r3, r19, 36
9000c990:	22401383 	addi	r18, r0, 4995
9000c994:	16439003 	cmpu	r18, r3, r18
9000c998:	bcb2000c 	bgei	r18, 12		// 9000c9a4
9000c99c:	30601383 	addik	r3, r0, 4995
9000c9a0:	f8730024 	swi	r3, r19, 36
9000c9a4:	e8730024 	lwi	r3, r19, 36
9000c9a8:	f873001c 	swi	r3, r19, 28

        if(!singleRead(&spiInterfacePlatformFlash, addr, buffer, readCount)) return false;
9000c9ac:	b0009003 	imm	-28669
9000c9b0:	30a0285c 	addik	r5, r0, 10332
9000c9b4:	e8d30030 	lwi	r6, r19, 48
9000c9b8:	e8f30034 	lwi	r7, r19, 52
9000c9bc:	e913001c 	lwi	r8, r19, 28
9000c9c0:	b9f405a4 	brlid	r15, 1444	// 9000cf64 <singleRead>
9000c9c4:	80000000 	or	r0, r0, r0
9000c9c8:	bc230010 	bnei	r3, 16		// 9000c9d8
9000c9cc:	10600000 	addk	r3, r0, r0
9000c9d0:	f8730020 	swi	r3, r19, 32
9000c9d4:	b8000044 	bri	68		// 9000ca18
        
        buffer += readCount;
9000c9d8:	e893001c 	lwi	r4, r19, 28
9000c9dc:	e8730034 	lwi	r3, r19, 52
9000c9e0:	10632000 	addk	r3, r3, r4
9000c9e4:	f8730034 	swi	r3, r19, 52
        addr   += readCount;
9000c9e8:	e8930030 	lwi	r4, r19, 48
9000c9ec:	e873001c 	lwi	r3, r19, 28
9000c9f0:	10641800 	addk	r3, r4, r3
9000c9f4:	f8730030 	swi	r3, r19, 48
        count  -= readCount;
9000c9f8:	e8930038 	lwi	r4, r19, 56
9000c9fc:	e873001c 	lwi	r3, r19, 28
9000ca00:	14632000 	rsubk	r3, r3, r4
9000ca04:	f8730038 	swi	r3, r19, 56
9000ca08:	e8730038 	lwi	r3, r19, 56
9000ca0c:	bc23ff78 	bnei	r3, -136		// 9000c984
    }

    return true;
9000ca10:	30600001 	addik	r3, r0, 1
9000ca14:	f8730020 	swi	r3, r19, 32
9000ca18:	e8730020 	lwi	r3, r19, 32
}
9000ca1c:	e9e10000 	lwi	r15, r1, 0
9000ca20:	10330000 	addk	r1, r19, r0
9000ca24:	ea610028 	lwi	r19, r1, 40
9000ca28:	3021002c 	addik	r1, r1, 44
9000ca2c:	b60f0008 	rtsd	r15, 8
9000ca30:	80000000 	or	r0, r0, r0

9000ca34 <writePlatformFlash>:



bool writePlatformFlash(uint32 addr, uint8* buffer, uint32 count)
{
9000ca34:	3021fdb8 	addik	r1, r1, -584
9000ca38:	f9e10000 	swi	r15, r1, 0
9000ca3c:	fa610244 	swi	r19, r1, 580
9000ca40:	12610000 	addk	r19, r1, r0
9000ca44:	f8b3024c 	swi	r5, r19, 588
9000ca48:	f8d30250 	swi	r6, r19, 592
9000ca4c:	f8f30254 	swi	r7, r19, 596
    ASSERT(buffer);
9000ca50:	e8730250 	lwi	r3, r19, 592
9000ca54:	bc230158 	bnei	r3, 344		// 9000cbac
9000ca58:	94110002 	msrclr	r0, 2
9000ca5c:	b0009002 	imm	-28670
9000ca60:	30a01b64 	addik	r5, r0, 7012
9000ca64:	b0009002 	imm	-28670
9000ca68:	30c01b50 	addik	r6, r0, 6992
9000ca6c:	30e000dc 	addik	r7, r0, 220
9000ca70:	b9f4f9b4 	brlid	r15, -1612	// 9000c424 <printAssert>
9000ca74:	80000000 	or	r0, r0, r0
9000ca78:	b8000000 	bri	0		// 9000ca78

    while(count > 0)
    {
        uint32 page       = addr / FLASH_PAGE_SIZE;
9000ca7c:	e893024c 	lwi	r4, r19, 588
9000ca80:	30600210 	addik	r3, r0, 528
9000ca84:	48632002 	idivu	r3, r3, r4
9000ca88:	f8730024 	swi	r3, r19, 36
        uint32 pageOffset = addr % FLASH_PAGE_SIZE;
9000ca8c:	e8b3024c 	lwi	r5, r19, 588
9000ca90:	30600210 	addik	r3, r0, 528
9000ca94:	48832802 	idivu	r4, r3, r5
9000ca98:	30600210 	addik	r3, r0, 528
9000ca9c:	40641800 	mul	r3, r4, r3
9000caa0:	14632800 	rsubk	r3, r3, r5
9000caa4:	f8730020 	swi	r3, r19, 32
        uint32 writeCount = MIN(count, FLASH_PAGE_SIZE - pageOffset);
9000caa8:	e8730020 	lwi	r3, r19, 32
9000caac:	34630210 	rsubik	r3, r3, 528
9000cab0:	e8930254 	lwi	r4, r19, 596
9000cab4:	f8930240 	swi	r4, r19, 576
9000cab8:	f873023c 	swi	r3, r19, 572
9000cabc:	e873023c 	lwi	r3, r19, 572
9000cac0:	e8930240 	lwi	r4, r19, 576
9000cac4:	16432003 	cmpu	r18, r3, r4
9000cac8:	bcb2000c 	bgei	r18, 12		// 9000cad4
9000cacc:	e8730240 	lwi	r3, r19, 576
9000cad0:	f873023c 	swi	r3, r19, 572
9000cad4:	e893023c 	lwi	r4, r19, 572
9000cad8:	f893001c 	swi	r4, r19, 28
        uint8  writeBuffer[FLASH_PAGE_SIZE];

        if(writeCount < FLASH_PAGE_SIZE)
9000cadc:	e873001c 	lwi	r3, r19, 28
9000cae0:	2240020f 	addi	r18, r0, 527
9000cae4:	16439003 	cmpu	r18, r3, r18
9000cae8:	bc52006c 	blti	r18, 108		// 9000cb54
        {
            memset(writeBuffer, 0xff, sizeof(writeBuffer));
9000caec:	30730028 	addik	r3, r19, 40
9000caf0:	10a30000 	addk	r5, r3, r0
9000caf4:	30c000ff 	addik	r6, r0, 255
9000caf8:	30e00210 	addik	r7, r0, 528
9000cafc:	b9f474d4 	brlid	r15, 29908	// 90013fd0 <memset>
9000cb00:	80000000 	or	r0, r0, r0
            memcpy(&writeBuffer[pageOffset], buffer, writeCount);
9000cb04:	e8930020 	lwi	r4, r19, 32
9000cb08:	30730028 	addik	r3, r19, 40
9000cb0c:	10632000 	addk	r3, r3, r4
9000cb10:	e8930250 	lwi	r4, r19, 592
9000cb14:	e8f3001c 	lwi	r7, r19, 28
9000cb18:	10a30000 	addk	r5, r3, r0
9000cb1c:	10c40000 	addk	r6, r4, r0
9000cb20:	b9f473f0 	brlid	r15, 29680	// 90013f10 <memcpy>
9000cb24:	80000000 	or	r0, r0, r0

            if(!pageWrite(&spiInterfacePlatformFlash, page, writeBuffer)) return false;
9000cb28:	30730028 	addik	r3, r19, 40
9000cb2c:	b0009003 	imm	-28669
9000cb30:	30a0285c 	addik	r5, r0, 10332
9000cb34:	e8d30024 	lwi	r6, r19, 36
9000cb38:	10e30000 	addk	r7, r3, r0
9000cb3c:	b9f4057c 	brlid	r15, 1404	// 9000d0b8 <pageWrite>
9000cb40:	80000000 	or	r0, r0, r0
9000cb44:	bc230038 	bnei	r3, 56		// 9000cb7c
9000cb48:	10600000 	addk	r3, r0, r0
9000cb4c:	f8730238 	swi	r3, r19, 568
9000cb50:	b800006c 	bri	108		// 9000cbbc
        }
        else
        {
            if(!pageWrite(&spiInterfacePlatformFlash, page, buffer)) return false;
9000cb54:	b0009003 	imm	-28669
9000cb58:	30a0285c 	addik	r5, r0, 10332
9000cb5c:	e8d30024 	lwi	r6, r19, 36
9000cb60:	e8f30250 	lwi	r7, r19, 592
9000cb64:	b9f40554 	brlid	r15, 1364	// 9000d0b8 <pageWrite>
9000cb68:	80000000 	or	r0, r0, r0
9000cb6c:	bc230010 	bnei	r3, 16		// 9000cb7c
9000cb70:	10800000 	addk	r4, r0, r0
9000cb74:	f8930238 	swi	r4, r19, 568
9000cb78:	b8000044 	bri	68		// 9000cbbc
        }

        buffer += writeCount;
9000cb7c:	e893001c 	lwi	r4, r19, 28
9000cb80:	e8730250 	lwi	r3, r19, 592
9000cb84:	10632000 	addk	r3, r3, r4
9000cb88:	f8730250 	swi	r3, r19, 592
        addr   += writeCount;
9000cb8c:	e893024c 	lwi	r4, r19, 588
9000cb90:	e873001c 	lwi	r3, r19, 28
9000cb94:	10641800 	addk	r3, r4, r3
9000cb98:	f873024c 	swi	r3, r19, 588
        count  -= writeCount;
9000cb9c:	e8930254 	lwi	r4, r19, 596
9000cba0:	e873001c 	lwi	r3, r19, 28
9000cba4:	14632000 	rsubk	r3, r3, r4
9000cba8:	f8730254 	swi	r3, r19, 596
9000cbac:	e8730254 	lwi	r3, r19, 596
9000cbb0:	bc23fecc 	bnei	r3, -308		// 9000ca7c
    }

    return true;
9000cbb4:	30600001 	addik	r3, r0, 1
9000cbb8:	f8730238 	swi	r3, r19, 568
9000cbbc:	e8730238 	lwi	r3, r19, 568
}
9000cbc0:	e9e10000 	lwi	r15, r1, 0
9000cbc4:	10330000 	addk	r1, r19, r0
9000cbc8:	ea610244 	lwi	r19, r1, 580
9000cbcc:	30210248 	addik	r1, r1, 584
9000cbd0:	b60f0008 	rtsd	r15, 8
9000cbd4:	80000000 	or	r0, r0, r0

9000cbd8 <dispData>:

#endif


///////////////////////////////////////////////////
// Local functions

void dispData(uint8* buf, uint32 count)
{
9000cbd8:	3021ffcc 	addik	r1, r1, -52
9000cbdc:	f9e10000 	swi	r15, r1, 0
9000cbe0:	fa610030 	swi	r19, r1, 48
9000cbe4:	12610000 	addk	r19, r1, r0
9000cbe8:	f8b30038 	swi	r5, r19, 56
9000cbec:	f8d3003c 	swi	r6, r19, 60
    const int lineLen = 16;
9000cbf0:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
9000cbf4:	f8730020 	swi	r3, r19, 32
    
    while(count > 0)
9000cbf8:	b80001d8 	bri	472		// 9000cdd0
    {
        int i;
        for(i = 0; i < lineLen; i++)
9000cbfc:	f813001c 	swi	r0, r19, 28
9000cc00:	b8000088 	bri	136		// 9000cc88
        {
            if(i == lineLen / 2)
9000cc04:	e8930020 	lwi	r4, r19, 32
9000cc08:	6464001f 	bsrli	r3, r4, 31
9000cc0c:	10632000 	addk	r3, r3, r4
9000cc10:	90630001 	sra	r3, r3
9000cc14:	10830000 	addk	r4, r3, r0
9000cc18:	e873001c 	lwi	r3, r19, 28
9000cc1c:	16432000 	rsubk	r18, r3, r4
9000cc20:	bc320010 	bnei	r18, 16		// 9000cc30
            {
                printf(" ");
9000cc24:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
9000cc28:	b9f47528 	brlid	r15, 29992	// 90014150 <putchar>
9000cc2c:	80000000 	or	r0, r0, r0
            }
            if(i < count)
9000cc30:	e893001c 	lwi	r4, r19, 28
9000cc34:	e873003c 	lwi	r3, r19, 60
9000cc38:	16432003 	cmpu	r18, r3, r4
9000cc3c:	bcb20030 	bgei	r18, 48		// 9000cc6c
            {
                printf("%02x ", buf[i]);
9000cc40:	e873001c 	lwi	r3, r19, 28
9000cc44:	10830000 	addk	r4, r3, r0
9000cc48:	e8730038 	lwi	r3, r19, 56
9000cc4c:	10641800 	addk	r3, r4, r3
9000cc50:	e0630000 	lbui	r3, r3, 0
9000cc54:	b0009002 	imm	-28670
9000cc58:	30a01b6c 	addik	r5, r0, 7020
9000cc5c:	10c30000 	addk	r6, r3, r0
9000cc60:	b9f431e4 	brlid	r15, 12772	// 9000fe44 <printf>
9000cc64:	80000000 	or	r0, r0, r0
9000cc68:	b8000014 	bri	20		// 9000cc7c
            }
            else
            {
                printf("   ");
9000cc6c:	b0009002 	imm	-28670
9000cc70:	30a01b74 	addik	r5, r0, 7028
9000cc74:	b9f431d0 	brlid	r15, 12752	// 9000fe44 <printf>
9000cc78:	80000000 	or	r0, r0, r0
9000cc7c:	e873001c 	lwi	r3, r19, 28
9000cc80:	30630001 	addik	r3, r3, 1
9000cc84:	f873001c 	swi	r3, r19, 28
9000cc88:	e893001c 	lwi	r4, r19, 28
9000cc8c:	e8730020 	lwi	r3, r19, 32
9000cc90:	16432001 	cmp	r18, r3, r4
9000cc94:	bc52ff70 	blti	r18, -144		// 9000cc04
            }
        }

        printf(" ");
9000cc98:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
9000cc9c:	b9f474b4 	brlid	r15, 29876	// 90014150 <putchar>
9000cca0:	80000000 	or	r0, r0, r0

        for(i = 0; i < lineLen && i < count; i++)
9000cca4:	f813001c 	swi	r0, r19, 28
9000cca8:	b80000b0 	bri	176		// 9000cd58
        {
            if(i == lineLen / 2)
9000ccac:	e8930020 	lwi	r4, r19, 32
9000ccb0:	6464001f 	bsrli	r3, r4, 31
9000ccb4:	10632000 	addk	r3, r3, r4
9000ccb8:	90630001 	sra	r3, r3
9000ccbc:	10830000 	addk	r4, r3, r0
9000ccc0:	e873001c 	lwi	r3, r19, 28
9000ccc4:	16432000 	rsubk	r18, r3, r4
9000ccc8:	bc320010 	bnei	r18, 16		// 9000ccd8
            {
                printf(" ");
9000cccc:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
9000ccd0:	b9f47480 	brlid	r15, 29824	// 90014150 <putchar>
9000ccd4:	80000000 	or	r0, r0, r0
            }
            if(i < count)
9000ccd8:	e893001c 	lwi	r4, r19, 28
9000ccdc:	e873003c 	lwi	r3, r19, 60
9000cce0:	16432003 	cmpu	r18, r3, r4
9000cce4:	bcb20094 	bgei	r18, 148		// 9000cd78
            {
                printf("%c", isprint(buf[i]) ? buf[i] : '.');
9000cce8:	e873001c 	lwi	r3, r19, 28
9000ccec:	10830000 	addk	r4, r3, r0
9000ccf0:	e8730038 	lwi	r3, r19, 56
9000ccf4:	10641800 	addk	r3, r4, r3
9000ccf8:	e0630000 	lbui	r3, r3, 0
9000ccfc:	10830000 	addk	r4, r3, r0
9000cd00:	b0009002 	imm	-28670
9000cd04:	e8603b5c 	lwi	r3, r0, 15196
9000cd08:	10641800 	addk	r3, r4, r3
9000cd0c:	e0630000 	lbui	r3, r3, 0
9000cd10:	90630060 	sext8	r3, r3
9000cd14:	a4630097 	andi	r3, r3, 151
9000cd18:	bc030020 	beqi	r3, 32		// 9000cd38
9000cd1c:	e873001c 	lwi	r3, r19, 28
9000cd20:	10830000 	addk	r4, r3, r0
9000cd24:	e8730038 	lwi	r3, r19, 56
9000cd28:	10641800 	addk	r3, r4, r3
9000cd2c:	e0630000 	lbui	r3, r3, 0
9000cd30:	f8730028 	swi	r3, r19, 40
9000cd34:	b800000c 	bri	12		// 9000cd40
9000cd38:	3060002e 	addik	r3, r0, 46
9000cd3c:	f8730028 	swi	r3, r19, 40
9000cd40:	e8b30028 	lwi	r5, r19, 40
9000cd44:	b9f4740c 	brlid	r15, 29708	// 90014150 <putchar>
9000cd48:	80000000 	or	r0, r0, r0
9000cd4c:	e873001c 	lwi	r3, r19, 28
9000cd50:	30630001 	addik	r3, r3, 1
9000cd54:	f873001c 	swi	r3, r19, 28
9000cd58:	e893001c 	lwi	r4, r19, 28
9000cd5c:	e8730020 	lwi	r3, r19, 32
9000cd60:	16432001 	cmp	r18, r3, r4
9000cd64:	bcb20014 	bgei	r18, 20		// 9000cd78
9000cd68:	e893001c 	lwi	r4, r19, 28
9000cd6c:	e873003c 	lwi	r3, r19, 60
9000cd70:	16432003 	cmpu	r18, r3, r4
9000cd74:	bc52ff38 	blti	r18, -200		// 9000ccac
            }
            else
            {
                break;
            }
        }
        
        printf("\n");
9000cd78:	30a0000a 	addik	r5, r0, 10
9000cd7c:	b9f473d4 	brlid	r15, 29652	// 90014150 <putchar>
9000cd80:	80000000 	or	r0, r0, r0
        
        count -= MIN(count, lineLen);
9000cd84:	e8730020 	lwi	r3, r19, 32
9000cd88:	e893003c 	lwi	r4, r19, 60
9000cd8c:	f893002c 	swi	r4, r19, 44
9000cd90:	f8730024 	swi	r3, r19, 36
9000cd94:	e8730024 	lwi	r3, r19, 36
9000cd98:	e893002c 	lwi	r4, r19, 44
9000cd9c:	16432003 	cmpu	r18, r3, r4
9000cda0:	bcb2000c 	bgei	r18, 12		// 9000cdac
9000cda4:	e873002c 	lwi	r3, r19, 44
9000cda8:	f8730024 	swi	r3, r19, 36
9000cdac:	e873003c 	lwi	r3, r19, 60
9000cdb0:	e8930024 	lwi	r4, r19, 36
9000cdb4:	14641800 	rsubk	r3, r4, r3
9000cdb8:	f873003c 	swi	r3, r19, 60
        buf += lineLen;
9000cdbc:	e8730020 	lwi	r3, r19, 32
9000cdc0:	10830000 	addk	r4, r3, r0
9000cdc4:	e8730038 	lwi	r3, r19, 56
9000cdc8:	10632000 	addk	r3, r3, r4
9000cdcc:	f8730038 	swi	r3, r19, 56
9000cdd0:	e873003c 	lwi	r3, r19, 60
9000cdd4:	bc23fe28 	bnei	r3, -472		// 9000cbfc
    }
}
9000cdd8:	e9e10000 	lwi	r15, r1, 0
9000cddc:	10330000 	addk	r1, r19, r0
9000cde0:	ea610030 	lwi	r19, r1, 48
9000cde4:	30210034 	addik	r1, r1, 52
9000cde8:	b60f0008 	rtsd	r15, 8
9000cdec:	80000000 	or	r0, r0, r0

9000cdf0 <sendAndReceiveSpiData>:



static bool sendAndReceiveSpiData(SpiInterface* spiInterface, uint8* writeBuffer, uint8* readBuffer, uint16 count)
{
9000cdf0:	3021ffd8 	addik	r1, r1, -40
9000cdf4:	f9e10000 	swi	r15, r1, 0
9000cdf8:	fa610024 	swi	r19, r1, 36
9000cdfc:	12610000 	addk	r19, r1, r0
9000ce00:	f8b3002c 	swi	r5, r19, 44
9000ce04:	f8d30030 	swi	r6, r19, 48
9000ce08:	f8f30034 	swi	r7, r19, 52
9000ce0c:	f5130038 	shi	r8, r19, 56
    ASSERT(spiInterface);
9000ce10:	e873002c 	lwi	r3, r19, 44
9000ce14:	bc230028 	bnei	r3, 40		// 9000ce3c
9000ce18:	94110002 	msrclr	r0, 2
9000ce1c:	b0009002 	imm	-28670
9000ce20:	30a01b78 	addik	r5, r0, 7032
9000ce24:	b0009002 	imm	-28670
9000ce28:	30c01b50 	addik	r6, r0, 6992
9000ce2c:	30e00133 	addik	r7, r0, 307
9000ce30:	b9f4f5f4 	brlid	r15, -2572	// 9000c424 <printAssert>
9000ce34:	80000000 	or	r0, r0, r0
9000ce38:	b8000000 	bri	0		// 9000ce38
    ASSERT(writeBuffer);
9000ce3c:	e8730030 	lwi	r3, r19, 48
9000ce40:	bc230028 	bnei	r3, 40		// 9000ce68
9000ce44:	94110002 	msrclr	r0, 2
9000ce48:	b0009002 	imm	-28670
9000ce4c:	30a01b88 	addik	r5, r0, 7048
9000ce50:	b0009002 	imm	-28670
9000ce54:	30c01b50 	addik	r6, r0, 6992
9000ce58:	30e00134 	addik	r7, r0, 308
9000ce5c:	b9f4f5c8 	brlid	r15, -2616	// 9000c424 <printAssert>
9000ce60:	80000000 	or	r0, r0, r0
9000ce64:	b8000000 	bri	0		// 9000ce64
    ASSERT(readBuffer);
9000ce68:	e8730034 	lwi	r3, r19, 52
9000ce6c:	bc230028 	bnei	r3, 40		// 9000ce94
9000ce70:	94110002 	msrclr	r0, 2
9000ce74:	b0009002 	imm	-28670
9000ce78:	30a01b94 	addik	r5, r0, 7060
9000ce7c:	b0009002 	imm	-28670
9000ce80:	30c01b50 	addik	r6, r0, 6992
9000ce84:	30e00135 	addik	r7, r0, 309
9000ce88:	b9f4f59c 	brlid	r15, -2660	// 9000c424 <printAssert>
9000ce8c:	80000000 	or	r0, r0, r0
9000ce90:	b8000000 	bri	0		// 9000ce90
    ASSERT(count <= SPI_BUFFER_SIZE);
9000ce94:	e4730038 	lhui	r3, r19, 56
9000ce98:	22401388 	addi	r18, r0, 5000
9000ce9c:	16439003 	cmpu	r18, r3, r18
9000cea0:	bcb20028 	bgei	r18, 40		// 9000cec8
9000cea4:	94110002 	msrclr	r0, 2
9000cea8:	b0009002 	imm	-28670
9000ceac:	30a01ba0 	addik	r5, r0, 7072
9000ceb0:	b0009002 	imm	-28670
9000ceb4:	30c01b50 	addik	r6, r0, 6992
9000ceb8:	30e00136 	addik	r7, r0, 310
9000cebc:	b9f4f568 	brlid	r15, -2712	// 9000c424 <printAssert>
9000cec0:	80000000 	or	r0, r0, r0
9000cec4:	b8000000 	bri	0		// 9000cec4

    uint16 readCount;

    if(spiWaitAndStartTransmit(spiInterface, writeBuffer, count, TX_TIMEOUT_us) != SPI_STATUS_TX_STARTED)  return false; // SPI Write Error
9000cec8:	e8b3002c 	lwi	r5, r19, 44
9000cecc:	e8d30030 	lwi	r6, r19, 48
9000ced0:	e4f30038 	lhui	r7, r19, 56
9000ced4:	31002710 	addik	r8, r0, 10000
9000ced8:	b9f43908 	brlid	r15, 14600	// 900107e0 <spiWaitAndStartTransmit>
9000cedc:	80000000 	or	r0, r0, r0
9000cee0:	bc030010 	beqi	r3, 16		// 9000cef0
9000cee4:	10600000 	addk	r3, r0, r0
9000cee8:	f8730020 	swi	r3, r19, 32
9000ceec:	b800005c 	bri	92		// 9000cf48
    if(spiWaitAndReadData(spiInterface, readBuffer, count, &readCount, RX_TIMEOUT_us) != SPI_STATUS_RX_OK) return false; // SPI Read Error
9000cef0:	e8b3002c 	lwi	r5, r19, 44
9000cef4:	e8d30034 	lwi	r6, r19, 52
9000cef8:	e4f30038 	lhui	r7, r19, 56
9000cefc:	3073001c 	addik	r3, r19, 28
9000cf00:	11030000 	addk	r8, r3, r0
9000cf04:	31202710 	addik	r9, r0, 10000
9000cf08:	b9f43960 	brlid	r15, 14688	// 90010868 <spiWaitAndReadData>
9000cf0c:	80000000 	or	r0, r0, r0
9000cf10:	aa430003 	xori	r18, r3, 3
9000cf14:	bc120010 	beqi	r18, 16		// 9000cf24
9000cf18:	10600000 	addk	r3, r0, r0
9000cf1c:	f8730020 	swi	r3, r19, 32
9000cf20:	b8000028 	bri	40		// 9000cf48
    if(readCount != count) return false; // SPI Read Error
9000cf24:	e493001c 	lhui	r4, r19, 28
9000cf28:	e4730038 	lhui	r3, r19, 56
9000cf2c:	16441800 	rsubk	r18, r4, r3
9000cf30:	bc120010 	beqi	r18, 16		// 9000cf40
9000cf34:	10600000 	addk	r3, r0, r0
9000cf38:	f8730020 	swi	r3, r19, 32
9000cf3c:	b800000c 	bri	12		// 9000cf48
    
    return true;
9000cf40:	30600001 	addik	r3, r0, 1
9000cf44:	f8730020 	swi	r3, r19, 32
9000cf48:	e8730020 	lwi	r3, r19, 32
}
9000cf4c:	e9e10000 	lwi	r15, r1, 0
9000cf50:	10330000 	addk	r1, r19, r0
9000cf54:	ea610024 	lwi	r19, r1, 36
9000cf58:	30210028 	addik	r1, r1, 40
9000cf5c:	b60f0008 	rtsd	r15, 8
9000cf60:	80000000 	or	r0, r0, r0

9000cf64 <singleRead>:



static bool singleRead(SpiInterface* spiInterface, uint32 addr, uint8* buffer, uint32 count)
{
9000cf64:	3021d8cc 	addik	r1, r1, -10036
9000cf68:	f9e10000 	swi	r15, r1, 0
9000cf6c:	fa612730 	swi	r19, r1, 10032
9000cf70:	12610000 	addk	r19, r1, r0
9000cf74:	f8b32738 	swi	r5, r19, 10040
9000cf78:	f8d3273c 	swi	r6, r19, 10044
9000cf7c:	f8f32740 	swi	r7, r19, 10048
9000cf80:	f9132744 	swi	r8, r19, 10052
    ASSERT(spiInterface);
9000cf84:	e8732738 	lwi	r3, r19, 10040
9000cf88:	bc230028 	bnei	r3, 40		// 9000cfb0
9000cf8c:	94110002 	msrclr	r0, 2
9000cf90:	b0009002 	imm	-28670
9000cf94:	30a01b78 	addik	r5, r0, 7032
9000cf98:	b0009002 	imm	-28670
9000cf9c:	30c01b50 	addik	r6, r0, 6992
9000cfa0:	30e00145 	addik	r7, r0, 325
9000cfa4:	b9f4f480 	brlid	r15, -2944	// 9000c424 <printAssert>
9000cfa8:	80000000 	or	r0, r0, r0
9000cfac:	b8000000 	bri	0		// 9000cfac
    ASSERT(buffer);
9000cfb0:	e8732740 	lwi	r3, r19, 10048
9000cfb4:	bc230028 	bnei	r3, 40		// 9000cfdc
9000cfb8:	94110002 	msrclr	r0, 2
9000cfbc:	b0009002 	imm	-28670
9000cfc0:	30a01b64 	addik	r5, r0, 7012
9000cfc4:	b0009002 	imm	-28670
9000cfc8:	30c01b50 	addik	r6, r0, 6992
9000cfcc:	30e00146 	addik	r7, r0, 326
9000cfd0:	b9f4f454 	brlid	r15, -2988	// 9000c424 <printAssert>
9000cfd4:	80000000 	or	r0, r0, r0
9000cfd8:	b8000000 	bri	0		// 9000cfd8
    ASSERT(count <= MAX_SINGLE_READ_SIZE);
9000cfdc:	e8732744 	lwi	r3, r19, 10052
9000cfe0:	22401383 	addi	r18, r0, 4995
9000cfe4:	16439003 	cmpu	r18, r3, r18
9000cfe8:	bcb20028 	bgei	r18, 40		// 9000d010
9000cfec:	94110002 	msrclr	r0, 2
9000cff0:	b0009002 	imm	-28670
9000cff4:	30a01bbc 	addik	r5, r0, 7100
9000cff8:	b0009002 	imm	-28670
9000cffc:	30c01b50 	addik	r6, r0, 6992
9000d000:	30e00147 	addik	r7, r0, 327
9000d004:	b9f4f420 	brlid	r15, -3040	// 9000c424 <printAssert>
9000d008:	80000000 	or	r0, r0, r0
9000d00c:	b8000000 	bri	0		// 9000d00c
    
    uint8 writeBuffer[SPI_BUFFER_SIZE];
    uint8 readBuffer[SPI_BUFFER_SIZE];

    writeBuffer[0] = OP_CONTINUOUS_ARRAY_READ_HIGH_SPEED;
9000d010:	3060000b 	addik	r3, r0, 11
9000d014:	f073001c 	sbi	r3, r19, 28
    loadAddrBytesWithAddr(&writeBuffer[1], addr);
9000d018:	3073001d 	addik	r3, r19, 29
9000d01c:	10a30000 	addk	r5, r3, r0
9000d020:	e8d3273c 	lwi	r6, r19, 10044
9000d024:	b9f404d0 	brlid	r15, 1232	// 9000d4f4 <loadAddrBytesWithAddr>
9000d028:	80000000 	or	r0, r0, r0
    writeBuffer[4] = 0x00;
9000d02c:	f0130020 	sbi	r0, r19, 32

    if(!sendAndReceiveSpiData(spiInterface, writeBuffer, readBuffer, 5 + count)) return false;
9000d030:	e8732744 	lwi	r3, r19, 10052
9000d034:	b0000000 	imm	0
9000d038:	a463ffff 	andi	r3, r3, -1
9000d03c:	30630005 	addik	r3, r3, 5
9000d040:	b0000000 	imm	0
9000d044:	a503ffff 	andi	r8, r3, -1
9000d048:	309313a4 	addik	r4, r19, 5028
9000d04c:	e8b32738 	lwi	r5, r19, 10040
9000d050:	3073001c 	addik	r3, r19, 28
9000d054:	10c30000 	addk	r6, r3, r0
9000d058:	10e40000 	addk	r7, r4, r0
9000d05c:	b9f4fd94 	brlid	r15, -620	// 9000cdf0 <sendAndReceiveSpiData>
9000d060:	80000000 	or	r0, r0, r0
9000d064:	bc230010 	bnei	r3, 16		// 9000d074
9000d068:	10600000 	addk	r3, r0, r0
9000d06c:	f873272c 	swi	r3, r19, 10028
9000d070:	b800002c 	bri	44		// 9000d09c
    
    memcpy(buffer, &readBuffer[5], count);
9000d074:	307313a4 	addik	r3, r19, 5028
9000d078:	30830005 	addik	r4, r3, 5
9000d07c:	e8732740 	lwi	r3, r19, 10048
9000d080:	e8f32744 	lwi	r7, r19, 10052
9000d084:	10a30000 	addk	r5, r3, r0
9000d088:	10c40000 	addk	r6, r4, r0
9000d08c:	b9f46e84 	brlid	r15, 28292	// 90013f10 <memcpy>
9000d090:	80000000 	or	r0, r0, r0
    
    return true;
9000d094:	30600001 	addik	r3, r0, 1
9000d098:	f873272c 	swi	r3, r19, 10028
9000d09c:	e873272c 	lwi	r3, r19, 10028
}
9000d0a0:	e9e10000 	lwi	r15, r1, 0
9000d0a4:	10330000 	addk	r1, r19, r0
9000d0a8:	ea612730 	lwi	r19, r1, 10032
9000d0ac:	30212734 	addik	r1, r1, 10036
9000d0b0:	b60f0008 	rtsd	r15, 8
9000d0b4:	80000000 	or	r0, r0, r0

9000d0b8 <pageWrite>:



static bool pageWrite(SpiInterface* spiInterface, uint32 pageNumber, uint8* buffer)
{
9000d0b8:	3021ffcc 	addik	r1, r1, -52
9000d0bc:	f9e10000 	swi	r15, r1, 0
9000d0c0:	fa610030 	swi	r19, r1, 48
9000d0c4:	12610000 	addk	r19, r1, r0
9000d0c8:	f8b30038 	swi	r5, r19, 56
9000d0cc:	f8d3003c 	swi	r6, r19, 60
9000d0d0:	f8f30040 	swi	r7, r19, 64
    ASSERT(spiInterface);
9000d0d4:	e8730038 	lwi	r3, r19, 56
9000d0d8:	bc230028 	bnei	r3, 40		// 9000d100
9000d0dc:	94110002 	msrclr	r0, 2
9000d0e0:	b0009002 	imm	-28670
9000d0e4:	30a01b78 	addik	r5, r0, 7032
9000d0e8:	b0009002 	imm	-28670
9000d0ec:	30c01b50 	addik	r6, r0, 6992
9000d0f0:	30e0015b 	addik	r7, r0, 347
9000d0f4:	b9f4f330 	brlid	r15, -3280	// 9000c424 <printAssert>
9000d0f8:	80000000 	or	r0, r0, r0
9000d0fc:	b8000000 	bri	0		// 9000d0fc
    ASSERT(buffer);
9000d100:	e8730040 	lwi	r3, r19, 64
9000d104:	bc230028 	bnei	r3, 40		// 9000d12c
9000d108:	94110002 	msrclr	r0, 2
9000d10c:	b0009002 	imm	-28670
9000d110:	30a01b64 	addik	r5, r0, 7012
9000d114:	b0009002 	imm	-28670
9000d118:	30c01b50 	addik	r6, r0, 6992
9000d11c:	30e0015c 	addik	r7, r0, 348
9000d120:	b9f4f304 	brlid	r15, -3324	// 9000c424 <printAssert>
9000d124:	80000000 	or	r0, r0, r0
9000d128:	b8000000 	bri	0		// 9000d128

    while(!isReady(spiInterface))
9000d12c:	e8b30038 	lwi	r5, r19, 56
9000d130:	b9f40384 	brlid	r15, 900	// 9000d4b4 <isReady>
9000d134:	80000000 	or	r0, r0, r0
9000d138:	bc03fff4 	beqi	r3, -12		// 9000d12c
    { ; }

    uint32 count = FLASH_PAGE_SIZE;
9000d13c:	30600210 	addik	r3, r0, 528
9000d140:	f8730024 	swi	r3, r19, 36
    uint32 addr  = 0;
9000d144:	f8130020 	swi	r0, r19, 32
    while(count > 0)
9000d148:	b8000084 	bri	132		// 9000d1cc
    {
        uint32 writeCount = MIN(count, MAX_SINGLE_BUFFER_WRITE_SIZE);
9000d14c:	e8730024 	lwi	r3, r19, 36
9000d150:	f873002c 	swi	r3, r19, 44
9000d154:	e873002c 	lwi	r3, r19, 44
9000d158:	22401384 	addi	r18, r0, 4996
9000d15c:	16439003 	cmpu	r18, r3, r18
9000d160:	bcb2000c 	bgei	r18, 12		// 9000d16c
9000d164:	30601384 	addik	r3, r0, 4996
9000d168:	f873002c 	swi	r3, r19, 44
9000d16c:	e873002c 	lwi	r3, r19, 44
9000d170:	f873001c 	swi	r3, r19, 28

        if(!buffer1Write(spiInterface, addr, buffer, writeCount)) return false;
9000d174:	e8b30038 	lwi	r5, r19, 56
9000d178:	e8d30020 	lwi	r6, r19, 32
9000d17c:	e8f30040 	lwi	r7, r19, 64
9000d180:	e913001c 	lwi	r8, r19, 28
9000d184:	b9f40084 	brlid	r15, 132	// 9000d208 <buffer1Write>
9000d188:	80000000 	or	r0, r0, r0
9000d18c:	bc230010 	bnei	r3, 16		// 9000d19c
9000d190:	10600000 	addk	r3, r0, r0
9000d194:	f8730028 	swi	r3, r19, 40
9000d198:	b8000054 	bri	84		// 9000d1ec
        
        buffer += writeCount;
9000d19c:	e893001c 	lwi	r4, r19, 28
9000d1a0:	e8730040 	lwi	r3, r19, 64
9000d1a4:	10632000 	addk	r3, r3, r4
9000d1a8:	f8730040 	swi	r3, r19, 64
        addr   += writeCount;
9000d1ac:	e8930020 	lwi	r4, r19, 32
9000d1b0:	e873001c 	lwi	r3, r19, 28
9000d1b4:	10641800 	addk	r3, r4, r3
9000d1b8:	f8730020 	swi	r3, r19, 32
        count  -= writeCount;
9000d1bc:	e8930024 	lwi	r4, r19, 36
9000d1c0:	e873001c 	lwi	r3, r19, 28
9000d1c4:	14632000 	rsubk	r3, r3, r4
9000d1c8:	f8730024 	swi	r3, r19, 36
9000d1cc:	e8730024 	lwi	r3, r19, 36
9000d1d0:	bc23ff7c 	bnei	r3, -132		// 9000d14c
    }
    
    writeBuffer1toPage(spiInterface, pageNumber);
9000d1d4:	e8b30038 	lwi	r5, r19, 56
9000d1d8:	e8d3003c 	lwi	r6, r19, 60
9000d1dc:	b9f401d4 	brlid	r15, 468	// 9000d3b0 <writeBuffer1toPage>
9000d1e0:	80000000 	or	r0, r0, r0

    return true;
9000d1e4:	30600001 	addik	r3, r0, 1
9000d1e8:	f8730028 	swi	r3, r19, 40
9000d1ec:	e8730028 	lwi	r3, r19, 40
}
9000d1f0:	e9e10000 	lwi	r15, r1, 0
9000d1f4:	10330000 	addk	r1, r19, r0
9000d1f8:	ea610030 	lwi	r19, r1, 48
9000d1fc:	30210034 	addik	r1, r1, 52
9000d200:	b60f0008 	rtsd	r15, 8
9000d204:	80000000 	or	r0, r0, r0

9000d208 <buffer1Write>:



static bool buffer1Write(SpiInterface* spiInterface, uint32 addr, uint8* buffer, uint32 count)
{
9000d208:	3021ec54 	addik	r1, r1, -5036
9000d20c:	f9e10000 	swi	r15, r1, 0
9000d210:	fa6113a8 	swi	r19, r1, 5032
9000d214:	12610000 	addk	r19, r1, r0
9000d218:	f8b313b0 	swi	r5, r19, 5040
9000d21c:	f8d313b4 	swi	r6, r19, 5044
9000d220:	f8f313b8 	swi	r7, r19, 5048
9000d224:	f91313bc 	swi	r8, r19, 5052
    ASSERT(spiInterface);
9000d228:	e87313b0 	lwi	r3, r19, 5040
9000d22c:	bc230028 	bnei	r3, 40		// 9000d254
9000d230:	94110002 	msrclr	r0, 2
9000d234:	b0009002 	imm	-28670
9000d238:	30a01b78 	addik	r5, r0, 7032
9000d23c:	b0009002 	imm	-28670
9000d240:	30c01b50 	addik	r6, r0, 6992
9000d244:	30e00177 	addik	r7, r0, 375
9000d248:	b9f4f1dc 	brlid	r15, -3620	// 9000c424 <printAssert>
9000d24c:	80000000 	or	r0, r0, r0
9000d250:	b8000000 	bri	0		// 9000d250
    ASSERT(buffer);
9000d254:	e87313b8 	lwi	r3, r19, 5048
9000d258:	bc230028 	bnei	r3, 40		// 9000d280
9000d25c:	94110002 	msrclr	r0, 2
9000d260:	b0009002 	imm	-28670
9000d264:	30a01b64 	addik	r5, r0, 7012
9000d268:	b0009002 	imm	-28670
9000d26c:	30c01b50 	addik	r6, r0, 6992
9000d270:	30e00178 	addik	r7, r0, 376
9000d274:	b9f4f1b0 	brlid	r15, -3664	// 9000c424 <printAssert>
9000d278:	80000000 	or	r0, r0, r0
9000d27c:	b8000000 	bri	0		// 9000d27c
    ASSERT(addr + count <= FLASH_PAGE_SIZE)
9000d280:	e87313b4 	lwi	r3, r19, 5044
9000d284:	e89313bc 	lwi	r4, r19, 5052
9000d288:	10632000 	addk	r3, r3, r4
9000d28c:	22400210 	addi	r18, r0, 528
9000d290:	16439003 	cmpu	r18, r3, r18
9000d294:	bcb20028 	bgei	r18, 40		// 9000d2bc
9000d298:	94110002 	msrclr	r0, 2
9000d29c:	b0009002 	imm	-28670
9000d2a0:	30a01bdc 	addik	r5, r0, 7132
9000d2a4:	b0009002 	imm	-28670
9000d2a8:	30c01b50 	addik	r6, r0, 6992
9000d2ac:	30e00179 	addik	r7, r0, 377
9000d2b0:	b9f4f174 	brlid	r15, -3724	// 9000c424 <printAssert>
9000d2b4:	80000000 	or	r0, r0, r0
9000d2b8:	b8000000 	bri	0		// 9000d2b8
    ASSERT(count <= MAX_SINGLE_BUFFER_WRITE_SIZE);
9000d2bc:	e87313bc 	lwi	r3, r19, 5052
9000d2c0:	22401384 	addi	r18, r0, 4996
9000d2c4:	16439003 	cmpu	r18, r3, r18
9000d2c8:	bcb20028 	bgei	r18, 40		// 9000d2f0
9000d2cc:	94110002 	msrclr	r0, 2
9000d2d0:	b0009002 	imm	-28670
9000d2d4:	30a01bfc 	addik	r5, r0, 7164
9000d2d8:	b0009002 	imm	-28670
9000d2dc:	30c01b50 	addik	r6, r0, 6992
9000d2e0:	30e0017a 	addik	r7, r0, 378
9000d2e4:	b9f4f140 	brlid	r15, -3776	// 9000c424 <printAssert>
9000d2e8:	80000000 	or	r0, r0, r0
9000d2ec:	b8000000 	bri	0		// 9000d2ec
    
    uint8 writeBuffer[SPI_BUFFER_SIZE];

    writeBuffer[0] = OP_BUFFER1_WRITE;
9000d2f0:	3060ff84 	addik	r3, r0, -124
9000d2f4:	f073001c 	sbi	r3, r19, 28
    loadAddrBytesWithAddr(&writeBuffer[1], addr);
9000d2f8:	3073001d 	addik	r3, r19, 29
9000d2fc:	10a30000 	addk	r5, r3, r0
9000d300:	e8d313b4 	lwi	r6, r19, 5044
9000d304:	b9f401f0 	brlid	r15, 496	// 9000d4f4 <loadAddrBytesWithAddr>
9000d308:	80000000 	or	r0, r0, r0
    memcpy(&writeBuffer[4], buffer, count);
9000d30c:	30730020 	addik	r3, r19, 32
9000d310:	e89313b8 	lwi	r4, r19, 5048
9000d314:	e8f313bc 	lwi	r7, r19, 5052
9000d318:	10a30000 	addk	r5, r3, r0
9000d31c:	10c40000 	addk	r6, r4, r0
9000d320:	b9f46bf0 	brlid	r15, 27632	// 90013f10 <memcpy>
9000d324:	80000000 	or	r0, r0, r0

    if(spiWaitAndStartTransmit(spiInterface, writeBuffer, 4 + count, TX_TIMEOUT_us) != SPI_STATUS_TX_STARTED)  return false; // SPI Write Error
9000d328:	e87313bc 	lwi	r3, r19, 5052
9000d32c:	b0000000 	imm	0
9000d330:	a463ffff 	andi	r3, r3, -1
9000d334:	30630004 	addik	r3, r3, 4
9000d338:	b0000000 	imm	0
9000d33c:	a483ffff 	andi	r4, r3, -1
9000d340:	e8b313b0 	lwi	r5, r19, 5040
9000d344:	3073001c 	addik	r3, r19, 28
9000d348:	10c30000 	addk	r6, r3, r0
9000d34c:	10e40000 	addk	r7, r4, r0
9000d350:	31002710 	addik	r8, r0, 10000
9000d354:	b9f4348c 	brlid	r15, 13452	// 900107e0 <spiWaitAndStartTransmit>
9000d358:	80000000 	or	r0, r0, r0
9000d35c:	bc030010 	beqi	r3, 16		// 9000d36c
9000d360:	10600000 	addk	r3, r0, r0
9000d364:	f87313a4 	swi	r3, r19, 5028
9000d368:	b800002c 	bri	44		// 9000d394
    if(!spiWaitForReady(spiInterface, RX_TIMEOUT_us)) return false;
9000d36c:	e8b313b0 	lwi	r5, r19, 5040
9000d370:	30c02710 	addik	r6, r0, 10000
9000d374:	b9f43020 	brlid	r15, 12320	// 90010394 <spiWaitForReady>
9000d378:	80000000 	or	r0, r0, r0
9000d37c:	bc230010 	bnei	r3, 16		// 9000d38c
9000d380:	10600000 	addk	r3, r0, r0
9000d384:	f87313a4 	swi	r3, r19, 5028
9000d388:	b800000c 	bri	12		// 9000d394

    return true;
9000d38c:	30600001 	addik	r3, r0, 1
9000d390:	f87313a4 	swi	r3, r19, 5028
9000d394:	e87313a4 	lwi	r3, r19, 5028
}
9000d398:	e9e10000 	lwi	r15, r1, 0
9000d39c:	10330000 	addk	r1, r19, r0
9000d3a0:	ea6113a8 	lwi	r19, r1, 5032
9000d3a4:	302113ac 	addik	r1, r1, 5036
9000d3a8:	b60f0008 	rtsd	r15, 8
9000d3ac:	80000000 	or	r0, r0, r0

9000d3b0 <writeBuffer1toPage>:



static bool writeBuffer1toPage(SpiInterface* spiInterface, uint32 pageNumber)
{
9000d3b0:	3021ec54 	addik	r1, r1, -5036
9000d3b4:	f9e10000 	swi	r15, r1, 0
9000d3b8:	fa6113a8 	swi	r19, r1, 5032
9000d3bc:	12610000 	addk	r19, r1, r0
9000d3c0:	f8b313b0 	swi	r5, r19, 5040
9000d3c4:	f8d313b4 	swi	r6, r19, 5044
    ASSERT(spiInterface);
9000d3c8:	e87313b0 	lwi	r3, r19, 5040
9000d3cc:	bc230028 	bnei	r3, 40		// 9000d3f4
9000d3d0:	94110002 	msrclr	r0, 2
9000d3d4:	b0009002 	imm	-28670
9000d3d8:	30a01b78 	addik	r5, r0, 7032
9000d3dc:	b0009002 	imm	-28670
9000d3e0:	30c01b50 	addik	r6, r0, 6992
9000d3e4:	30e0018c 	addik	r7, r0, 396
9000d3e8:	b9f4f03c 	brlid	r15, -4036	// 9000c424 <printAssert>
9000d3ec:	80000000 	or	r0, r0, r0
9000d3f0:	b8000000 	bri	0		// 9000d3f0
    ASSERT(pageNumber < FLASH_PAGE_COUNT);
9000d3f4:	e87313b4 	lwi	r3, r19, 5044
9000d3f8:	22400fff 	addi	r18, r0, 4095
9000d3fc:	16439003 	cmpu	r18, r3, r18
9000d400:	bcb20028 	bgei	r18, 40		// 9000d428
9000d404:	94110002 	msrclr	r0, 2
9000d408:	b0009002 	imm	-28670
9000d40c:	30a01c24 	addik	r5, r0, 7204
9000d410:	b0009002 	imm	-28670
9000d414:	30c01b50 	addik	r6, r0, 6992
9000d418:	30e0018d 	addik	r7, r0, 397
9000d41c:	b9f4f008 	brlid	r15, -4088	// 9000c424 <printAssert>
9000d420:	80000000 	or	r0, r0, r0
9000d424:	b8000000 	bri	0		// 9000d424
    
    uint8 writeBuffer[SPI_BUFFER_SIZE];

    writeBuffer[0] = OP_BUFFER1_TO_PAGE_PROG_WITH_ERASE;
9000d428:	3060ff83 	addik	r3, r0, -125
9000d42c:	f073001c 	sbi	r3, r19, 28
    loadAddrBytesWithPage(&writeBuffer[1], pageNumber);
9000d430:	3073001d 	addik	r3, r19, 29
9000d434:	10a30000 	addk	r5, r3, r0
9000d438:	e8d313b4 	lwi	r6, r19, 5044
9000d43c:	b9f401e0 	brlid	r15, 480	// 9000d61c <loadAddrBytesWithPage>
9000d440:	80000000 	or	r0, r0, r0

    if(spiWaitAndStartTransmit(spiInterface, writeBuffer, 4, TX_TIMEOUT_us) != SPI_STATUS_TX_STARTED)  return false; // SPI Write Error
9000d444:	e8b313b0 	lwi	r5, r19, 5040
9000d448:	3073001c 	addik	r3, r19, 28
9000d44c:	10c30000 	addk	r6, r3, r0
9000d450:	30e00004 	addik	r7, r0, 4
9000d454:	31002710 	addik	r8, r0, 10000
9000d458:	b9f43388 	brlid	r15, 13192	// 900107e0 <spiWaitAndStartTransmit>
9000d45c:	80000000 	or	r0, r0, r0
9000d460:	bc030010 	beqi	r3, 16		// 9000d470
9000d464:	10600000 	addk	r3, r0, r0
9000d468:	f87313a4 	swi	r3, r19, 5028
9000d46c:	b800002c 	bri	44		// 9000d498
    if(!spiWaitForReady(spiInterface, RX_TIMEOUT_us)) return false;
9000d470:	e8b313b0 	lwi	r5, r19, 5040
9000d474:	30c02710 	addik	r6, r0, 10000
9000d478:	b9f42f1c 	brlid	r15, 12060	// 90010394 <spiWaitForReady>
9000d47c:	80000000 	or	r0, r0, r0
9000d480:	bc230010 	bnei	r3, 16		// 9000d490
9000d484:	10600000 	addk	r3, r0, r0
9000d488:	f87313a4 	swi	r3, r19, 5028
9000d48c:	b800000c 	bri	12		// 9000d498

    return true;
9000d490:	30600001 	addik	r3, r0, 1
9000d494:	f87313a4 	swi	r3, r19, 5028
9000d498:	e87313a4 	lwi	r3, r19, 5028
}
9000d49c:	e9e10000 	lwi	r15, r1, 0
9000d4a0:	10330000 	addk	r1, r19, r0
9000d4a4:	ea6113a8 	lwi	r19, r1, 5032
9000d4a8:	302113ac 	addik	r1, r1, 5036
9000d4ac:	b60f0008 	rtsd	r15, 8
9000d4b0:	80000000 	or	r0, r0, r0

9000d4b4 <isReady>:



static bool isReady(SpiInterface* spiInterface)
{
9000d4b4:	3021ffe0 	addik	r1, r1, -32
9000d4b8:	f9e10000 	swi	r15, r1, 0
9000d4bc:	fa61001c 	swi	r19, r1, 28
9000d4c0:	12610000 	addk	r19, r1, r0
9000d4c4:	f8b30024 	swi	r5, r19, 36
    return !!(readStatusRegister(spiInterface) & 0x80);
9000d4c8:	e8b30024 	lwi	r5, r19, 36
9000d4cc:	b9f4f068 	brlid	r15, -3992	// 9000c534 <readStatusRegister>
9000d4d0:	80000000 	or	r0, r0, r0
9000d4d4:	90630060 	sext8	r3, r3
9000d4d8:	6463001f 	bsrli	r3, r3, 31
}
9000d4dc:	e9e10000 	lwi	r15, r1, 0
9000d4e0:	10330000 	addk	r1, r19, r0
9000d4e4:	ea61001c 	lwi	r19, r1, 28
9000d4e8:	30210020 	addik	r1, r1, 32
9000d4ec:	b60f0008 	rtsd	r15, 8
9000d4f0:	80000000 	or	r0, r0, r0

9000d4f4 <loadAddrBytesWithAddr>:



static void loadAddrBytesWithAddr(uint8* buffer, uint32 addr)
{
9000d4f4:	3021ffd8 	addik	r1, r1, -40
9000d4f8:	f9e10000 	swi	r15, r1, 0
9000d4fc:	fa610024 	swi	r19, r1, 36
9000d500:	12610000 	addk	r19, r1, r0
9000d504:	f8b3002c 	swi	r5, r19, 44
9000d508:	f8d30030 	swi	r6, r19, 48
    ASSERT(buffer);
9000d50c:	e873002c 	lwi	r3, r19, 44
9000d510:	bc230028 	bnei	r3, 40		// 9000d538
9000d514:	94110002 	msrclr	r0, 2
9000d518:	b0009002 	imm	-28670
9000d51c:	30a01b64 	addik	r5, r0, 7012
9000d520:	b0009002 	imm	-28670
9000d524:	30c01b50 	addik	r6, r0, 6992
9000d528:	30e001a5 	addik	r7, r0, 421
9000d52c:	b9f4eef8 	brlid	r15, -4360	// 9000c424 <printAssert>
9000d530:	80000000 	or	r0, r0, r0
9000d534:	b8000000 	bri	0		// 9000d534
    ASSERT(addr < FLASH_SIZE);
9000d538:	e8730030 	lwi	r3, r19, 48
9000d53c:	b0000020 	imm	32
9000d540:	2240ffff 	addi	r18, r0, -1
9000d544:	16439003 	cmpu	r18, r3, r18
9000d548:	bcb20028 	bgei	r18, 40		// 9000d570
9000d54c:	94110002 	msrclr	r0, 2
9000d550:	b0009002 	imm	-28670
9000d554:	30a01c44 	addik	r5, r0, 7236
9000d558:	b0009002 	imm	-28670
9000d55c:	30c01b50 	addik	r6, r0, 6992
9000d560:	30e001a6 	addik	r7, r0, 422
9000d564:	b9f4eec0 	brlid	r15, -4416	// 9000c424 <printAssert>
9000d568:	80000000 	or	r0, r0, r0
9000d56c:	b8000000 	bri	0		// 9000d56c
    
    uint32 page   = addr / FLASH_PAGE_SIZE;
9000d570:	e8930030 	lwi	r4, r19, 48
9000d574:	30600210 	addik	r3, r0, 528
9000d578:	48632002 	idivu	r3, r3, r4
9000d57c:	f8730020 	swi	r3, r19, 32
    uint32 offset = addr % FLASH_PAGE_SIZE;
9000d580:	e8b30030 	lwi	r5, r19, 48
9000d584:	30600210 	addik	r3, r0, 528
9000d588:	48832802 	idivu	r4, r3, r5
9000d58c:	30600210 	addik	r3, r0, 528
9000d590:	40641800 	mul	r3, r4, r3
9000d594:	14632800 	rsubk	r3, r3, r5
9000d598:	f873001c 	swi	r3, r19, 28
    
    buffer[0] = (page >> 6) & 0x3f;
9000d59c:	e8730020 	lwi	r3, r19, 32
9000d5a0:	64630006 	bsrli	r3, r3, 6
9000d5a4:	a46300ff 	andi	r3, r3, 255
9000d5a8:	a463003f 	andi	r3, r3, 63
9000d5ac:	e893002c 	lwi	r4, r19, 44
9000d5b0:	f0640000 	sbi	r3, r4, 0
    buffer[1] = ((page << 2) & 0xfc) | ((offset >> 8) & 0x03);
9000d5b4:	e873002c 	lwi	r3, r19, 44
9000d5b8:	30a30001 	addik	r5, r3, 1
9000d5bc:	e8730020 	lwi	r3, r19, 32
9000d5c0:	a46300ff 	andi	r3, r3, 255
9000d5c4:	64630402 	bslli	r3, r3, 2
9000d5c8:	a46300ff 	andi	r3, r3, 255
9000d5cc:	10830000 	addk	r4, r3, r0
9000d5d0:	a48400fc 	andi	r4, r4, 252
9000d5d4:	e873001c 	lwi	r3, r19, 28
9000d5d8:	64630008 	bsrli	r3, r3, 8
9000d5dc:	a46300ff 	andi	r3, r3, 255
9000d5e0:	a4630003 	andi	r3, r3, 3
9000d5e4:	80641800 	or	r3, r4, r3
9000d5e8:	a46300ff 	andi	r3, r3, 255
9000d5ec:	f0650000 	sbi	r3, r5, 0
    buffer[2] = offset & 0xff;
9000d5f0:	e873002c 	lwi	r3, r19, 44
9000d5f4:	30830002 	addik	r4, r3, 2
9000d5f8:	e873001c 	lwi	r3, r19, 28
9000d5fc:	a46300ff 	andi	r3, r3, 255
9000d600:	f0640000 	sbi	r3, r4, 0
    
}
9000d604:	e9e10000 	lwi	r15, r1, 0
9000d608:	10330000 	addk	r1, r19, r0
9000d60c:	ea610024 	lwi	r19, r1, 36
9000d610:	30210028 	addik	r1, r1, 40
9000d614:	b60f0008 	rtsd	r15, 8
9000d618:	80000000 	or	r0, r0, r0

9000d61c <loadAddrBytesWithPage>:



static void loadAddrBytesWithPage(uint8* buffer, uint32 page)
{
9000d61c:	3021ffe0 	addik	r1, r1, -32
9000d620:	f9e10000 	swi	r15, r1, 0
9000d624:	fa61001c 	swi	r19, r1, 28
9000d628:	12610000 	addk	r19, r1, r0
9000d62c:	f8b30024 	swi	r5, r19, 36
9000d630:	f8d30028 	swi	r6, r19, 40
    ASSERT(buffer);
9000d634:	e8730024 	lwi	r3, r19, 36
9000d638:	bc230028 	bnei	r3, 40		// 9000d660
9000d63c:	94110002 	msrclr	r0, 2
9000d640:	b0009002 	imm	-28670
9000d644:	30a01b64 	addik	r5, r0, 7012
9000d648:	b0009002 	imm	-28670
9000d64c:	30c01b50 	addik	r6, r0, 6992
9000d650:	30e001b5 	addik	r7, r0, 437
9000d654:	b9f4edd0 	brlid	r15, -4656	// 9000c424 <printAssert>
9000d658:	80000000 	or	r0, r0, r0
9000d65c:	b8000000 	bri	0		// 9000d65c
    ASSERT(page < FLASH_PAGE_COUNT);
9000d660:	e8730028 	lwi	r3, r19, 40
9000d664:	22400fff 	addi	r18, r0, 4095
9000d668:	16439003 	cmpu	r18, r3, r18
9000d66c:	bcb20028 	bgei	r18, 40		// 9000d694
9000d670:	94110002 	msrclr	r0, 2
9000d674:	b0009002 	imm	-28670
9000d678:	30a01c58 	addik	r5, r0, 7256
9000d67c:	b0009002 	imm	-28670
9000d680:	30c01b50 	addik	r6, r0, 6992
9000d684:	30e001b6 	addik	r7, r0, 438
9000d688:	b9f4ed9c 	brlid	r15, -4708	// 9000c424 <printAssert>
9000d68c:	80000000 	or	r0, r0, r0
9000d690:	b8000000 	bri	0		// 9000d690

    buffer[0] = (page >> 6) & 0x3f;
9000d694:	e8730028 	lwi	r3, r19, 40
9000d698:	64630006 	bsrli	r3, r3, 6
9000d69c:	a46300ff 	andi	r3, r3, 255
9000d6a0:	a463003f 	andi	r3, r3, 63
9000d6a4:	e8930024 	lwi	r4, r19, 36
9000d6a8:	f0640000 	sbi	r3, r4, 0
    buffer[1] = (page << 2) & 0xfc;
9000d6ac:	e8730024 	lwi	r3, r19, 36
9000d6b0:	30830001 	addik	r4, r3, 1
9000d6b4:	e8730028 	lwi	r3, r19, 40
9000d6b8:	a46300ff 	andi	r3, r3, 255
9000d6bc:	64630402 	bslli	r3, r3, 2
9000d6c0:	a46300ff 	andi	r3, r3, 255
9000d6c4:	a46300fc 	andi	r3, r3, 252
9000d6c8:	f0640000 	sbi	r3, r4, 0
    buffer[2] = 0;
9000d6cc:	e8730024 	lwi	r3, r19, 36
9000d6d0:	30630002 	addik	r3, r3, 2
9000d6d4:	f0030000 	sbi	r0, r3, 0
}
9000d6d8:	e9e10000 	lwi	r15, r1, 0
9000d6dc:	10330000 	addk	r1, r19, r0
9000d6e0:	ea61001c 	lwi	r19, r1, 28
9000d6e4:	30210020 	addik	r1, r1, 32
9000d6e8:	b60f0008 	rtsd	r15, 8
9000d6ec:	80000000 	or	r0, r0, r0

9000d6f0 <wordsToDWord>:
#include <string.h>


uint32 wordsToDWord(uint16 high, uint16 low)
{
9000d6f0:	3021fff0 	addik	r1, r1, -16
9000d6f4:	fa61000c 	swi	r19, r1, 12
9000d6f8:	12610000 	addk	r19, r1, r0
9000d6fc:	f4b30014 	shi	r5, r19, 20
9000d700:	f4d30018 	shi	r6, r19, 24
    uint32 value;
    uint16 words[2];

    words[0] = high;
9000d704:	e4730014 	lhui	r3, r19, 20
9000d708:	f4730008 	shi	r3, r19, 8
    words[1] = low;
9000d70c:	e4730018 	lhui	r3, r19, 24
9000d710:	f473000a 	shi	r3, r19, 10

    memcpy(&value, words, 4);
9000d714:	30730008 	addik	r3, r19, 8
9000d718:	e8630000 	lwi	r3, r3, 0
9000d71c:	f8730004 	swi	r3, r19, 4

    return value;
9000d720:	e8730004 	lwi	r3, r19, 4
}
9000d724:	10330000 	addk	r1, r19, r0
9000d728:	ea61000c 	lwi	r19, r1, 12
9000d72c:	30210010 	addik	r1, r1, 16
9000d730:	b60f0008 	rtsd	r15, 8
9000d734:	80000000 	or	r0, r0, r0

9000d738 <uint16ToAsciiHex>:


void uint16ToAsciiHex( char *str, uint16 val )
{
9000d738:	3021fff0 	addik	r1, r1, -16
9000d73c:	fa61000c 	swi	r19, r1, 12
9000d740:	12610000 	addk	r19, r1, r0
9000d744:	f8b30014 	swi	r5, r19, 20
9000d748:	f4d30018 	shi	r6, r19, 24
    if( str )
9000d74c:	e8730014 	lwi	r3, r19, 20
9000d750:	bc03009c 	beqi	r3, 156		// 9000d7ec
    {
        int i;

        for( i = 3; i >= 0; --i )
9000d754:	30600003 	addik	r3, r0, 3
9000d758:	f8730008 	swi	r3, r19, 8
9000d75c:	b8000080 	bri	128		// 9000d7dc
        {
            uint8 nibble = ( uint8 )( val >> ( i << 2 ) ) & 0x0F;
9000d760:	e4930018 	lhui	r4, r19, 24
9000d764:	e8730008 	lwi	r3, r19, 8
9000d768:	64630402 	bslli	r3, r3, 2
9000d76c:	44641a00 	bsra	r3, r4, r3
9000d770:	a46300ff 	andi	r3, r3, 255
9000d774:	a463000f 	andi	r3, r3, 15
9000d778:	f0730004 	sbi	r3, r19, 4

            if( nibble < 10 )
9000d77c:	e0730004 	lbui	r3, r19, 4
9000d780:	22400009 	addi	r18, r0, 9
9000d784:	16439003 	cmpu	r18, r3, r18
9000d788:	bc520014 	blti	r18, 20		// 9000d79c
            {
                nibble += '0';
9000d78c:	e0730004 	lbui	r3, r19, 4
9000d790:	30630030 	addik	r3, r3, 48
9000d794:	f0730004 	sbi	r3, r19, 4
9000d798:	b800001c 	bri	28		// 9000d7b4
            }
            else
            {
                nibble -= 10;
9000d79c:	e0730004 	lbui	r3, r19, 4
9000d7a0:	3063fff6 	addik	r3, r3, -10
9000d7a4:	f0730004 	sbi	r3, r19, 4
                nibble += 'A';
9000d7a8:	e0730004 	lbui	r3, r19, 4
9000d7ac:	30630041 	addik	r3, r3, 65
9000d7b0:	f0730004 	sbi	r3, r19, 4
            }

            *str++ = nibble;
9000d7b4:	e0730004 	lbui	r3, r19, 4
9000d7b8:	90830060 	sext8	r4, r3
9000d7bc:	e8730014 	lwi	r3, r19, 20
9000d7c0:	f0830000 	sbi	r4, r3, 0
9000d7c4:	e8730014 	lwi	r3, r19, 20
9000d7c8:	30630001 	addik	r3, r3, 1
9000d7cc:	f8730014 	swi	r3, r19, 20
9000d7d0:	e8730008 	lwi	r3, r19, 8
9000d7d4:	3063ffff 	addik	r3, r3, -1
9000d7d8:	f8730008 	swi	r3, r19, 8
9000d7dc:	e8730008 	lwi	r3, r19, 8
9000d7e0:	bca3ff80 	bgei	r3, -128		// 9000d760
        }

        *str = '\0';
9000d7e4:	e8730014 	lwi	r3, r19, 20
9000d7e8:	f0030000 	sbi	r0, r3, 0
    }
}
9000d7ec:	10330000 	addk	r1, r19, r0
9000d7f0:	ea61000c 	lwi	r19, r1, 12
9000d7f4:	30210010 	addik	r1, r1, 16
9000d7f8:	b60f0008 	rtsd	r15, 8
9000d7fc:	80000000 	or	r0, r0, r0

9000d800 <initCRC>:
///////////////////////////////////
//	*** Calculate CRC Table ***
///////////////////////////////////
void initCRC()
{
9000d800:	3021ffec 	addik	r1, r1, -20
9000d804:	fa610010 	swi	r19, r1, 16
9000d808:	12610000 	addk	r19, r1, r0
    int i, j;
    unsigned short crc, c;

    for(i = 0; i < CRCCCITT_TABLE_SIZE; i++) 
9000d80c:	f813000c 	swi	r0, r19, 12
9000d810:	b80000b8 	bri	184		// 9000d8c8
	{
        crc = 0;
9000d814:	f4130006 	shi	r0, r19, 6
        c   = ((unsigned short) i) << 8;
9000d818:	e873000c 	lwi	r3, r19, 12
9000d81c:	b0000000 	imm	0
9000d820:	a463ffff 	andi	r3, r3, -1
9000d824:	64630408 	bslli	r3, r3, 8
9000d828:	f4730004 	shi	r3, r19, 4
        for (j=0; j<8; j++) 
9000d82c:	f8130008 	swi	r0, r19, 8
9000d830:	b8000060 	bri	96		// 9000d890
		{
            if ( (crc ^ c) & 0x8000 ) crc = ( crc << 1 ) ^ P_CCITT;
9000d834:	e4930006 	lhui	r4, r19, 6
9000d838:	e4730004 	lhui	r3, r19, 4
9000d83c:	88641800 	xor	r3, r4, r3
9000d840:	b0000000 	imm	0
9000d844:	a463ffff 	andi	r3, r3, -1
9000d848:	90630061 	sext16	r3, r3
9000d84c:	bca30020 	bgei	r3, 32		// 9000d86c
9000d850:	e4730006 	lhui	r3, r19, 6
9000d854:	10631800 	addk	r3, r3, r3
9000d858:	90630061 	sext16	r3, r3
9000d85c:	a8631021 	xori	r3, r3, 4129
9000d860:	90630061 	sext16	r3, r3
9000d864:	f4730006 	shi	r3, r19, 6
9000d868:	b8000010 	bri	16		// 9000d878
            else                      crc =   crc << 1;
9000d86c:	e4730006 	lhui	r3, r19, 6
9000d870:	10631800 	addk	r3, r3, r3
9000d874:	f4730006 	shi	r3, r19, 6

            c = c << 1;
9000d878:	e4730004 	lhui	r3, r19, 4
9000d87c:	10631800 	addk	r3, r3, r3
9000d880:	f4730004 	shi	r3, r19, 4
9000d884:	e8730008 	lwi	r3, r19, 8
9000d888:	30630001 	addik	r3, r3, 1
9000d88c:	f8730008 	swi	r3, r19, 8
9000d890:	e8730008 	lwi	r3, r19, 8
9000d894:	32400007 	addik	r18, r0, 7
9000d898:	16439001 	cmp	r18, r3, r18
9000d89c:	bcb2ff98 	bgei	r18, -104		// 9000d834
        }
        crc_tabccitt[i] = crc;
9000d8a0:	e873000c 	lwi	r3, r19, 12
9000d8a4:	10831800 	addk	r4, r3, r3
9000d8a8:	b0009002 	imm	-28670
9000d8ac:	3060fbb8 	addik	r3, r0, -1096
9000d8b0:	10841800 	addk	r4, r4, r3
9000d8b4:	e4730006 	lhui	r3, r19, 6
9000d8b8:	f4640000 	shi	r3, r4, 0
9000d8bc:	e873000c 	lwi	r3, r19, 12
9000d8c0:	30630001 	addik	r3, r3, 1
9000d8c4:	f873000c 	swi	r3, r19, 12
9000d8c8:	e873000c 	lwi	r3, r19, 12
9000d8cc:	324000ff 	addik	r18, r0, 255
9000d8d0:	16439001 	cmp	r18, r3, r18
9000d8d4:	bcb2ff40 	bgei	r18, -192		// 9000d814
    }
    CRC_tabccitt_init = 1;
9000d8d8:	30600001 	addik	r3, r0, 1
9000d8dc:	b0009002 	imm	-28670
9000d8e0:	f860fbb4 	swi	r3, r0, -1100
}
9000d8e4:	10330000 	addk	r1, r19, r0
9000d8e8:	ea610010 	lwi	r19, r1, 16
9000d8ec:	30210014 	addik	r1, r1, 20
9000d8f0:	b60f0008 	rtsd	r15, 8
9000d8f4:	80000000 	or	r0, r0, r0

9000d8f8 <calcCRC16>:



///////////////////////////////////
//	*** Calculate CRC ***
///////////////////////////////////
// Calculate CCITT standard 16-bit CRC
// (which uses polynomial x^16 + x^12 + x^5 + 1)
// This version actually works
CRC16 calcCRC16(CRC16 crc, const char *pStr, size_t lenStr)
{		
9000d8f8:	3021ffd4 	addik	r1, r1, -44
9000d8fc:	f9e10000 	swi	r15, r1, 0
9000d900:	fa610028 	swi	r19, r1, 40
9000d904:	12610000 	addk	r19, r1, r0
9000d908:	f4b30030 	shi	r5, r19, 48
9000d90c:	f8d30034 	swi	r6, r19, 52
9000d910:	f8f30038 	swi	r7, r19, 56
	int tmp,i;
	char nextchar;

	if ( ! CRC_tabccitt_init ) initCRC();
9000d914:	b0009002 	imm	-28670
9000d918:	e860fbb4 	lwi	r3, r0, -1100
9000d91c:	bc23000c 	bnei	r3, 12		// 9000d928
9000d920:	b9f4fee0 	brlid	r15, -288	// 9000d800 <initCRC>
9000d924:	80000000 	or	r0, r0, r0
	
	for(i=0;i<(int)lenStr;i++)
9000d928:	f8130020 	swi	r0, r19, 32
9000d92c:	b8000090 	bri	144		// 9000d9bc
	{	
		nextchar = *pStr;
9000d930:	e8730034 	lwi	r3, r19, 52
9000d934:	e0630000 	lbui	r3, r3, 0
9000d938:	f073001c 	sbi	r3, r19, 28
		tmp = ((nextchar ^ (crc >> 8)) & 0xFF);
9000d93c:	e073001c 	lbui	r3, r19, 28
9000d940:	90830060 	sext8	r4, r3
9000d944:	e4730030 	lhui	r3, r19, 48
9000d948:	64630008 	bsrli	r3, r3, 8
9000d94c:	b0000000 	imm	0
9000d950:	a463ffff 	andi	r3, r3, -1
9000d954:	88641800 	xor	r3, r4, r3
9000d958:	a46300ff 	andi	r3, r3, 255
9000d95c:	f8730024 	swi	r3, r19, 36
		crc = ((crc << 8) ^ crc_tabccitt[tmp])&0xFFFF;
9000d960:	e4730030 	lhui	r3, r19, 48
9000d964:	64630408 	bslli	r3, r3, 8
9000d968:	90a30061 	sext16	r5, r3
9000d96c:	e8730024 	lwi	r3, r19, 36
9000d970:	10831800 	addk	r4, r3, r3
9000d974:	b0009002 	imm	-28670
9000d978:	3060fbb8 	addik	r3, r0, -1096
9000d97c:	10641800 	addk	r3, r4, r3
9000d980:	e4630000 	lhui	r3, r3, 0
9000d984:	90630061 	sext16	r3, r3
9000d988:	88651800 	xor	r3, r5, r3
9000d98c:	90630061 	sext16	r3, r3
9000d990:	b0000000 	imm	0
9000d994:	a483ffff 	andi	r4, r3, -1
9000d998:	3060ffff 	addik	r3, r0, -1
9000d99c:	84641800 	and	r3, r4, r3
9000d9a0:	f4730030 	shi	r3, r19, 48
		pStr++;
9000d9a4:	e8730034 	lwi	r3, r19, 52
9000d9a8:	30630001 	addik	r3, r3, 1
9000d9ac:	f8730034 	swi	r3, r19, 52
9000d9b0:	e8730020 	lwi	r3, r19, 32
9000d9b4:	30630001 	addik	r3, r3, 1
9000d9b8:	f8730020 	swi	r3, r19, 32
9000d9bc:	e8930038 	lwi	r4, r19, 56
9000d9c0:	e8730020 	lwi	r3, r19, 32
9000d9c4:	16441801 	cmp	r18, r4, r3
9000d9c8:	bc52ff68 	blti	r18, -152		// 9000d930
	}
    return crc;
9000d9cc:	e4730030 	lhui	r3, r19, 48

}
9000d9d0:	e9e10000 	lwi	r15, r1, 0
9000d9d4:	10330000 	addk	r1, r19, r0
9000d9d8:	ea610028 	lwi	r19, r1, 40
9000d9dc:	3021002c 	addik	r1, r1, 44
9000d9e0:	b60f0008 	rtsd	r15, 8
9000d9e4:	80000000 	or	r0, r0, r0

9000d9e8 <calcCRC32>:



CRC32 calcCRC32(CRC32 initialCrc, const void* bufPtr, size_t length)
{
9000d9e8:	3021ffec 	addik	r1, r1, -20
9000d9ec:	fa610010 	swi	r19, r1, 16
9000d9f0:	12610000 	addk	r19, r1, r0
9000d9f4:	f8b30018 	swi	r5, r19, 24
9000d9f8:	f8d3001c 	swi	r6, r19, 28
9000d9fc:	f8f30020 	swi	r7, r19, 32
    register       CRC32          c = initialCrc;
9000da00:	e8730018 	lwi	r3, r19, 24
9000da04:	f873000c 	swi	r3, r19, 12
    register const unsigned char* p = (const unsigned char*)bufPtr;
9000da08:	e893001c 	lwi	r4, r19, 28
9000da0c:	f8930008 	swi	r4, r19, 8
    register       size_t         n = length;
9000da10:	e8730020 	lwi	r3, r19, 32
9000da14:	f8730004 	swi	r3, r19, 4

    while( n-- )
9000da18:	b8000048 	bri	72		// 9000da60
    {
        c = (c >> 8) ^ crc32_tab[(*p++ ^ c) & 0xFFUL];
9000da1c:	e893000c 	lwi	r4, r19, 12
9000da20:	64a40008 	bsrli	r5, r4, 8
9000da24:	e8930008 	lwi	r4, r19, 8
9000da28:	e0640000 	lbui	r3, r4, 0
9000da2c:	e893000c 	lwi	r4, r19, 12
9000da30:	88632000 	xor	r3, r3, r4
9000da34:	a46300ff 	andi	r3, r3, 255
9000da38:	64830402 	bslli	r4, r3, 2
9000da3c:	b0009002 	imm	-28670
9000da40:	3060369c 	addik	r3, r0, 13980
9000da44:	10641800 	addk	r3, r4, r3
9000da48:	e8630000 	lwi	r3, r3, 0
9000da4c:	88a51800 	xor	r5, r5, r3
9000da50:	f8b3000c 	swi	r5, r19, 12
9000da54:	e8730008 	lwi	r3, r19, 8
9000da58:	30630001 	addik	r3, r3, 1
9000da5c:	f8730008 	swi	r3, r19, 8
9000da60:	e8930004 	lwi	r4, r19, 4
9000da64:	3084ffff 	addik	r4, r4, -1
9000da68:	f8930004 	swi	r4, r19, 4
9000da6c:	e8730004 	lwi	r3, r19, 4
9000da70:	aa43ffff 	xori	r18, r3, -1
9000da74:	bc32ffa8 	bnei	r18, -88		// 9000da1c
    }

    return c;
9000da78:	e873000c 	lwi	r3, r19, 12
}
9000da7c:	10330000 	addk	r1, r19, r0
9000da80:	ea610010 	lwi	r19, r1, 16
9000da84:	30210014 	addik	r1, r1, 20
9000da88:	b60f0008 	rtsd	r15, 8
9000da8c:	80000000 	or	r0, r0, r0

9000da90 <verifyRamFirmwareImage>:
///////////////////////////////////////////////////
// Interface functions

bool verifyRamFirmwareImage(void* image, uint32 imageSize, uint32 imageCRC)
{
9000da90:	3021ffc4 	addik	r1, r1, -60
9000da94:	f9e10000 	swi	r15, r1, 0
9000da98:	fa610038 	swi	r19, r1, 56
9000da9c:	12610000 	addk	r19, r1, r0
9000daa0:	f8b30040 	swi	r5, r19, 64
9000daa4:	f8d30044 	swi	r6, r19, 68
9000daa8:	f8f30048 	swi	r7, r19, 72
    if(imageSize < IMAGE_HEADER_SIZE + VECTOR_SECTION_SIZE + CRC_SIZE)
9000daac:	e8730044 	lwi	r3, r19, 68
9000dab0:	22400037 	addi	r18, r0, 55
9000dab4:	16439003 	cmpu	r18, r3, r18
9000dab8:	bc520020 	blti	r18, 32		// 9000dad8
    {
        //Minimum size too small
        printf("Invalid Image - image too small\n");
9000dabc:	b0009002 	imm	-28670
9000dac0:	30a02700 	addik	r5, r0, 9984
9000dac4:	b9f42474 	brlid	r15, 9332	// 9000ff38 <puts>
9000dac8:	80000000 	or	r0, r0, r0
        return false;
9000dacc:	10600000 	addk	r3, r0, r0
9000dad0:	f8730034 	swi	r3, r19, 52
9000dad4:	b80001a8 	bri	424		// 9000dc7c
    }

    if(imageSize & 0x00000001)
9000dad8:	e8730044 	lwi	r3, r19, 68
9000dadc:	a4630001 	andi	r3, r3, 1
9000dae0:	a46300ff 	andi	r3, r3, 255
9000dae4:	bc030024 	beqi	r3, 36		// 9000db08
    {
        //Must be on 16-bit boundry (no odd fileSize)
        printf("Invalid Image - odd byte count (%lu)\n", imageSize);
9000dae8:	b0009002 	imm	-28670
9000daec:	30a02720 	addik	r5, r0, 10016
9000daf0:	e8d30044 	lwi	r6, r19, 68
9000daf4:	b9f42350 	brlid	r15, 9040	// 9000fe44 <printf>
9000daf8:	80000000 	or	r0, r0, r0
        return false;
9000dafc:	10600000 	addk	r3, r0, r0
9000db00:	f8730034 	swi	r3, r19, 52
9000db04:	b8000178 	bri	376		// 9000dc7c
    }
    
    uint32 storedImageCRC;
    uint32 calculatedImageCRC = calcCRC32(INITIAL_CRC32_VALUE, (char*)image, imageSize - CRC_SIZE);
9000db08:	e8930040 	lwi	r4, r19, 64
9000db0c:	e8730044 	lwi	r3, r19, 68
9000db10:	3063fffc 	addik	r3, r3, -4
9000db14:	30a0ffff 	addik	r5, r0, -1
9000db18:	10c40000 	addk	r6, r4, r0
9000db1c:	10e30000 	addk	r7, r3, r0
9000db20:	b9f4fec8 	brlid	r15, -312	// 9000d9e8 <calcCRC32>
9000db24:	80000000 	or	r0, r0, r0
9000db28:	f8730020 	swi	r3, r19, 32
    uint32 wholeImageCRC      = calcCRC32(calculatedImageCRC, &((char*)image)[imageSize - CRC_SIZE], CRC_SIZE);
9000db2c:	e8930040 	lwi	r4, r19, 64
9000db30:	e8730044 	lwi	r3, r19, 68
9000db34:	10641800 	addk	r3, r4, r3
9000db38:	3063fffc 	addik	r3, r3, -4
9000db3c:	e8b30020 	lwi	r5, r19, 32
9000db40:	10c30000 	addk	r6, r3, r0
9000db44:	30e00004 	addik	r7, r0, 4
9000db48:	b9f4fea0 	brlid	r15, -352	// 9000d9e8 <calcCRC32>
9000db4c:	80000000 	or	r0, r0, r0
9000db50:	f873001c 	swi	r3, r19, 28
    
    memcpy(&storedImageCRC, &((char*)image)[imageSize - CRC_SIZE], sizeof(storedImageCRC));
9000db54:	e8930040 	lwi	r4, r19, 64
9000db58:	e8730044 	lwi	r3, r19, 68
9000db5c:	10641800 	addk	r3, r4, r3
9000db60:	3083fffc 	addik	r4, r3, -4
9000db64:	30b30024 	addik	r5, r19, 36
9000db68:	e0640000 	lbui	r3, r4, 0
9000db6c:	f0650000 	sbi	r3, r5, 0
9000db70:	e0640001 	lbui	r3, r4, 1
9000db74:	f0650001 	sbi	r3, r5, 1
9000db78:	e0640002 	lbui	r3, r4, 2
9000db7c:	f0650002 	sbi	r3, r5, 2
9000db80:	e0640003 	lbui	r3, r4, 3
9000db84:	f0650003 	sbi	r3, r5, 3

    if(wholeImageCRC != imageCRC)
9000db88:	e893001c 	lwi	r4, r19, 28
9000db8c:	e8730048 	lwi	r3, r19, 72
9000db90:	16432000 	rsubk	r18, r3, r4
9000db94:	bc120028 	beqi	r18, 40		// 9000dbbc
    {
        printf("Invalid Image - Bad whole image CRC (0x%08lx/0x%08lx)\n", wholeImageCRC, imageCRC);
9000db98:	b0009002 	imm	-28670
9000db9c:	30a02748 	addik	r5, r0, 10056
9000dba0:	e8d3001c 	lwi	r6, r19, 28
9000dba4:	e8f30048 	lwi	r7, r19, 72
9000dba8:	b9f4229c 	brlid	r15, 8860	// 9000fe44 <printf>
9000dbac:	80000000 	or	r0, r0, r0
        return false;
9000dbb0:	10600000 	addk	r3, r0, r0
9000dbb4:	f8730034 	swi	r3, r19, 52
9000dbb8:	b80000c4 	bri	196		// 9000dc7c
    }
    
    if(calculatedImageCRC != storedImageCRC)
9000dbbc:	e8930024 	lwi	r4, r19, 36
9000dbc0:	e8730020 	lwi	r3, r19, 32
9000dbc4:	16441800 	rsubk	r18, r4, r3
9000dbc8:	bc12002c 	beqi	r18, 44		// 9000dbf4
    {
        printf("Invalid Image - Bad CRC (0x%08lx/0x%08lx)\n", calculatedImageCRC, storedImageCRC);
9000dbcc:	e8730024 	lwi	r3, r19, 36
9000dbd0:	b0009002 	imm	-28670
9000dbd4:	30a02780 	addik	r5, r0, 10112
9000dbd8:	e8d30020 	lwi	r6, r19, 32
9000dbdc:	10e30000 	addk	r7, r3, r0
9000dbe0:	b9f42264 	brlid	r15, 8804	// 9000fe44 <printf>
9000dbe4:	80000000 	or	r0, r0, r0
        return false;
9000dbe8:	10600000 	addk	r3, r0, r0
9000dbec:	f8730034 	swi	r3, r19, 52
9000dbf0:	b800008c 	bri	140		// 9000dc7c
    }
    
    ImageHeader imageHeader;
    readImageHeaderFromRam(&imageHeader, image);
9000dbf4:	30730028 	addik	r3, r19, 40
9000dbf8:	10a30000 	addk	r5, r3, r0
9000dbfc:	e8d30040 	lwi	r6, r19, 64
9000dc00:	b9f4175c 	brlid	r15, 5980	// 9000f35c <readImageHeaderFromRam>
9000dc04:	80000000 	or	r0, r0, r0
    
    if(!verifyImageHeader(&imageHeader))
9000dc08:	30730028 	addik	r3, r19, 40
9000dc0c:	10a30000 	addk	r5, r3, r0
9000dc10:	b9f41884 	brlid	r15, 6276	// 9000f494 <verifyImageHeader>
9000dc14:	80000000 	or	r0, r0, r0
9000dc18:	bc230020 	bnei	r3, 32		// 9000dc38
    {
        printf("Invalid Image Header\n");
9000dc1c:	b0009002 	imm	-28670
9000dc20:	30a027ac 	addik	r5, r0, 10156
9000dc24:	b9f42314 	brlid	r15, 8980	// 9000ff38 <puts>
9000dc28:	80000000 	or	r0, r0, r0
        return false;
9000dc2c:	10600000 	addk	r3, r0, r0
9000dc30:	f8730034 	swi	r3, r19, 52
9000dc34:	b8000048 	bri	72		// 9000dc7c
    }

    if(IMAGE_HEADER_SIZE + VECTOR_SECTION_SIZE + imageHeader.imageSize + CRC_SIZE != imageSize)
9000dc38:	e8730028 	lwi	r3, r19, 40
9000dc3c:	30830038 	addik	r4, r3, 56
9000dc40:	e8730044 	lwi	r3, r19, 68
9000dc44:	16432000 	rsubk	r18, r3, r4
9000dc48:	bc12002c 	beqi	r18, 44		// 9000dc74
    {
        printf("Header: Invalid Image Length (expected %lu, actual %lu)\n", imageHeader.imageSize, imageSize);
9000dc4c:	e8730028 	lwi	r3, r19, 40
9000dc50:	b0009002 	imm	-28670
9000dc54:	30a027c4 	addik	r5, r0, 10180
9000dc58:	10c30000 	addk	r6, r3, r0
9000dc5c:	e8f30044 	lwi	r7, r19, 68
9000dc60:	b9f421e4 	brlid	r15, 8676	// 9000fe44 <printf>
9000dc64:	80000000 	or	r0, r0, r0
        return false;
9000dc68:	10600000 	addk	r3, r0, r0
9000dc6c:	f8730034 	swi	r3, r19, 52
9000dc70:	b800000c 	bri	12		// 9000dc7c
    }

    return true;
9000dc74:	30600001 	addik	r3, r0, 1
9000dc78:	f8730034 	swi	r3, r19, 52
9000dc7c:	e8730034 	lwi	r3, r19, 52
}
9000dc80:	e9e10000 	lwi	r15, r1, 0
9000dc84:	10330000 	addk	r1, r19, r0
9000dc88:	ea610038 	lwi	r19, r1, 56
9000dc8c:	3021003c 	addik	r1, r1, 60
9000dc90:	b60f0008 	rtsd	r15, 8
9000dc94:	80000000 	or	r0, r0, r0

9000dc98 <verifyFlashFirmwareImage>:



bool verifyFlashFirmwareImage()
{
9000dc98:	3021ffc8 	addik	r1, r1, -56
9000dc9c:	f9e10000 	swi	r15, r1, 0
9000dca0:	fa610034 	swi	r19, r1, 52
9000dca4:	12610000 	addk	r19, r1, r0
    ImageHeader imageHeader;
    readImageHeaderFromFlash(&imageHeader);
9000dca8:	30730020 	addik	r3, r19, 32
9000dcac:	10a30000 	addk	r5, r3, r0
9000dcb0:	b9f41768 	brlid	r15, 5992	// 9000f418 <readImageHeaderFromFlash>
9000dcb4:	80000000 	or	r0, r0, r0

    if(!verifyImageHeader(&imageHeader)) return false;
9000dcb8:	30730020 	addik	r3, r19, 32
9000dcbc:	10a30000 	addk	r5, r3, r0
9000dcc0:	b9f417d4 	brlid	r15, 6100	// 9000f494 <verifyImageHeader>
9000dcc4:	80000000 	or	r0, r0, r0
9000dcc8:	bc230010 	bnei	r3, 16		// 9000dcd8
9000dccc:	10600000 	addk	r3, r0, r0
9000dcd0:	f8730030 	swi	r3, r19, 48
9000dcd4:	b80000a8 	bri	168		// 9000dd7c

    CRC32 imageCrc;
    CRC32 calculatedCrc;

    readFlash(IMAGE_HEADER_SIZE + VECTOR_SECTION_SIZE + imageHeader.imageSize, (uint8*)&imageCrc, sizeof(imageCrc));
9000dcd8:	e8730020 	lwi	r3, r19, 32
9000dcdc:	30630034 	addik	r3, r3, 52
9000dce0:	3093002c 	addik	r4, r19, 44
9000dce4:	10a30000 	addk	r5, r3, r0
9000dce8:	10c40000 	addk	r6, r4, r0
9000dcec:	30e00004 	addik	r7, r0, 4
9000dcf0:	b9f4e980 	brlid	r15, -5760	// 9000c670 <readFlash>
9000dcf4:	80000000 	or	r0, r0, r0
    readFlash(0, SCRATCH_RAM, IMAGE_HEADER_SIZE + VECTOR_SECTION_SIZE + imageHeader.imageSize);
9000dcf8:	b0009002 	imm	-28670
9000dcfc:	e88026f0 	lwi	r4, r0, 9968
9000dd00:	e8730020 	lwi	r3, r19, 32
9000dd04:	30630034 	addik	r3, r3, 52
9000dd08:	10a00000 	addk	r5, r0, r0
9000dd0c:	10c40000 	addk	r6, r4, r0
9000dd10:	10e30000 	addk	r7, r3, r0
9000dd14:	b9f4e95c 	brlid	r15, -5796	// 9000c670 <readFlash>
9000dd18:	80000000 	or	r0, r0, r0
    calculatedCrc = calcCRC32(INITIAL_CRC32_VALUE, (char*)SCRATCH_RAM,
9000dd1c:	b0009002 	imm	-28670
9000dd20:	e86026f0 	lwi	r3, r0, 9968
9000dd24:	10830000 	addk	r4, r3, r0
9000dd28:	e8730020 	lwi	r3, r19, 32
9000dd2c:	30630034 	addik	r3, r3, 52
9000dd30:	30a0ffff 	addik	r5, r0, -1
9000dd34:	10c40000 	addk	r6, r4, r0
9000dd38:	10e30000 	addk	r7, r3, r0
9000dd3c:	b9f4fcac 	brlid	r15, -852	// 9000d9e8 <calcCRC32>
9000dd40:	80000000 	or	r0, r0, r0
9000dd44:	f873001c 	swi	r3, r19, 28
                              IMAGE_HEADER_SIZE + VECTOR_SECTION_SIZE + imageHeader.imageSize);

    if(calculatedCrc != imageCrc)
9000dd48:	e893002c 	lwi	r4, r19, 44
9000dd4c:	e873001c 	lwi	r3, r19, 28
9000dd50:	16441800 	rsubk	r18, r4, r3
9000dd54:	bc120020 	beqi	r18, 32		// 9000dd74
    {
        printf("Image CRC incorrect\n");
9000dd58:	b0009002 	imm	-28670
9000dd5c:	30a02800 	addik	r5, r0, 10240
9000dd60:	b9f421d8 	brlid	r15, 8664	// 9000ff38 <puts>
9000dd64:	80000000 	or	r0, r0, r0
        return false;
9000dd68:	10600000 	addk	r3, r0, r0
9000dd6c:	f8730030 	swi	r3, r19, 48
9000dd70:	b800000c 	bri	12		// 9000dd7c
    }

    return true;
9000dd74:	30600001 	addik	r3, r0, 1
9000dd78:	f8730030 	swi	r3, r19, 48
9000dd7c:	e8730030 	lwi	r3, r19, 48
}
9000dd80:	e9e10000 	lwi	r15, r1, 0
9000dd84:	10330000 	addk	r1, r19, r0
9000dd88:	ea610034 	lwi	r19, r1, 52
9000dd8c:	30210038 	addik	r1, r1, 56
9000dd90:	b60f0008 	rtsd	r15, 8
9000dd94:	80000000 	or	r0, r0, r0

9000dd98 <programFlashFirmwareImage>:



bool programFlashFirmwareImage(uint32 imageSize, void* image)
{
9000dd98:	3021ffe0 	addik	r1, r1, -32
9000dd9c:	f9e10000 	swi	r15, r1, 0
9000dda0:	fa61001c 	swi	r19, r1, 28
9000dda4:	12610000 	addk	r19, r1, r0
9000dda8:	f8b30024 	swi	r5, r19, 36
9000ddac:	f8d30028 	swi	r6, r19, 40
    return writeFlash(0, image, imageSize);
9000ddb0:	e8730028 	lwi	r3, r19, 40
9000ddb4:	10a00000 	addk	r5, r0, r0
9000ddb8:	10c30000 	addk	r6, r3, r0
9000ddbc:	e8f30024 	lwi	r7, r19, 36
9000ddc0:	b9f4e9c0 	brlid	r15, -5696	// 9000c780 <writeFlash>
9000ddc4:	80000000 	or	r0, r0, r0
}
9000ddc8:	e9e10000 	lwi	r15, r1, 0
9000ddcc:	10330000 	addk	r1, r19, r0
9000ddd0:	ea61001c 	lwi	r19, r1, 28
9000ddd4:	30210020 	addik	r1, r1, 32
9000ddd8:	b60f0008 	rtsd	r15, 8
9000dddc:	80000000 	or	r0, r0, r0

9000dde0 <verifyRamFPGAImage>:



#ifdef BOOTLOADER
// Only make this function available in the bootloader.
// It destructively overwrites SDRAM with the firmware
// image in flash.
ImageHeader imageHeader;

bool loadFlashFirmwareImage()
{
    if(!verifyFlashFirmwareImage()) return false;

    readImageHeaderFromFlash(&imageHeader);

    uint8 vectors[VECTOR_SECTION_SIZE - RESET_VECTOR_SIZE];
    
    // Load vectors - skipping reset vector so a reset sends
    //                the execution back to the boot block
    readFlash(FLASH_OFFSET_VECTORS + RESET_VECTOR_SIZE, vectors, VECTOR_SECTION_SIZE - RESET_VECTOR_SIZE);


    // Load memory - text, data, etc.
    readFlash(FLASH_OFFSET_IMAGE, (uint8*)SDRAM, imageHeader.imageSize);

    disableInterrupts();
    
    memcpy(((void*)VECTORS) + RESET_VECTOR_SIZE, vectors, VECTOR_SECTION_SIZE - RESET_VECTOR_SIZE);


    // Clear zero sections - bss, etc.
    volatile uint8* mem = SDRAM + imageHeader.imageSize;

    while(mem < (uint8*)imageHeader.imageEnd)
    {
        *mem++ = 0;
    }



    printf("Starting application firmware...\n\n");
    SYSTEM.bootloaderLED = LED_OFF;

    // Jump to application image - should never return
    ((void(*)(void))imageHeader.entryPoint)();


    return true;
}
#endif



#ifndef BOOTLOADER
//Don't include NVRAM functions in bootloader

bool verifyRamFPGAImage(void* image, uint32 imageSize, uint32 imageCRC)
{
9000dde0:	3021ffcc 	addik	r1, r1, -52
9000dde4:	f9e10000 	swi	r15, r1, 0
9000dde8:	fa610030 	swi	r19, r1, 48
9000ddec:	12610000 	addk	r19, r1, r0
9000ddf0:	f8b30038 	swi	r5, r19, 56
9000ddf4:	f8d3003c 	swi	r6, r19, 60
9000ddf8:	f8f30040 	swi	r7, r19, 64
    if(imageSize != FPGA_FLASH_IMAGE_SIZE)
9000ddfc:	e873003c 	lwi	r3, r19, 60
9000de00:	b0000009 	imm	9
9000de04:	aa4311ec 	xori	r18, r3, 4588
9000de08:	bc120020 	beqi	r18, 32		// 9000de28
    {
        printf("Invalid Image - Incorrect image size\n");
9000de0c:	b0009002 	imm	-28670
9000de10:	30a02814 	addik	r5, r0, 10260
9000de14:	b9f42124 	brlid	r15, 8484	// 9000ff38 <puts>
9000de18:	80000000 	or	r0, r0, r0
        return false;
9000de1c:	10600000 	addk	r3, r0, r0
9000de20:	f873002c 	swi	r3, r19, 44
9000de24:	b80000dc 	bri	220		// 9000df00
    }

    uint32 calculatedImageCRC = calcCRC32(INITIAL_CRC32_VALUE, (char*)image, imageSize);
9000de28:	e8730038 	lwi	r3, r19, 56
9000de2c:	30a0ffff 	addik	r5, r0, -1
9000de30:	10c30000 	addk	r6, r3, r0
9000de34:	e8f3003c 	lwi	r7, r19, 60
9000de38:	b9f4fbb0 	brlid	r15, -1104	// 9000d9e8 <calcCRC32>
9000de3c:	80000000 	or	r0, r0, r0
9000de40:	f8730024 	swi	r3, r19, 36

    if(calculatedImageCRC != imageCRC)
9000de44:	e8930024 	lwi	r4, r19, 36
9000de48:	e8730040 	lwi	r3, r19, 64
9000de4c:	16432000 	rsubk	r18, r3, r4
9000de50:	bc120028 	beqi	r18, 40		// 9000de78
    {
        printf("Invalid Image - Bad image CRC (0x%08lx/0x%08lx)\n", calculatedImageCRC, imageCRC);
9000de54:	b0009002 	imm	-28670
9000de58:	30a0283c 	addik	r5, r0, 10300
9000de5c:	e8d30024 	lwi	r6, r19, 36
9000de60:	e8f30040 	lwi	r7, r19, 64
9000de64:	b9f41fe0 	brlid	r15, 8160	// 9000fe44 <printf>
9000de68:	80000000 	or	r0, r0, r0
        return false;
9000de6c:	10600000 	addk	r3, r0, r0
9000de70:	f873002c 	swi	r3, r19, 44
9000de74:	b800008c 	bri	140		// 9000df00
    }

    int i;
    for(i = 0; i < FPGA_IMAGE_KEY_COUNT; ++i)
9000de78:	f8130020 	swi	r0, r19, 32
9000de7c:	b800006c 	bri	108		// 9000dee8
    {
        int    offset = FPGA_FLASH_IMAGE_SIZE - FPGA_IMAGE_KEY_COUNT * FPGA_IMAGE_KEY_SIZE + i * FPGA_IMAGE_KEY_SIZE;
9000de80:	e8730020 	lwi	r3, r19, 32
9000de84:	10631800 	addk	r3, r3, r3
9000de88:	b0000009 	imm	9
9000de8c:	306311cc 	addik	r3, r3, 4556
9000de90:	f873001c 	swi	r3, r19, 28
        uint16 key;
        memcpy(&key, &((uint8*)image)[offset], sizeof key);
9000de94:	e8930038 	lwi	r4, r19, 56
9000de98:	e873001c 	lwi	r3, r19, 28
9000de9c:	10841800 	addk	r4, r4, r3
9000dea0:	30b30028 	addik	r5, r19, 40
9000dea4:	e0640000 	lbui	r3, r4, 0
9000dea8:	f0650000 	sbi	r3, r5, 0
9000deac:	e0640001 	lbui	r3, r4, 1
9000deb0:	f0650001 	sbi	r3, r5, 1

        if(key != FPGA_IMAGE_KEY)
9000deb4:	e4730028 	lhui	r3, r19, 40
9000deb8:	aa432000 	xori	r18, r3, 8192
9000debc:	bc120020 	beqi	r18, 32		// 9000dedc
        {
            printf("Invalid Image - Bad image key 0x%04x at 0x%08x\n", key, offset);
9000dec0:	e4730028 	lhui	r3, r19, 40
9000dec4:	b0009002 	imm	-28670
9000dec8:	30a02870 	addik	r5, r0, 10352
9000decc:	10c30000 	addk	r6, r3, r0
9000ded0:	e8f3001c 	lwi	r7, r19, 28
9000ded4:	b9f41f70 	brlid	r15, 8048	// 9000fe44 <printf>
9000ded8:	80000000 	or	r0, r0, r0
9000dedc:	e8730020 	lwi	r3, r19, 32
9000dee0:	30630001 	addik	r3, r3, 1
9000dee4:	f8730020 	swi	r3, r19, 32
9000dee8:	e8730020 	lwi	r3, r19, 32
9000deec:	3240000f 	addik	r18, r0, 15
9000def0:	16439001 	cmp	r18, r3, r18
9000def4:	bcb2ff8c 	bgei	r18, -116		// 9000de80
        }
    }

    return true;
9000def8:	30600001 	addik	r3, r0, 1
9000defc:	f873002c 	swi	r3, r19, 44
9000df00:	e873002c 	lwi	r3, r19, 44
}
9000df04:	e9e10000 	lwi	r15, r1, 0
9000df08:	10330000 	addk	r1, r19, r0
9000df0c:	ea610030 	lwi	r19, r1, 48
9000df10:	30210034 	addik	r1, r1, 52
9000df14:	b60f0008 	rtsd	r15, 8
9000df18:	80000000 	or	r0, r0, r0

9000df1c <verifyFlashFPGAImage>:



bool verifyFlashFPGAImage(uint32 imageCRC)
{
9000df1c:	3021ffd8 	addik	r1, r1, -40
9000df20:	f9e10000 	swi	r15, r1, 0
9000df24:	fa610024 	swi	r19, r1, 36
9000df28:	12610000 	addk	r19, r1, r0
9000df2c:	f8b3002c 	swi	r5, r19, 44
    readPlatformFlash(0, SCRATCH_RAM, FPGA_FLASH_IMAGE_SIZE);
9000df30:	b0009002 	imm	-28670
9000df34:	e86026f0 	lwi	r3, r0, 9968
9000df38:	10a00000 	addk	r5, r0, r0
9000df3c:	10c30000 	addk	r6, r3, r0
9000df40:	b0000009 	imm	9
9000df44:	30e011ec 	addik	r7, r0, 4588
9000df48:	b9f4e9dc 	brlid	r15, -5668	// 9000c924 <readPlatformFlash>
9000df4c:	80000000 	or	r0, r0, r0

    CRC32 calculatedCrc = calcCRC32(INITIAL_CRC32_VALUE, (char*)SCRATCH_RAM, FPGA_FLASH_IMAGE_SIZE);
9000df50:	b0009002 	imm	-28670
9000df54:	e86026f0 	lwi	r3, r0, 9968
9000df58:	30a0ffff 	addik	r5, r0, -1
9000df5c:	10c30000 	addk	r6, r3, r0
9000df60:	b0000009 	imm	9
9000df64:	30e011ec 	addik	r7, r0, 4588
9000df68:	b9f4fa80 	brlid	r15, -1408	// 9000d9e8 <calcCRC32>
9000df6c:	80000000 	or	r0, r0, r0
9000df70:	f873001c 	swi	r3, r19, 28

    if(calculatedCrc != imageCRC)
9000df74:	e893001c 	lwi	r4, r19, 28
9000df78:	e873002c 	lwi	r3, r19, 44
9000df7c:	16432000 	rsubk	r18, r3, r4
9000df80:	bc120020 	beqi	r18, 32		// 9000dfa0
    {
        printf("Image CRC incorrect\n");
9000df84:	b0009002 	imm	-28670
9000df88:	30a02800 	addik	r5, r0, 10240
9000df8c:	b9f41fac 	brlid	r15, 8108	// 9000ff38 <puts>
9000df90:	80000000 	or	r0, r0, r0
        return false;
9000df94:	10600000 	addk	r3, r0, r0
9000df98:	f8730020 	swi	r3, r19, 32
9000df9c:	b800000c 	bri	12		// 9000dfa8
    }

    return true;
9000dfa0:	30600001 	addik	r3, r0, 1
9000dfa4:	f8730020 	swi	r3, r19, 32
9000dfa8:	e8730020 	lwi	r3, r19, 32
}
9000dfac:	e9e10000 	lwi	r15, r1, 0
9000dfb0:	10330000 	addk	r1, r19, r0
9000dfb4:	ea610024 	lwi	r19, r1, 36
9000dfb8:	30210028 	addik	r1, r1, 40
9000dfbc:	b60f0008 	rtsd	r15, 8
9000dfc0:	80000000 	or	r0, r0, r0

9000dfc4 <programFlashFPGAImage>:



bool programFlashFPGAImage(uint32 imageSize, void* image)
{
9000dfc4:	3021ffe0 	addik	r1, r1, -32
9000dfc8:	f9e10000 	swi	r15, r1, 0
9000dfcc:	fa61001c 	swi	r19, r1, 28
9000dfd0:	12610000 	addk	r19, r1, r0
9000dfd4:	f8b30024 	swi	r5, r19, 36
9000dfd8:	f8d30028 	swi	r6, r19, 40
    return writePlatformFlash(0, image, imageSize);
9000dfdc:	e8730028 	lwi	r3, r19, 40
9000dfe0:	10a00000 	addk	r5, r0, r0
9000dfe4:	10c30000 	addk	r6, r3, r0
9000dfe8:	e8f30024 	lwi	r7, r19, 36
9000dfec:	b9f4ea48 	brlid	r15, -5560	// 9000ca34 <writePlatformFlash>
9000dff0:	80000000 	or	r0, r0, r0
}
9000dff4:	e9e10000 	lwi	r15, r1, 0
9000dff8:	10330000 	addk	r1, r19, r0
9000dffc:	ea61001c 	lwi	r19, r1, 28
9000e000:	30210020 	addik	r1, r1, 32
9000e004:	b60f0008 	rtsd	r15, 8
9000e008:	80000000 	or	r0, r0, r0

9000e00c <nvramReadByte>:



uint8 nvramReadByte(uint32 address)
{
9000e00c:	3021ffdc 	addik	r1, r1, -36
9000e010:	f9e10000 	swi	r15, r1, 0
9000e014:	fa610020 	swi	r19, r1, 32
9000e018:	12610000 	addk	r19, r1, r0
9000e01c:	f8b30028 	swi	r5, r19, 40
    uint8 data;
    
    nvramRead(address, &data, sizeof(data));
9000e020:	e8b30028 	lwi	r5, r19, 40
9000e024:	3073001c 	addik	r3, r19, 28
9000e028:	10c30000 	addk	r6, r3, r0
9000e02c:	30e00001 	addik	r7, r0, 1
9000e030:	b9f4006c 	brlid	r15, 108	// 9000e09c <nvramRead>
9000e034:	80000000 	or	r0, r0, r0
    
    return data;
9000e038:	e073001c 	lbui	r3, r19, 28
}
9000e03c:	e9e10000 	lwi	r15, r1, 0
9000e040:	10330000 	addk	r1, r19, r0
9000e044:	ea610020 	lwi	r19, r1, 32
9000e048:	30210024 	addik	r1, r1, 36
9000e04c:	b60f0008 	rtsd	r15, 8
9000e050:	80000000 	or	r0, r0, r0

9000e054 <nvramWriteByte>:



bool nvramWriteByte(uint32 address, uint8 data)
{
9000e054:	3021ffe0 	addik	r1, r1, -32
9000e058:	f9e10000 	swi	r15, r1, 0
9000e05c:	fa61001c 	swi	r19, r1, 28
9000e060:	12610000 	addk	r19, r1, r0
9000e064:	f8b30024 	swi	r5, r19, 36
9000e068:	f0d30028 	sbi	r6, r19, 40
    return nvramWrite(address, &data, sizeof(data));
9000e06c:	30730028 	addik	r3, r19, 40
9000e070:	e8b30024 	lwi	r5, r19, 36
9000e074:	10c30000 	addk	r6, r3, r0
9000e078:	30e00001 	addik	r7, r0, 1
9000e07c:	b9f40180 	brlid	r15, 384	// 9000e1fc <nvramWrite>
9000e080:	80000000 	or	r0, r0, r0
}
9000e084:	e9e10000 	lwi	r15, r1, 0
9000e088:	10330000 	addk	r1, r19, r0
9000e08c:	ea61001c 	lwi	r19, r1, 28
9000e090:	30210020 	addik	r1, r1, 32
9000e094:	b60f0008 	rtsd	r15, 8
9000e098:	80000000 	or	r0, r0, r0

9000e09c <nvramRead>:



bool nvramRead(uint32 address, uint8* data, uint32 count)
{
9000e09c:	3021f15c 	addik	r1, r1, -3748
9000e0a0:	f9e10000 	swi	r15, r1, 0
9000e0a4:	fa610ea0 	swi	r19, r1, 3744
9000e0a8:	12610000 	addk	r19, r1, r0
9000e0ac:	f8b30ea8 	swi	r5, r19, 3752
9000e0b0:	f8d30eac 	swi	r6, r19, 3756
9000e0b4:	f8f30eb0 	swi	r7, r19, 3760
    ASSERT(address + count < NVRAM_DATA_BYTES);
9000e0b8:	e8730ea8 	lwi	r3, r19, 3752
9000e0bc:	e8930eb0 	lwi	r4, r19, 3760
9000e0c0:	10632000 	addk	r3, r3, r4
9000e0c4:	22400e6f 	addi	r18, r0, 3695
9000e0c8:	16439003 	cmpu	r18, r3, r18
9000e0cc:	bcb20028 	bgei	r18, 40		// 9000e0f4
9000e0d0:	94110002 	msrclr	r0, 2
9000e0d4:	b0009002 	imm	-28670
9000e0d8:	30a028a0 	addik	r5, r0, 10400
9000e0dc:	b0009002 	imm	-28670
9000e0e0:	30c028c4 	addik	r6, r0, 10436
9000e0e4:	30e00164 	addik	r7, r0, 356
9000e0e8:	b9f4e33c 	brlid	r15, -7364	// 9000c424 <printAssert>
9000e0ec:	80000000 	or	r0, r0, r0
9000e0f0:	b8000000 	bri	0		// 9000e0f0

    int nvramBlock = findValidNvramBlockIndex();
9000e0f4:	b9f4159c 	brlid	r15, 5532	// 9000f690 <findValidNvramBlockIndex>
9000e0f8:	80000000 	or	r0, r0, r0
9000e0fc:	f8730020 	swi	r3, r19, 32

    if(nvramBlock >= 0)
9000e100:	e8730020 	lwi	r3, r19, 32
9000e104:	bc4300c0 	blti	r3, 192		// 9000e1c4
    {
        uint8 blockData[NVRAM_DATA_BYTES];

        if(readFlash(NVRAM_BLOCK_DATA_BASE_ADDR(nvramBlock), blockData, NVRAM_DATA_BYTES))
9000e108:	e8930020 	lwi	r4, r19, 32
9000e10c:	30601080 	addik	r3, r0, 4224
9000e110:	40641800 	mul	r3, r4, r3
9000e114:	b0000020 	imm	32
9000e118:	30633c10 	addik	r3, r3, 15376
9000e11c:	3093002c 	addik	r4, r19, 44
9000e120:	10a30000 	addk	r5, r3, r0
9000e124:	10c40000 	addk	r6, r4, r0
9000e128:	30e00e70 	addik	r7, r0, 3696
9000e12c:	b9f4e544 	brlid	r15, -6844	// 9000c670 <readFlash>
9000e130:	80000000 	or	r0, r0, r0
9000e134:	bc030090 	beqi	r3, 144		// 9000e1c4
        {
            NvramFlags nvramFlags;
            CRC32      calculatedCrc = calcCRC32(INITIAL_CRC32_VALUE, blockData, NVRAM_DATA_BYTES);
9000e138:	3073002c 	addik	r3, r19, 44
9000e13c:	30a0ffff 	addik	r5, r0, -1
9000e140:	10c30000 	addk	r6, r3, r0
9000e144:	30e00e70 	addik	r7, r0, 3696
9000e148:	b9f4f8a0 	brlid	r15, -1888	// 9000d9e8 <calcCRC32>
9000e14c:	80000000 	or	r0, r0, r0
9000e150:	f873001c 	swi	r3, r19, 28

            if(readFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&nvramFlags, sizeof(nvramFlags)))
9000e154:	e8930020 	lwi	r4, r19, 32
9000e158:	30601080 	addik	r3, r0, 4224
9000e15c:	40641800 	mul	r3, r4, r3
9000e160:	b0000020 	imm	32
9000e164:	30633a00 	addik	r3, r3, 14848
9000e168:	30930024 	addik	r4, r19, 36
9000e16c:	10a30000 	addk	r5, r3, r0
9000e170:	10c40000 	addk	r6, r4, r0
9000e174:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e178:	b9f4e4f8 	brlid	r15, -6920	// 9000c670 <readFlash>
9000e17c:	80000000 	or	r0, r0, r0
9000e180:	bc030044 	beqi	r3, 68		// 9000e1c4
            {
                if(nvramFlags.crc == calculatedCrc)
9000e184:	e8930028 	lwi	r4, r19, 40
9000e188:	e873001c 	lwi	r3, r19, 28
9000e18c:	16432000 	rsubk	r18, r3, r4
9000e190:	bc320034 	bnei	r18, 52		// 9000e1c4
                {
                    memcpy(data, blockData + address, count);
9000e194:	e8930ea8 	lwi	r4, r19, 3752
9000e198:	3073002c 	addik	r3, r19, 44
9000e19c:	10632000 	addk	r3, r3, r4
9000e1a0:	e8930eac 	lwi	r4, r19, 3756
9000e1a4:	e8f30eb0 	lwi	r7, r19, 3760
9000e1a8:	10a40000 	addk	r5, r4, r0
9000e1ac:	10c30000 	addk	r6, r3, r0
9000e1b0:	b9f45d60 	brlid	r15, 23904	// 90013f10 <memcpy>
9000e1b4:	80000000 	or	r0, r0, r0
                    return true;
9000e1b8:	30600001 	addik	r3, r0, 1
9000e1bc:	f8730e9c 	swi	r3, r19, 3740
9000e1c0:	b8000020 	bri	32		// 9000e1e0
                }
            }
        }
    }

    memset(data, 0xff, count);
9000e1c4:	e8b30eac 	lwi	r5, r19, 3756
9000e1c8:	30c000ff 	addik	r6, r0, 255
9000e1cc:	e8f30eb0 	lwi	r7, r19, 3760
9000e1d0:	b9f45e00 	brlid	r15, 24064	// 90013fd0 <memset>
9000e1d4:	80000000 	or	r0, r0, r0
    return false;
9000e1d8:	10600000 	addk	r3, r0, r0
9000e1dc:	f8730e9c 	swi	r3, r19, 3740
9000e1e0:	e8730e9c 	lwi	r3, r19, 3740
}
9000e1e4:	e9e10000 	lwi	r15, r1, 0
9000e1e8:	10330000 	addk	r1, r19, r0
9000e1ec:	ea610ea0 	lwi	r19, r1, 3744
9000e1f0:	30210ea4 	addik	r1, r1, 3748
9000e1f4:	b60f0008 	rtsd	r15, 8
9000e1f8:	80000000 	or	r0, r0, r0

9000e1fc <nvramWrite>:



bool nvramWrite(uint32 address, uint8* data, uint32 count)
{
9000e1fc:	3021f158 	addik	r1, r1, -3752
9000e200:	f9e10000 	swi	r15, r1, 0
9000e204:	fa610ea4 	swi	r19, r1, 3748
9000e208:	12610000 	addk	r19, r1, r0
9000e20c:	f8b30eac 	swi	r5, r19, 3756
9000e210:	f8d30eb0 	swi	r6, r19, 3760
9000e214:	f8f30eb4 	swi	r7, r19, 3764
    ASSERT(address + count < NVRAM_DATA_BYTES);
9000e218:	e8730eac 	lwi	r3, r19, 3756
9000e21c:	e8930eb4 	lwi	r4, r19, 3764
9000e220:	10632000 	addk	r3, r3, r4
9000e224:	22400e6f 	addi	r18, r0, 3695
9000e228:	16439003 	cmpu	r18, r3, r18
9000e22c:	bcb20028 	bgei	r18, 40		// 9000e254
9000e230:	94110002 	msrclr	r0, 2
9000e234:	b0009002 	imm	-28670
9000e238:	30a028a0 	addik	r5, r0, 10400
9000e23c:	b0009002 	imm	-28670
9000e240:	30c028c4 	addik	r6, r0, 10436
9000e244:	30e00184 	addik	r7, r0, 388
9000e248:	b9f4e1dc 	brlid	r15, -7716	// 9000c424 <printAssert>
9000e24c:	80000000 	or	r0, r0, r0
9000e250:	b8000000 	bri	0		// 9000e250


    NvramFlags nvramFlags;
    uint8      blockData[NVRAM_DATA_BYTES];
    int        nvramBlock = findValidNvramBlockIndex();
9000e254:	b9f4143c 	brlid	r15, 5180	// 9000f690 <findValidNvramBlockIndex>
9000e258:	80000000 	or	r0, r0, r0
9000e25c:	f8730024 	swi	r3, r19, 36

    if(nvramBlock < 0)
9000e260:	e8730024 	lwi	r3, r19, 36
9000e264:	bca300b8 	bgei	r3, 184		// 9000e31c
    {
        // No current block found - start one at index 0
        eraseFlashBlock(NVRAM_BLOCKS_START_INDEX);
9000e268:	30a001f4 	addik	r5, r0, 500
9000e26c:	b9f4e33c 	brlid	r15, -7364	// 9000c5a8 <eraseFlashBlock>
9000e270:	80000000 	or	r0, r0, r0

        // Write the data
        if(!writeFlash(NVRAM_BLOCK_DATA_BASE_ADDR(0) + address, data, count)) return false;
9000e274:	e8730eac 	lwi	r3, r19, 3756
9000e278:	b0000020 	imm	32
9000e27c:	30633c10 	addik	r3, r3, 15376
9000e280:	10a30000 	addk	r5, r3, r0
9000e284:	e8d30eb0 	lwi	r6, r19, 3760
9000e288:	e8f30eb4 	lwi	r7, r19, 3764
9000e28c:	b9f4e4f4 	brlid	r15, -6924	// 9000c780 <writeFlash>
9000e290:	80000000 	or	r0, r0, r0
9000e294:	bc230010 	bnei	r3, 16		// 9000e2a4
9000e298:	10600000 	addk	r3, r0, r0
9000e29c:	f8730ea0 	swi	r3, r19, 3744
9000e2a0:	b80002cc 	bri	716		// 9000e56c

        // Calculate the CRC
        readFlash(NVRAM_BLOCK_DATA_BASE_ADDR(0), blockData, NVRAM_DATA_BYTES);
9000e2a4:	30730030 	addik	r3, r19, 48
9000e2a8:	b0000020 	imm	32
9000e2ac:	30a03c10 	addik	r5, r0, 15376
9000e2b0:	10c30000 	addk	r6, r3, r0
9000e2b4:	30e00e70 	addik	r7, r0, 3696
9000e2b8:	b9f4e3b8 	brlid	r15, -7240	// 9000c670 <readFlash>
9000e2bc:	80000000 	or	r0, r0, r0
        nvramFlags.crc = calcCRC32(INITIAL_CRC32_VALUE, blockData, NVRAM_DATA_BYTES);
9000e2c0:	30730030 	addik	r3, r19, 48
9000e2c4:	30a0ffff 	addik	r5, r0, -1
9000e2c8:	10c30000 	addk	r6, r3, r0
9000e2cc:	30e00e70 	addik	r7, r0, 3696
9000e2d0:	b9f4f718 	brlid	r15, -2280	// 9000d9e8 <calcCRC32>
9000e2d4:	80000000 	or	r0, r0, r0
9000e2d8:	f873002c 	swi	r3, r19, 44

        // Validate the block
        nvramFlags.blockKey = NVRAM_BLOCK_VALID;
9000e2dc:	3060a5a5 	addik	r3, r0, -23131
9000e2e0:	f4730028 	shi	r3, r19, 40
        if(!writeFlash(NVRAM_BLOCK_KEY_ADDR(0), (uint8*)&nvramFlags, sizeof(nvramFlags))) return false;
9000e2e4:	30730028 	addik	r3, r19, 40
9000e2e8:	b0000020 	imm	32
9000e2ec:	30a03a00 	addik	r5, r0, 14848
9000e2f0:	10c30000 	addk	r6, r3, r0
9000e2f4:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e2f8:	b9f4e488 	brlid	r15, -7032	// 9000c780 <writeFlash>
9000e2fc:	80000000 	or	r0, r0, r0
9000e300:	bc230010 	bnei	r3, 16		// 9000e310
9000e304:	10600000 	addk	r3, r0, r0
9000e308:	f8730ea0 	swi	r3, r19, 3744
9000e30c:	b8000260 	bri	608		// 9000e56c
    }
    else
    {
        // Read the data to determine if we need to write anything
        if(!readFlash(NVRAM_BLOCK_DATA_BASE_ADDR(nvramBlock), blockData, NVRAM_DATA_BYTES)) return false;
        if(!readFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&nvramFlags, sizeof(nvramFlags))) return false;
        CRC32 calculatedCrc = calcCRC32(INITIAL_CRC32_VALUE, blockData, NVRAM_DATA_BYTES);
        
        if(memcmp(&blockData[address], data, count) == 0 &&
           nvramFlags.crc == calculatedCrc)
        {
            // Data the same, no need to write
            printf("NVRAM Write - Data the same, skip write\n");
            return true;
        }
        else
        {
            // Must copy current block to new block


            // Set new block 1 above current block
            int newNvramBlock = (nvramBlock + 1) % NVRAM_BLOCKS;


            // Clear key for new block
            nvramFlags.blockKey = NVRAM_BLOCK_BLANK;
            if(!writeFlash(NVRAM_BLOCK_KEY_ADDR(newNvramBlock), (uint8*)&nvramFlags.blockKey, sizeof(nvramFlags.blockKey))) return false;


            // Update block data
            memcpy(&blockData[address], data, count);


            // Program updated data to new block
            if(!writeFlash(NVRAM_BLOCK_DATA_BASE_ADDR(newNvramBlock), blockData, NVRAM_DATA_BYTES)) return false;


            // Calculate the CRC
            nvramFlags.crc = calcCRC32(INITIAL_CRC32_VALUE, blockData, NVRAM_DATA_BYTES);

            // Validate new block
            nvramFlags.blockKey = NVRAM_BLOCK_VALID;
            if(!writeFlash(NVRAM_BLOCK_KEY_ADDR(newNvramBlock), (uint8*)&nvramFlags, sizeof(nvramFlags))) return false;


            // Invalidate old block
            nvramFlags.blockKey = NVRAM_BLOCK_INVALID;
            if(!writeFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&nvramFlags.blockKey, sizeof(nvramFlags.blockKey))) return false;
            
            
            return true;
        }
    }


    return false;
9000e310:	10600000 	addk	r3, r0, r0
9000e314:	f8730ea0 	swi	r3, r19, 3744
9000e318:	b8000254 	bri	596		// 9000e56c
9000e31c:	e8930024 	lwi	r4, r19, 36
9000e320:	30601080 	addik	r3, r0, 4224
9000e324:	40641800 	mul	r3, r4, r3
9000e328:	b0000020 	imm	32
9000e32c:	30633c10 	addik	r3, r3, 15376
9000e330:	30930030 	addik	r4, r19, 48
9000e334:	10a30000 	addk	r5, r3, r0
9000e338:	10c40000 	addk	r6, r4, r0
9000e33c:	30e00e70 	addik	r7, r0, 3696
9000e340:	b9f4e330 	brlid	r15, -7376	// 9000c670 <readFlash>
9000e344:	80000000 	or	r0, r0, r0
9000e348:	bc230010 	bnei	r3, 16		// 9000e358
9000e34c:	10600000 	addk	r3, r0, r0
9000e350:	f8730ea0 	swi	r3, r19, 3744
9000e354:	b8000218 	bri	536		// 9000e56c
9000e358:	e8930024 	lwi	r4, r19, 36
9000e35c:	30601080 	addik	r3, r0, 4224
9000e360:	40641800 	mul	r3, r4, r3
9000e364:	b0000020 	imm	32
9000e368:	30633a00 	addik	r3, r3, 14848
9000e36c:	30930028 	addik	r4, r19, 40
9000e370:	10a30000 	addk	r5, r3, r0
9000e374:	10c40000 	addk	r6, r4, r0
9000e378:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e37c:	b9f4e2f4 	brlid	r15, -7436	// 9000c670 <readFlash>
9000e380:	80000000 	or	r0, r0, r0
9000e384:	bc230010 	bnei	r3, 16		// 9000e394
9000e388:	10600000 	addk	r3, r0, r0
9000e38c:	f8730ea0 	swi	r3, r19, 3744
9000e390:	b80001dc 	bri	476		// 9000e56c
9000e394:	30730030 	addik	r3, r19, 48
9000e398:	30a0ffff 	addik	r5, r0, -1
9000e39c:	10c30000 	addk	r6, r3, r0
9000e3a0:	30e00e70 	addik	r7, r0, 3696
9000e3a4:	b9f4f644 	brlid	r15, -2492	// 9000d9e8 <calcCRC32>
9000e3a8:	80000000 	or	r0, r0, r0
9000e3ac:	f8730020 	swi	r3, r19, 32
9000e3b0:	e8930eac 	lwi	r4, r19, 3756
9000e3b4:	30730030 	addik	r3, r19, 48
9000e3b8:	10632000 	addk	r3, r3, r4
9000e3bc:	10a30000 	addk	r5, r3, r0
9000e3c0:	e8d30eb0 	lwi	r6, r19, 3760
9000e3c4:	e8f30eb4 	lwi	r7, r19, 3764
9000e3c8:	b9f45ac8 	brlid	r15, 23240	// 90013e90 <memcmp>
9000e3cc:	80000000 	or	r0, r0, r0
9000e3d0:	bc230030 	bnei	r3, 48		// 9000e400
9000e3d4:	e893002c 	lwi	r4, r19, 44
9000e3d8:	e8730020 	lwi	r3, r19, 32
9000e3dc:	16432000 	rsubk	r18, r3, r4
9000e3e0:	bc320020 	bnei	r18, 32		// 9000e400
9000e3e4:	b0009002 	imm	-28670
9000e3e8:	30a028d4 	addik	r5, r0, 10452
9000e3ec:	b9f41b4c 	brlid	r15, 6988	// 9000ff38 <puts>
9000e3f0:	80000000 	or	r0, r0, r0
9000e3f4:	30600001 	addik	r3, r0, 1
9000e3f8:	f8730ea0 	swi	r3, r19, 3744
9000e3fc:	b8000170 	bri	368		// 9000e56c
9000e400:	e8730024 	lwi	r3, r19, 36
9000e404:	30830001 	addik	r4, r3, 1
9000e408:	6464021f 	bsrai	r3, r4, 31
9000e40c:	64a3001d 	bsrli	r5, r3, 29
9000e410:	10642800 	addk	r3, r4, r5
9000e414:	a4630007 	andi	r3, r3, 7
9000e418:	14651800 	rsubk	r3, r5, r3
9000e41c:	f873001c 	swi	r3, r19, 28
9000e420:	3060ffff 	addik	r3, r0, -1
9000e424:	f4730028 	shi	r3, r19, 40
9000e428:	e893001c 	lwi	r4, r19, 28
9000e42c:	30601080 	addik	r3, r0, 4224
9000e430:	40641800 	mul	r3, r4, r3
9000e434:	b0000020 	imm	32
9000e438:	30633a00 	addik	r3, r3, 14848
9000e43c:	30930028 	addik	r4, r19, 40
9000e440:	10a30000 	addk	r5, r3, r0
9000e444:	10c40000 	addk	r6, r4, r0
9000e448:	30e00002 	addik	r7, r0, 2
9000e44c:	b9f4e334 	brlid	r15, -7372	// 9000c780 <writeFlash>
9000e450:	80000000 	or	r0, r0, r0
9000e454:	bc230010 	bnei	r3, 16		// 9000e464
9000e458:	10600000 	addk	r3, r0, r0
9000e45c:	f8730ea0 	swi	r3, r19, 3744
9000e460:	b800010c 	bri	268		// 9000e56c
9000e464:	e8930eac 	lwi	r4, r19, 3756
9000e468:	30730030 	addik	r3, r19, 48
9000e46c:	10632000 	addk	r3, r3, r4
9000e470:	e8930eb0 	lwi	r4, r19, 3760
9000e474:	e8f30eb4 	lwi	r7, r19, 3764
9000e478:	10a30000 	addk	r5, r3, r0
9000e47c:	10c40000 	addk	r6, r4, r0
9000e480:	b9f45a90 	brlid	r15, 23184	// 90013f10 <memcpy>
9000e484:	80000000 	or	r0, r0, r0
9000e488:	e893001c 	lwi	r4, r19, 28
9000e48c:	30601080 	addik	r3, r0, 4224
9000e490:	40641800 	mul	r3, r4, r3
9000e494:	b0000020 	imm	32
9000e498:	30633c10 	addik	r3, r3, 15376
9000e49c:	30930030 	addik	r4, r19, 48
9000e4a0:	10a30000 	addk	r5, r3, r0
9000e4a4:	10c40000 	addk	r6, r4, r0
9000e4a8:	30e00e70 	addik	r7, r0, 3696
9000e4ac:	b9f4e2d4 	brlid	r15, -7468	// 9000c780 <writeFlash>
9000e4b0:	80000000 	or	r0, r0, r0
9000e4b4:	bc230010 	bnei	r3, 16		// 9000e4c4
9000e4b8:	10600000 	addk	r3, r0, r0
9000e4bc:	f8730ea0 	swi	r3, r19, 3744
9000e4c0:	b80000ac 	bri	172		// 9000e56c
9000e4c4:	30730030 	addik	r3, r19, 48
9000e4c8:	30a0ffff 	addik	r5, r0, -1
9000e4cc:	10c30000 	addk	r6, r3, r0
9000e4d0:	30e00e70 	addik	r7, r0, 3696
9000e4d4:	b9f4f514 	brlid	r15, -2796	// 9000d9e8 <calcCRC32>
9000e4d8:	80000000 	or	r0, r0, r0
9000e4dc:	f873002c 	swi	r3, r19, 44
9000e4e0:	3060a5a5 	addik	r3, r0, -23131
9000e4e4:	f4730028 	shi	r3, r19, 40
9000e4e8:	e893001c 	lwi	r4, r19, 28
9000e4ec:	30601080 	addik	r3, r0, 4224
9000e4f0:	40641800 	mul	r3, r4, r3
9000e4f4:	b0000020 	imm	32
9000e4f8:	30633a00 	addik	r3, r3, 14848
9000e4fc:	30930028 	addik	r4, r19, 40
9000e500:	10a30000 	addk	r5, r3, r0
9000e504:	10c40000 	addk	r6, r4, r0
9000e508:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e50c:	b9f4e274 	brlid	r15, -7564	// 9000c780 <writeFlash>
9000e510:	80000000 	or	r0, r0, r0
9000e514:	bc230010 	bnei	r3, 16		// 9000e524
9000e518:	10600000 	addk	r3, r0, r0
9000e51c:	f8730ea0 	swi	r3, r19, 3744
9000e520:	b800004c 	bri	76		// 9000e56c
9000e524:	f4130028 	shi	r0, r19, 40
9000e528:	e8930024 	lwi	r4, r19, 36
9000e52c:	30601080 	addik	r3, r0, 4224
9000e530:	40641800 	mul	r3, r4, r3
9000e534:	b0000020 	imm	32
9000e538:	30633a00 	addik	r3, r3, 14848
9000e53c:	30930028 	addik	r4, r19, 40
9000e540:	10a30000 	addk	r5, r3, r0
9000e544:	10c40000 	addk	r6, r4, r0
9000e548:	30e00002 	addik	r7, r0, 2
9000e54c:	b9f4e234 	brlid	r15, -7628	// 9000c780 <writeFlash>
9000e550:	80000000 	or	r0, r0, r0
9000e554:	bc230010 	bnei	r3, 16		// 9000e564
9000e558:	10600000 	addk	r3, r0, r0
9000e55c:	f8730ea0 	swi	r3, r19, 3744
9000e560:	b800000c 	bri	12		// 9000e56c
9000e564:	30600001 	addik	r3, r0, 1
9000e568:	f8730ea0 	swi	r3, r19, 3744
9000e56c:	e8730ea0 	lwi	r3, r19, 3744
}
9000e570:	e9e10000 	lwi	r15, r1, 0
9000e574:	10330000 	addk	r1, r19, r0
9000e578:	ea610ea4 	lwi	r19, r1, 3748
9000e57c:	30210ea8 	addik	r1, r1, 3752
9000e580:	b60f0008 	rtsd	r15, 8
9000e584:	80000000 	or	r0, r0, r0

9000e588 <nvramWriteCrc>:


bool nvramWriteCrc()
{
9000e588:	3021f15c 	addik	r1, r1, -3748
9000e58c:	f9e10000 	swi	r15, r1, 0
9000e590:	fa610ea0 	swi	r19, r1, 3744
9000e594:	12610000 	addk	r19, r1, r0
    CRC32      calculatedCrc;
    NvramFlags nvramFlags;
    uint8      blockData[NVRAM_DATA_BYTES];        
    int        nvramBlock = findValidNvramBlockIndex();
9000e598:	b9f410f8 	brlid	r15, 4344	// 9000f690 <findValidNvramBlockIndex>
9000e59c:	80000000 	or	r0, r0, r0
9000e5a0:	f873001c 	swi	r3, r19, 28

    if(nvramBlock < 0)
9000e5a4:	e873001c 	lwi	r3, r19, 28
9000e5a8:	bca30010 	bgei	r3, 16		// 9000e5b8
    {
        return true;
9000e5ac:	30600001 	addik	r3, r0, 1
9000e5b0:	f8730e9c 	swi	r3, r19, 3740
9000e5b4:	b80000d4 	bri	212		// 9000e688
    }

    if(readFlash(NVRAM_BLOCK_DATA_BASE_ADDR(nvramBlock), blockData, NVRAM_DATA_BYTES) &&
9000e5b8:	e893001c 	lwi	r4, r19, 28
9000e5bc:	30601080 	addik	r3, r0, 4224
9000e5c0:	40641800 	mul	r3, r4, r3
9000e5c4:	b0000020 	imm	32
9000e5c8:	30633c10 	addik	r3, r3, 15376
9000e5cc:	3093002c 	addik	r4, r19, 44
9000e5d0:	10a30000 	addk	r5, r3, r0
9000e5d4:	10c40000 	addk	r6, r4, r0
9000e5d8:	30e00e70 	addik	r7, r0, 3696
9000e5dc:	b9f4e094 	brlid	r15, -8044	// 9000c670 <readFlash>
9000e5e0:	80000000 	or	r0, r0, r0
9000e5e4:	bc03009c 	beqi	r3, 156		// 9000e680
9000e5e8:	e893001c 	lwi	r4, r19, 28
9000e5ec:	30601080 	addik	r3, r0, 4224
9000e5f0:	40641800 	mul	r3, r4, r3
9000e5f4:	b0000020 	imm	32
9000e5f8:	30633a00 	addik	r3, r3, 14848
9000e5fc:	30930024 	addik	r4, r19, 36
9000e600:	10a30000 	addk	r5, r3, r0
9000e604:	10c40000 	addk	r6, r4, r0
9000e608:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e60c:	b9f4e064 	brlid	r15, -8092	// 9000c670 <readFlash>
9000e610:	80000000 	or	r0, r0, r0
9000e614:	bc03006c 	beqi	r3, 108		// 9000e680
       readFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&nvramFlags, sizeof(nvramFlags)))
    {
        calculatedCrc = calcCRC32(INITIAL_CRC32_VALUE, blockData, NVRAM_DATA_BYTES);
9000e618:	3073002c 	addik	r3, r19, 44
9000e61c:	30a0ffff 	addik	r5, r0, -1
9000e620:	10c30000 	addk	r6, r3, r0
9000e624:	30e00e70 	addik	r7, r0, 3696
9000e628:	b9f4f3c0 	brlid	r15, -3136	// 9000d9e8 <calcCRC32>
9000e62c:	80000000 	or	r0, r0, r0
9000e630:	f8730020 	swi	r3, r19, 32

        if(nvramFlags.crc != calculatedCrc)
9000e634:	e8930028 	lwi	r4, r19, 40
9000e638:	e8730020 	lwi	r3, r19, 32
9000e63c:	16432000 	rsubk	r18, r3, r4
9000e640:	bc120040 	beqi	r18, 64		// 9000e680
        {
            nvramFlags.crc = calculatedCrc;
9000e644:	e8730020 	lwi	r3, r19, 32
9000e648:	f8730028 	swi	r3, r19, 40
            return writeFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&nvramFlags, sizeof(nvramFlags));
9000e64c:	e893001c 	lwi	r4, r19, 28
9000e650:	30601080 	addik	r3, r0, 4224
9000e654:	40641800 	mul	r3, r4, r3
9000e658:	b0000020 	imm	32
9000e65c:	30633a00 	addik	r3, r3, 14848
9000e660:	30930024 	addik	r4, r19, 36
9000e664:	10a30000 	addk	r5, r3, r0
9000e668:	10c40000 	addk	r6, r4, r0
9000e66c:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9000e670:	b9f4e110 	brlid	r15, -7920	// 9000c780 <writeFlash>
9000e674:	80000000 	or	r0, r0, r0
9000e678:	f8730e9c 	swi	r3, r19, 3740
9000e67c:	b800000c 	bri	12		// 9000e688
        }
    }

    return false;
9000e680:	10600000 	addk	r3, r0, r0
9000e684:	f8730e9c 	swi	r3, r19, 3740
9000e688:	e8730e9c 	lwi	r3, r19, 3740
}
9000e68c:	e9e10000 	lwi	r15, r1, 0
9000e690:	10330000 	addk	r1, r19, r0
9000e694:	ea610ea0 	lwi	r19, r1, 3744
9000e698:	30210ea4 	addik	r1, r1, 3748
9000e69c:	b60f0008 	rtsd	r15, 8
9000e6a0:	80000000 	or	r0, r0, r0

9000e6a4 <nvramReset>:


bool nvramReset()
{
9000e6a4:	3021ffd4 	addik	r1, r1, -44
9000e6a8:	f9e10000 	swi	r15, r1, 0
9000e6ac:	fa610028 	swi	r19, r1, 40
9000e6b0:	12610000 	addk	r19, r1, r0
    int blockNumber;
    
    for(blockNumber = 0; blockNumber < NVRAM_BLOCKS; blockNumber++)
9000e6b4:	f8130020 	swi	r0, r19, 32
9000e6b8:	b800003c 	bri	60		// 9000e6f4
    {
        bool rc = eraseFlashBlock(NVRAM_BLOCKS_START_INDEX + blockNumber);
9000e6bc:	e8730020 	lwi	r3, r19, 32
9000e6c0:	306301f4 	addik	r3, r3, 500
9000e6c4:	10a30000 	addk	r5, r3, r0
9000e6c8:	b9f4dee0 	brlid	r15, -8480	// 9000c5a8 <eraseFlashBlock>
9000e6cc:	80000000 	or	r0, r0, r0
9000e6d0:	f873001c 	swi	r3, r19, 28
        if(!rc) return false;
9000e6d4:	e873001c 	lwi	r3, r19, 28
9000e6d8:	bc230010 	bnei	r3, 16		// 9000e6e8
9000e6dc:	10600000 	addk	r3, r0, r0
9000e6e0:	f8730024 	swi	r3, r19, 36
9000e6e4:	b8000028 	bri	40		// 9000e70c
9000e6e8:	e8730020 	lwi	r3, r19, 32
9000e6ec:	30630001 	addik	r3, r3, 1
9000e6f0:	f8730020 	swi	r3, r19, 32
9000e6f4:	e8730020 	lwi	r3, r19, 32
9000e6f8:	32400007 	addik	r18, r0, 7
9000e6fc:	16439001 	cmp	r18, r3, r18
9000e700:	bcb2ffbc 	bgei	r18, -68		// 9000e6bc
    }

    return true;
9000e704:	30600001 	addik	r3, r0, 1
9000e708:	f8730024 	swi	r3, r19, 36
9000e70c:	e8730024 	lwi	r3, r19, 36
}
9000e710:	e9e10000 	lwi	r15, r1, 0
9000e714:	10330000 	addk	r1, r19, r0
9000e718:	ea610028 	lwi	r19, r1, 40
9000e71c:	3021002c 	addik	r1, r1, 44
9000e720:	b60f0008 	rtsd	r15, 8
9000e724:	80000000 	or	r0, r0, r0

9000e728 <nvramTest>:



void nvramTest()
{
9000e728:	3021ffc8 	addik	r1, r1, -56
9000e72c:	f9e10000 	swi	r15, r1, 0
9000e730:	fa610030 	swi	r19, r1, 48
9000e734:	fac10034 	swi	r22, r1, 52
9000e738:	12610000 	addk	r19, r1, r0
    uint64 startTicks;
    uint64 endTicks;
    uint8  byte;
    
    mdelay(1000);
9000e73c:	30a003e8 	addik	r5, r0, 1000
9000e740:	b9f4d9c4 	brlid	r15, -9788	// 9000c104 <mdelay>
9000e744:	80000000 	or	r0, r0, r0

    printf("NVRAM Tests...\n");
9000e748:	b0009002 	imm	-28670
9000e74c:	30a028fc 	addik	r5, r0, 10492
9000e750:	b9f417e8 	brlid	r15, 6120	// 9000ff38 <puts>
9000e754:	80000000 	or	r0, r0, r0
    
    startTicks = getSystemTicks();
9000e758:	b9f4d6e4 	brlid	r15, -10524	// 9000be3c <getSystemTicks>
9000e75c:	80000000 	or	r0, r0, r0
9000e760:	10a40000 	addk	r5, r4, r0
9000e764:	10830000 	addk	r4, r3, r0
9000e768:	f8930028 	swi	r4, r19, 40
9000e76c:	f8b3002c 	swi	r5, r19, 44
    nvramReset();
9000e770:	b9f4ff34 	brlid	r15, -204	// 9000e6a4 <nvramReset>
9000e774:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000e778:	b9f4d6c4 	brlid	r15, -10556	// 9000be3c <getSystemTicks>
9000e77c:	80000000 	or	r0, r0, r0
9000e780:	10a40000 	addk	r5, r4, r0
9000e784:	10830000 	addk	r4, r3, r0
9000e788:	f8930020 	swi	r4, r19, 32
9000e78c:	f8b30024 	swi	r5, r19, 36
    
    printf("Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000e790:	e8d30020 	lwi	r6, r19, 32
9000e794:	e8f30024 	lwi	r7, r19, 36
9000e798:	e8930028 	lwi	r4, r19, 40
9000e79c:	e8b3002c 	lwi	r5, r19, 44
9000e7a0:	04a53800 	rsub	r5, r5, r7
9000e7a4:	0c843000 	rsubc	r4, r4, r6
9000e7a8:	10c50000 	addk	r6, r5, r0
9000e7ac:	10a40000 	addk	r5, r4, r0
9000e7b0:	30e00000 	addik	r7, r0, 0
9000e7b4:	31000042 	addik	r8, r0, 66
9000e7b8:	b9f43088 	brlid	r15, 12424	// 90011840 <__udivdi3>
9000e7bc:	80000000 	or	r0, r0, r0
9000e7c0:	10a40000 	addk	r5, r4, r0
9000e7c4:	10830000 	addk	r4, r3, r0
9000e7c8:	10c40000 	addk	r6, r4, r0
9000e7cc:	10e50000 	addk	r7, r5, r0
9000e7d0:	b0009002 	imm	-28670
9000e7d4:	30a0290c 	addik	r5, r0, 10508
9000e7d8:	b9f4166c 	brlid	r15, 5740	// 9000fe44 <printf>
9000e7dc:	80000000 	or	r0, r0, r0
    
    startTicks = getSystemTicks();
9000e7e0:	b9f4d65c 	brlid	r15, -10660	// 9000be3c <getSystemTicks>
9000e7e4:	80000000 	or	r0, r0, r0
9000e7e8:	10a40000 	addk	r5, r4, r0
9000e7ec:	10830000 	addk	r4, r3, r0
9000e7f0:	f8930028 	swi	r4, r19, 40
9000e7f4:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000e7f8:	10a00000 	addk	r5, r0, r0
9000e7fc:	b9f4f810 	brlid	r15, -2032	// 9000e00c <nvramReadByte>
9000e800:	80000000 	or	r0, r0, r0
9000e804:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000e808:	b9f4d634 	brlid	r15, -10700	// 9000be3c <getSystemTicks>
9000e80c:	80000000 	or	r0, r0, r0
9000e810:	10a40000 	addk	r5, r4, r0
9000e814:	10830000 	addk	r4, r3, r0
9000e818:	f8930020 	swi	r4, r19, 32
9000e81c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000e820:	e2d3001c 	lbui	r22, r19, 28
9000e824:	e8d30020 	lwi	r6, r19, 32
9000e828:	e8f30024 	lwi	r7, r19, 36
9000e82c:	e8930028 	lwi	r4, r19, 40
9000e830:	e8b3002c 	lwi	r5, r19, 44
9000e834:	04a53800 	rsub	r5, r5, r7
9000e838:	0c843000 	rsubc	r4, r4, r6
9000e83c:	10c50000 	addk	r6, r5, r0
9000e840:	10a40000 	addk	r5, r4, r0
9000e844:	30e00000 	addik	r7, r0, 0
9000e848:	31000042 	addik	r8, r0, 66
9000e84c:	b9f42ff4 	brlid	r15, 12276	// 90011840 <__udivdi3>
9000e850:	80000000 	or	r0, r0, r0
9000e854:	10a40000 	addk	r5, r4, r0
9000e858:	10830000 	addk	r4, r3, r0
9000e85c:	11040000 	addk	r8, r4, r0
9000e860:	11250000 	addk	r9, r5, r0
9000e864:	b0009002 	imm	-28670
9000e868:	30a02924 	addik	r5, r0, 10532
9000e86c:	10d60000 	addk	r6, r22, r0
9000e870:	10e80000 	addk	r7, r8, r0
9000e874:	11090000 	addk	r8, r9, r0
9000e878:	b9f415cc 	brlid	r15, 5580	// 9000fe44 <printf>
9000e87c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000e880:	b9f4d5bc 	brlid	r15, -10820	// 9000be3c <getSystemTicks>
9000e884:	80000000 	or	r0, r0, r0
9000e888:	10a40000 	addk	r5, r4, r0
9000e88c:	10830000 	addk	r4, r3, r0
9000e890:	f8930028 	swi	r4, r19, 40
9000e894:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x00);
9000e898:	10a00000 	addk	r5, r0, r0
9000e89c:	10c00000 	addk	r6, r0, r0
9000e8a0:	b9f4f7b4 	brlid	r15, -2124	// 9000e054 <nvramWriteByte>
9000e8a4:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000e8a8:	b9f4d594 	brlid	r15, -10860	// 9000be3c <getSystemTicks>
9000e8ac:	80000000 	or	r0, r0, r0
9000e8b0:	10a40000 	addk	r5, r4, r0
9000e8b4:	10830000 	addk	r4, r3, r0
9000e8b8:	f8930020 	swi	r4, r19, 32
9000e8bc:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000e8c0:	e8d30020 	lwi	r6, r19, 32
9000e8c4:	e8f30024 	lwi	r7, r19, 36
9000e8c8:	e8930028 	lwi	r4, r19, 40
9000e8cc:	e8b3002c 	lwi	r5, r19, 44
9000e8d0:	04a53800 	rsub	r5, r5, r7
9000e8d4:	0c843000 	rsubc	r4, r4, r6
9000e8d8:	10c50000 	addk	r6, r5, r0
9000e8dc:	10a40000 	addk	r5, r4, r0
9000e8e0:	30e00000 	addik	r7, r0, 0
9000e8e4:	31000042 	addik	r8, r0, 66
9000e8e8:	b9f42f58 	brlid	r15, 12120	// 90011840 <__udivdi3>
9000e8ec:	80000000 	or	r0, r0, r0
9000e8f0:	10a40000 	addk	r5, r4, r0
9000e8f4:	10830000 	addk	r4, r3, r0
9000e8f8:	10c40000 	addk	r6, r4, r0
9000e8fc:	10e50000 	addk	r7, r5, r0
9000e900:	b0009002 	imm	-28670
9000e904:	30a02950 	addik	r5, r0, 10576
9000e908:	b9f4153c 	brlid	r15, 5436	// 9000fe44 <printf>
9000e90c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000e910:	b9f4d52c 	brlid	r15, -10964	// 9000be3c <getSystemTicks>
9000e914:	80000000 	or	r0, r0, r0
9000e918:	10a40000 	addk	r5, r4, r0
9000e91c:	10830000 	addk	r4, r3, r0
9000e920:	f8930028 	swi	r4, r19, 40
9000e924:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000e928:	10a00000 	addk	r5, r0, r0
9000e92c:	b9f4f6e0 	brlid	r15, -2336	// 9000e00c <nvramReadByte>
9000e930:	80000000 	or	r0, r0, r0
9000e934:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000e938:	b9f4d504 	brlid	r15, -11004	// 9000be3c <getSystemTicks>
9000e93c:	80000000 	or	r0, r0, r0
9000e940:	10a40000 	addk	r5, r4, r0
9000e944:	10830000 	addk	r4, r3, r0
9000e948:	f8930020 	swi	r4, r19, 32
9000e94c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000e950:	e2d3001c 	lbui	r22, r19, 28
9000e954:	e8d30020 	lwi	r6, r19, 32
9000e958:	e8f30024 	lwi	r7, r19, 36
9000e95c:	e8930028 	lwi	r4, r19, 40
9000e960:	e8b3002c 	lwi	r5, r19, 44
9000e964:	04a53800 	rsub	r5, r5, r7
9000e968:	0c843000 	rsubc	r4, r4, r6
9000e96c:	10c50000 	addk	r6, r5, r0
9000e970:	10a40000 	addk	r5, r4, r0
9000e974:	30e00000 	addik	r7, r0, 0
9000e978:	31000042 	addik	r8, r0, 66
9000e97c:	b9f42ec4 	brlid	r15, 11972	// 90011840 <__udivdi3>
9000e980:	80000000 	or	r0, r0, r0
9000e984:	10a40000 	addk	r5, r4, r0
9000e988:	10830000 	addk	r4, r3, r0
9000e98c:	11040000 	addk	r8, r4, r0
9000e990:	11250000 	addk	r9, r5, r0
9000e994:	b0009002 	imm	-28670
9000e998:	30a02924 	addik	r5, r0, 10532
9000e99c:	10d60000 	addk	r6, r22, r0
9000e9a0:	10e80000 	addk	r7, r8, r0
9000e9a4:	11090000 	addk	r8, r9, r0
9000e9a8:	b9f4149c 	brlid	r15, 5276	// 9000fe44 <printf>
9000e9ac:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000e9b0:	b9f4d48c 	brlid	r15, -11124	// 9000be3c <getSystemTicks>
9000e9b4:	80000000 	or	r0, r0, r0
9000e9b8:	10a40000 	addk	r5, r4, r0
9000e9bc:	10830000 	addk	r4, r3, r0
9000e9c0:	f8930028 	swi	r4, r19, 40
9000e9c4:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x11);
9000e9c8:	10a00000 	addk	r5, r0, r0
9000e9cc:	30c00011 	addik	r6, r0, 17
9000e9d0:	b9f4f684 	brlid	r15, -2428	// 9000e054 <nvramWriteByte>
9000e9d4:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000e9d8:	b9f4d464 	brlid	r15, -11164	// 9000be3c <getSystemTicks>
9000e9dc:	80000000 	or	r0, r0, r0
9000e9e0:	10a40000 	addk	r5, r4, r0
9000e9e4:	10830000 	addk	r4, r3, r0
9000e9e8:	f8930020 	swi	r4, r19, 32
9000e9ec:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000e9f0:	e8d30020 	lwi	r6, r19, 32
9000e9f4:	e8f30024 	lwi	r7, r19, 36
9000e9f8:	e8930028 	lwi	r4, r19, 40
9000e9fc:	e8b3002c 	lwi	r5, r19, 44
9000ea00:	04a53800 	rsub	r5, r5, r7
9000ea04:	0c843000 	rsubc	r4, r4, r6
9000ea08:	10c50000 	addk	r6, r5, r0
9000ea0c:	10a40000 	addk	r5, r4, r0
9000ea10:	30e00000 	addik	r7, r0, 0
9000ea14:	31000042 	addik	r8, r0, 66
9000ea18:	b9f42e28 	brlid	r15, 11816	// 90011840 <__udivdi3>
9000ea1c:	80000000 	or	r0, r0, r0
9000ea20:	10a40000 	addk	r5, r4, r0
9000ea24:	10830000 	addk	r4, r3, r0
9000ea28:	10c40000 	addk	r6, r4, r0
9000ea2c:	10e50000 	addk	r7, r5, r0
9000ea30:	b0009002 	imm	-28670
9000ea34:	30a02950 	addik	r5, r0, 10576
9000ea38:	b9f4140c 	brlid	r15, 5132	// 9000fe44 <printf>
9000ea3c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000ea40:	b9f4d3fc 	brlid	r15, -11268	// 9000be3c <getSystemTicks>
9000ea44:	80000000 	or	r0, r0, r0
9000ea48:	10a40000 	addk	r5, r4, r0
9000ea4c:	10830000 	addk	r4, r3, r0
9000ea50:	f8930028 	swi	r4, r19, 40
9000ea54:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000ea58:	10a00000 	addk	r5, r0, r0
9000ea5c:	b9f4f5b0 	brlid	r15, -2640	// 9000e00c <nvramReadByte>
9000ea60:	80000000 	or	r0, r0, r0
9000ea64:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000ea68:	b9f4d3d4 	brlid	r15, -11308	// 9000be3c <getSystemTicks>
9000ea6c:	80000000 	or	r0, r0, r0
9000ea70:	10a40000 	addk	r5, r4, r0
9000ea74:	10830000 	addk	r4, r3, r0
9000ea78:	f8930020 	swi	r4, r19, 32
9000ea7c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000ea80:	e2d3001c 	lbui	r22, r19, 28
9000ea84:	e8d30020 	lwi	r6, r19, 32
9000ea88:	e8f30024 	lwi	r7, r19, 36
9000ea8c:	e8930028 	lwi	r4, r19, 40
9000ea90:	e8b3002c 	lwi	r5, r19, 44
9000ea94:	04a53800 	rsub	r5, r5, r7
9000ea98:	0c843000 	rsubc	r4, r4, r6
9000ea9c:	10c50000 	addk	r6, r5, r0
9000eaa0:	10a40000 	addk	r5, r4, r0
9000eaa4:	30e00000 	addik	r7, r0, 0
9000eaa8:	31000042 	addik	r8, r0, 66
9000eaac:	b9f42d94 	brlid	r15, 11668	// 90011840 <__udivdi3>
9000eab0:	80000000 	or	r0, r0, r0
9000eab4:	10a40000 	addk	r5, r4, r0
9000eab8:	10830000 	addk	r4, r3, r0
9000eabc:	11040000 	addk	r8, r4, r0
9000eac0:	11250000 	addk	r9, r5, r0
9000eac4:	b0009002 	imm	-28670
9000eac8:	30a02924 	addik	r5, r0, 10532
9000eacc:	10d60000 	addk	r6, r22, r0
9000ead0:	10e80000 	addk	r7, r8, r0
9000ead4:	11090000 	addk	r8, r9, r0
9000ead8:	b9f4136c 	brlid	r15, 4972	// 9000fe44 <printf>
9000eadc:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000eae0:	b9f4d35c 	brlid	r15, -11428	// 9000be3c <getSystemTicks>
9000eae4:	80000000 	or	r0, r0, r0
9000eae8:	10a40000 	addk	r5, r4, r0
9000eaec:	10830000 	addk	r4, r3, r0
9000eaf0:	f8930028 	swi	r4, r19, 40
9000eaf4:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x22);
9000eaf8:	10a00000 	addk	r5, r0, r0
9000eafc:	30c00022 	addik	r6, r0, 34
9000eb00:	b9f4f554 	brlid	r15, -2732	// 9000e054 <nvramWriteByte>
9000eb04:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000eb08:	b9f4d334 	brlid	r15, -11468	// 9000be3c <getSystemTicks>
9000eb0c:	80000000 	or	r0, r0, r0
9000eb10:	10a40000 	addk	r5, r4, r0
9000eb14:	10830000 	addk	r4, r3, r0
9000eb18:	f8930020 	swi	r4, r19, 32
9000eb1c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000eb20:	e8d30020 	lwi	r6, r19, 32
9000eb24:	e8f30024 	lwi	r7, r19, 36
9000eb28:	e8930028 	lwi	r4, r19, 40
9000eb2c:	e8b3002c 	lwi	r5, r19, 44
9000eb30:	04a53800 	rsub	r5, r5, r7
9000eb34:	0c843000 	rsubc	r4, r4, r6
9000eb38:	10c50000 	addk	r6, r5, r0
9000eb3c:	10a40000 	addk	r5, r4, r0
9000eb40:	30e00000 	addik	r7, r0, 0
9000eb44:	31000042 	addik	r8, r0, 66
9000eb48:	b9f42cf8 	brlid	r15, 11512	// 90011840 <__udivdi3>
9000eb4c:	80000000 	or	r0, r0, r0
9000eb50:	10a40000 	addk	r5, r4, r0
9000eb54:	10830000 	addk	r4, r3, r0
9000eb58:	10c40000 	addk	r6, r4, r0
9000eb5c:	10e50000 	addk	r7, r5, r0
9000eb60:	b0009002 	imm	-28670
9000eb64:	30a02950 	addik	r5, r0, 10576
9000eb68:	b9f412dc 	brlid	r15, 4828	// 9000fe44 <printf>
9000eb6c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000eb70:	b9f4d2cc 	brlid	r15, -11572	// 9000be3c <getSystemTicks>
9000eb74:	80000000 	or	r0, r0, r0
9000eb78:	10a40000 	addk	r5, r4, r0
9000eb7c:	10830000 	addk	r4, r3, r0
9000eb80:	f8930028 	swi	r4, r19, 40
9000eb84:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000eb88:	10a00000 	addk	r5, r0, r0
9000eb8c:	b9f4f480 	brlid	r15, -2944	// 9000e00c <nvramReadByte>
9000eb90:	80000000 	or	r0, r0, r0
9000eb94:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000eb98:	b9f4d2a4 	brlid	r15, -11612	// 9000be3c <getSystemTicks>
9000eb9c:	80000000 	or	r0, r0, r0
9000eba0:	10a40000 	addk	r5, r4, r0
9000eba4:	10830000 	addk	r4, r3, r0
9000eba8:	f8930020 	swi	r4, r19, 32
9000ebac:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000ebb0:	e2d3001c 	lbui	r22, r19, 28
9000ebb4:	e8d30020 	lwi	r6, r19, 32
9000ebb8:	e8f30024 	lwi	r7, r19, 36
9000ebbc:	e8930028 	lwi	r4, r19, 40
9000ebc0:	e8b3002c 	lwi	r5, r19, 44
9000ebc4:	04a53800 	rsub	r5, r5, r7
9000ebc8:	0c843000 	rsubc	r4, r4, r6
9000ebcc:	10c50000 	addk	r6, r5, r0
9000ebd0:	10a40000 	addk	r5, r4, r0
9000ebd4:	30e00000 	addik	r7, r0, 0
9000ebd8:	31000042 	addik	r8, r0, 66
9000ebdc:	b9f42c64 	brlid	r15, 11364	// 90011840 <__udivdi3>
9000ebe0:	80000000 	or	r0, r0, r0
9000ebe4:	10a40000 	addk	r5, r4, r0
9000ebe8:	10830000 	addk	r4, r3, r0
9000ebec:	11040000 	addk	r8, r4, r0
9000ebf0:	11250000 	addk	r9, r5, r0
9000ebf4:	b0009002 	imm	-28670
9000ebf8:	30a02924 	addik	r5, r0, 10532
9000ebfc:	10d60000 	addk	r6, r22, r0
9000ec00:	10e80000 	addk	r7, r8, r0
9000ec04:	11090000 	addk	r8, r9, r0
9000ec08:	b9f4123c 	brlid	r15, 4668	// 9000fe44 <printf>
9000ec0c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000ec10:	b9f4d22c 	brlid	r15, -11732	// 9000be3c <getSystemTicks>
9000ec14:	80000000 	or	r0, r0, r0
9000ec18:	10a40000 	addk	r5, r4, r0
9000ec1c:	10830000 	addk	r4, r3, r0
9000ec20:	f8930028 	swi	r4, r19, 40
9000ec24:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x33);
9000ec28:	10a00000 	addk	r5, r0, r0
9000ec2c:	30c00033 	addik	r6, r0, 51
9000ec30:	b9f4f424 	brlid	r15, -3036	// 9000e054 <nvramWriteByte>
9000ec34:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000ec38:	b9f4d204 	brlid	r15, -11772	// 9000be3c <getSystemTicks>
9000ec3c:	80000000 	or	r0, r0, r0
9000ec40:	10a40000 	addk	r5, r4, r0
9000ec44:	10830000 	addk	r4, r3, r0
9000ec48:	f8930020 	swi	r4, r19, 32
9000ec4c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000ec50:	e8d30020 	lwi	r6, r19, 32
9000ec54:	e8f30024 	lwi	r7, r19, 36
9000ec58:	e8930028 	lwi	r4, r19, 40
9000ec5c:	e8b3002c 	lwi	r5, r19, 44
9000ec60:	04a53800 	rsub	r5, r5, r7
9000ec64:	0c843000 	rsubc	r4, r4, r6
9000ec68:	10c50000 	addk	r6, r5, r0
9000ec6c:	10a40000 	addk	r5, r4, r0
9000ec70:	30e00000 	addik	r7, r0, 0
9000ec74:	31000042 	addik	r8, r0, 66
9000ec78:	b9f42bc8 	brlid	r15, 11208	// 90011840 <__udivdi3>
9000ec7c:	80000000 	or	r0, r0, r0
9000ec80:	10a40000 	addk	r5, r4, r0
9000ec84:	10830000 	addk	r4, r3, r0
9000ec88:	10c40000 	addk	r6, r4, r0
9000ec8c:	10e50000 	addk	r7, r5, r0
9000ec90:	b0009002 	imm	-28670
9000ec94:	30a02950 	addik	r5, r0, 10576
9000ec98:	b9f411ac 	brlid	r15, 4524	// 9000fe44 <printf>
9000ec9c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000eca0:	b9f4d19c 	brlid	r15, -11876	// 9000be3c <getSystemTicks>
9000eca4:	80000000 	or	r0, r0, r0
9000eca8:	10a40000 	addk	r5, r4, r0
9000ecac:	10830000 	addk	r4, r3, r0
9000ecb0:	f8930028 	swi	r4, r19, 40
9000ecb4:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000ecb8:	10a00000 	addk	r5, r0, r0
9000ecbc:	b9f4f350 	brlid	r15, -3248	// 9000e00c <nvramReadByte>
9000ecc0:	80000000 	or	r0, r0, r0
9000ecc4:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000ecc8:	b9f4d174 	brlid	r15, -11916	// 9000be3c <getSystemTicks>
9000eccc:	80000000 	or	r0, r0, r0
9000ecd0:	10a40000 	addk	r5, r4, r0
9000ecd4:	10830000 	addk	r4, r3, r0
9000ecd8:	f8930020 	swi	r4, r19, 32
9000ecdc:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000ece0:	e2d3001c 	lbui	r22, r19, 28
9000ece4:	e8d30020 	lwi	r6, r19, 32
9000ece8:	e8f30024 	lwi	r7, r19, 36
9000ecec:	e8930028 	lwi	r4, r19, 40
9000ecf0:	e8b3002c 	lwi	r5, r19, 44
9000ecf4:	04a53800 	rsub	r5, r5, r7
9000ecf8:	0c843000 	rsubc	r4, r4, r6
9000ecfc:	10c50000 	addk	r6, r5, r0
9000ed00:	10a40000 	addk	r5, r4, r0
9000ed04:	30e00000 	addik	r7, r0, 0
9000ed08:	31000042 	addik	r8, r0, 66
9000ed0c:	b9f42b34 	brlid	r15, 11060	// 90011840 <__udivdi3>
9000ed10:	80000000 	or	r0, r0, r0
9000ed14:	10a40000 	addk	r5, r4, r0
9000ed18:	10830000 	addk	r4, r3, r0
9000ed1c:	11040000 	addk	r8, r4, r0
9000ed20:	11250000 	addk	r9, r5, r0
9000ed24:	b0009002 	imm	-28670
9000ed28:	30a02924 	addik	r5, r0, 10532
9000ed2c:	10d60000 	addk	r6, r22, r0
9000ed30:	10e80000 	addk	r7, r8, r0
9000ed34:	11090000 	addk	r8, r9, r0
9000ed38:	b9f4110c 	brlid	r15, 4364	// 9000fe44 <printf>
9000ed3c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000ed40:	b9f4d0fc 	brlid	r15, -12036	// 9000be3c <getSystemTicks>
9000ed44:	80000000 	or	r0, r0, r0
9000ed48:	10a40000 	addk	r5, r4, r0
9000ed4c:	10830000 	addk	r4, r3, r0
9000ed50:	f8930028 	swi	r4, r19, 40
9000ed54:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x44);
9000ed58:	10a00000 	addk	r5, r0, r0
9000ed5c:	30c00044 	addik	r6, r0, 68
9000ed60:	b9f4f2f4 	brlid	r15, -3340	// 9000e054 <nvramWriteByte>
9000ed64:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000ed68:	b9f4d0d4 	brlid	r15, -12076	// 9000be3c <getSystemTicks>
9000ed6c:	80000000 	or	r0, r0, r0
9000ed70:	10a40000 	addk	r5, r4, r0
9000ed74:	10830000 	addk	r4, r3, r0
9000ed78:	f8930020 	swi	r4, r19, 32
9000ed7c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000ed80:	e8d30020 	lwi	r6, r19, 32
9000ed84:	e8f30024 	lwi	r7, r19, 36
9000ed88:	e8930028 	lwi	r4, r19, 40
9000ed8c:	e8b3002c 	lwi	r5, r19, 44
9000ed90:	04a53800 	rsub	r5, r5, r7
9000ed94:	0c843000 	rsubc	r4, r4, r6
9000ed98:	10c50000 	addk	r6, r5, r0
9000ed9c:	10a40000 	addk	r5, r4, r0
9000eda0:	30e00000 	addik	r7, r0, 0
9000eda4:	31000042 	addik	r8, r0, 66
9000eda8:	b9f42a98 	brlid	r15, 10904	// 90011840 <__udivdi3>
9000edac:	80000000 	or	r0, r0, r0
9000edb0:	10a40000 	addk	r5, r4, r0
9000edb4:	10830000 	addk	r4, r3, r0
9000edb8:	10c40000 	addk	r6, r4, r0
9000edbc:	10e50000 	addk	r7, r5, r0
9000edc0:	b0009002 	imm	-28670
9000edc4:	30a02950 	addik	r5, r0, 10576
9000edc8:	b9f4107c 	brlid	r15, 4220	// 9000fe44 <printf>
9000edcc:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000edd0:	b9f4d06c 	brlid	r15, -12180	// 9000be3c <getSystemTicks>
9000edd4:	80000000 	or	r0, r0, r0
9000edd8:	10a40000 	addk	r5, r4, r0
9000eddc:	10830000 	addk	r4, r3, r0
9000ede0:	f8930028 	swi	r4, r19, 40
9000ede4:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000ede8:	10a00000 	addk	r5, r0, r0
9000edec:	b9f4f220 	brlid	r15, -3552	// 9000e00c <nvramReadByte>
9000edf0:	80000000 	or	r0, r0, r0
9000edf4:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000edf8:	b9f4d044 	brlid	r15, -12220	// 9000be3c <getSystemTicks>
9000edfc:	80000000 	or	r0, r0, r0
9000ee00:	10a40000 	addk	r5, r4, r0
9000ee04:	10830000 	addk	r4, r3, r0
9000ee08:	f8930020 	swi	r4, r19, 32
9000ee0c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000ee10:	e2d3001c 	lbui	r22, r19, 28
9000ee14:	e8d30020 	lwi	r6, r19, 32
9000ee18:	e8f30024 	lwi	r7, r19, 36
9000ee1c:	e8930028 	lwi	r4, r19, 40
9000ee20:	e8b3002c 	lwi	r5, r19, 44
9000ee24:	04a53800 	rsub	r5, r5, r7
9000ee28:	0c843000 	rsubc	r4, r4, r6
9000ee2c:	10c50000 	addk	r6, r5, r0
9000ee30:	10a40000 	addk	r5, r4, r0
9000ee34:	30e00000 	addik	r7, r0, 0
9000ee38:	31000042 	addik	r8, r0, 66
9000ee3c:	b9f42a04 	brlid	r15, 10756	// 90011840 <__udivdi3>
9000ee40:	80000000 	or	r0, r0, r0
9000ee44:	10a40000 	addk	r5, r4, r0
9000ee48:	10830000 	addk	r4, r3, r0
9000ee4c:	11040000 	addk	r8, r4, r0
9000ee50:	11250000 	addk	r9, r5, r0
9000ee54:	b0009002 	imm	-28670
9000ee58:	30a02924 	addik	r5, r0, 10532
9000ee5c:	10d60000 	addk	r6, r22, r0
9000ee60:	10e80000 	addk	r7, r8, r0
9000ee64:	11090000 	addk	r8, r9, r0
9000ee68:	b9f40fdc 	brlid	r15, 4060	// 9000fe44 <printf>
9000ee6c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000ee70:	b9f4cfcc 	brlid	r15, -12340	// 9000be3c <getSystemTicks>
9000ee74:	80000000 	or	r0, r0, r0
9000ee78:	10a40000 	addk	r5, r4, r0
9000ee7c:	10830000 	addk	r4, r3, r0
9000ee80:	f8930028 	swi	r4, r19, 40
9000ee84:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x55);
9000ee88:	10a00000 	addk	r5, r0, r0
9000ee8c:	30c00055 	addik	r6, r0, 85
9000ee90:	b9f4f1c4 	brlid	r15, -3644	// 9000e054 <nvramWriteByte>
9000ee94:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000ee98:	b9f4cfa4 	brlid	r15, -12380	// 9000be3c <getSystemTicks>
9000ee9c:	80000000 	or	r0, r0, r0
9000eea0:	10a40000 	addk	r5, r4, r0
9000eea4:	10830000 	addk	r4, r3, r0
9000eea8:	f8930020 	swi	r4, r19, 32
9000eeac:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000eeb0:	e8d30020 	lwi	r6, r19, 32
9000eeb4:	e8f30024 	lwi	r7, r19, 36
9000eeb8:	e8930028 	lwi	r4, r19, 40
9000eebc:	e8b3002c 	lwi	r5, r19, 44
9000eec0:	04a53800 	rsub	r5, r5, r7
9000eec4:	0c843000 	rsubc	r4, r4, r6
9000eec8:	10c50000 	addk	r6, r5, r0
9000eecc:	10a40000 	addk	r5, r4, r0
9000eed0:	30e00000 	addik	r7, r0, 0
9000eed4:	31000042 	addik	r8, r0, 66
9000eed8:	b9f42968 	brlid	r15, 10600	// 90011840 <__udivdi3>
9000eedc:	80000000 	or	r0, r0, r0
9000eee0:	10a40000 	addk	r5, r4, r0
9000eee4:	10830000 	addk	r4, r3, r0
9000eee8:	10c40000 	addk	r6, r4, r0
9000eeec:	10e50000 	addk	r7, r5, r0
9000eef0:	b0009002 	imm	-28670
9000eef4:	30a02950 	addik	r5, r0, 10576
9000eef8:	b9f40f4c 	brlid	r15, 3916	// 9000fe44 <printf>
9000eefc:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000ef00:	b9f4cf3c 	brlid	r15, -12484	// 9000be3c <getSystemTicks>
9000ef04:	80000000 	or	r0, r0, r0
9000ef08:	10a40000 	addk	r5, r4, r0
9000ef0c:	10830000 	addk	r4, r3, r0
9000ef10:	f8930028 	swi	r4, r19, 40
9000ef14:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000ef18:	10a00000 	addk	r5, r0, r0
9000ef1c:	b9f4f0f0 	brlid	r15, -3856	// 9000e00c <nvramReadByte>
9000ef20:	80000000 	or	r0, r0, r0
9000ef24:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000ef28:	b9f4cf14 	brlid	r15, -12524	// 9000be3c <getSystemTicks>
9000ef2c:	80000000 	or	r0, r0, r0
9000ef30:	10a40000 	addk	r5, r4, r0
9000ef34:	10830000 	addk	r4, r3, r0
9000ef38:	f8930020 	swi	r4, r19, 32
9000ef3c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000ef40:	e2d3001c 	lbui	r22, r19, 28
9000ef44:	e8d30020 	lwi	r6, r19, 32
9000ef48:	e8f30024 	lwi	r7, r19, 36
9000ef4c:	e8930028 	lwi	r4, r19, 40
9000ef50:	e8b3002c 	lwi	r5, r19, 44
9000ef54:	04a53800 	rsub	r5, r5, r7
9000ef58:	0c843000 	rsubc	r4, r4, r6
9000ef5c:	10c50000 	addk	r6, r5, r0
9000ef60:	10a40000 	addk	r5, r4, r0
9000ef64:	30e00000 	addik	r7, r0, 0
9000ef68:	31000042 	addik	r8, r0, 66
9000ef6c:	b9f428d4 	brlid	r15, 10452	// 90011840 <__udivdi3>
9000ef70:	80000000 	or	r0, r0, r0
9000ef74:	10a40000 	addk	r5, r4, r0
9000ef78:	10830000 	addk	r4, r3, r0
9000ef7c:	11040000 	addk	r8, r4, r0
9000ef80:	11250000 	addk	r9, r5, r0
9000ef84:	b0009002 	imm	-28670
9000ef88:	30a02924 	addik	r5, r0, 10532
9000ef8c:	10d60000 	addk	r6, r22, r0
9000ef90:	10e80000 	addk	r7, r8, r0
9000ef94:	11090000 	addk	r8, r9, r0
9000ef98:	b9f40eac 	brlid	r15, 3756	// 9000fe44 <printf>
9000ef9c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000efa0:	b9f4ce9c 	brlid	r15, -12644	// 9000be3c <getSystemTicks>
9000efa4:	80000000 	or	r0, r0, r0
9000efa8:	10a40000 	addk	r5, r4, r0
9000efac:	10830000 	addk	r4, r3, r0
9000efb0:	f8930028 	swi	r4, r19, 40
9000efb4:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x66);
9000efb8:	10a00000 	addk	r5, r0, r0
9000efbc:	30c00066 	addik	r6, r0, 102
9000efc0:	b9f4f094 	brlid	r15, -3948	// 9000e054 <nvramWriteByte>
9000efc4:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000efc8:	b9f4ce74 	brlid	r15, -12684	// 9000be3c <getSystemTicks>
9000efcc:	80000000 	or	r0, r0, r0
9000efd0:	10a40000 	addk	r5, r4, r0
9000efd4:	10830000 	addk	r4, r3, r0
9000efd8:	f8930020 	swi	r4, r19, 32
9000efdc:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000efe0:	e8d30020 	lwi	r6, r19, 32
9000efe4:	e8f30024 	lwi	r7, r19, 36
9000efe8:	e8930028 	lwi	r4, r19, 40
9000efec:	e8b3002c 	lwi	r5, r19, 44
9000eff0:	04a53800 	rsub	r5, r5, r7
9000eff4:	0c843000 	rsubc	r4, r4, r6
9000eff8:	10c50000 	addk	r6, r5, r0
9000effc:	10a40000 	addk	r5, r4, r0
9000f000:	30e00000 	addik	r7, r0, 0
9000f004:	31000042 	addik	r8, r0, 66
9000f008:	b9f42838 	brlid	r15, 10296	// 90011840 <__udivdi3>
9000f00c:	80000000 	or	r0, r0, r0
9000f010:	10a40000 	addk	r5, r4, r0
9000f014:	10830000 	addk	r4, r3, r0
9000f018:	10c40000 	addk	r6, r4, r0
9000f01c:	10e50000 	addk	r7, r5, r0
9000f020:	b0009002 	imm	-28670
9000f024:	30a02950 	addik	r5, r0, 10576
9000f028:	b9f40e1c 	brlid	r15, 3612	// 9000fe44 <printf>
9000f02c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000f030:	b9f4ce0c 	brlid	r15, -12788	// 9000be3c <getSystemTicks>
9000f034:	80000000 	or	r0, r0, r0
9000f038:	10a40000 	addk	r5, r4, r0
9000f03c:	10830000 	addk	r4, r3, r0
9000f040:	f8930028 	swi	r4, r19, 40
9000f044:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000f048:	10a00000 	addk	r5, r0, r0
9000f04c:	b9f4efc0 	brlid	r15, -4160	// 9000e00c <nvramReadByte>
9000f050:	80000000 	or	r0, r0, r0
9000f054:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000f058:	b9f4cde4 	brlid	r15, -12828	// 9000be3c <getSystemTicks>
9000f05c:	80000000 	or	r0, r0, r0
9000f060:	10a40000 	addk	r5, r4, r0
9000f064:	10830000 	addk	r4, r3, r0
9000f068:	f8930020 	swi	r4, r19, 32
9000f06c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000f070:	e2d3001c 	lbui	r22, r19, 28
9000f074:	e8d30020 	lwi	r6, r19, 32
9000f078:	e8f30024 	lwi	r7, r19, 36
9000f07c:	e8930028 	lwi	r4, r19, 40
9000f080:	e8b3002c 	lwi	r5, r19, 44
9000f084:	04a53800 	rsub	r5, r5, r7
9000f088:	0c843000 	rsubc	r4, r4, r6
9000f08c:	10c50000 	addk	r6, r5, r0
9000f090:	10a40000 	addk	r5, r4, r0
9000f094:	30e00000 	addik	r7, r0, 0
9000f098:	31000042 	addik	r8, r0, 66
9000f09c:	b9f427a4 	brlid	r15, 10148	// 90011840 <__udivdi3>
9000f0a0:	80000000 	or	r0, r0, r0
9000f0a4:	10a40000 	addk	r5, r4, r0
9000f0a8:	10830000 	addk	r4, r3, r0
9000f0ac:	11040000 	addk	r8, r4, r0
9000f0b0:	11250000 	addk	r9, r5, r0
9000f0b4:	b0009002 	imm	-28670
9000f0b8:	30a02924 	addik	r5, r0, 10532
9000f0bc:	10d60000 	addk	r6, r22, r0
9000f0c0:	10e80000 	addk	r7, r8, r0
9000f0c4:	11090000 	addk	r8, r9, r0
9000f0c8:	b9f40d7c 	brlid	r15, 3452	// 9000fe44 <printf>
9000f0cc:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000f0d0:	b9f4cd6c 	brlid	r15, -12948	// 9000be3c <getSystemTicks>
9000f0d4:	80000000 	or	r0, r0, r0
9000f0d8:	10a40000 	addk	r5, r4, r0
9000f0dc:	10830000 	addk	r4, r3, r0
9000f0e0:	f8930028 	swi	r4, r19, 40
9000f0e4:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x77);
9000f0e8:	10a00000 	addk	r5, r0, r0
9000f0ec:	30c00077 	addik	r6, r0, 119
9000f0f0:	b9f4ef64 	brlid	r15, -4252	// 9000e054 <nvramWriteByte>
9000f0f4:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000f0f8:	b9f4cd44 	brlid	r15, -12988	// 9000be3c <getSystemTicks>
9000f0fc:	80000000 	or	r0, r0, r0
9000f100:	10a40000 	addk	r5, r4, r0
9000f104:	10830000 	addk	r4, r3, r0
9000f108:	f8930020 	swi	r4, r19, 32
9000f10c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000f110:	e8d30020 	lwi	r6, r19, 32
9000f114:	e8f30024 	lwi	r7, r19, 36
9000f118:	e8930028 	lwi	r4, r19, 40
9000f11c:	e8b3002c 	lwi	r5, r19, 44
9000f120:	04a53800 	rsub	r5, r5, r7
9000f124:	0c843000 	rsubc	r4, r4, r6
9000f128:	10c50000 	addk	r6, r5, r0
9000f12c:	10a40000 	addk	r5, r4, r0
9000f130:	30e00000 	addik	r7, r0, 0
9000f134:	31000042 	addik	r8, r0, 66
9000f138:	b9f42708 	brlid	r15, 9992	// 90011840 <__udivdi3>
9000f13c:	80000000 	or	r0, r0, r0
9000f140:	10a40000 	addk	r5, r4, r0
9000f144:	10830000 	addk	r4, r3, r0
9000f148:	10c40000 	addk	r6, r4, r0
9000f14c:	10e50000 	addk	r7, r5, r0
9000f150:	b0009002 	imm	-28670
9000f154:	30a02950 	addik	r5, r0, 10576
9000f158:	b9f40cec 	brlid	r15, 3308	// 9000fe44 <printf>
9000f15c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000f160:	b9f4ccdc 	brlid	r15, -13092	// 9000be3c <getSystemTicks>
9000f164:	80000000 	or	r0, r0, r0
9000f168:	10a40000 	addk	r5, r4, r0
9000f16c:	10830000 	addk	r4, r3, r0
9000f170:	f8930028 	swi	r4, r19, 40
9000f174:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000f178:	10a00000 	addk	r5, r0, r0
9000f17c:	b9f4ee90 	brlid	r15, -4464	// 9000e00c <nvramReadByte>
9000f180:	80000000 	or	r0, r0, r0
9000f184:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000f188:	b9f4ccb4 	brlid	r15, -13132	// 9000be3c <getSystemTicks>
9000f18c:	80000000 	or	r0, r0, r0
9000f190:	10a40000 	addk	r5, r4, r0
9000f194:	10830000 	addk	r4, r3, r0
9000f198:	f8930020 	swi	r4, r19, 32
9000f19c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000f1a0:	e2d3001c 	lbui	r22, r19, 28
9000f1a4:	e8d30020 	lwi	r6, r19, 32
9000f1a8:	e8f30024 	lwi	r7, r19, 36
9000f1ac:	e8930028 	lwi	r4, r19, 40
9000f1b0:	e8b3002c 	lwi	r5, r19, 44
9000f1b4:	04a53800 	rsub	r5, r5, r7
9000f1b8:	0c843000 	rsubc	r4, r4, r6
9000f1bc:	10c50000 	addk	r6, r5, r0
9000f1c0:	10a40000 	addk	r5, r4, r0
9000f1c4:	30e00000 	addik	r7, r0, 0
9000f1c8:	31000042 	addik	r8, r0, 66
9000f1cc:	b9f42674 	brlid	r15, 9844	// 90011840 <__udivdi3>
9000f1d0:	80000000 	or	r0, r0, r0
9000f1d4:	10a40000 	addk	r5, r4, r0
9000f1d8:	10830000 	addk	r4, r3, r0
9000f1dc:	11040000 	addk	r8, r4, r0
9000f1e0:	11250000 	addk	r9, r5, r0
9000f1e4:	b0009002 	imm	-28670
9000f1e8:	30a02924 	addik	r5, r0, 10532
9000f1ec:	10d60000 	addk	r6, r22, r0
9000f1f0:	10e80000 	addk	r7, r8, r0
9000f1f4:	11090000 	addk	r8, r9, r0
9000f1f8:	b9f40c4c 	brlid	r15, 3148	// 9000fe44 <printf>
9000f1fc:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000f200:	b9f4cc3c 	brlid	r15, -13252	// 9000be3c <getSystemTicks>
9000f204:	80000000 	or	r0, r0, r0
9000f208:	10a40000 	addk	r5, r4, r0
9000f20c:	10830000 	addk	r4, r3, r0
9000f210:	f8930028 	swi	r4, r19, 40
9000f214:	f8b3002c 	swi	r5, r19, 44
    nvramWriteByte(0, 0x88);
9000f218:	10a00000 	addk	r5, r0, r0
9000f21c:	30c0ff88 	addik	r6, r0, -120
9000f220:	b9f4ee34 	brlid	r15, -4556	// 9000e054 <nvramWriteByte>
9000f224:	80000000 	or	r0, r0, r0
    endTicks = getSystemTicks();
9000f228:	b9f4cc14 	brlid	r15, -13292	// 9000be3c <getSystemTicks>
9000f22c:	80000000 	or	r0, r0, r0
9000f230:	10a40000 	addk	r5, r4, r0
9000f234:	10830000 	addk	r4, r3, r0
9000f238:	f8930020 	swi	r4, r19, 32
9000f23c:	f8b30024 	swi	r5, r19, 36
    printf("Byte Write: Elapsed time %llu us\n", TICKS_TO_USEC(endTicks - startTicks));
9000f240:	e8d30020 	lwi	r6, r19, 32
9000f244:	e8f30024 	lwi	r7, r19, 36
9000f248:	e8930028 	lwi	r4, r19, 40
9000f24c:	e8b3002c 	lwi	r5, r19, 44
9000f250:	04a53800 	rsub	r5, r5, r7
9000f254:	0c843000 	rsubc	r4, r4, r6
9000f258:	10c50000 	addk	r6, r5, r0
9000f25c:	10a40000 	addk	r5, r4, r0
9000f260:	30e00000 	addik	r7, r0, 0
9000f264:	31000042 	addik	r8, r0, 66
9000f268:	b9f425d8 	brlid	r15, 9688	// 90011840 <__udivdi3>
9000f26c:	80000000 	or	r0, r0, r0
9000f270:	10a40000 	addk	r5, r4, r0
9000f274:	10830000 	addk	r4, r3, r0
9000f278:	10c40000 	addk	r6, r4, r0
9000f27c:	10e50000 	addk	r7, r5, r0
9000f280:	b0009002 	imm	-28670
9000f284:	30a02950 	addik	r5, r0, 10576
9000f288:	b9f40bbc 	brlid	r15, 3004	// 9000fe44 <printf>
9000f28c:	80000000 	or	r0, r0, r0

    startTicks = getSystemTicks();
9000f290:	b9f4cbac 	brlid	r15, -13396	// 9000be3c <getSystemTicks>
9000f294:	80000000 	or	r0, r0, r0
9000f298:	10a40000 	addk	r5, r4, r0
9000f29c:	10830000 	addk	r4, r3, r0
9000f2a0:	f8930028 	swi	r4, r19, 40
9000f2a4:	f8b3002c 	swi	r5, r19, 44
    byte = nvramReadByte(0);
9000f2a8:	10a00000 	addk	r5, r0, r0
9000f2ac:	b9f4ed60 	brlid	r15, -4768	// 9000e00c <nvramReadByte>
9000f2b0:	80000000 	or	r0, r0, r0
9000f2b4:	f073001c 	sbi	r3, r19, 28
    endTicks = getSystemTicks();
9000f2b8:	b9f4cb84 	brlid	r15, -13436	// 9000be3c <getSystemTicks>
9000f2bc:	80000000 	or	r0, r0, r0
9000f2c0:	10a40000 	addk	r5, r4, r0
9000f2c4:	10830000 	addk	r4, r3, r0
9000f2c8:	f8930020 	swi	r4, r19, 32
9000f2cc:	f8b30024 	swi	r5, r19, 36
    printf("Byte Read: 0x%02x - Elapsed time %llu us\n", byte, TICKS_TO_USEC(endTicks - startTicks));
9000f2d0:	e2d3001c 	lbui	r22, r19, 28
9000f2d4:	e8d30020 	lwi	r6, r19, 32
9000f2d8:	e8f30024 	lwi	r7, r19, 36
9000f2dc:	e8930028 	lwi	r4, r19, 40
9000f2e0:	e8b3002c 	lwi	r5, r19, 44
9000f2e4:	04a53800 	rsub	r5, r5, r7
9000f2e8:	0c843000 	rsubc	r4, r4, r6
9000f2ec:	10c50000 	addk	r6, r5, r0
9000f2f0:	10a40000 	addk	r5, r4, r0
9000f2f4:	30e00000 	addik	r7, r0, 0
9000f2f8:	31000042 	addik	r8, r0, 66
9000f2fc:	b9f42544 	brlid	r15, 9540	// 90011840 <__udivdi3>
9000f300:	80000000 	or	r0, r0, r0
9000f304:	10a40000 	addk	r5, r4, r0
9000f308:	10830000 	addk	r4, r3, r0
9000f30c:	11040000 	addk	r8, r4, r0
9000f310:	11250000 	addk	r9, r5, r0
9000f314:	b0009002 	imm	-28670
9000f318:	30a02924 	addik	r5, r0, 10532
9000f31c:	10d60000 	addk	r6, r22, r0
9000f320:	10e80000 	addk	r7, r8, r0
9000f324:	11090000 	addk	r8, r9, r0
9000f328:	b9f40b1c 	brlid	r15, 2844	// 9000fe44 <printf>
9000f32c:	80000000 	or	r0, r0, r0


    printf("NVRAM Tests complete.\n");
9000f330:	b0009002 	imm	-28670
9000f334:	30a02974 	addik	r5, r0, 10612
9000f338:	b9f40c00 	brlid	r15, 3072	// 9000ff38 <puts>
9000f33c:	80000000 	or	r0, r0, r0
}
9000f340:	e9e10000 	lwi	r15, r1, 0
9000f344:	10330000 	addk	r1, r19, r0
9000f348:	ea610030 	lwi	r19, r1, 48
9000f34c:	eac10034 	lwi	r22, r1, 52
9000f350:	30210038 	addik	r1, r1, 56
9000f354:	b60f0008 	rtsd	r15, 8
9000f358:	80000000 	or	r0, r0, r0

9000f35c <readImageHeaderFromRam>:


#endif //#ifndef BOOTLOADER


///////////////////////////////////////////////////
// Local functions

static void readImageHeaderFromRam(ImageHeader* imageHeader, void* image)
{
9000f35c:	3021fff8 	addik	r1, r1, -8
9000f360:	fa610004 	swi	r19, r1, 4
9000f364:	12610000 	addk	r19, r1, r0
9000f368:	f8b3000c 	swi	r5, r19, 12
9000f36c:	f8d30010 	swi	r6, r19, 16
    memcpy((uint8*)&imageHeader->imageSize, image + FLASH_OFFSET_IMAGE_SIZE, sizeof(imageHeader->imageSize));
9000f370:	e873000c 	lwi	r3, r19, 12
9000f374:	10a30000 	addk	r5, r3, r0
9000f378:	e8930010 	lwi	r4, r19, 16
9000f37c:	e0640000 	lbui	r3, r4, 0
9000f380:	f0650000 	sbi	r3, r5, 0
9000f384:	e0640001 	lbui	r3, r4, 1
9000f388:	f0650001 	sbi	r3, r5, 1
9000f38c:	e0640002 	lbui	r3, r4, 2
9000f390:	f0650002 	sbi	r3, r5, 2
9000f394:	e0640003 	lbui	r3, r4, 3
9000f398:	f0650003 	sbi	r3, r5, 3
    memcpy((uint8*)&imageHeader->imageEnd, image + FLASH_OFFSET_IMAGE_END, sizeof(imageHeader->imageEnd));
9000f39c:	e873000c 	lwi	r3, r19, 12
9000f3a0:	30630004 	addik	r3, r3, 4
9000f3a4:	10a30000 	addk	r5, r3, r0
9000f3a8:	e8730010 	lwi	r3, r19, 16
9000f3ac:	30830004 	addik	r4, r3, 4
9000f3b0:	e0640000 	lbui	r3, r4, 0
9000f3b4:	f0650000 	sbi	r3, r5, 0
9000f3b8:	e0640001 	lbui	r3, r4, 1
9000f3bc:	f0650001 	sbi	r3, r5, 1
9000f3c0:	e0640002 	lbui	r3, r4, 2
9000f3c4:	f0650002 	sbi	r3, r5, 2
9000f3c8:	e0640003 	lbui	r3, r4, 3
9000f3cc:	f0650003 	sbi	r3, r5, 3
    memcpy((uint8*)&imageHeader->entryPoint, image + FLASH_OFFSET_ENTRY_POINT, sizeof(imageHeader->entryPoint));
9000f3d0:	e873000c 	lwi	r3, r19, 12
9000f3d4:	30630008 	addik	r3, r3, 8
9000f3d8:	10a30000 	addk	r5, r3, r0
9000f3dc:	e8730010 	lwi	r3, r19, 16
9000f3e0:	30830008 	addik	r4, r3, 8
9000f3e4:	e0640000 	lbui	r3, r4, 0
9000f3e8:	f0650000 	sbi	r3, r5, 0
9000f3ec:	e0640001 	lbui	r3, r4, 1
9000f3f0:	f0650001 	sbi	r3, r5, 1
9000f3f4:	e0640002 	lbui	r3, r4, 2
9000f3f8:	f0650002 	sbi	r3, r5, 2
9000f3fc:	e0640003 	lbui	r3, r4, 3
9000f400:	f0650003 	sbi	r3, r5, 3
}
9000f404:	10330000 	addk	r1, r19, r0
9000f408:	ea610004 	lwi	r19, r1, 4
9000f40c:	30210008 	addik	r1, r1, 8
9000f410:	b60f0008 	rtsd	r15, 8
9000f414:	80000000 	or	r0, r0, r0

9000f418 <readImageHeaderFromFlash>:



static void readImageHeaderFromFlash(ImageHeader* imageHeader)
{
9000f418:	3021ffe0 	addik	r1, r1, -32
9000f41c:	f9e10000 	swi	r15, r1, 0
9000f420:	fa61001c 	swi	r19, r1, 28
9000f424:	12610000 	addk	r19, r1, r0
9000f428:	f8b30024 	swi	r5, r19, 36
    readFlash(FLASH_OFFSET_IMAGE_SIZE, (uint8*)&imageHeader->imageSize, sizeof(imageHeader->imageSize));
9000f42c:	e8730024 	lwi	r3, r19, 36
9000f430:	10a00000 	addk	r5, r0, r0
9000f434:	10c30000 	addk	r6, r3, r0
9000f438:	30e00004 	addik	r7, r0, 4
9000f43c:	b9f4d234 	brlid	r15, -11724	// 9000c670 <readFlash>
9000f440:	80000000 	or	r0, r0, r0
    readFlash(FLASH_OFFSET_IMAGE_END, (uint8*)&imageHeader->imageEnd, sizeof(imageHeader->imageEnd));
9000f444:	e8730024 	lwi	r3, r19, 36
9000f448:	30630004 	addik	r3, r3, 4
9000f44c:	30a00004 	addik	r5, r0, 4
9000f450:	10c30000 	addk	r6, r3, r0
9000f454:	30e00004 	addik	r7, r0, 4
9000f458:	b9f4d218 	brlid	r15, -11752	// 9000c670 <readFlash>
9000f45c:	80000000 	or	r0, r0, r0
    readFlash(FLASH_OFFSET_ENTRY_POINT, (uint8*)&imageHeader->entryPoint, sizeof(imageHeader->entryPoint));
9000f460:	e8730024 	lwi	r3, r19, 36
9000f464:	30630008 	addik	r3, r3, 8
9000f468:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
9000f46c:	10c30000 	addk	r6, r3, r0
9000f470:	30e00004 	addik	r7, r0, 4
9000f474:	b9f4d1fc 	brlid	r15, -11780	// 9000c670 <readFlash>
9000f478:	80000000 	or	r0, r0, r0
}
9000f47c:	e9e10000 	lwi	r15, r1, 0
9000f480:	10330000 	addk	r1, r19, r0
9000f484:	ea61001c 	lwi	r19, r1, 28
9000f488:	30210020 	addik	r1, r1, 32
9000f48c:	b60f0008 	rtsd	r15, 8
9000f490:	80000000 	or	r0, r0, r0

9000f494 <verifyImageHeader>:



static bool verifyImageHeader(ImageHeader* imageHeader)
{
9000f494:	3021ffdc 	addik	r1, r1, -36
9000f498:	f9e10000 	swi	r15, r1, 0
9000f49c:	fa610020 	swi	r19, r1, 32
9000f4a0:	12610000 	addk	r19, r1, r0
9000f4a4:	f8b30028 	swi	r5, r19, 40
    printf("Header: Size  0x%08lx\n", imageHeader->imageSize);
9000f4a8:	e8730028 	lwi	r3, r19, 40
9000f4ac:	e8630000 	lwi	r3, r3, 0
9000f4b0:	b0009002 	imm	-28670
9000f4b4:	30a0298c 	addik	r5, r0, 10636
9000f4b8:	10c30000 	addk	r6, r3, r0
9000f4bc:	b9f40988 	brlid	r15, 2440	// 9000fe44 <printf>
9000f4c0:	80000000 	or	r0, r0, r0
    printf("        End   0x%08lx\n", imageHeader->imageEnd);
9000f4c4:	e8730028 	lwi	r3, r19, 40
9000f4c8:	e8630004 	lwi	r3, r3, 4
9000f4cc:	b0009002 	imm	-28670
9000f4d0:	30a029a4 	addik	r5, r0, 10660
9000f4d4:	10c30000 	addk	r6, r3, r0
9000f4d8:	b9f4096c 	brlid	r15, 2412	// 9000fe44 <printf>
9000f4dc:	80000000 	or	r0, r0, r0
    printf("        Entry 0x%08lx\n", imageHeader->entryPoint);
9000f4e0:	e8730028 	lwi	r3, r19, 40
9000f4e4:	e8630008 	lwi	r3, r3, 8
9000f4e8:	b0009002 	imm	-28670
9000f4ec:	30a029bc 	addik	r5, r0, 10684
9000f4f0:	10c30000 	addk	r6, r3, r0
9000f4f4:	b9f40950 	brlid	r15, 2384	// 9000fe44 <printf>
9000f4f8:	80000000 	or	r0, r0, r0
    
    
    if(imageHeader->imageSize  > MAX_FLASH_IMAGE_SIZE)
9000f4fc:	e8730028 	lwi	r3, r19, 40
9000f500:	e8630000 	lwi	r3, r3, 0
9000f504:	b0000010 	imm	16
9000f508:	22400000 	addi	r18, r0, 0
9000f50c:	16439003 	cmpu	r18, r3, r18
9000f510:	bcb20020 	bgei	r18, 32		// 9000f530
    {
        printf("Header: Image size too large\n");
9000f514:	b0009002 	imm	-28670
9000f518:	30a029d4 	addik	r5, r0, 10708
9000f51c:	b9f40a1c 	brlid	r15, 2588	// 9000ff38 <puts>
9000f520:	80000000 	or	r0, r0, r0
        return false;
9000f524:	10600000 	addk	r3, r0, r0
9000f528:	f873001c 	swi	r3, r19, 28
9000f52c:	b8000148 	bri	328		// 9000f674
    }
    if(imageHeader->imageSize  & 0x00000001)
9000f530:	e8730028 	lwi	r3, r19, 40
9000f534:	e8630000 	lwi	r3, r3, 0
9000f538:	a4630001 	andi	r3, r3, 1
9000f53c:	a46300ff 	andi	r3, r3, 255
9000f540:	bc03002c 	beqi	r3, 44		// 9000f56c
    {
        printf("Header: Image not 16-bit aligned (%lu)\n", imageHeader->imageSize);
9000f544:	e8730028 	lwi	r3, r19, 40
9000f548:	e8630000 	lwi	r3, r3, 0
9000f54c:	b0009002 	imm	-28670
9000f550:	30a029f4 	addik	r5, r0, 10740
9000f554:	10c30000 	addk	r6, r3, r0
9000f558:	b9f408ec 	brlid	r15, 2284	// 9000fe44 <printf>
9000f55c:	80000000 	or	r0, r0, r0
        return false;  //Must be 16-bit aligned
9000f560:	10600000 	addk	r3, r0, r0
9000f564:	f873001c 	swi	r3, r19, 28
9000f568:	b800010c 	bri	268		// 9000f674
    }
    if(imageHeader->imageEnd   < XPAR_DDR2_SDRAM_MPMC_BASEADDR)
9000f56c:	e8730028 	lwi	r3, r19, 40
9000f570:	e8630004 	lwi	r3, r3, 4
9000f574:	b0008fff 	imm	-28673
9000f578:	2240ffff 	addi	r18, r0, -1
9000f57c:	16439003 	cmpu	r18, r3, r18
9000f580:	bc52002c 	blti	r18, 44		// 9000f5ac
    {
        printf("Header: Image end address lower than SDRAM Base Addr (0x%08lx)\n", imageHeader->imageEnd);
9000f584:	e8730028 	lwi	r3, r19, 40
9000f588:	e8630004 	lwi	r3, r3, 4
9000f58c:	b0009002 	imm	-28670
9000f590:	30a02a1c 	addik	r5, r0, 10780
9000f594:	10c30000 	addk	r6, r3, r0
9000f598:	b9f408ac 	brlid	r15, 2220	// 9000fe44 <printf>
9000f59c:	80000000 	or	r0, r0, r0
        return false;
9000f5a0:	10600000 	addk	r3, r0, r0
9000f5a4:	f873001c 	swi	r3, r19, 28
9000f5a8:	b80000cc 	bri	204		// 9000f674
    }
    if(imageHeader->imageEnd   > XPAR_DDR2_SDRAM_MPMC_BASEADDR + MAX_RAM_IMAGE_SIZE)
9000f5ac:	e8730028 	lwi	r3, r19, 40
9000f5b0:	e8630004 	lwi	r3, r3, 4
9000f5b4:	b00093df 	imm	-27681
9000f5b8:	2240ffff 	addi	r18, r0, -1
9000f5bc:	16439003 	cmpu	r18, r3, r18
9000f5c0:	bcb2002c 	bgei	r18, 44		// 9000f5ec
    {
        printf("Header: Image end address beyond end of SDRAM (0x%08lx)\n", imageHeader->imageEnd);
9000f5c4:	e8730028 	lwi	r3, r19, 40
9000f5c8:	e8630004 	lwi	r3, r3, 4
9000f5cc:	b0009002 	imm	-28670
9000f5d0:	30a02a5c 	addik	r5, r0, 10844
9000f5d4:	10c30000 	addk	r6, r3, r0
9000f5d8:	b9f4086c 	brlid	r15, 2156	// 9000fe44 <printf>
9000f5dc:	80000000 	or	r0, r0, r0
        return false;
9000f5e0:	10600000 	addk	r3, r0, r0
9000f5e4:	f873001c 	swi	r3, r19, 28
9000f5e8:	b800008c 	bri	140		// 9000f674
    }
    if(imageHeader->entryPoint < XPAR_DDR2_SDRAM_MPMC_BASEADDR)
9000f5ec:	e8730028 	lwi	r3, r19, 40
9000f5f0:	e8630008 	lwi	r3, r3, 8
9000f5f4:	b0008fff 	imm	-28673
9000f5f8:	2240ffff 	addi	r18, r0, -1
9000f5fc:	16439003 	cmpu	r18, r3, r18
9000f600:	bc52002c 	blti	r18, 44		// 9000f62c
    {
        printf("Header: Image entry point lower than SDRAM Base Addr (0x%08lx)\n", imageHeader->entryPoint);
9000f604:	e8730028 	lwi	r3, r19, 40
9000f608:	e8630008 	lwi	r3, r3, 8
9000f60c:	b0009002 	imm	-28670
9000f610:	30a02a98 	addik	r5, r0, 10904
9000f614:	10c30000 	addk	r6, r3, r0
9000f618:	b9f4082c 	brlid	r15, 2092	// 9000fe44 <printf>
9000f61c:	80000000 	or	r0, r0, r0
        return false;
9000f620:	10600000 	addk	r3, r0, r0
9000f624:	f873001c 	swi	r3, r19, 28
9000f628:	b800004c 	bri	76		// 9000f674
    }
    if(imageHeader->entryPoint > XPAR_DDR2_SDRAM_MPMC_BASEADDR + MAX_RAM_IMAGE_SIZE)
9000f62c:	e8730028 	lwi	r3, r19, 40
9000f630:	e8630008 	lwi	r3, r3, 8
9000f634:	b00093df 	imm	-27681
9000f638:	2240ffff 	addi	r18, r0, -1
9000f63c:	16439003 	cmpu	r18, r3, r18
9000f640:	bcb2002c 	bgei	r18, 44		// 9000f66c
    {
        printf("Header: Image entry point beyond end of SDRAM (0x%08lx)\n", imageHeader->entryPoint);
9000f644:	e8730028 	lwi	r3, r19, 40
9000f648:	e8630008 	lwi	r3, r3, 8
9000f64c:	b0009002 	imm	-28670
9000f650:	30a02ad8 	addik	r5, r0, 10968
9000f654:	10c30000 	addk	r6, r3, r0
9000f658:	b9f407ec 	brlid	r15, 2028	// 9000fe44 <printf>
9000f65c:	80000000 	or	r0, r0, r0
        return false;
9000f660:	10600000 	addk	r3, r0, r0
9000f664:	f873001c 	swi	r3, r19, 28
9000f668:	b800000c 	bri	12		// 9000f674
    }

    return true;
9000f66c:	30600001 	addik	r3, r0, 1
9000f670:	f873001c 	swi	r3, r19, 28
9000f674:	e873001c 	lwi	r3, r19, 28
}
9000f678:	e9e10000 	lwi	r15, r1, 0
9000f67c:	10330000 	addk	r1, r19, r0
9000f680:	ea610020 	lwi	r19, r1, 32
9000f684:	30210024 	addik	r1, r1, 36
9000f688:	b60f0008 	rtsd	r15, 8
9000f68c:	80000000 	or	r0, r0, r0

9000f690 <findValidNvramBlockIndex>:



#ifndef BOOTLOADER
//Don't include NVRAM functions in bootloader

static int findValidNvramBlockIndex()
{
9000f690:	3021ffd4 	addik	r1, r1, -44
9000f694:	f9e10000 	swi	r15, r1, 0
9000f698:	fa610028 	swi	r19, r1, 40
9000f69c:	12610000 	addk	r19, r1, r0
    uint32 nvramBlock;

    for(nvramBlock = 0; nvramBlock < NVRAM_BLOCKS; nvramBlock++)
9000f6a0:	f813001c 	swi	r0, r19, 28
9000f6a4:	b8000058 	bri	88		// 9000f6fc
    {
        uint16 buf;
        
        readFlash(NVRAM_BLOCK_KEY_ADDR(nvramBlock), (uint8*)&buf, sizeof(buf));
9000f6a8:	e893001c 	lwi	r4, r19, 28
9000f6ac:	30601080 	addik	r3, r0, 4224
9000f6b0:	40641800 	mul	r3, r4, r3
9000f6b4:	b0000020 	imm	32
9000f6b8:	30633a00 	addik	r3, r3, 14848
9000f6bc:	30930020 	addik	r4, r19, 32
9000f6c0:	10a30000 	addk	r5, r3, r0
9000f6c4:	10c40000 	addk	r6, r4, r0
9000f6c8:	30e00002 	addik	r7, r0, 2
9000f6cc:	b9f4cfa4 	brlid	r15, -12380	// 9000c670 <readFlash>
9000f6d0:	80000000 	or	r0, r0, r0
        if(buf == NVRAM_BLOCK_VALID)
9000f6d4:	e4730020 	lhui	r3, r19, 32
9000f6d8:	b0000000 	imm	0
9000f6dc:	aa43a5a5 	xori	r18, r3, -23131
9000f6e0:	bc320010 	bnei	r18, 16		// 9000f6f0
        {
            // Current valid block found
            return nvramBlock;
9000f6e4:	e873001c 	lwi	r3, r19, 28
9000f6e8:	f8730024 	swi	r3, r19, 36
9000f6ec:	b8000038 	bri	56		// 9000f724
9000f6f0:	e873001c 	lwi	r3, r19, 28
9000f6f4:	30630001 	addik	r3, r3, 1
9000f6f8:	f873001c 	swi	r3, r19, 28
9000f6fc:	e873001c 	lwi	r3, r19, 28
9000f700:	22400007 	addi	r18, r0, 7
9000f704:	16439003 	cmpu	r18, r3, r18
9000f708:	bcb2ffa0 	bgei	r18, -96		// 9000f6a8
        }
    }
    
    printf("No valid NVRAM Blocks found\n");
9000f70c:	b0009002 	imm	-28670
9000f710:	30a02b14 	addik	r5, r0, 11028
9000f714:	b9f40824 	brlid	r15, 2084	// 9000ff38 <puts>
9000f718:	80000000 	or	r0, r0, r0

    return -1;
9000f71c:	3060ffff 	addik	r3, r0, -1
9000f720:	f8730024 	swi	r3, r19, 36
9000f724:	e8730024 	lwi	r3, r19, 36
}
9000f728:	e9e10000 	lwi	r15, r1, 0
9000f72c:	10330000 	addk	r1, r19, r0
9000f730:	ea610028 	lwi	r19, r1, 40
9000f734:	3021002c 	addik	r1, r1, 44
9000f738:	b60f0008 	rtsd	r15, 8
9000f73c:	80000000 	or	r0, r0, r0

9000f740 <intcInit>:
///////////////////////////////////////////////////
// Interface functions

void intcInit()
{
9000f740:	3021ffdc 	addik	r1, r1, -36
9000f744:	f9e10000 	swi	r15, r1, 0
9000f748:	fa610020 	swi	r19, r1, 32
9000f74c:	12610000 	addk	r19, r1, r0
    XStatus status;

    status = XIntc_Initialize(&interruptController, XPAR_INTC_0_DEVICE_ID);
9000f750:	b0009002 	imm	-28670
9000f754:	30a0fdb8 	addik	r5, r0, -584
9000f758:	10c00000 	addk	r6, r0, r0
9000f75c:	b9f43120 	brlid	r15, 12576	// 9001287c <XIntc_Initialize>
9000f760:	80000000 	or	r0, r0, r0
9000f764:	f873001c 	swi	r3, r19, 28
    ASSERT(status == XST_SUCCESS);
9000f768:	e873001c 	lwi	r3, r19, 28
9000f76c:	bc030028 	beqi	r3, 40		// 9000f794
9000f770:	94110002 	msrclr	r0, 2
9000f774:	b0009002 	imm	-28670
9000f778:	30a02b30 	addik	r5, r0, 11056
9000f77c:	b0009002 	imm	-28670
9000f780:	30c02b48 	addik	r6, r0, 11080
9000f784:	30e00031 	addik	r7, r0, 49
9000f788:	b9f4cc9c 	brlid	r15, -13156	// 9000c424 <printAssert>
9000f78c:	80000000 	or	r0, r0, r0
9000f790:	b8000000 	bri	0		// 9000f790

    status = XIntc_Start(&interruptController, XIN_REAL_MODE /*XIN_SIMULATION_MODE*/);
9000f794:	b0009002 	imm	-28670
9000f798:	30a0fdb8 	addik	r5, r0, -584
9000f79c:	30c00001 	addik	r6, r0, 1
9000f7a0:	b9f42ff8 	brlid	r15, 12280	// 90012798 <XIntc_Start>
9000f7a4:	80000000 	or	r0, r0, r0
9000f7a8:	f873001c 	swi	r3, r19, 28
    ASSERT(status == XST_SUCCESS);
9000f7ac:	e873001c 	lwi	r3, r19, 28
9000f7b0:	bc030028 	beqi	r3, 40		// 9000f7d8
9000f7b4:	94110002 	msrclr	r0, 2
9000f7b8:	b0009002 	imm	-28670
9000f7bc:	30a02b30 	addik	r5, r0, 11056
9000f7c0:	b0009002 	imm	-28670
9000f7c4:	30c02b48 	addik	r6, r0, 11080
9000f7c8:	30e00034 	addik	r7, r0, 52
9000f7cc:	b9f4cc58 	brlid	r15, -13224	// 9000c424 <printAssert>
9000f7d0:	80000000 	or	r0, r0, r0
9000f7d4:	b8000000 	bri	0		// 9000f7d4
}
9000f7d8:	e9e10000 	lwi	r15, r1, 0
9000f7dc:	10330000 	addk	r1, r19, r0
9000f7e0:	ea610020 	lwi	r19, r1, 32
9000f7e4:	30210024 	addik	r1, r1, 36
9000f7e8:	b60f0008 	rtsd	r15, 8
9000f7ec:	80000000 	or	r0, r0, r0

9000f7f0 <registerInterruptHandler>:



bool registerInterruptHandler(uint8 interruptId, InterruptHandler handler, void* callBackRef)
{
9000f7f0:	3021ffe0 	addik	r1, r1, -32
9000f7f4:	f9e10000 	swi	r15, r1, 0
9000f7f8:	fa61001c 	swi	r19, r1, 28
9000f7fc:	12610000 	addk	r19, r1, r0
9000f800:	f0b30024 	sbi	r5, r19, 36
9000f804:	f8d30028 	swi	r6, r19, 40
9000f808:	f8f3002c 	swi	r7, r19, 44
    return XIntc_Connect(&interruptController, interruptId, (XInterruptHandler)handler, callBackRef) == XST_SUCCESS;
9000f80c:	b0009002 	imm	-28670
9000f810:	30a0fdb8 	addik	r5, r0, -584
9000f814:	e0d30024 	lbui	r6, r19, 36
9000f818:	e8f30028 	lwi	r7, r19, 40
9000f81c:	e913002c 	lwi	r8, r19, 44
9000f820:	b9f42dfc 	brlid	r15, 11772	// 9001261c <XIntc_Connect>
9000f824:	80000000 	or	r0, r0, r0
9000f828:	88630400 	pcmpeq	r3, r3, r0
}
9000f82c:	e9e10000 	lwi	r15, r1, 0
9000f830:	10330000 	addk	r1, r19, r0
9000f834:	ea61001c 	lwi	r19, r1, 28
9000f838:	30210020 	addik	r1, r1, 32
9000f83c:	b60f0008 	rtsd	r15, 8
9000f840:	80000000 	or	r0, r0, r0

9000f844 <enableInterrupt>:



void enableInterrupt(uint8 interruptId)
{
9000f844:	3021ffe0 	addik	r1, r1, -32
9000f848:	f9e10000 	swi	r15, r1, 0
9000f84c:	fa61001c 	swi	r19, r1, 28
9000f850:	12610000 	addk	r19, r1, r0
9000f854:	f0b30024 	sbi	r5, r19, 36
    XIntc_Enable(&interruptController, interruptId);
9000f858:	b0009002 	imm	-28670
9000f85c:	30a0fdb8 	addik	r5, r0, -584
9000f860:	e0d30024 	lbui	r6, r19, 36
9000f864:	b9f42c18 	brlid	r15, 11288	// 9001247c <XIntc_Enable>
9000f868:	80000000 	or	r0, r0, r0
}
9000f86c:	e9e10000 	lwi	r15, r1, 0
9000f870:	10330000 	addk	r1, r19, r0
9000f874:	ea61001c 	lwi	r19, r1, 28
9000f878:	30210020 	addik	r1, r1, 32
9000f87c:	b60f0008 	rtsd	r15, 8
9000f880:	80000000 	or	r0, r0, r0

9000f884 <disableInterrupt>:



void disableInterrupt(uint8 interruptId)
{
9000f884:	3021ffe0 	addik	r1, r1, -32
9000f888:	f9e10000 	swi	r15, r1, 0
9000f88c:	fa61001c 	swi	r19, r1, 28
9000f890:	12610000 	addk	r19, r1, r0
9000f894:	f0b30024 	sbi	r5, r19, 36
    XIntc_Disable(&interruptController, interruptId);
9000f898:	b0009002 	imm	-28670
9000f89c:	30a0fdb8 	addik	r5, r0, -584
9000f8a0:	e0d30024 	lbui	r6, r19, 36
9000f8a4:	b9f42b14 	brlid	r15, 11028	// 900123b8 <XIntc_Disable>
9000f8a8:	80000000 	or	r0, r0, r0
}
9000f8ac:	e9e10000 	lwi	r15, r1, 0
9000f8b0:	10330000 	addk	r1, r19, r0
9000f8b4:	ea61001c 	lwi	r19, r1, 28
9000f8b8:	30210020 	addik	r1, r1, 32
9000f8bc:	b60f0008 	rtsd	r15, 8
9000f8c0:	80000000 	or	r0, r0, r0

9000f8c4 <lcdInit>:
///////////////////////////////////////////////////
// Interface functions

void lcdInit()
{
9000f8c4:	3021ffe0 	addik	r1, r1, -32
9000f8c8:	f9e10000 	swi	r15, r1, 0
9000f8cc:	fa61001c 	swi	r19, r1, 28
9000f8d0:	12610000 	addk	r19, r1, r0
    LCD.enable = CLR;
9000f8d4:	b000c360 	imm	-15520
9000f8d8:	30600000 	addik	r3, r0, 0
9000f8dc:	f8030008 	swi	r0, r3, 8
    LCD.rw     = CLR;
9000f8e0:	b000c360 	imm	-15520
9000f8e4:	30600000 	addik	r3, r0, 0
9000f8e8:	f8030000 	swi	r0, r3, 0
    LCD.rs     = CLR;
9000f8ec:	b000c360 	imm	-15520
9000f8f0:	30600000 	addik	r3, r0, 0
9000f8f4:	f8030004 	swi	r0, r3, 4
    LCD.data   = 0x00;
9000f8f8:	b000c360 	imm	-15520
9000f8fc:	30600000 	addik	r3, r0, 0
9000f900:	f803000c 	swi	r0, r3, 12

    udelay(40000);
9000f904:	b0000000 	imm	0
9000f908:	30a09c40 	addik	r5, r0, -25536
9000f90c:	b9f4c774 	brlid	r15, -14476	// 9000c080 <udelay>
9000f910:	80000000 	or	r0, r0, r0

    LCD.data = LCD_FUNCTION_SET;
9000f914:	b000c360 	imm	-15520
9000f918:	30800000 	addik	r4, r0, 0
9000f91c:	30600038 	addik	r3, r0, 56
9000f920:	f864000c 	swi	r3, r4, 12
    lcdPulseEnable();
9000f924:	b9f402cc 	brlid	r15, 716	// 9000fbf0 <lcdPulseEnable>
9000f928:	80000000 	or	r0, r0, r0

    udelay(37);
9000f92c:	30a00025 	addik	r5, r0, 37
9000f930:	b9f4c750 	brlid	r15, -14512	// 9000c080 <udelay>
9000f934:	80000000 	or	r0, r0, r0
    
    LCD.data = LCD_FUNCTION_SET;
9000f938:	b000c360 	imm	-15520
9000f93c:	30800000 	addik	r4, r0, 0
9000f940:	30600038 	addik	r3, r0, 56
9000f944:	f864000c 	swi	r3, r4, 12
    lcdPulseEnable();
9000f948:	b9f402a8 	brlid	r15, 680	// 9000fbf0 <lcdPulseEnable>
9000f94c:	80000000 	or	r0, r0, r0

    udelay(37);
9000f950:	30a00025 	addik	r5, r0, 37
9000f954:	b9f4c72c 	brlid	r15, -14548	// 9000c080 <udelay>
9000f958:	80000000 	or	r0, r0, r0
    
    LCD.data = LCD_CMD_DISPLAY_ON_OFF | DISPLAY_MASK;
9000f95c:	b000c360 	imm	-15520
9000f960:	30800000 	addik	r4, r0, 0
9000f964:	3060000c 	addik	r3, r0, 12
9000f968:	f864000c 	swi	r3, r4, 12
    lcdPulseEnable();
9000f96c:	b9f40284 	brlid	r15, 644	// 9000fbf0 <lcdPulseEnable>
9000f970:	80000000 	or	r0, r0, r0

    udelay(37);
9000f974:	30a00025 	addik	r5, r0, 37
9000f978:	b9f4c708 	brlid	r15, -14584	// 9000c080 <udelay>
9000f97c:	80000000 	or	r0, r0, r0
    
    LCD.data = LCD_CMD_CLEAR_DISP;
9000f980:	b000c360 	imm	-15520
9000f984:	30800000 	addik	r4, r0, 0
9000f988:	30600001 	addik	r3, r0, 1
9000f98c:	f864000c 	swi	r3, r4, 12
    lcdPulseEnable();
9000f990:	b9f40260 	brlid	r15, 608	// 9000fbf0 <lcdPulseEnable>
9000f994:	80000000 	or	r0, r0, r0

    udelay(1520);
9000f998:	30a005f0 	addik	r5, r0, 1520
9000f99c:	b9f4c6e4 	brlid	r15, -14620	// 9000c080 <udelay>
9000f9a0:	80000000 	or	r0, r0, r0
    
    LCD.data = LCD_CMD_ENTRY_MODE_SET | ENTRY_MODE_INC_MASK;
9000f9a4:	b000c360 	imm	-15520
9000f9a8:	30800000 	addik	r4, r0, 0
9000f9ac:	30600006 	addik	r3, r0, 6
9000f9b0:	f864000c 	swi	r3, r4, 12
    lcdPulseEnable();
9000f9b4:	b9f4023c 	brlid	r15, 572	// 9000fbf0 <lcdPulseEnable>
9000f9b8:	80000000 	or	r0, r0, r0
}
9000f9bc:	e9e10000 	lwi	r15, r1, 0
9000f9c0:	10330000 	addk	r1, r19, r0
9000f9c4:	ea61001c 	lwi	r19, r1, 28
9000f9c8:	30210020 	addik	r1, r1, 32
9000f9cc:	b60f0008 	rtsd	r15, 8
9000f9d0:	80000000 	or	r0, r0, r0

9000f9d4 <lcdClear>:



void lcdClear()
{
9000f9d4:	3021ffe0 	addik	r1, r1, -32
9000f9d8:	f9e10000 	swi	r15, r1, 0
9000f9dc:	fa61001c 	swi	r19, r1, 28
9000f9e0:	12610000 	addk	r19, r1, r0
    sendCommand(LCD_CMD_CLEAR_DISP);
9000f9e4:	30a00001 	addik	r5, r0, 1
9000f9e8:	b9f40298 	brlid	r15, 664	// 9000fc80 <sendCommand>
9000f9ec:	80000000 	or	r0, r0, r0
}
9000f9f0:	e9e10000 	lwi	r15, r1, 0
9000f9f4:	10330000 	addk	r1, r19, r0
9000f9f8:	ea61001c 	lwi	r19, r1, 28
9000f9fc:	30210020 	addik	r1, r1, 32
9000fa00:	b60f0008 	rtsd	r15, 8
9000fa04:	80000000 	or	r0, r0, r0

9000fa08 <lcdLineDisplay>:



void lcdLineDisplay(uint8 line, char* text)
{
9000fa08:	3021ffdc 	addik	r1, r1, -36
9000fa0c:	f9e10000 	swi	r15, r1, 0
9000fa10:	fa610020 	swi	r19, r1, 32
9000fa14:	12610000 	addk	r19, r1, r0
9000fa18:	f0b30028 	sbi	r5, r19, 40
9000fa1c:	f8d3002c 	swi	r6, r19, 44
    if(!lcdPresent)
9000fa20:	b0009002 	imm	-28670
9000fa24:	e8603a9c 	lwi	r3, r0, 15004
9000fa28:	bc0300a4 	beqi	r3, 164		// 9000facc
    {
        return;
    }

    int i;
    
    if(line > 1)
9000fa2c:	e0730028 	lbui	r3, r19, 40
9000fa30:	22400001 	addi	r18, r0, 1
9000fa34:	16439003 	cmpu	r18, r3, r18
9000fa38:	bc520094 	blti	r18, 148		// 9000facc
    {
        return;
    }
    
    if(line == 0)
9000fa3c:	e0730028 	lbui	r3, r19, 40
9000fa40:	bc230014 	bnei	r3, 20		// 9000fa54
    {
        setDdramAddr(0);
9000fa44:	10a00000 	addk	r5, r0, r0
9000fa48:	b9f401e0 	brlid	r15, 480	// 9000fc28 <setDdramAddr>
9000fa4c:	80000000 	or	r0, r0, r0
9000fa50:	b8000010 	bri	16		// 9000fa60
    }
    else
    {
        setDdramAddr(40);
9000fa54:	30a00028 	addik	r5, r0, 40
9000fa58:	b9f401d0 	brlid	r15, 464	// 9000fc28 <setDdramAddr>
9000fa5c:	80000000 	or	r0, r0, r0
    }
    
    for(i = 0; i < LCD_LINE_LENGTH; i++)
9000fa60:	f813001c 	swi	r0, r19, 28
9000fa64:	b8000058 	bri	88		// 9000fabc
    {
        if(*text)
9000fa68:	e873002c 	lwi	r3, r19, 44
9000fa6c:	e0630000 	lbui	r3, r3, 0
9000fa70:	90630060 	sext8	r3, r3
9000fa74:	bc030030 	beqi	r3, 48		// 9000faa4
        {
            sendData(*text++);
9000fa78:	e873002c 	lwi	r3, r19, 44
9000fa7c:	e0630000 	lbui	r3, r3, 0
9000fa80:	90630060 	sext8	r3, r3
9000fa84:	a48300ff 	andi	r4, r3, 255
9000fa88:	e873002c 	lwi	r3, r19, 44
9000fa8c:	30630001 	addik	r3, r3, 1
9000fa90:	f873002c 	swi	r3, r19, 44
9000fa94:	10a40000 	addk	r5, r4, r0
9000fa98:	b9f40258 	brlid	r15, 600	// 9000fcf0 <sendData>
9000fa9c:	80000000 	or	r0, r0, r0
9000faa0:	b8000010 	bri	16		// 9000fab0
        }
        else
        {
            sendData(' ');
9000faa4:	30a00020 	addik	r5, r0, 32	// 20 <_vector_hw_exception>
9000faa8:	b9f40248 	brlid	r15, 584	// 9000fcf0 <sendData>
9000faac:	80000000 	or	r0, r0, r0
9000fab0:	e873001c 	lwi	r3, r19, 28
9000fab4:	30630001 	addik	r3, r3, 1
9000fab8:	f873001c 	swi	r3, r19, 28
9000fabc:	e873001c 	lwi	r3, r19, 28
9000fac0:	3240000f 	addik	r18, r0, 15
9000fac4:	16439001 	cmp	r18, r3, r18
9000fac8:	bcb2ffa0 	bgei	r18, -96		// 9000fa68
        }
    }
}
9000facc:	e9e10000 	lwi	r15, r1, 0
9000fad0:	10330000 	addk	r1, r19, r0
9000fad4:	ea610020 	lwi	r19, r1, 32
9000fad8:	30210024 	addik	r1, r1, 36
9000fadc:	b60f0008 	rtsd	r15, 8
9000fae0:	80000000 	or	r0, r0, r0

9000fae4 <lcdLinePrintf>:



int lcdLinePrintf(uint8 line, const char *msg, ...)
{
9000fae4:	f8c10008 	swi	r6, r1, 8
9000fae8:	f8e1000c 	swi	r7, r1, 12
9000faec:	f9010010 	swi	r8, r1, 16
9000faf0:	f9210014 	swi	r9, r1, 20
9000faf4:	f9410018 	swi	r10, r1, 24
9000faf8:	3021ff10 	addik	r1, r1, -240
9000fafc:	f9e10000 	swi	r15, r1, 0
9000fb00:	fa6100ec 	swi	r19, r1, 236
9000fb04:	12610000 	addk	r19, r1, r0
9000fb08:	f0b300f4 	sbi	r5, r19, 244
9000fb0c:	f8d300f8 	swi	r6, r19, 248
    #define BUF_SIZE 200
    
    int result;
    char buf[BUF_SIZE];
    
    va_list argp;
    
    va_start (argp, msg);
9000fb10:	307300fc 	addik	r3, r19, 252
9000fb14:	f87300e8 	swi	r3, r19, 232
    //TODO: use vsnprintf to protect buffer
    result = vsprintf (buf, msg, argp);
9000fb18:	e89300e8 	lwi	r4, r19, 232
9000fb1c:	30730020 	addik	r3, r19, 32
9000fb20:	10a30000 	addk	r5, r3, r0
9000fb24:	e8d300f8 	lwi	r6, r19, 248
9000fb28:	10e40000 	addk	r7, r4, r0
9000fb2c:	b9f4134c 	brlid	r15, 4940	// 90010e78 <vsprintf>
9000fb30:	80000000 	or	r0, r0, r0
9000fb34:	f873001c 	swi	r3, r19, 28
    va_end (argp);
    
    printf("LCD: '%s'\n", buf);
9000fb38:	30730020 	addik	r3, r19, 32
9000fb3c:	b0009002 	imm	-28670
9000fb40:	30a02b5c 	addik	r5, r0, 11100
9000fb44:	10c30000 	addk	r6, r3, r0
9000fb48:	b9f402fc 	brlid	r15, 764	// 9000fe44 <printf>
9000fb4c:	80000000 	or	r0, r0, r0
    lcdLineDisplay(line, buf);
9000fb50:	30730020 	addik	r3, r19, 32
9000fb54:	e0b300f4 	lbui	r5, r19, 244
9000fb58:	10c30000 	addk	r6, r3, r0
9000fb5c:	b9f4feac 	brlid	r15, -340	// 9000fa08 <lcdLineDisplay>
9000fb60:	80000000 	or	r0, r0, r0
    return result;
9000fb64:	e873001c 	lwi	r3, r19, 28
}
9000fb68:	e9e10000 	lwi	r15, r1, 0
9000fb6c:	10330000 	addk	r1, r19, r0
9000fb70:	ea6100ec 	lwi	r19, r1, 236
9000fb74:	302100f0 	addik	r1, r1, 240
9000fb78:	b60f0008 	rtsd	r15, 8
9000fb7c:	80000000 	or	r0, r0, r0

9000fb80 <lcdSetEnable>:



///////////////////////////////////////////////////
// Local functions

static void lcdSetEnable()
{
9000fb80:	3021ffe0 	addik	r1, r1, -32
9000fb84:	f9e10000 	swi	r15, r1, 0
9000fb88:	fa61001c 	swi	r19, r1, 28
9000fb8c:	12610000 	addk	r19, r1, r0
    LCD.enable = SET;
9000fb90:	b000c360 	imm	-15520
9000fb94:	30800000 	addik	r4, r0, 0
9000fb98:	30600001 	addik	r3, r0, 1
9000fb9c:	f8640008 	swi	r3, r4, 8
    udelay(12);
9000fba0:	30a0000c 	addik	r5, r0, 12
9000fba4:	b9f4c4dc 	brlid	r15, -15140	// 9000c080 <udelay>
9000fba8:	80000000 	or	r0, r0, r0
}
9000fbac:	e9e10000 	lwi	r15, r1, 0
9000fbb0:	10330000 	addk	r1, r19, r0
9000fbb4:	ea61001c 	lwi	r19, r1, 28
9000fbb8:	30210020 	addik	r1, r1, 32
9000fbbc:	b60f0008 	rtsd	r15, 8
9000fbc0:	80000000 	or	r0, r0, r0

9000fbc4 <lcdClrEnable>:



static void lcdClrEnable()
{
9000fbc4:	3021fff8 	addik	r1, r1, -8
9000fbc8:	fa610004 	swi	r19, r1, 4
9000fbcc:	12610000 	addk	r19, r1, r0
    LCD.enable = CLR;
9000fbd0:	b000c360 	imm	-15520
9000fbd4:	30600000 	addik	r3, r0, 0
9000fbd8:	f8030008 	swi	r0, r3, 8
}
9000fbdc:	10330000 	addk	r1, r19, r0
9000fbe0:	ea610004 	lwi	r19, r1, 4
9000fbe4:	30210008 	addik	r1, r1, 8
9000fbe8:	b60f0008 	rtsd	r15, 8
9000fbec:	80000000 	or	r0, r0, r0

9000fbf0 <lcdPulseEnable>:



static void lcdPulseEnable()
{
9000fbf0:	3021ffe0 	addik	r1, r1, -32
9000fbf4:	f9e10000 	swi	r15, r1, 0
9000fbf8:	fa61001c 	swi	r19, r1, 28
9000fbfc:	12610000 	addk	r19, r1, r0
    lcdSetEnable();
9000fc00:	b9f4ff80 	brlid	r15, -128	// 9000fb80 <lcdSetEnable>
9000fc04:	80000000 	or	r0, r0, r0
    lcdClrEnable();
9000fc08:	b9f4ffbc 	brlid	r15, -68	// 9000fbc4 <lcdClrEnable>
9000fc0c:	80000000 	or	r0, r0, r0
}
9000fc10:	e9e10000 	lwi	r15, r1, 0
9000fc14:	10330000 	addk	r1, r19, r0
9000fc18:	ea61001c 	lwi	r19, r1, 28
9000fc1c:	30210020 	addik	r1, r1, 32
9000fc20:	b60f0008 	rtsd	r15, 8
9000fc24:	80000000 	or	r0, r0, r0

9000fc28 <setDdramAddr>:



static void setDdramAddr(uint8 addr)
{
9000fc28:	3021ffe0 	addik	r1, r1, -32
9000fc2c:	f9e10000 	swi	r15, r1, 0
9000fc30:	fa61001c 	swi	r19, r1, 28
9000fc34:	12610000 	addk	r19, r1, r0
9000fc38:	f0b30024 	sbi	r5, r19, 36
    sendCommand(LCD_CMD_SET_DGRAM_ADDR | (addr & DDRAM_ADDR_MASK));
9000fc3c:	e0730024 	lbui	r3, r19, 36
9000fc40:	90630060 	sext8	r3, r3
9000fc44:	a46300ff 	andi	r3, r3, 255
9000fc48:	a463007f 	andi	r3, r3, 127
9000fc4c:	3080ff80 	addik	r4, r0, -128
9000fc50:	80632000 	or	r3, r3, r4
9000fc54:	90630060 	sext8	r3, r3
9000fc58:	a46300ff 	andi	r3, r3, 255
9000fc5c:	10a30000 	addk	r5, r3, r0
9000fc60:	b9f40020 	brlid	r15, 32	// 9000fc80 <sendCommand>
9000fc64:	80000000 	or	r0, r0, r0
}
9000fc68:	e9e10000 	lwi	r15, r1, 0
9000fc6c:	10330000 	addk	r1, r19, r0
9000fc70:	ea61001c 	lwi	r19, r1, 28
9000fc74:	30210020 	addik	r1, r1, 32
9000fc78:	b60f0008 	rtsd	r15, 8
9000fc7c:	80000000 	or	r0, r0, r0

9000fc80 <sendCommand>:



static void sendCommand(uint8 command)
{
9000fc80:	3021ffe0 	addik	r1, r1, -32
9000fc84:	f9e10000 	swi	r15, r1, 0
9000fc88:	fa61001c 	swi	r19, r1, 28
9000fc8c:	12610000 	addk	r19, r1, r0
9000fc90:	f0b30024 	sbi	r5, r19, 36
    waitForIdle();
9000fc94:	b9f40134 	brlid	r15, 308	// 9000fdc8 <waitForIdle>
9000fc98:	80000000 	or	r0, r0, r0
    
    LCD.enable = CLR;
9000fc9c:	b000c360 	imm	-15520
9000fca0:	30600000 	addik	r3, r0, 0
9000fca4:	f8030008 	swi	r0, r3, 8
    LCD.rw     = CLR;
9000fca8:	b000c360 	imm	-15520
9000fcac:	30600000 	addik	r3, r0, 0
9000fcb0:	f8030000 	swi	r0, r3, 0
    LCD.rs     = CLR;
9000fcb4:	b000c360 	imm	-15520
9000fcb8:	30600000 	addik	r3, r0, 0
9000fcbc:	f8030004 	swi	r0, r3, 4
    LCD.data   = command;
9000fcc0:	b000c360 	imm	-15520
9000fcc4:	30800000 	addik	r4, r0, 0
9000fcc8:	e0730024 	lbui	r3, r19, 36
9000fccc:	f864000c 	swi	r3, r4, 12
    
    lcdPulseEnable();
9000fcd0:	b9f4ff20 	brlid	r15, -224	// 9000fbf0 <lcdPulseEnable>
9000fcd4:	80000000 	or	r0, r0, r0
}
9000fcd8:	e9e10000 	lwi	r15, r1, 0
9000fcdc:	10330000 	addk	r1, r19, r0
9000fce0:	ea61001c 	lwi	r19, r1, 28
9000fce4:	30210020 	addik	r1, r1, 32
9000fce8:	b60f0008 	rtsd	r15, 8
9000fcec:	80000000 	or	r0, r0, r0

9000fcf0 <sendData>:



static void sendData(uint8 data)
{
9000fcf0:	3021ffe0 	addik	r1, r1, -32
9000fcf4:	f9e10000 	swi	r15, r1, 0
9000fcf8:	fa61001c 	swi	r19, r1, 28
9000fcfc:	12610000 	addk	r19, r1, r0
9000fd00:	f0b30024 	sbi	r5, r19, 36
    waitForIdle();
9000fd04:	b9f400c4 	brlid	r15, 196	// 9000fdc8 <waitForIdle>
9000fd08:	80000000 	or	r0, r0, r0
    
    LCD.rs     = SET;
9000fd0c:	b000c360 	imm	-15520
9000fd10:	30800000 	addik	r4, r0, 0
9000fd14:	30600001 	addik	r3, r0, 1
9000fd18:	f8640004 	swi	r3, r4, 4

    LCD.data   = data;
9000fd1c:	b000c360 	imm	-15520
9000fd20:	30800000 	addik	r4, r0, 0
9000fd24:	e0730024 	lbui	r3, r19, 36
9000fd28:	f864000c 	swi	r3, r4, 12
    
    lcdPulseEnable();
9000fd2c:	b9f4fec4 	brlid	r15, -316	// 9000fbf0 <lcdPulseEnable>
9000fd30:	80000000 	or	r0, r0, r0

    LCD.rs     = CLR;
9000fd34:	b000c360 	imm	-15520
9000fd38:	30600000 	addik	r3, r0, 0
9000fd3c:	f8030004 	swi	r0, r3, 4
}
9000fd40:	e9e10000 	lwi	r15, r1, 0
9000fd44:	10330000 	addk	r1, r19, r0
9000fd48:	ea61001c 	lwi	r19, r1, 28
9000fd4c:	30210020 	addik	r1, r1, 32
9000fd50:	b60f0008 	rtsd	r15, 8
9000fd54:	80000000 	or	r0, r0, r0

9000fd58 <lcdBusy>:



static bool lcdBusy()
{
9000fd58:	3021ffdc 	addik	r1, r1, -36
9000fd5c:	f9e10000 	swi	r15, r1, 0
9000fd60:	fa610020 	swi	r19, r1, 32
9000fd64:	12610000 	addk	r19, r1, r0
    uint8 data;
    
    LCD.rw = SET;
9000fd68:	b000c360 	imm	-15520
9000fd6c:	30800000 	addik	r4, r0, 0
9000fd70:	30600001 	addik	r3, r0, 1
9000fd74:	f8640000 	swi	r3, r4, 0

    lcdSetEnable();
9000fd78:	b9f4fe08 	brlid	r15, -504	// 9000fb80 <lcdSetEnable>
9000fd7c:	80000000 	or	r0, r0, r0
    
    data = LCD.data;
9000fd80:	b000c360 	imm	-15520
9000fd84:	30600000 	addik	r3, r0, 0
9000fd88:	e863000c 	lwi	r3, r3, 12
9000fd8c:	f073001c 	sbi	r3, r19, 28
    
    lcdClrEnable();
9000fd90:	b9f4fe34 	brlid	r15, -460	// 9000fbc4 <lcdClrEnable>
9000fd94:	80000000 	or	r0, r0, r0
    LCD.rw = CLR;
9000fd98:	b000c360 	imm	-15520
9000fd9c:	30600000 	addik	r3, r0, 0
9000fda0:	f8030000 	swi	r0, r3, 0

    return !!(data & BUSY_MASK);
9000fda4:	e073001c 	lbui	r3, r19, 28
9000fda8:	90630060 	sext8	r3, r3
9000fdac:	6463001f 	bsrli	r3, r3, 31
}
9000fdb0:	e9e10000 	lwi	r15, r1, 0
9000fdb4:	10330000 	addk	r1, r19, r0
9000fdb8:	ea610020 	lwi	r19, r1, 32
9000fdbc:	30210024 	addik	r1, r1, 36
9000fdc0:	b60f0008 	rtsd	r15, 8
9000fdc4:	80000000 	or	r0, r0, r0

9000fdc8 <waitForIdle>:



static void waitForIdle()
{
9000fdc8:	3021ffdc 	addik	r1, r1, -36
9000fdcc:	f9e10000 	swi	r15, r1, 0
9000fdd0:	fa610020 	swi	r19, r1, 32
9000fdd4:	12610000 	addk	r19, r1, r0
    int count = 0;
9000fdd8:	f813001c 	swi	r0, r19, 28
    
    while(lcdPresent && lcdBusy())
9000fddc:	b8000038 	bri	56		// 9000fe14
    {
        if(++count > 100)
9000fde0:	e873001c 	lwi	r3, r19, 28
9000fde4:	30630001 	addik	r3, r3, 1
9000fde8:	f873001c 	swi	r3, r19, 28
9000fdec:	e873001c 	lwi	r3, r19, 28
9000fdf0:	32400064 	addik	r18, r0, 100
9000fdf4:	16439001 	cmp	r18, r3, r18
9000fdf8:	bcb20010 	bgei	r18, 16		// 9000fe08
        {
            lcdPresent = false;
9000fdfc:	b0009002 	imm	-28670
9000fe00:	f8003a9c 	swi	r0, r0, 15004
            break;
9000fe04:	b8000028 	bri	40		// 9000fe2c
        }
        
        udelay(37);
9000fe08:	30a00025 	addik	r5, r0, 37
9000fe0c:	b9f4c274 	brlid	r15, -15756	// 9000c080 <udelay>
9000fe10:	80000000 	or	r0, r0, r0
9000fe14:	b0009002 	imm	-28670
9000fe18:	e8603a9c 	lwi	r3, r0, 15004
9000fe1c:	bc030010 	beqi	r3, 16		// 9000fe2c
9000fe20:	b9f4ff38 	brlid	r15, -200	// 9000fd58 <lcdBusy>
9000fe24:	80000000 	or	r0, r0, r0
9000fe28:	bc23ffb8 	bnei	r3, -72		// 9000fde0
    }
}
9000fe2c:	e9e10000 	lwi	r15, r1, 0
9000fe30:	10330000 	addk	r1, r19, r0
9000fe34:	ea610020 	lwi	r19, r1, 32
9000fe38:	30210024 	addik	r1, r1, 36
9000fe3c:	b60f0008 	rtsd	r15, 8
9000fe40:	80000000 	or	r0, r0, r0

9000fe44 <printf>:
extern void outbyte(char c); 


int printf(const char *msg, ...)
{
9000fe44:	f8a10004 	swi	r5, r1, 4
9000fe48:	f8c10008 	swi	r6, r1, 8
9000fe4c:	f8e1000c 	swi	r7, r1, 12
9000fe50:	f9010010 	swi	r8, r1, 16
9000fe54:	f9210014 	swi	r9, r1, 20
9000fe58:	f9410018 	swi	r10, r1, 24
9000fe5c:	3021ec48 	addik	r1, r1, -5048
9000fe60:	f9e10000 	swi	r15, r1, 0
9000fe64:	fa6113b4 	swi	r19, r1, 5044
9000fe68:	12610000 	addk	r19, r1, r0
9000fe6c:	f8b313bc 	swi	r5, r19, 5052
    #define BUF_SIZE 5000
    
    char buf[BUF_SIZE];
    
    va_list argp;
    
    va_start (argp, msg);
9000fe70:	307313c0 	addik	r3, r19, 5056
9000fe74:	f87313b0 	swi	r3, r19, 5040
    //TODO: use vsnprintf to protect buffer
    vsprintf (buf, msg, argp);
9000fe78:	e89313b0 	lwi	r4, r19, 5040
9000fe7c:	30730028 	addik	r3, r19, 40
9000fe80:	10a30000 	addk	r5, r3, r0
9000fe84:	e8d313bc 	lwi	r6, r19, 5052
9000fe88:	10e40000 	addk	r7, r4, r0
9000fe8c:	b9f40fec 	brlid	r15, 4076	// 90010e78 <vsprintf>
9000fe90:	80000000 	or	r0, r0, r0
    va_end (argp);
    
    int count;
    int i;
    for(i = 0, count = 0; i < BUF_SIZE; i++, count++)
9000fe94:	f8130020 	swi	r0, r19, 32
9000fe98:	f8130024 	swi	r0, r19, 36
9000fe9c:	b8000070 	bri	112		// 9000ff0c
    {
        char c = buf[i];
9000fea0:	e8930020 	lwi	r4, r19, 32
9000fea4:	3073001c 	addik	r3, r19, 28
9000fea8:	10632000 	addk	r3, r3, r4
9000feac:	e063000c 	lbui	r3, r3, 12
9000feb0:	f073001c 	sbi	r3, r19, 28
        
        if(!c)
9000feb4:	e073001c 	lbui	r3, r19, 28
9000feb8:	90630060 	sext8	r3, r3
9000febc:	bc030060 	beqi	r3, 96		// 9000ff1c
            break;

        if(c == '\n')
9000fec0:	e073001c 	lbui	r3, r19, 28
9000fec4:	90630060 	sext8	r3, r3
9000fec8:	aa43000a 	xori	r18, r3, 10
9000fecc:	bc32001c 	bnei	r18, 28		// 9000fee8
        {
            outbyte('\r');
9000fed0:	30a0000d 	addik	r5, r0, 13
9000fed4:	b9f42340 	brlid	r15, 9024	// 90012214 <outbyte>
9000fed8:	80000000 	or	r0, r0, r0
            count++;
9000fedc:	e8730024 	lwi	r3, r19, 36
9000fee0:	30630001 	addik	r3, r3, 1
9000fee4:	f8730024 	swi	r3, r19, 36
        }
        outbyte(c);
9000fee8:	e0b3001c 	lbui	r5, r19, 28
9000feec:	b9f42328 	brlid	r15, 9000	// 90012214 <outbyte>
9000fef0:	80000000 	or	r0, r0, r0
9000fef4:	e8730020 	lwi	r3, r19, 32
9000fef8:	30630001 	addik	r3, r3, 1
9000fefc:	f8730020 	swi	r3, r19, 32
9000ff00:	e8730024 	lwi	r3, r19, 36
9000ff04:	30630001 	addik	r3, r3, 1
9000ff08:	f8730024 	swi	r3, r19, 36
9000ff0c:	e8730020 	lwi	r3, r19, 32
9000ff10:	32401387 	addik	r18, r0, 4999
9000ff14:	16439001 	cmp	r18, r3, r18
9000ff18:	bcb2ff88 	bgei	r18, -120		// 9000fea0
    }
    
    return count;
9000ff1c:	e8730024 	lwi	r3, r19, 36
}
9000ff20:	e9e10000 	lwi	r15, r1, 0
9000ff24:	10330000 	addk	r1, r19, r0
9000ff28:	ea6113b4 	lwi	r19, r1, 5044
9000ff2c:	302113b8 	addik	r1, r1, 5048
9000ff30:	b60f0008 	rtsd	r15, 8
9000ff34:	80000000 	or	r0, r0, r0

9000ff38 <puts>:



int puts(const char *s)
{
9000ff38:	3021ffdc 	addik	r1, r1, -36
9000ff3c:	f9e10000 	swi	r15, r1, 0
9000ff40:	fa610020 	swi	r19, r1, 32
9000ff44:	12610000 	addk	r19, r1, r0
9000ff48:	f8b30028 	swi	r5, r19, 40
    int count = 0;
9000ff4c:	f813001c 	swi	r0, r19, 28
    while(*s)
9000ff50:	b8000060 	bri	96		// 9000ffb0
    {
        if(*s == '\n')
9000ff54:	e8730028 	lwi	r3, r19, 40
9000ff58:	e0630000 	lbui	r3, r3, 0
9000ff5c:	90630060 	sext8	r3, r3
9000ff60:	aa43000a 	xori	r18, r3, 10
9000ff64:	bc32001c 	bnei	r18, 28		// 9000ff80
        {
            outbyte('\r');
9000ff68:	30a0000d 	addik	r5, r0, 13
9000ff6c:	b9f422a8 	brlid	r15, 8872	// 90012214 <outbyte>
9000ff70:	80000000 	or	r0, r0, r0
            count++;
9000ff74:	e873001c 	lwi	r3, r19, 28
9000ff78:	30630001 	addik	r3, r3, 1
9000ff7c:	f873001c 	swi	r3, r19, 28
        }
        outbyte(*s++);
9000ff80:	e8730028 	lwi	r3, r19, 40
9000ff84:	e0630000 	lbui	r3, r3, 0
9000ff88:	90830060 	sext8	r4, r3
9000ff8c:	e8730028 	lwi	r3, r19, 40
9000ff90:	30630001 	addik	r3, r3, 1
9000ff94:	f8730028 	swi	r3, r19, 40
9000ff98:	10a40000 	addk	r5, r4, r0
9000ff9c:	b9f42278 	brlid	r15, 8824	// 90012214 <outbyte>
9000ffa0:	80000000 	or	r0, r0, r0
        count++;
9000ffa4:	e873001c 	lwi	r3, r19, 28
9000ffa8:	30630001 	addik	r3, r3, 1
9000ffac:	f873001c 	swi	r3, r19, 28
9000ffb0:	e8730028 	lwi	r3, r19, 40
9000ffb4:	e0630000 	lbui	r3, r3, 0
9000ffb8:	90630060 	sext8	r3, r3
9000ffbc:	bc23ff98 	bnei	r3, -104		// 9000ff54
    }
    
    outbyte('\r');
9000ffc0:	30a0000d 	addik	r5, r0, 13
9000ffc4:	b9f42250 	brlid	r15, 8784	// 90012214 <outbyte>
9000ffc8:	80000000 	or	r0, r0, r0
    outbyte('\n');
9000ffcc:	30a0000a 	addik	r5, r0, 10
9000ffd0:	b9f42244 	brlid	r15, 8772	// 90012214 <outbyte>
9000ffd4:	80000000 	or	r0, r0, r0
    
    return count + 2;
9000ffd8:	e873001c 	lwi	r3, r19, 28
9000ffdc:	30630002 	addik	r3, r3, 2
}
9000ffe0:	e9e10000 	lwi	r15, r1, 0
9000ffe4:	10330000 	addk	r1, r19, r0
9000ffe8:	ea610020 	lwi	r19, r1, 32
9000ffec:	30210024 	addik	r1, r1, 36
9000fff0:	b60f0008 	rtsd	r15, 8
9000fff4:	80000000 	or	r0, r0, r0

9000fff8 <enterCriticalRegion>:
///////////////////////////////////////////////////
// Interface functions

CRData enterCriticalRegion()
{
9000fff8:	3021fff0 	addik	r1, r1, -16
9000fffc:	fa61000c 	swi	r19, r1, 12
90010000:	12610000 	addk	r19, r1, r0
    CRData crdata = !!(__mfs() & 0x0002);
90010004:	94608001 	mfs	r3, rmsr
90010008:	f8730004 	swi	r3, r19, 4
9001000c:	e8730004 	lwi	r3, r19, 4
90010010:	a4630002 	andi	r3, r3, 2
90010014:	8c630400 	pcmpne	r3, r3, r0
90010018:	f8730008 	swi	r3, r19, 8
    CLI();
9001001c:	94110002 	msrclr	r0, 2
    return crdata;
90010020:	e8730008 	lwi	r3, r19, 8
}
90010024:	10330000 	addk	r1, r19, r0
90010028:	ea61000c 	lwi	r19, r1, 12
9001002c:	30210010 	addik	r1, r1, 16
90010030:	b60f0008 	rtsd	r15, 8
90010034:	80000000 	or	r0, r0, r0

90010038 <exitCriticalRegion>:



void exitCriticalRegion(CRData crdata)
{
90010038:	3021fff8 	addik	r1, r1, -8
9001003c:	fa610004 	swi	r19, r1, 4
90010040:	12610000 	addk	r19, r1, r0
90010044:	f8b3000c 	swi	r5, r19, 12
    if(crdata)
90010048:	e873000c 	lwi	r3, r19, 12
9001004c:	bc030008 	beqi	r3, 8		// 90010054
    {
        SEI();
90010050:	94100002 	msrset	r0, 2
    }
}
90010054:	10330000 	addk	r1, r19, r0
90010058:	ea610004 	lwi	r19, r1, 4
9001005c:	30210008 	addik	r1, r1, 8
90010060:	b60f0008 	rtsd	r15, 8
90010064:	80000000 	or	r0, r0, r0

90010068 <reboot>:



void reboot()
{
90010068:	3021fff8 	addik	r1, r1, -8
9001006c:	fa610004 	swi	r19, r1, 4
90010070:	12610000 	addk	r19, r1, r0
    disableInterrupts();
90010074:	94110002 	msrclr	r0, 2
    __asm("brai 0");
90010078:	b8080000 	brai	0
}
9001007c:	10330000 	addk	r1, r19, r0
90010080:	ea610004 	lwi	r19, r1, 4
90010084:	30210008 	addik	r1, r1, 8
90010088:	b60f0008 	rtsd	r15, 8
9001008c:	80000000 	or	r0, r0, r0

90010090 <spiInterfaceInit>:
///////////////////////////////////////////////////
// Interface functions

void spiInterfaceInit(SpiInterface* interface, uint16 deviceId, uint8 interruptId, uint32 xilOptions, uint32 options)
{
90010090:	3021ffdc 	addik	r1, r1, -36
90010094:	f9e10000 	swi	r15, r1, 0
90010098:	fa610020 	swi	r19, r1, 32
9001009c:	12610000 	addk	r19, r1, r0
900100a0:	f8b30028 	swi	r5, r19, 40
900100a4:	f4d3002c 	shi	r6, r19, 44
900100a8:	f0f30030 	sbi	r7, r19, 48
900100ac:	f9130034 	swi	r8, r19, 52
900100b0:	f9330038 	swi	r9, r19, 56
    ASSERT(interface);
900100b4:	e8730028 	lwi	r3, r19, 40
900100b8:	bc230028 	bnei	r3, 40		// 900100e0
900100bc:	94110002 	msrclr	r0, 2
900100c0:	b0009002 	imm	-28670
900100c4:	30a02b68 	addik	r5, r0, 11112
900100c8:	b0009002 	imm	-28670
900100cc:	30c02b74 	addik	r6, r0, 11124
900100d0:	30e00030 	addik	r7, r0, 48
900100d4:	b9f4c350 	brlid	r15, -15536	// 9000c424 <printAssert>
900100d8:	80000000 	or	r0, r0, r0
900100dc:	b8000000 	bri	0		// 900100dc
    
    interface->state            = SPI_STATE_IDLE;
900100e0:	e8730028 	lwi	r3, r19, 40
900100e4:	f8030054 	swi	r0, r3, 84
    interface->invertedDataCopy = !!(options & SPI_INVERTED_DATA);
900100e8:	e8730038 	lwi	r3, r19, 56
900100ec:	a4830001 	andi	r4, r3, 1
900100f0:	e8730028 	lwi	r3, r19, 40
900100f4:	f8832770 	swi	r4, r3, 10096

    XStatus status;

    status = XSpi_Initialize(&interface->hwInterface, deviceId);
900100f8:	e8730028 	lwi	r3, r19, 40
900100fc:	10a30000 	addk	r5, r3, r0
90010100:	e4d3002c 	lhui	r6, r19, 44
90010104:	b9f43c80 	brlid	r15, 15488	// 90013d84 <XSpi_Initialize>
90010108:	80000000 	or	r0, r0, r0
9001010c:	f873001c 	swi	r3, r19, 28
    ASSERT(status == XST_SUCCESS);
90010110:	e873001c 	lwi	r3, r19, 28
90010114:	bc030028 	beqi	r3, 40		// 9001013c
90010118:	94110002 	msrclr	r0, 2
9001011c:	b0009002 	imm	-28670
90010120:	30a02b84 	addik	r5, r0, 11140
90010124:	b0009002 	imm	-28670
90010128:	30c02b74 	addik	r6, r0, 11124
9001012c:	30e00038 	addik	r7, r0, 56
90010130:	b9f4c2f4 	brlid	r15, -15628	// 9000c424 <printAssert>
90010134:	80000000 	or	r0, r0, r0
90010138:	b8000000 	bri	0		// 90010138

    status = XSpi_SelfTest(&interface->hwInterface);
9001013c:	e8730028 	lwi	r3, r19, 40
90010140:	10a30000 	addk	r5, r3, r0
90010144:	b9f43970 	brlid	r15, 14704	// 90013ab4 <XSpi_SelfTest>
90010148:	80000000 	or	r0, r0, r0
9001014c:	f873001c 	swi	r3, r19, 28
    ASSERT(status == XST_SUCCESS);
90010150:	e873001c 	lwi	r3, r19, 28
90010154:	bc030028 	beqi	r3, 40		// 9001017c
90010158:	94110002 	msrclr	r0, 2
9001015c:	b0009002 	imm	-28670
90010160:	30a02b84 	addik	r5, r0, 11140
90010164:	b0009002 	imm	-28670
90010168:	30c02b74 	addik	r6, r0, 11124
9001016c:	30e0003b 	addik	r7, r0, 59
90010170:	b9f4c2b4 	brlid	r15, -15692	// 9000c424 <printAssert>
90010174:	80000000 	or	r0, r0, r0
90010178:	b8000000 	bri	0		// 90010178

    status = XSpi_SetOptions(&interface->hwInterface, xilOptions);
9001017c:	e8730028 	lwi	r3, r19, 40
90010180:	10a30000 	addk	r5, r3, r0
90010184:	e8d30034 	lwi	r6, r19, 52
90010188:	b9f43814 	brlid	r15, 14356	// 9001399c <XSpi_SetOptions>
9001018c:	80000000 	or	r0, r0, r0
90010190:	f873001c 	swi	r3, r19, 28

    ASSERT(status == XST_SUCCESS);
90010194:	e873001c 	lwi	r3, r19, 28
90010198:	bc030028 	beqi	r3, 40		// 900101c0
9001019c:	94110002 	msrclr	r0, 2
900101a0:	b0009002 	imm	-28670
900101a4:	30a02b84 	addik	r5, r0, 11140
900101a8:	b0009002 	imm	-28670
900101ac:	30c02b74 	addik	r6, r0, 11124
900101b0:	30e0003f 	addik	r7, r0, 63
900101b4:	b9f4c270 	brlid	r15, -15760	// 9000c424 <printAssert>
900101b8:	80000000 	or	r0, r0, r0
900101bc:	b8000000 	bri	0		// 900101bc

    status = XSpi_SetSlaveSelect(&interface->hwInterface, 0);
900101c0:	e8730028 	lwi	r3, r19, 40
900101c4:	10a30000 	addk	r5, r3, r0
900101c8:	10c00000 	addk	r6, r0, r0
900101cc:	b9f42e6c 	brlid	r15, 11884	// 90013038 <XSpi_SetSlaveSelect>
900101d0:	80000000 	or	r0, r0, r0
900101d4:	f873001c 	swi	r3, r19, 28
    ASSERT(status == XST_SUCCESS);
900101d8:	e873001c 	lwi	r3, r19, 28
900101dc:	bc030028 	beqi	r3, 40		// 90010204
900101e0:	94110002 	msrclr	r0, 2
900101e4:	b0009002 	imm	-28670
900101e8:	30a02b84 	addik	r5, r0, 11140
900101ec:	b0009002 	imm	-28670
900101f0:	30c02b74 	addik	r6, r0, 11124
900101f4:	30e00042 	addik	r7, r0, 66
900101f8:	b9f4c22c 	brlid	r15, -15828	// 9000c424 <printAssert>
900101fc:	80000000 	or	r0, r0, r0
90010200:	b8000000 	bri	0		// 90010200

 
    XSpi_SetStatusHandler(&interface->hwInterface, interface, (XSpi_StatusHandler)spiInterruptHandler);
90010204:	e8730028 	lwi	r3, r19, 40
90010208:	b0009001 	imm	-28671
9001020c:	30800a8c 	addik	r4, r0, 2700
90010210:	10a30000 	addk	r5, r3, r0
90010214:	e8d30028 	lwi	r6, r19, 40
90010218:	10e40000 	addk	r7, r4, r0
9001021c:	b9f42ce0 	brlid	r15, 11488	// 90012efc <XSpi_SetStatusHandler>
90010220:	80000000 	or	r0, r0, r0

    registerInterruptHandler(interruptId, (XInterruptHandler)XSpi_InterruptHandler, interface);
90010224:	e0b30030 	lbui	r5, r19, 48
90010228:	b0009001 	imm	-28671
9001022c:	30c02b8c 	addik	r6, r0, 11148
90010230:	e8f30028 	lwi	r7, r19, 40
90010234:	b9f4f5bc 	brlid	r15, -2628	// 9000f7f0 <registerInterruptHandler>
90010238:	80000000 	or	r0, r0, r0
    enableInterrupt(interruptId);
9001023c:	e0b30030 	lbui	r5, r19, 48
90010240:	b9f4f604 	brlid	r15, -2556	// 9000f844 <enableInterrupt>
90010244:	80000000 	or	r0, r0, r0

    XSpi_Start(&interface->hwInterface);
90010248:	e8730028 	lwi	r3, r19, 40
9001024c:	10a30000 	addk	r5, r3, r0
90010250:	b9f43480 	brlid	r15, 13440	// 900136d0 <XSpi_Start>
90010254:	80000000 	or	r0, r0, r0

    // \todo: Figure out why we have to do this!
    // Enable the first slave.
    XSpi_SetSlaveSelect(&interface->hwInterface, 0x01);
90010258:	e8730028 	lwi	r3, r19, 40
9001025c:	10a30000 	addk	r5, r3, r0
90010260:	30c00001 	addik	r6, r0, 1
90010264:	b9f42dd4 	brlid	r15, 11732	// 90013038 <XSpi_SetSlaveSelect>
90010268:	80000000 	or	r0, r0, r0
}
9001026c:	e9e10000 	lwi	r15, r1, 0
90010270:	10330000 	addk	r1, r19, r0
90010274:	ea610020 	lwi	r19, r1, 32
90010278:	30210024 	addik	r1, r1, 36
9001027c:	b60f0008 	rtsd	r15, 8
90010280:	80000000 	or	r0, r0, r0

90010284 <spiWaitForIdle>:



bool spiWaitForIdle(SpiInterface* interface, uint32 timeout_us)
{
90010284:	3021ffc4 	addik	r1, r1, -60
90010288:	f9e10000 	swi	r15, r1, 0
9001028c:	fa610038 	swi	r19, r1, 56
90010290:	12610000 	addk	r19, r1, r0
90010294:	f8b30040 	swi	r5, r19, 64
90010298:	f8d30044 	swi	r6, r19, 68
    ASSERT(interface);
9001029c:	e8730040 	lwi	r3, r19, 64
900102a0:	bc230028 	bnei	r3, 40		// 900102c8
900102a4:	94110002 	msrclr	r0, 2
900102a8:	b0009002 	imm	-28670
900102ac:	30a02b68 	addik	r5, r0, 11112
900102b0:	b0009002 	imm	-28670
900102b4:	30c02b74 	addik	r6, r0, 11124
900102b8:	30e00055 	addik	r7, r0, 85
900102bc:	b9f4c168 	brlid	r15, -16024	// 9000c424 <printAssert>
900102c0:	80000000 	or	r0, r0, r0
900102c4:	b8000000 	bri	0		// 900102c4

    Timer timer;
    
    startTimer(&timer, USEC_TO_TICKS(timeout_us));
900102c8:	e8930044 	lwi	r4, r19, 68
900102cc:	10a02000 	addk	r5, r0, r4
900102d0:	10800000 	addk	r4, r0, r0
900102d4:	10c50000 	addk	r6, r5, r0
900102d8:	10a40000 	addk	r5, r4, r0
900102dc:	30e00000 	addik	r7, r0, 0
900102e0:	31000042 	addik	r8, r0, 66
900102e4:	b9f414a8 	brlid	r15, 5288	// 9001178c <__muldi3>
900102e8:	80000000 	or	r0, r0, r0
900102ec:	10a40000 	addk	r5, r4, r0
900102f0:	10830000 	addk	r4, r3, r0
900102f4:	10c40000 	addk	r6, r4, r0
900102f8:	10e50000 	addk	r7, r5, r0
900102fc:	30730024 	addik	r3, r19, 36
90010300:	10a30000 	addk	r5, r3, r0
90010304:	b9f4bbec 	brlid	r15, -17428	// 9000bef0 <startTimer>
90010308:	80000000 	or	r0, r0, r0
    
    while(1)
    {
        SpiState state;
        
        CRData crdata = enterCriticalRegion();
9001030c:	b9f4fcec 	brlid	r15, -788	// 9000fff8 <enterCriticalRegion>
90010310:	80000000 	or	r0, r0, r0
90010314:	f873001c 	swi	r3, r19, 28
        {
            state = interface->state;
90010318:	e8730040 	lwi	r3, r19, 64
9001031c:	e8630054 	lwi	r3, r3, 84
90010320:	f8730020 	swi	r3, r19, 32
        }
        exitCriticalRegion(crdata);
90010324:	e8b3001c 	lwi	r5, r19, 28
90010328:	b9f4fd10 	brlid	r15, -752	// 90010038 <exitCriticalRegion>
9001032c:	80000000 	or	r0, r0, r0

        if(state == SPI_STATE_IDLE || state == SPI_STATE_DONE || state == SPI_STATE_DONE_WITH_ERRORS)
90010330:	e8730020 	lwi	r3, r19, 32
90010334:	bc03001c 	beqi	r3, 28		// 90010350
90010338:	e8730020 	lwi	r3, r19, 32
9001033c:	aa430002 	xori	r18, r3, 2
90010340:	bc120010 	beqi	r18, 16		// 90010350
90010344:	e8730020 	lwi	r3, r19, 32
90010348:	aa430003 	xori	r18, r3, 3
9001034c:	bc320010 	bnei	r18, 16		// 9001035c
        {
            return true;
90010350:	30600001 	addik	r3, r0, 1
90010354:	f8730034 	swi	r3, r19, 52
90010358:	b8000020 	bri	32		// 90010378
        }
        else if(timerExpired(&timer))
9001035c:	30730024 	addik	r3, r19, 36
90010360:	10a30000 	addk	r5, r3, r0
90010364:	b9f4bbf0 	brlid	r15, -17424	// 9000bf54 <timerExpired>
90010368:	80000000 	or	r0, r0, r0
9001036c:	bc03ffa0 	beqi	r3, -96		// 9001030c
        {
            return false;
90010370:	10600000 	addk	r3, r0, r0
90010374:	f8730034 	swi	r3, r19, 52
        }
    }
90010378:	e8730034 	lwi	r3, r19, 52
    
    return false;
}
9001037c:	e9e10000 	lwi	r15, r1, 0
90010380:	10330000 	addk	r1, r19, r0
90010384:	ea610038 	lwi	r19, r1, 56
90010388:	3021003c 	addik	r1, r1, 60
9001038c:	b60f0008 	rtsd	r15, 8
90010390:	80000000 	or	r0, r0, r0

90010394 <spiWaitForReady>:



bool spiWaitForReady(SpiInterface* interface, uint32 timeout_us)
{
90010394:	3021ffc4 	addik	r1, r1, -60
90010398:	f9e10000 	swi	r15, r1, 0
9001039c:	fa610038 	swi	r19, r1, 56
900103a0:	12610000 	addk	r19, r1, r0
900103a4:	f8b30040 	swi	r5, r19, 64
900103a8:	f8d30044 	swi	r6, r19, 68
    ASSERT(interface);
900103ac:	e8730040 	lwi	r3, r19, 64
900103b0:	bc230028 	bnei	r3, 40		// 900103d8
900103b4:	94110002 	msrclr	r0, 2
900103b8:	b0009002 	imm	-28670
900103bc:	30a02b68 	addik	r5, r0, 11112
900103c0:	b0009002 	imm	-28670
900103c4:	30c02b74 	addik	r6, r0, 11124
900103c8:	30e00076 	addik	r7, r0, 118
900103cc:	b9f4c058 	brlid	r15, -16296	// 9000c424 <printAssert>
900103d0:	80000000 	or	r0, r0, r0
900103d4:	b8000000 	bri	0		// 900103d4

    Timer timer;
    
    startTimer(&timer, USEC_TO_TICKS(timeout_us));
900103d8:	e8930044 	lwi	r4, r19, 68
900103dc:	10a02000 	addk	r5, r0, r4
900103e0:	10800000 	addk	r4, r0, r0
900103e4:	10c50000 	addk	r6, r5, r0
900103e8:	10a40000 	addk	r5, r4, r0
900103ec:	30e00000 	addik	r7, r0, 0
900103f0:	31000042 	addik	r8, r0, 66
900103f4:	b9f41398 	brlid	r15, 5016	// 9001178c <__muldi3>
900103f8:	80000000 	or	r0, r0, r0
900103fc:	10a40000 	addk	r5, r4, r0
90010400:	10830000 	addk	r4, r3, r0
90010404:	10c40000 	addk	r6, r4, r0
90010408:	10e50000 	addk	r7, r5, r0
9001040c:	30730024 	addik	r3, r19, 36
90010410:	10a30000 	addk	r5, r3, r0
90010414:	b9f4badc 	brlid	r15, -17700	// 9000bef0 <startTimer>
90010418:	80000000 	or	r0, r0, r0
    
    while(1)
    {
        SpiState state;
        
        CRData crdata = enterCriticalRegion();
9001041c:	b9f4fbdc 	brlid	r15, -1060	// 9000fff8 <enterCriticalRegion>
90010420:	80000000 	or	r0, r0, r0
90010424:	f873001c 	swi	r3, r19, 28
        {
            state = interface->state;
90010428:	e8730040 	lwi	r3, r19, 64
9001042c:	e8630054 	lwi	r3, r3, 84
90010430:	f8730020 	swi	r3, r19, 32
        }
        exitCriticalRegion(crdata);
90010434:	e8b3001c 	lwi	r5, r19, 28
90010438:	b9f4fc00 	brlid	r15, -1024	// 90010038 <exitCriticalRegion>
9001043c:	80000000 	or	r0, r0, r0

        if(state == SPI_STATE_DONE || state == SPI_STATE_DONE_WITH_ERRORS)
90010440:	e8730020 	lwi	r3, r19, 32
90010444:	aa430002 	xori	r18, r3, 2
90010448:	bc120010 	beqi	r18, 16		// 90010458
9001044c:	e8730020 	lwi	r3, r19, 32
90010450:	aa430003 	xori	r18, r3, 3
90010454:	bc320010 	bnei	r18, 16		// 90010464
        {
            return true;
90010458:	30600001 	addik	r3, r0, 1
9001045c:	f8730034 	swi	r3, r19, 52
90010460:	b8000020 	bri	32		// 90010480
        }
        else if(timerExpired(&timer))
90010464:	30730024 	addik	r3, r19, 36
90010468:	10a30000 	addk	r5, r3, r0
9001046c:	b9f4bae8 	brlid	r15, -17688	// 9000bf54 <timerExpired>
90010470:	80000000 	or	r0, r0, r0
90010474:	bc03ffa8 	beqi	r3, -88		// 9001041c
        {
            return false;
90010478:	10600000 	addk	r3, r0, r0
9001047c:	f8730034 	swi	r3, r19, 52
        }
    }
90010480:	e8730034 	lwi	r3, r19, 52
    
    return false;
}
90010484:	e9e10000 	lwi	r15, r1, 0
90010488:	10330000 	addk	r1, r19, r0
9001048c:	ea610038 	lwi	r19, r1, 56
90010490:	3021003c 	addik	r1, r1, 60
90010494:	b60f0008 	rtsd	r15, 8
90010498:	80000000 	or	r0, r0, r0

9001049c <spiStartTransmit>:



SpiStatus spiStartTransmit(SpiInterface* interface, uint8* writeBuffer, uint16 writeLength)
{
9001049c:	3021ffd8 	addik	r1, r1, -40
900104a0:	f9e10000 	swi	r15, r1, 0
900104a4:	fa610024 	swi	r19, r1, 36
900104a8:	12610000 	addk	r19, r1, r0
900104ac:	f8b3002c 	swi	r5, r19, 44
900104b0:	f8d30030 	swi	r6, r19, 48
900104b4:	f4f30034 	shi	r7, r19, 52
    SpiStatus status;
    
    ASSERT(interface);
900104b8:	e873002c 	lwi	r3, r19, 44
900104bc:	bc230028 	bnei	r3, 40		// 900104e4
900104c0:	94110002 	msrclr	r0, 2
900104c4:	b0009002 	imm	-28670
900104c8:	30a02b68 	addik	r5, r0, 11112
900104cc:	b0009002 	imm	-28670
900104d0:	30c02b74 	addik	r6, r0, 11124
900104d4:	30e00099 	addik	r7, r0, 153
900104d8:	b9f4bf4c 	brlid	r15, -16564	// 9000c424 <printAssert>
900104dc:	80000000 	or	r0, r0, r0
900104e0:	b8000000 	bri	0		// 900104e0
    ASSERT(writeBuffer);
900104e4:	e8730030 	lwi	r3, r19, 48
900104e8:	bc230028 	bnei	r3, 40		// 90010510
900104ec:	94110002 	msrclr	r0, 2
900104f0:	b0009002 	imm	-28670
900104f4:	30a02b9c 	addik	r5, r0, 11164
900104f8:	b0009002 	imm	-28670
900104fc:	30c02b74 	addik	r6, r0, 11124
90010500:	30e0009a 	addik	r7, r0, 154
90010504:	b9f4bf20 	brlid	r15, -16608	// 9000c424 <printAssert>
90010508:	80000000 	or	r0, r0, r0
9001050c:	b8000000 	bri	0		// 9001050c
    ASSERT(writeLength <= SPI_BUFFER_SIZE);
90010510:	e4730034 	lhui	r3, r19, 52
90010514:	22401388 	addi	r18, r0, 5000
90010518:	16439003 	cmpu	r18, r3, r18
9001051c:	bcb20028 	bgei	r18, 40		// 90010544
90010520:	94110002 	msrclr	r0, 2
90010524:	b0009002 	imm	-28670
90010528:	30a02ba8 	addik	r5, r0, 11176
9001052c:	b0009002 	imm	-28670
90010530:	30c02b74 	addik	r6, r0, 11124
90010534:	30e0009b 	addik	r7, r0, 155
90010538:	b9f4beec 	brlid	r15, -16660	// 9000c424 <printAssert>
9001053c:	80000000 	or	r0, r0, r0
90010540:	b8000000 	bri	0		// 90010540

    CRData crdata = enterCriticalRegion();
90010544:	b9f4fab4 	brlid	r15, -1356	// 9000fff8 <enterCriticalRegion>
90010548:	80000000 	or	r0, r0, r0
9001054c:	f873001c 	swi	r3, r19, 28
    {
        if(interface->state == SPI_STATE_TRANSMITTING)
90010550:	e873002c 	lwi	r3, r19, 44
90010554:	e8630054 	lwi	r3, r3, 84
90010558:	aa430001 	xori	r18, r3, 1
9001055c:	bc320010 	bnei	r18, 16		// 9001056c
        {
            status = SPI_STATUS_ERROR_TX_IN_PROCESS;
90010560:	30600001 	addik	r3, r0, 1
90010564:	f8730020 	swi	r3, r19, 32
90010568:	b800006c 	bri	108		// 900105d4
        }
        else
        {
            dataCopy(interface, interface->writeBuffer, writeBuffer, writeLength);
9001056c:	e873002c 	lwi	r3, r19, 44
90010570:	3063005c 	addik	r3, r3, 92
90010574:	e4930034 	lhui	r4, r19, 52
90010578:	e8b3002c 	lwi	r5, r19, 44
9001057c:	10c30000 	addk	r6, r3, r0
90010580:	e8f30030 	lwi	r7, r19, 48
90010584:	11040000 	addk	r8, r4, r0
90010588:	b9f40444 	brlid	r15, 1092	// 900109cc <dataCopy>
9001058c:	80000000 	or	r0, r0, r0
            interface->writeLength = writeLength;
90010590:	e4930034 	lhui	r4, r19, 52
90010594:	e873002c 	lwi	r3, r19, 44
90010598:	f8830058 	swi	r4, r3, 88
            interface->state       = SPI_STATE_TRANSMITTING;
9001059c:	e893002c 	lwi	r4, r19, 44
900105a0:	30600001 	addik	r3, r0, 1
900105a4:	f8640054 	swi	r3, r4, 84
            XSpi_Transfer(&interface->hwInterface, interface->writeBuffer, interface->readBuffer, writeLength);
900105a8:	e8b3002c 	lwi	r5, r19, 44
900105ac:	e873002c 	lwi	r3, r19, 44
900105b0:	3083005c 	addik	r4, r3, 92
900105b4:	e873002c 	lwi	r3, r19, 44
900105b8:	306313e8 	addik	r3, r3, 5096
900105bc:	e5130034 	lhui	r8, r19, 52
900105c0:	10c40000 	addk	r6, r4, r0
900105c4:	10e30000 	addk	r7, r3, r0
900105c8:	b9f42b58 	brlid	r15, 11096	// 90013120 <XSpi_Transfer>
900105cc:	80000000 	or	r0, r0, r0
            status = SPI_STATUS_TX_STARTED;
900105d0:	f8130020 	swi	r0, r19, 32
        }
    }
    exitCriticalRegion(crdata);
900105d4:	e8b3001c 	lwi	r5, r19, 28
900105d8:	b9f4fa60 	brlid	r15, -1440	// 90010038 <exitCriticalRegion>
900105dc:	80000000 	or	r0, r0, r0

    return status;
900105e0:	e8730020 	lwi	r3, r19, 32
}
900105e4:	e9e10000 	lwi	r15, r1, 0
900105e8:	10330000 	addk	r1, r19, r0
900105ec:	ea610024 	lwi	r19, r1, 36
900105f0:	30210028 	addik	r1, r1, 40
900105f4:	b60f0008 	rtsd	r15, 8
900105f8:	80000000 	or	r0, r0, r0

900105fc <spiReadData>:


SpiStatus spiReadData(SpiInterface* interface, uint8* readBuffer, uint16 maxReadLength, uint16* readLength)
{
900105fc:	3021ffd8 	addik	r1, r1, -40
90010600:	f9e10000 	swi	r15, r1, 0
90010604:	fa610024 	swi	r19, r1, 36
90010608:	12610000 	addk	r19, r1, r0
9001060c:	f8b3002c 	swi	r5, r19, 44
90010610:	f8d30030 	swi	r6, r19, 48
90010614:	f4f30034 	shi	r7, r19, 52
90010618:	f9130038 	swi	r8, r19, 56
    SpiStatus status;
    
    ASSERT(interface);
9001061c:	e873002c 	lwi	r3, r19, 44
90010620:	bc230028 	bnei	r3, 40		// 90010648
90010624:	94110002 	msrclr	r0, 2
90010628:	b0009002 	imm	-28670
9001062c:	30a02b68 	addik	r5, r0, 11112
90010630:	b0009002 	imm	-28670
90010634:	30c02b74 	addik	r6, r0, 11124
90010638:	30e000b6 	addik	r7, r0, 182
9001063c:	b9f4bde8 	brlid	r15, -16920	// 9000c424 <printAssert>
90010640:	80000000 	or	r0, r0, r0
90010644:	b8000000 	bri	0		// 90010644
    ASSERT(readBuffer);
90010648:	e8730030 	lwi	r3, r19, 48
9001064c:	bc230028 	bnei	r3, 40		// 90010674
90010650:	94110002 	msrclr	r0, 2
90010654:	b0009002 	imm	-28670
90010658:	30a02bc8 	addik	r5, r0, 11208
9001065c:	b0009002 	imm	-28670
90010660:	30c02b74 	addik	r6, r0, 11124
90010664:	30e000b7 	addik	r7, r0, 183
90010668:	b9f4bdbc 	brlid	r15, -16964	// 9000c424 <printAssert>
9001066c:	80000000 	or	r0, r0, r0
90010670:	b8000000 	bri	0		// 90010670
    ASSERT(maxReadLength <= SPI_BUFFER_SIZE);
90010674:	e4730034 	lhui	r3, r19, 52
90010678:	22401388 	addi	r18, r0, 5000
9001067c:	16439003 	cmpu	r18, r3, r18
90010680:	bcb20028 	bgei	r18, 40		// 900106a8
90010684:	94110002 	msrclr	r0, 2
90010688:	b0009002 	imm	-28670
9001068c:	30a02bd4 	addik	r5, r0, 11220
90010690:	b0009002 	imm	-28670
90010694:	30c02b74 	addik	r6, r0, 11124
90010698:	30e000b8 	addik	r7, r0, 184
9001069c:	b9f4bd88 	brlid	r15, -17016	// 9000c424 <printAssert>
900106a0:	80000000 	or	r0, r0, r0
900106a4:	b8000000 	bri	0		// 900106a4
    ASSERT(readLength);
900106a8:	e8730038 	lwi	r3, r19, 56
900106ac:	bc230028 	bnei	r3, 40		// 900106d4
900106b0:	94110002 	msrclr	r0, 2
900106b4:	b0009002 	imm	-28670
900106b8:	30a02bf8 	addik	r5, r0, 11256
900106bc:	b0009002 	imm	-28670
900106c0:	30c02b74 	addik	r6, r0, 11124
900106c4:	30e000b9 	addik	r7, r0, 185
900106c8:	b9f4bd5c 	brlid	r15, -17060	// 9000c424 <printAssert>
900106cc:	80000000 	or	r0, r0, r0
900106d0:	b8000000 	bri	0		// 900106d0
    
    CRData crdata = enterCriticalRegion();
900106d4:	b9f4f924 	brlid	r15, -1756	// 9000fff8 <enterCriticalRegion>
900106d8:	80000000 	or	r0, r0, r0
900106dc:	f873001c 	swi	r3, r19, 28
    {
        if(interface->state == SPI_STATE_TRANSMITTING)
900106e0:	e873002c 	lwi	r3, r19, 44
900106e4:	e8630054 	lwi	r3, r3, 84
900106e8:	aa430001 	xori	r18, r3, 1
900106ec:	bc320010 	bnei	r18, 16		// 900106fc
        {
            status = SPI_STATUS_ERROR_TX_IN_PROCESS;
900106f0:	30600001 	addik	r3, r0, 1
900106f4:	f8730020 	swi	r3, r19, 32
900106f8:	b80000c0 	bri	192		// 900107b8
        }
        else if(interface->state == SPI_STATE_DONE_WITH_ERRORS)
900106fc:	e873002c 	lwi	r3, r19, 44
90010700:	e8630054 	lwi	r3, r3, 84
90010704:	aa430003 	xori	r18, r3, 3
90010708:	bc320010 	bnei	r18, 16		// 90010718
        {
            status = SPI_STATUS_TX_ERROR;
9001070c:	30600002 	addik	r3, r0, 2
90010710:	f8730020 	swi	r3, r19, 32
90010714:	b80000a4 	bri	164		// 900107b8
        }
        else if(interface->state == SPI_STATE_DONE)
90010718:	e873002c 	lwi	r3, r19, 44
9001071c:	e8630054 	lwi	r3, r3, 84
90010720:	aa430002 	xori	r18, r3, 2
90010724:	bc320084 	bnei	r18, 132		// 900107a8
        {
            if(maxReadLength < interface->readLength)
90010728:	e4730034 	lhui	r3, r19, 52
9001072c:	e893002c 	lwi	r4, r19, 44
90010730:	e88413e4 	lwi	r4, r4, 5092
90010734:	16441803 	cmpu	r18, r4, r3
90010738:	bcb2001c 	bgei	r18, 28		// 90010754
            {
                status      = SPI_STATUS_ERROR_RX_OVERRUN;
9001073c:	30600004 	addik	r3, r0, 4
90010740:	f8730020 	swi	r3, r19, 32
                *readLength = maxReadLength;
90010744:	e8930038 	lwi	r4, r19, 56
90010748:	e4730034 	lhui	r3, r19, 52
9001074c:	f4640000 	shi	r3, r4, 0
90010750:	b8000024 	bri	36		// 90010774
            }
            else
            {
                status      = SPI_STATUS_RX_OK;
90010754:	30600003 	addik	r3, r0, 3
90010758:	f8730020 	swi	r3, r19, 32
                *readLength = interface->readLength;
9001075c:	e873002c 	lwi	r3, r19, 44
90010760:	e86313e4 	lwi	r3, r3, 5092
90010764:	b0000000 	imm	0
90010768:	a483ffff 	andi	r4, r3, -1
9001076c:	e8730038 	lwi	r3, r19, 56
90010770:	f4830000 	shi	r4, r3, 0
            }

            dataCopy(interface, readBuffer, interface->readBuffer, *readLength);
90010774:	e873002c 	lwi	r3, r19, 44
90010778:	308313e8 	addik	r4, r3, 5096
9001077c:	e8730038 	lwi	r3, r19, 56
90010780:	e4630000 	lhui	r3, r3, 0
90010784:	e8b3002c 	lwi	r5, r19, 44
90010788:	e8d30030 	lwi	r6, r19, 48
9001078c:	10e40000 	addk	r7, r4, r0
90010790:	11030000 	addk	r8, r3, r0
90010794:	b9f40238 	brlid	r15, 568	// 900109cc <dataCopy>
90010798:	80000000 	or	r0, r0, r0

            interface->state = SPI_STATE_IDLE;
9001079c:	e873002c 	lwi	r3, r19, 44
900107a0:	f8030054 	swi	r0, r3, 84
900107a4:	b8000014 	bri	20		// 900107b8
        }
        else
        {
            status      = SPI_STATUS_ERROR_NO_RX_AVAILABLE;
900107a8:	30600005 	addik	r3, r0, 5
900107ac:	f8730020 	swi	r3, r19, 32
            *readLength = 0;
900107b0:	e8730038 	lwi	r3, r19, 56
900107b4:	f4030000 	shi	r0, r3, 0
        }
    }
    exitCriticalRegion(crdata);
900107b8:	e8b3001c 	lwi	r5, r19, 28
900107bc:	b9f4f87c 	brlid	r15, -1924	// 90010038 <exitCriticalRegion>
900107c0:	80000000 	or	r0, r0, r0
    
    return status;
900107c4:	e8730020 	lwi	r3, r19, 32
}
900107c8:	e9e10000 	lwi	r15, r1, 0
900107cc:	10330000 	addk	r1, r19, r0
900107d0:	ea610024 	lwi	r19, r1, 36
900107d4:	30210028 	addik	r1, r1, 40
900107d8:	b60f0008 	rtsd	r15, 8
900107dc:	80000000 	or	r0, r0, r0

900107e0 <spiWaitAndStartTransmit>:



SpiStatus spiWaitAndStartTransmit(SpiInterface* interface, uint8* writeBuffer, uint16 writeLength, uint32 timeout_us)
{
900107e0:	3021ffe0 	addik	r1, r1, -32
900107e4:	f9e10000 	swi	r15, r1, 0
900107e8:	fa61001c 	swi	r19, r1, 28
900107ec:	12610000 	addk	r19, r1, r0
900107f0:	f8b30024 	swi	r5, r19, 36
900107f4:	f8d30028 	swi	r6, r19, 40
900107f8:	f4f3002c 	shi	r7, r19, 44
900107fc:	f9130030 	swi	r8, r19, 48
    ASSERT(interface);
90010800:	e8730024 	lwi	r3, r19, 36
90010804:	bc230028 	bnei	r3, 40		// 9001082c
90010808:	94110002 	msrclr	r0, 2
9001080c:	b0009002 	imm	-28670
90010810:	30a02b68 	addik	r5, r0, 11112
90010814:	b0009002 	imm	-28670
90010818:	30c02b74 	addik	r6, r0, 11124
9001081c:	30e000e5 	addik	r7, r0, 229
90010820:	b9f4bc04 	brlid	r15, -17404	// 9000c424 <printAssert>
90010824:	80000000 	or	r0, r0, r0
90010828:	b8000000 	bri	0		// 90010828
    spiWaitForIdle(interface, timeout_us);
9001082c:	e8b30024 	lwi	r5, r19, 36
90010830:	e8d30030 	lwi	r6, r19, 48
90010834:	b9f4fa50 	brlid	r15, -1456	// 90010284 <spiWaitForIdle>
90010838:	80000000 	or	r0, r0, r0
    return spiStartTransmit(interface, writeBuffer, writeLength);
9001083c:	e8b30024 	lwi	r5, r19, 36
90010840:	e8d30028 	lwi	r6, r19, 40
90010844:	e4f3002c 	lhui	r7, r19, 44
90010848:	b9f4fc54 	brlid	r15, -940	// 9001049c <spiStartTransmit>
9001084c:	80000000 	or	r0, r0, r0
}
90010850:	e9e10000 	lwi	r15, r1, 0
90010854:	10330000 	addk	r1, r19, r0
90010858:	ea61001c 	lwi	r19, r1, 28
9001085c:	30210020 	addik	r1, r1, 32
90010860:	b60f0008 	rtsd	r15, 8
90010864:	80000000 	or	r0, r0, r0

90010868 <spiWaitAndReadData>:



SpiStatus spiWaitAndReadData(SpiInterface* interface, uint8* readBuffer, uint16 maxReadLength, uint16* readLength, uint32 timeout_us)
{
90010868:	3021ffe0 	addik	r1, r1, -32
9001086c:	f9e10000 	swi	r15, r1, 0
90010870:	fa61001c 	swi	r19, r1, 28
90010874:	12610000 	addk	r19, r1, r0
90010878:	f8b30024 	swi	r5, r19, 36
9001087c:	f8d30028 	swi	r6, r19, 40
90010880:	f4f3002c 	shi	r7, r19, 44
90010884:	f9130030 	swi	r8, r19, 48
90010888:	f9330034 	swi	r9, r19, 52
    ASSERT(interface);
9001088c:	e8730024 	lwi	r3, r19, 36
90010890:	bc230028 	bnei	r3, 40		// 900108b8
90010894:	94110002 	msrclr	r0, 2
90010898:	b0009002 	imm	-28670
9001089c:	30a02b68 	addik	r5, r0, 11112
900108a0:	b0009002 	imm	-28670
900108a4:	30c02b74 	addik	r6, r0, 11124
900108a8:	30e000ee 	addik	r7, r0, 238
900108ac:	b9f4bb78 	brlid	r15, -17544	// 9000c424 <printAssert>
900108b0:	80000000 	or	r0, r0, r0
900108b4:	b8000000 	bri	0		// 900108b4
    spiWaitForReady(interface, timeout_us);
900108b8:	e8b30024 	lwi	r5, r19, 36
900108bc:	e8d30034 	lwi	r6, r19, 52
900108c0:	b9f4fad4 	brlid	r15, -1324	// 90010394 <spiWaitForReady>
900108c4:	80000000 	or	r0, r0, r0
    return spiReadData(interface, readBuffer, maxReadLength, readLength);
900108c8:	e8b30024 	lwi	r5, r19, 36
900108cc:	e8d30028 	lwi	r6, r19, 40
900108d0:	e4f3002c 	lhui	r7, r19, 44
900108d4:	e9130030 	lwi	r8, r19, 48
900108d8:	b9f4fd24 	brlid	r15, -732	// 900105fc <spiReadData>
900108dc:	80000000 	or	r0, r0, r0
}
900108e0:	e9e10000 	lwi	r15, r1, 0
900108e4:	10330000 	addk	r1, r19, r0
900108e8:	ea61001c 	lwi	r19, r1, 28
900108ec:	30210020 	addik	r1, r1, 32
900108f0:	b60f0008 	rtsd	r15, 8
900108f4:	80000000 	or	r0, r0, r0

900108f8 <spiReset>:



void spiReset(SpiInterface* interface)
{
900108f8:	3021ffe0 	addik	r1, r1, -32
900108fc:	f9e10000 	swi	r15, r1, 0
90010900:	fa61001c 	swi	r19, r1, 28
90010904:	12610000 	addk	r19, r1, r0
90010908:	f8b30024 	swi	r5, r19, 36
    ASSERT(interface);
9001090c:	e8730024 	lwi	r3, r19, 36
90010910:	bc230028 	bnei	r3, 40		// 90010938
90010914:	94110002 	msrclr	r0, 2
90010918:	b0009002 	imm	-28670
9001091c:	30a02b68 	addik	r5, r0, 11112
90010920:	b0009002 	imm	-28670
90010924:	30c02b74 	addik	r6, r0, 11124
90010928:	30e000f7 	addik	r7, r0, 247
9001092c:	b9f4baf8 	brlid	r15, -17672	// 9000c424 <printAssert>
90010930:	80000000 	or	r0, r0, r0
90010934:	b8000000 	bri	0		// 90010934
    XSpi_Reset(&interface->hwInterface);
90010938:	e8730024 	lwi	r3, r19, 36
9001093c:	10a30000 	addk	r5, r3, r0
90010940:	b9f42c38 	brlid	r15, 11320	// 90013578 <XSpi_Reset>
90010944:	80000000 	or	r0, r0, r0
}
90010948:	e9e10000 	lwi	r15, r1, 0
9001094c:	10330000 	addk	r1, r19, r0
90010950:	ea61001c 	lwi	r19, r1, 28
90010954:	30210020 	addik	r1, r1, 32
90010958:	b60f0008 	rtsd	r15, 8
9001095c:	80000000 	or	r0, r0, r0

90010960 <spiSetOptions>:


void spiSetOptions(SpiInterface* interface, uint32 xilOptions)
{
90010960:	3021ffe0 	addik	r1, r1, -32
90010964:	f9e10000 	swi	r15, r1, 0
90010968:	fa61001c 	swi	r19, r1, 28
9001096c:	12610000 	addk	r19, r1, r0
90010970:	f8b30024 	swi	r5, r19, 36
90010974:	f8d30028 	swi	r6, r19, 40
    ASSERT(XSpi_SetOptions(&interface->hwInterface, xilOptions) == XST_SUCCESS);
90010978:	e8730024 	lwi	r3, r19, 36
9001097c:	10a30000 	addk	r5, r3, r0
90010980:	e8d30028 	lwi	r6, r19, 40
90010984:	b9f43018 	brlid	r15, 12312	// 9001399c <XSpi_SetOptions>
90010988:	80000000 	or	r0, r0, r0
9001098c:	bc030028 	beqi	r3, 40		// 900109b4
90010990:	94110002 	msrclr	r0, 2
90010994:	b0009002 	imm	-28670
90010998:	30a02c04 	addik	r5, r0, 11268
9001099c:	b0009002 	imm	-28670
900109a0:	30c02b74 	addik	r6, r0, 11124
900109a4:	30e000fe 	addik	r7, r0, 254
900109a8:	b9f4ba7c 	brlid	r15, -17796	// 9000c424 <printAssert>
900109ac:	80000000 	or	r0, r0, r0
900109b0:	b8000000 	bri	0		// 900109b0
}
900109b4:	e9e10000 	lwi	r15, r1, 0
900109b8:	10330000 	addk	r1, r19, r0
900109bc:	ea61001c 	lwi	r19, r1, 28
900109c0:	30210020 	addik	r1, r1, 32
900109c4:	b60f0008 	rtsd	r15, 8
900109c8:	80000000 	or	r0, r0, r0

900109cc <dataCopy>:


///////////////////////////////////////////////////
// Local functions

static void dataCopy(SpiInterface* interface, uint8* toBuf, uint8* fromBuf, uint32 count)
{
900109cc:	3021ffdc 	addik	r1, r1, -36
900109d0:	f9e10000 	swi	r15, r1, 0
900109d4:	fa610020 	swi	r19, r1, 32
900109d8:	12610000 	addk	r19, r1, r0
900109dc:	f8b30028 	swi	r5, r19, 40
900109e0:	f8d3002c 	swi	r6, r19, 44
900109e4:	f8f30030 	swi	r7, r19, 48
900109e8:	f9130034 	swi	r8, r19, 52
    if(interface->invertedDataCopy)
900109ec:	e8730028 	lwi	r3, r19, 40
900109f0:	e8632770 	lwi	r3, r3, 10096
900109f4:	bc030064 	beqi	r3, 100		// 90010a58
    {
        int i;
        for(i = 0; i < count; i++)
900109f8:	f813001c 	swi	r0, r19, 28
900109fc:	b8000048 	bri	72		// 90010a44
        {
            toBuf[i] = ~fromBuf[i];
90010a00:	e873001c 	lwi	r3, r19, 28
90010a04:	10830000 	addk	r4, r3, r0
90010a08:	e873002c 	lwi	r3, r19, 44
90010a0c:	10a41800 	addk	r5, r4, r3
90010a10:	e873001c 	lwi	r3, r19, 28
90010a14:	10830000 	addk	r4, r3, r0
90010a18:	e8730030 	lwi	r3, r19, 48
90010a1c:	10641800 	addk	r3, r4, r3
90010a20:	e0630000 	lbui	r3, r3, 0
90010a24:	90630060 	sext8	r3, r3
90010a28:	a863ffff 	xori	r3, r3, -1
90010a2c:	90630060 	sext8	r3, r3
90010a30:	a46300ff 	andi	r3, r3, 255
90010a34:	f0650000 	sbi	r3, r5, 0
90010a38:	e873001c 	lwi	r3, r19, 28
90010a3c:	30630001 	addik	r3, r3, 1
90010a40:	f873001c 	swi	r3, r19, 28
90010a44:	e893001c 	lwi	r4, r19, 28
90010a48:	e8730034 	lwi	r3, r19, 52
90010a4c:	16432003 	cmpu	r18, r3, r4
90010a50:	bc52ffb0 	blti	r18, -80		// 90010a00
90010a54:	b8000020 	bri	32		// 90010a74
        }
    }
    else
    {
        memcpy(toBuf, fromBuf, count);
90010a58:	e873002c 	lwi	r3, r19, 44
90010a5c:	e8930030 	lwi	r4, r19, 48
90010a60:	e8f30034 	lwi	r7, r19, 52
90010a64:	10a30000 	addk	r5, r3, r0
90010a68:	10c40000 	addk	r6, r4, r0
90010a6c:	b9f434a4 	brlid	r15, 13476	// 90013f10 <memcpy>
90010a70:	80000000 	or	r0, r0, r0
    }
}
90010a74:	e9e10000 	lwi	r15, r1, 0
90010a78:	10330000 	addk	r1, r19, r0
90010a7c:	ea610020 	lwi	r19, r1, 32
90010a80:	30210024 	addik	r1, r1, 36
90010a84:	b60f0008 	rtsd	r15, 8
90010a88:	80000000 	or	r0, r0, r0

90010a8c <spiInterruptHandler>:



static void spiInterruptHandler(void *callBackRef, Xuint32 statusEvent, Xuint32 byteCount)
{
90010a8c:	3021ffdc 	addik	r1, r1, -36
90010a90:	f9e10000 	swi	r15, r1, 0
90010a94:	fa610020 	swi	r19, r1, 32
90010a98:	12610000 	addk	r19, r1, r0
90010a9c:	f8b30028 	swi	r5, r19, 40
90010aa0:	f8d3002c 	swi	r6, r19, 44
90010aa4:	f8f30030 	swi	r7, r19, 48
    ASSERT(callBackRef);
90010aa8:	e8730028 	lwi	r3, r19, 40
90010aac:	bc230028 	bnei	r3, 40		// 90010ad4
90010ab0:	94110002 	msrclr	r0, 2
90010ab4:	b0009002 	imm	-28670
90010ab8:	30a02c48 	addik	r5, r0, 11336
90010abc:	b0009002 	imm	-28670
90010ac0:	30c02b74 	addik	r6, r0, 11124
90010ac4:	30e00119 	addik	r7, r0, 281
90010ac8:	b9f4b95c 	brlid	r15, -18084	// 9000c424 <printAssert>
90010acc:	80000000 	or	r0, r0, r0
90010ad0:	b8000000 	bri	0		// 90010ad0
    
    SpiInterface* interface = (SpiInterface*)callBackRef;
90010ad4:	e8730028 	lwi	r3, r19, 40
90010ad8:	f873001c 	swi	r3, r19, 28
    
    if(statusEvent != XST_SPI_TRANSFER_DONE)
90010adc:	e873002c 	lwi	r3, r19, 44
90010ae0:	aa430480 	xori	r18, r3, 1152
90010ae4:	bc12001c 	beqi	r18, 28		// 90010b00
    {
        interface->state = SPI_STATE_DONE_WITH_ERRORS;
90010ae8:	e873001c 	lwi	r3, r19, 28
90010aec:	30800003 	addik	r4, r0, 3
90010af0:	f8830054 	swi	r4, r3, 84
        interface->readLength = 0;
90010af4:	e873001c 	lwi	r3, r19, 28
90010af8:	f80313e4 	swi	r0, r3, 5092
90010afc:	b800001c 	bri	28		// 90010b18
    }
    else
    {
        interface->state = SPI_STATE_DONE;
90010b00:	e893001c 	lwi	r4, r19, 28
90010b04:	30600002 	addik	r3, r0, 2
90010b08:	f8640054 	swi	r3, r4, 84
        interface->readLength = byteCount;
90010b0c:	e893001c 	lwi	r4, r19, 28
90010b10:	e8730030 	lwi	r3, r19, 48
90010b14:	f86413e4 	swi	r3, r4, 5092
    }
}
90010b18:	e9e10000 	lwi	r15, r1, 0
90010b1c:	10330000 	addk	r1, r19, r0
90010b20:	ea610020 	lwi	r19, r1, 32
90010b24:	30210024 	addik	r1, r1, 36
90010b28:	b60f0008 	rtsd	r15, 8
90010b2c:	80000000 	or	r0, r0, r0

90010b30 <hex_convert>:
#define HEX_CVT_MASK  (0x0fffffffL)

static char *
hex_convert (char *buf, unsigned long value, char padChar, int padCount)
{
90010b30:	3021ffd0 	addik	r1, r1, -48
90010b34:	fa61002c 	swi	r19, r1, 44
90010b38:	12610000 	addk	r19, r1, r0
90010b3c:	f8b30034 	swi	r5, r19, 52
90010b40:	f8d30038 	swi	r6, r19, 56
90010b44:	f0f3003c 	sbi	r7, r19, 60
90010b48:	f9130040 	swi	r8, r19, 64
    char num[32];
    int pos;

    pos = 0;
90010b4c:	f8130008 	swi	r0, r19, 8
    while (value != 0)
90010b50:	b800005c 	bri	92		// 90010bac
    {
        char c = value & 0x0F;
90010b54:	e8730038 	lwi	r3, r19, 56
90010b58:	a46300ff 	andi	r3, r3, 255
90010b5c:	90630060 	sext8	r3, r3
90010b60:	a463000f 	andi	r3, r3, 15
90010b64:	f0730004 	sbi	r3, r19, 4
        num[pos++] = "0123456789ABCDEF"[(unsigned) c];
90010b68:	e8b30008 	lwi	r5, r19, 8
90010b6c:	e0730004 	lbui	r3, r19, 4
90010b70:	90630060 	sext8	r3, r3
90010b74:	b0009002 	imm	-28670
90010b78:	e0632c54 	lbui	r3, r3, 11348
90010b7c:	90830060 	sext8	r4, r3
90010b80:	30730004 	addik	r3, r19, 4
90010b84:	10632800 	addk	r3, r3, r5
90010b88:	f0830008 	sbi	r4, r3, 8
90010b8c:	e8730008 	lwi	r3, r19, 8
90010b90:	30630001 	addik	r3, r3, 1
90010b94:	f8730008 	swi	r3, r19, 8
        value = (value >> 4) & HEX_CVT_MASK;
90010b98:	e8730038 	lwi	r3, r19, 56
90010b9c:	64630004 	bsrli	r3, r3, 4
90010ba0:	b0000fff 	imm	4095
90010ba4:	a463ffff 	andi	r3, r3, -1
90010ba8:	f8730038 	swi	r3, r19, 56
90010bac:	e8730038 	lwi	r3, r19, 56
90010bb0:	bc23ffa4 	bnei	r3, -92		// 90010b54
    }
    if (pos == 0)
90010bb4:	e8730008 	lwi	r3, r19, 8
90010bb8:	bc230040 	bnei	r3, 64		// 90010bf8
        num[pos++] = '0';
90010bbc:	e8930008 	lwi	r4, r19, 8
90010bc0:	30730004 	addik	r3, r19, 4
90010bc4:	10832000 	addk	r4, r3, r4
90010bc8:	30600030 	addik	r3, r0, 48
90010bcc:	f0640008 	sbi	r3, r4, 8
90010bd0:	e8730008 	lwi	r3, r19, 8
90010bd4:	30630001 	addik	r3, r3, 1
90010bd8:	f8730008 	swi	r3, r19, 8

    while (padCount-- - pos > 0)
90010bdc:	b800001c 	bri	28		// 90010bf8
        *buf++ = padChar;
90010be0:	e8930034 	lwi	r4, r19, 52
90010be4:	e073003c 	lbui	r3, r19, 60
90010be8:	f0640000 	sbi	r3, r4, 0
90010bec:	e8730034 	lwi	r3, r19, 52
90010bf0:	30630001 	addik	r3, r3, 1
90010bf4:	f8730034 	swi	r3, r19, 52
90010bf8:	e8930040 	lwi	r4, r19, 64
90010bfc:	e8730008 	lwi	r3, r19, 8
90010c00:	14832000 	rsubk	r4, r3, r4
90010c04:	6464021f 	bsrai	r3, r4, 31
90010c08:	14641800 	rsubk	r3, r4, r3
90010c0c:	6463001f 	bsrli	r3, r3, 31
90010c10:	a48300ff 	andi	r4, r3, 255
90010c14:	e8730040 	lwi	r3, r19, 64
90010c18:	3063ffff 	addik	r3, r3, -1
90010c1c:	f8730040 	swi	r3, r19, 64
90010c20:	bc24ffc0 	bnei	r4, -64		// 90010be0
        
    
    while (--pos >= 0)
90010c24:	b800002c 	bri	44		// 90010c50
        *buf++ = num[pos];
90010c28:	e8930008 	lwi	r4, r19, 8
90010c2c:	30730004 	addik	r3, r19, 4
90010c30:	10632000 	addk	r3, r3, r4
90010c34:	e0630008 	lbui	r3, r3, 8
90010c38:	90830060 	sext8	r4, r3
90010c3c:	e8730034 	lwi	r3, r19, 52
90010c40:	f0830000 	sbi	r4, r3, 0
90010c44:	e8730034 	lwi	r3, r19, 52
90010c48:	30630001 	addik	r3, r3, 1
90010c4c:	f8730034 	swi	r3, r19, 52
90010c50:	e8730008 	lwi	r3, r19, 8
90010c54:	3063ffff 	addik	r3, r3, -1
90010c58:	f8730008 	swi	r3, r19, 8
90010c5c:	e8730008 	lwi	r3, r19, 8
90010c60:	bca3ffc8 	bgei	r3, -56		// 90010c28

    *buf = 0;
90010c64:	e8730034 	lwi	r3, r19, 52
90010c68:	f0030000 	sbi	r0, r3, 0
    return buf;
90010c6c:	e8730034 	lwi	r3, r19, 52
}
90010c70:	10330000 	addk	r1, r19, r0
90010c74:	ea61002c 	lwi	r19, r1, 44
90010c78:	30210030 	addik	r1, r1, 48
90010c7c:	b60f0008 	rtsd	r15, 8
90010c80:	80000000 	or	r0, r0, r0

90010c84 <dec_convert>:

static char *
dec_convert (char *buf, long value)
{
90010c84:	3021ffdc 	addik	r1, r1, -36
90010c88:	fa610020 	swi	r19, r1, 32
90010c8c:	12610000 	addk	r19, r1, r0
90010c90:	f8b30028 	swi	r5, r19, 40
90010c94:	f8d3002c 	swi	r6, r19, 44
    char num[20];
    int pos;

    pos = 0;
90010c98:	f8130008 	swi	r0, r19, 8
    if (value < 0)
90010c9c:	e873002c 	lwi	r3, r19, 44
90010ca0:	bca30084 	bgei	r3, 132		// 90010d24
    {
        *buf++ = '-';
90010ca4:	e8930028 	lwi	r4, r19, 40
90010ca8:	3060002d 	addik	r3, r0, 45
90010cac:	f0640000 	sbi	r3, r4, 0
90010cb0:	e8730028 	lwi	r3, r19, 40
90010cb4:	30630001 	addik	r3, r3, 1
90010cb8:	f8730028 	swi	r3, r19, 40
        value = -value;
90010cbc:	e873002c 	lwi	r3, r19, 44
90010cc0:	14630000 	rsubk	r3, r3, r0
90010cc4:	f873002c 	swi	r3, r19, 44
    }
    while (value != 0)
90010cc8:	b800005c 	bri	92		// 90010d24
    {
        char c = value % 10;
90010ccc:	e8b3002c 	lwi	r5, r19, 44
90010cd0:	3060000a 	addik	r3, r0, 10
90010cd4:	48832800 	idiv	r4, r3, r5
90010cd8:	3060000a 	addik	r3, r0, 10
90010cdc:	40641800 	mul	r3, r4, r3
90010ce0:	14632800 	rsubk	r3, r3, r5
90010ce4:	f0730004 	sbi	r3, r19, 4
        value = value / 10;
90010ce8:	e893002c 	lwi	r4, r19, 44
90010cec:	3060000a 	addik	r3, r0, 10
90010cf0:	48632000 	idiv	r3, r3, r4
90010cf4:	f873002c 	swi	r3, r19, 44
        num[pos++] = c + '0';
90010cf8:	e8b30008 	lwi	r5, r19, 8
90010cfc:	e0730004 	lbui	r3, r19, 4
90010d00:	30630030 	addik	r3, r3, 48
90010d04:	a46300ff 	andi	r3, r3, 255
90010d08:	90830060 	sext8	r4, r3
90010d0c:	30730004 	addik	r3, r19, 4
90010d10:	10632800 	addk	r3, r3, r5
90010d14:	f0830008 	sbi	r4, r3, 8
90010d18:	e8730008 	lwi	r3, r19, 8
90010d1c:	30630001 	addik	r3, r3, 1
90010d20:	f8730008 	swi	r3, r19, 8
90010d24:	e873002c 	lwi	r3, r19, 44
90010d28:	bc23ffa4 	bnei	r3, -92		// 90010ccc
    }
    if (pos == 0)
90010d2c:	e8730008 	lwi	r3, r19, 8
90010d30:	bc230050 	bnei	r3, 80		// 90010d80
    num[pos++] = '0';
90010d34:	e8930008 	lwi	r4, r19, 8
90010d38:	30730004 	addik	r3, r19, 4
90010d3c:	10832000 	addk	r4, r3, r4
90010d40:	30600030 	addik	r3, r0, 48
90010d44:	f0640008 	sbi	r3, r4, 8
90010d48:	e8730008 	lwi	r3, r19, 8
90010d4c:	30630001 	addik	r3, r3, 1
90010d50:	f8730008 	swi	r3, r19, 8

    while (--pos >= 0)
90010d54:	b800002c 	bri	44		// 90010d80
    {
        *buf = num[pos];
90010d58:	e8930008 	lwi	r4, r19, 8
90010d5c:	30730004 	addik	r3, r19, 4
90010d60:	10632000 	addk	r3, r3, r4
90010d64:	e0630008 	lbui	r3, r3, 8
90010d68:	90830060 	sext8	r4, r3
90010d6c:	e8730028 	lwi	r3, r19, 40
90010d70:	f0830000 	sbi	r4, r3, 0
        buf++;
90010d74:	e8730028 	lwi	r3, r19, 40
90010d78:	30630001 	addik	r3, r3, 1
90010d7c:	f8730028 	swi	r3, r19, 40
90010d80:	e8730008 	lwi	r3, r19, 8
90010d84:	3063ffff 	addik	r3, r3, -1
90010d88:	f8730008 	swi	r3, r19, 8
90010d8c:	e8730008 	lwi	r3, r19, 8
90010d90:	bca3ffc8 	bgei	r3, -56		// 90010d58
    }
    *buf = 0;
90010d94:	e8730028 	lwi	r3, r19, 40
90010d98:	f0030000 	sbi	r0, r3, 0
    return buf;
90010d9c:	e8730028 	lwi	r3, r19, 40
}
90010da0:	10330000 	addk	r1, r19, r0
90010da4:	ea610020 	lwi	r19, r1, 32
90010da8:	30210024 	addik	r1, r1, 36
90010dac:	b60f0008 	rtsd	r15, 8
90010db0:	80000000 	or	r0, r0, r0

90010db4 <strtoint>:

int strtoint(const char *s, char **endptr)
{
90010db4:	3021fff0 	addik	r1, r1, -16
90010db8:	fa61000c 	swi	r19, r1, 12
90010dbc:	12610000 	addk	r19, r1, r0
90010dc0:	f8b30014 	swi	r5, r19, 20
90010dc4:	f8d30018 	swi	r6, r19, 24
    char *p     = (char*)s;
90010dc8:	e8730014 	lwi	r3, r19, 20
90010dcc:	f8730008 	swi	r3, r19, 8
    int   value = 0;
90010dd0:	f8130004 	swi	r0, r19, 4

    while(*p && isdigit(*p))
90010dd4:	b8000040 	bri	64		// 90010e14
    {
        value *= 10;
90010dd8:	e8930004 	lwi	r4, r19, 4
90010ddc:	3060000a 	addik	r3, r0, 10
90010de0:	40641800 	mul	r3, r4, r3
90010de4:	f8730004 	swi	r3, r19, 4
        value += (*p) - '0';
90010de8:	e8730008 	lwi	r3, r19, 8
90010dec:	e0630000 	lbui	r3, r3, 0
90010df0:	90630060 	sext8	r3, r3
90010df4:	10830000 	addk	r4, r3, r0
90010df8:	e8730004 	lwi	r3, r19, 4
90010dfc:	10641800 	addk	r3, r4, r3
90010e00:	3063ffd0 	addik	r3, r3, -48
90010e04:	f8730004 	swi	r3, r19, 4
        p++;
90010e08:	e8730008 	lwi	r3, r19, 8
90010e0c:	30630001 	addik	r3, r3, 1
90010e10:	f8730008 	swi	r3, r19, 8
90010e14:	e8730008 	lwi	r3, r19, 8
90010e18:	e0630000 	lbui	r3, r3, 0
90010e1c:	90630060 	sext8	r3, r3
90010e20:	bc030034 	beqi	r3, 52		// 90010e54
90010e24:	e8730008 	lwi	r3, r19, 8
90010e28:	e0630000 	lbui	r3, r3, 0
90010e2c:	90630060 	sext8	r3, r3
90010e30:	10830000 	addk	r4, r3, r0
90010e34:	b0009002 	imm	-28670
90010e38:	e8603b5c 	lwi	r3, r0, 15196
90010e3c:	10641800 	addk	r3, r4, r3
90010e40:	e0630000 	lbui	r3, r3, 0
90010e44:	90630060 	sext8	r3, r3
90010e48:	a46300ff 	andi	r3, r3, 255
90010e4c:	a4630004 	andi	r3, r3, 4
90010e50:	bc23ff88 	bnei	r3, -120		// 90010dd8
    }
    
    *endptr = p;
90010e54:	e8930018 	lwi	r4, r19, 24
90010e58:	e8730008 	lwi	r3, r19, 8
90010e5c:	f8640000 	swi	r3, r4, 0
    
    return value;
90010e60:	e8730004 	lwi	r3, r19, 4
}
90010e64:	10330000 	addk	r1, r19, r0
90010e68:	ea61000c 	lwi	r19, r1, 12
90010e6c:	30210010 	addik	r1, r1, 16
90010e70:	b60f0008 	rtsd	r15, 8
90010e74:	80000000 	or	r0, r0, r0

90010e78 <vsprintf>:


/* A very simple vsprintf (from calc.c). It only recognizes %d and %x.
The parameter MUST be of type 'long'. Otherwise, you will not get
the expected result! */
int
vsprintf (char *buf, const char *pattern, va_list argp)
{
90010e78:	3021ffc0 	addik	r1, r1, -64
90010e7c:	f9e10000 	swi	r15, r1, 0
90010e80:	fa61003c 	swi	r19, r1, 60
90010e84:	12610000 	addk	r19, r1, r0
90010e88:	f8b30044 	swi	r5, r19, 68
90010e8c:	f8d30048 	swi	r6, r19, 72
90010e90:	f8f3004c 	swi	r7, r19, 76
    char *p = buf;
90010e94:	e8730044 	lwi	r3, r19, 68
90010e98:	f8730030 	swi	r3, r19, 48
    char c;

    while ((c = *pattern++) != 0)
90010e9c:	b800032c 	bri	812		// 900111c8
    {
        if (c != '%')
90010ea0:	e073002c 	lbui	r3, r19, 44
90010ea4:	90630060 	sext8	r3, r3
90010ea8:	aa430025 	xori	r18, r3, 37
90010eac:	bc120020 	beqi	r18, 32		// 90010ecc
        {
            *p++ = c;
90010eb0:	e8930030 	lwi	r4, r19, 48
90010eb4:	e073002c 	lbui	r3, r19, 44
90010eb8:	f0640000 	sbi	r3, r4, 0
90010ebc:	e8730030 	lwi	r3, r19, 48
90010ec0:	30630001 	addik	r3, r3, 1
90010ec4:	f8730030 	swi	r3, r19, 48
90010ec8:	b8000300 	bri	768		// 900111c8
        }
        else
        {
            long v;
            char longType = 0;
90010ecc:	f0130025 	sbi	r0, r19, 37
            char padChar  = ' ';
90010ed0:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
90010ed4:	f0730024 	sbi	r3, r19, 36
            int  padCount;
            char* ppad;

            padCount = strtoint(pattern, &ppad);
90010ed8:	30730034 	addik	r3, r19, 52
90010edc:	e8b30048 	lwi	r5, r19, 72
90010ee0:	10c30000 	addk	r6, r3, r0
90010ee4:	b9f4fed0 	brlid	r15, -304	// 90010db4 <strtoint>
90010ee8:	80000000 	or	r0, r0, r0
90010eec:	f8730020 	swi	r3, r19, 32
            
            if(pattern != ppad)
90010ef0:	e8930034 	lwi	r4, r19, 52
90010ef4:	e8730048 	lwi	r3, r19, 72
90010ef8:	16441800 	rsubk	r18, r4, r3
90010efc:	bc120028 	beqi	r18, 40		// 90010f24
            {
                if (*pattern == '0')
90010f00:	e8730048 	lwi	r3, r19, 72
90010f04:	e0630000 	lbui	r3, r3, 0
90010f08:	90630060 	sext8	r3, r3
90010f0c:	aa430030 	xori	r18, r3, 48
90010f10:	bc32000c 	bnei	r18, 12		// 90010f1c
                {
                    padChar = '0';
90010f14:	30600030 	addik	r3, r0, 48
90010f18:	f0730024 	sbi	r3, r19, 36
                }
            
                pattern = ppad;
90010f1c:	e8730034 	lwi	r3, r19, 52
90010f20:	f8730048 	swi	r3, r19, 72
            }
            
            c = *pattern++;
90010f24:	e8730048 	lwi	r3, r19, 72
90010f28:	e0630000 	lbui	r3, r3, 0
90010f2c:	f073002c 	sbi	r3, r19, 44
90010f30:	e8730048 	lwi	r3, r19, 72
90010f34:	30630001 	addik	r3, r3, 1
90010f38:	f8730048 	swi	r3, r19, 72

            if (c == 'l')
90010f3c:	e073002c 	lbui	r3, r19, 44
90010f40:	90630060 	sext8	r3, r3
90010f44:	aa43006c 	xori	r18, r3, 108
90010f48:	bc320024 	bnei	r18, 36		// 90010f6c
            {
                c = *pattern++;
90010f4c:	e8730048 	lwi	r3, r19, 72
90010f50:	e0630000 	lbui	r3, r3, 0
90010f54:	f073002c 	sbi	r3, r19, 44
90010f58:	e8730048 	lwi	r3, r19, 72
90010f5c:	30630001 	addik	r3, r3, 1
90010f60:	f8730048 	swi	r3, r19, 72
                longType = 1;
90010f64:	30600001 	addik	r3, r0, 1
90010f68:	f0730025 	sbi	r3, r19, 37
            }

            switch (c)
90010f6c:	e073002c 	lbui	r3, r19, 44
90010f70:	90630060 	sext8	r3, r3
90010f74:	f8730038 	swi	r3, r19, 56
90010f78:	e8730038 	lwi	r3, r19, 56
90010f7c:	aa43006f 	xori	r18, r3, 111
90010f80:	bc120084 	beqi	r18, 132		// 90011004
90010f84:	e8730038 	lwi	r3, r19, 56
90010f88:	3240006f 	addik	r18, r0, 111
90010f8c:	16439001 	cmp	r18, r3, r18
90010f90:	bc52004c 	blti	r18, 76		// 90010fdc
90010f94:	e8730038 	lwi	r3, r19, 56
90010f98:	aa430063 	xori	r18, r3, 99
90010f9c:	bc12012c 	beqi	r18, 300		// 900110c8
90010fa0:	e8730038 	lwi	r3, r19, 56
90010fa4:	32400063 	addik	r18, r0, 99
90010fa8:	16439001 	cmp	r18, r3, r18
90010fac:	bc520020 	blti	r18, 32		// 90010fcc
90010fb0:	e8730038 	lwi	r3, r19, 56
90010fb4:	aa430025 	xori	r18, r3, 37
90010fb8:	bc1201c4 	beqi	r18, 452		// 9001117c
90010fbc:	e8730038 	lwi	r3, r19, 56
90010fc0:	aa430062 	xori	r18, r3, 98
90010fc4:	bc120040 	beqi	r18, 64		// 90011004
90010fc8:	b80001d0 	bri	464		// 90011198
90010fcc:	e8730038 	lwi	r3, r19, 56
90010fd0:	aa430064 	xori	r18, r3, 100
90010fd4:	bc12009c 	beqi	r18, 156		// 90011070
90010fd8:	b80001c0 	bri	448		// 90011198
90010fdc:	e8730038 	lwi	r3, r19, 56
90010fe0:	aa430075 	xori	r18, r3, 117
90010fe4:	bc12008c 	beqi	r18, 140		// 90011070
90010fe8:	e8730038 	lwi	r3, r19, 56
90010fec:	aa430078 	xori	r18, r3, 120
90010ff0:	bc120014 	beqi	r18, 20		// 90011004
90010ff4:	e8730038 	lwi	r3, r19, 56
90010ff8:	aa430073 	xori	r18, r3, 115
90010ffc:	bc120100 	beqi	r18, 256		// 900110fc
90011000:	b8000198 	bri	408		// 90011198
            {
                case 'b':
                case 'o':
                case 'x':
                    if(longType)
90011004:	e0730025 	lbui	r3, r19, 37
90011008:	90630060 	sext8	r3, r3
9001100c:	bc030020 	beqi	r3, 32		// 9001102c
                    {
                        v = va_arg (argp, long);
90011010:	e893004c 	lwi	r4, r19, 76
90011014:	30640004 	addik	r3, r4, 4
90011018:	f873004c 	swi	r3, r19, 76
9001101c:	10640000 	addk	r3, r4, r0
90011020:	e8630000 	lwi	r3, r3, 0
90011024:	f8730028 	swi	r3, r19, 40
90011028:	b8000024 	bri	36		// 9001104c
                    }
                    else
                    {
                        v = va_arg (argp, int) & 0x0000ffff;
9001102c:	e893004c 	lwi	r4, r19, 76
90011030:	30640004 	addik	r3, r4, 4
90011034:	f873004c 	swi	r3, r19, 76
90011038:	10640000 	addk	r3, r4, r0
9001103c:	e8630000 	lwi	r3, r3, 0
90011040:	b0000000 	imm	0
90011044:	a463ffff 	andi	r3, r3, -1
90011048:	f8730028 	swi	r3, r19, 40
                    }
                    p = hex_convert (p, v, padChar, padCount);
9001104c:	e8730028 	lwi	r3, r19, 40
90011050:	e8b30030 	lwi	r5, r19, 48
90011054:	10c30000 	addk	r6, r3, r0
90011058:	e0f30024 	lbui	r7, r19, 36
9001105c:	e9130020 	lwi	r8, r19, 32
90011060:	b9f4fad0 	brlid	r15, -1328	// 90010b30 <hex_convert>
90011064:	80000000 	or	r0, r0, r0
90011068:	f8730030 	swi	r3, r19, 48
                    break;
9001106c:	b800015c 	bri	348		// 900111c8

                case 'd':
                case 'u':
                    if(longType)
90011070:	e0730025 	lbui	r3, r19, 37
90011074:	90630060 	sext8	r3, r3
90011078:	bc030020 	beqi	r3, 32		// 90011098
                    {
                        v = va_arg (argp, long);
9001107c:	e893004c 	lwi	r4, r19, 76
90011080:	30640004 	addik	r3, r4, 4
90011084:	f873004c 	swi	r3, r19, 76
90011088:	10640000 	addk	r3, r4, r0
9001108c:	e8630000 	lwi	r3, r3, 0
90011090:	f8730028 	swi	r3, r19, 40
90011094:	b800001c 	bri	28		// 900110b0
                    }
                    else
                    {
                        v = va_arg (argp, int);
90011098:	e893004c 	lwi	r4, r19, 76
9001109c:	30640004 	addik	r3, r4, 4
900110a0:	f873004c 	swi	r3, r19, 76
900110a4:	10640000 	addk	r3, r4, r0
900110a8:	e8630000 	lwi	r3, r3, 0
900110ac:	f8730028 	swi	r3, r19, 40
                    }
                    p = dec_convert (p, v);
900110b0:	e8b30030 	lwi	r5, r19, 48
900110b4:	e8d30028 	lwi	r6, r19, 40
900110b8:	b9f4fbcc 	brlid	r15, -1076	// 90010c84 <dec_convert>
900110bc:	80000000 	or	r0, r0, r0
900110c0:	f8730030 	swi	r3, r19, 48
                    break;
900110c4:	b8000104 	bri	260		// 900111c8

                case 'c':
                    c = va_arg (argp, int);
900110c8:	e893004c 	lwi	r4, r19, 76
900110cc:	30640004 	addik	r3, r4, 4
900110d0:	f873004c 	swi	r3, r19, 76
900110d4:	10640000 	addk	r3, r4, r0
900110d8:	e8630000 	lwi	r3, r3, 0
900110dc:	f073002c 	sbi	r3, r19, 44
                    *p++ = c;
900110e0:	e8930030 	lwi	r4, r19, 48
900110e4:	e073002c 	lbui	r3, r19, 44
900110e8:	f0640000 	sbi	r3, r4, 0
900110ec:	e8730030 	lwi	r3, r19, 48
900110f0:	30630001 	addik	r3, r3, 1
900110f4:	f8730030 	swi	r3, r19, 48
                    break;
900110f8:	b80000d0 	bri	208		// 900111c8

                case 's':
                    {
                        const char *q = va_arg (argp, const char*);
900110fc:	e893004c 	lwi	r4, r19, 76
90011100:	30640004 	addik	r3, r4, 4
90011104:	f873004c 	swi	r3, r19, 76
90011108:	10640000 	addk	r3, r4, r0
9001110c:	e8630000 	lwi	r3, r3, 0
90011110:	f873001c 	swi	r3, r19, 28
    
                        if (q == 0)
90011114:	e873001c 	lwi	r3, r19, 28
90011118:	bc230010 	bnei	r3, 16		// 90011128
                            q = "(null)";
9001111c:	b0009002 	imm	-28670
90011120:	30602c68 	addik	r3, r0, 11368
90011124:	f873001c 	swi	r3, r19, 28
                        while ((*p++ = *q++) != 0)
90011128:	e873001c 	lwi	r3, r19, 28
9001112c:	e0630000 	lbui	r3, r3, 0
90011130:	90830060 	sext8	r4, r3
90011134:	e8730030 	lwi	r3, r19, 48
90011138:	f0830000 	sbi	r4, r3, 0
9001113c:	e8730030 	lwi	r3, r19, 48
90011140:	e0630000 	lbui	r3, r3, 0
90011144:	90630060 	sext8	r3, r3
90011148:	8c630400 	pcmpne	r3, r3, r0
9001114c:	a48300ff 	andi	r4, r3, 255
90011150:	e8730030 	lwi	r3, r19, 48
90011154:	30630001 	addik	r3, r3, 1
90011158:	f8730030 	swi	r3, r19, 48
9001115c:	e873001c 	lwi	r3, r19, 28
90011160:	30630001 	addik	r3, r3, 1
90011164:	f873001c 	swi	r3, r19, 28
90011168:	bc24ffc0 	bnei	r4, -64		// 90011128
                            continue;
                        p--;
9001116c:	e8730030 	lwi	r3, r19, 48
90011170:	3063ffff 	addik	r3, r3, -1
90011174:	f8730030 	swi	r3, r19, 48
                    }
                    break;
90011178:	b8000050 	bri	80		// 900111c8

                case '%':
                    *p++ = '%';
9001117c:	e8930030 	lwi	r4, r19, 48
90011180:	30600025 	addik	r3, r0, 37
90011184:	f0640000 	sbi	r3, r4, 0
90011188:	e8730030 	lwi	r3, r19, 48
9001118c:	30630001 	addik	r3, r3, 1
90011190:	f8730030 	swi	r3, r19, 48
                    break;
90011194:	b8000034 	bri	52		// 900111c8

                default:
                    *p++ = '%';
90011198:	e8930030 	lwi	r4, r19, 48
9001119c:	30600025 	addik	r3, r0, 37
900111a0:	f0640000 	sbi	r3, r4, 0
900111a4:	e8730030 	lwi	r3, r19, 48
900111a8:	30630001 	addik	r3, r3, 1
900111ac:	f8730030 	swi	r3, r19, 48
                    *p++ = c;
900111b0:	e8930030 	lwi	r4, r19, 48
900111b4:	e073002c 	lbui	r3, r19, 44
900111b8:	f0640000 	sbi	r3, r4, 0
900111bc:	e8730030 	lwi	r3, r19, 48
900111c0:	30630001 	addik	r3, r3, 1
900111c4:	f8730030 	swi	r3, r19, 48
900111c8:	e8730048 	lwi	r3, r19, 72
900111cc:	e0630000 	lbui	r3, r3, 0
900111d0:	f073002c 	sbi	r3, r19, 44
900111d4:	e073002c 	lbui	r3, r19, 44
900111d8:	90630060 	sext8	r3, r3
900111dc:	8c630400 	pcmpne	r3, r3, r0
900111e0:	a48300ff 	andi	r4, r3, 255
900111e4:	e8730048 	lwi	r3, r19, 72
900111e8:	30630001 	addik	r3, r3, 1
900111ec:	f8730048 	swi	r3, r19, 72
900111f0:	bc24fcb0 	bnei	r4, -848		// 90010ea0
                    break;
            }
        }
    }
    *p++ = 0;
900111f4:	e8730030 	lwi	r3, r19, 48
900111f8:	f0030000 	sbi	r0, r3, 0
900111fc:	e8730030 	lwi	r3, r19, 48
90011200:	30630001 	addik	r3, r3, 1
90011204:	f8730030 	swi	r3, r19, 48
    return (size_t) (p - buf);
90011208:	e8930030 	lwi	r4, r19, 48
9001120c:	e8730044 	lwi	r3, r19, 68
90011210:	14632000 	rsubk	r3, r3, r4
}
90011214:	e9e10000 	lwi	r15, r1, 0
90011218:	10330000 	addk	r1, r19, r0
9001121c:	ea61003c 	lwi	r19, r1, 60
90011220:	30210040 	addik	r1, r1, 64
90011224:	b60f0008 	rtsd	r15, 8
90011228:	80000000 	or	r0, r0, r0

9001122c <sprintf>:

int
sprintf (char *buf, const char *msg, ...)
{
9001122c:	f8c10008 	swi	r6, r1, 8
90011230:	f8e1000c 	swi	r7, r1, 12
90011234:	f9010010 	swi	r8, r1, 16
90011238:	f9210014 	swi	r9, r1, 20
9001123c:	f9410018 	swi	r10, r1, 24
90011240:	3021ffd8 	addik	r1, r1, -40
90011244:	f9e10000 	swi	r15, r1, 0
90011248:	fa610024 	swi	r19, r1, 36
9001124c:	12610000 	addk	r19, r1, r0
90011250:	f8b3002c 	swi	r5, r19, 44
90011254:	f8d30030 	swi	r6, r19, 48
    int result;
    va_list argp;

    va_start (argp, msg);
90011258:	30730034 	addik	r3, r19, 52
9001125c:	f8730020 	swi	r3, r19, 32
    result = vsprintf (buf, msg, argp);
90011260:	e8730020 	lwi	r3, r19, 32
90011264:	e8b3002c 	lwi	r5, r19, 44
90011268:	e8d30030 	lwi	r6, r19, 48
9001126c:	10e30000 	addk	r7, r3, r0
90011270:	b9f4fc08 	brlid	r15, -1016	// 90010e78 <vsprintf>
90011274:	80000000 	or	r0, r0, r0
90011278:	f873001c 	swi	r3, r19, 28
    va_end (argp);

    return result;
9001127c:	e873001c 	lwi	r3, r19, 28
}
90011280:	e9e10000 	lwi	r15, r1, 0
90011284:	10330000 	addk	r1, r19, r0
90011288:	ea610024 	lwi	r19, r1, 36
9001128c:	30210028 	addik	r1, r1, 40
90011290:	b60f0008 	rtsd	r15, 8
90011294:	80000000 	or	r0, r0, r0

90011298 <storeFileData>:
///////////////////////////////////////////////////
// Interface functions

bool storeFileData(uint32 fileOffset, uint8 data)
{
90011298:	3021ffdc 	addik	r1, r1, -36
9001129c:	f9e10000 	swi	r15, r1, 0
900112a0:	fa610020 	swi	r19, r1, 32
900112a4:	12610000 	addk	r19, r1, r0
900112a8:	f8b30028 	swi	r5, r19, 40
900112ac:	f0d3002c 	sbi	r6, r19, 44
    updataData.imageVerified = false;
900112b0:	b0009002 	imm	-28670
900112b4:	f800fdd0 	swi	r0, r0, -560
    
    ASSERT(fileOffset < SCRATCH_RAM_SIZE);
900112b8:	b0009002 	imm	-28670
900112bc:	e8802c74 	lwi	r4, r0, 11380
900112c0:	e8730028 	lwi	r3, r19, 40
900112c4:	16441803 	cmpu	r18, r4, r3
900112c8:	bc520028 	blti	r18, 40		// 900112f0
900112cc:	94110002 	msrclr	r0, 2
900112d0:	b0009002 	imm	-28670
900112d4:	30a02c78 	addik	r5, r0, 11384
900112d8:	b0009002 	imm	-28670
900112dc:	30c02c98 	addik	r6, r0, 11416
900112e0:	30e00040 	addik	r7, r0, 64
900112e4:	b9f4b140 	brlid	r15, -20160	// 9000c424 <printAssert>
900112e8:	80000000 	or	r0, r0, r0
900112ec:	b8000000 	bri	0		// 900112ec

    if(!fileOffset)
900112f0:	e8730028 	lwi	r3, r19, 40
900112f4:	bc230010 	bnei	r3, 16		// 90011304
    {
        updataData.fileIndex = 0;
900112f8:	b0009002 	imm	-28670
900112fc:	f800fdcc 	swi	r0, r0, -564
90011300:	b8000048 	bri	72		// 90011348
    }
    else if(fileOffset < updataData.fileIndex)
90011304:	b0009002 	imm	-28670
90011308:	e880fdcc 	lwi	r4, r0, -564
9001130c:	e8730028 	lwi	r3, r19, 40
90011310:	16441803 	cmpu	r18, r4, r3
90011314:	bcb20014 	bgei	r18, 20		// 90011328
    {
        // Allow stepping backwards to support
        // packet retries
        updataData.fileIndex = fileOffset;
90011318:	e8730028 	lwi	r3, r19, 40
9001131c:	b0009002 	imm	-28670
90011320:	f860fdcc 	swi	r3, r0, -564
90011324:	b8000024 	bri	36		// 90011348
    }
    else if(fileOffset > updataData.fileIndex)
90011328:	b0009002 	imm	-28670
9001132c:	e880fdcc 	lwi	r4, r0, -564
90011330:	e8730028 	lwi	r3, r19, 40
90011334:	16432003 	cmpu	r18, r3, r4
90011338:	bcb20010 	bgei	r18, 16		// 90011348
    {
        return false;
9001133c:	10600000 	addk	r3, r0, r0
90011340:	f873001c 	swi	r3, r19, 28
90011344:	b8000038 	bri	56		// 9001137c
    }

    SCRATCH_RAM[updataData.fileIndex++] = data;
90011348:	b0009002 	imm	-28670
9001134c:	e8a0fdcc 	lwi	r5, r0, -564
90011350:	10850000 	addk	r4, r5, r0
90011354:	b0009002 	imm	-28670
90011358:	e8602c70 	lwi	r3, r0, 11376
9001135c:	10841800 	addk	r4, r4, r3
90011360:	e073002c 	lbui	r3, r19, 44
90011364:	f0640000 	sbi	r3, r4, 0
90011368:	30650001 	addik	r3, r5, 1
9001136c:	b0009002 	imm	-28670
90011370:	f860fdcc 	swi	r3, r0, -564
    
    return true;
90011374:	30600001 	addik	r3, r0, 1
90011378:	f873001c 	swi	r3, r19, 28
9001137c:	e873001c 	lwi	r3, r19, 28
}
90011380:	e9e10000 	lwi	r15, r1, 0
90011384:	10330000 	addk	r1, r19, r0
90011388:	ea610020 	lwi	r19, r1, 32
9001138c:	30210024 	addik	r1, r1, 36
90011390:	b60f0008 	rtsd	r15, 8
90011394:	80000000 	or	r0, r0, r0

90011398 <verifyFirmwareImage>:



bool verifyFirmwareImage(uint32 fileSize, uint32 imageCRC)
{
90011398:	3021ffdc 	addik	r1, r1, -36
9001139c:	f9e10000 	swi	r15, r1, 0
900113a0:	fa610020 	swi	r19, r1, 32
900113a4:	12610000 	addk	r19, r1, r0
900113a8:	f8b30028 	swi	r5, r19, 40
900113ac:	f8d3002c 	swi	r6, r19, 44
    printf("Firmware Upgrade:\n");
900113b0:	b0009002 	imm	-28670
900113b4:	30a02ca8 	addik	r5, r0, 11432
900113b8:	b9f4eb80 	brlid	r15, -5248	// 9000ff38 <puts>
900113bc:	80000000 	or	r0, r0, r0
    printf("Verifying image...\n");
900113c0:	b0009002 	imm	-28670
900113c4:	30a02cbc 	addik	r5, r0, 11452
900113c8:	b9f4eb70 	brlid	r15, -5264	// 9000ff38 <puts>
900113cc:	80000000 	or	r0, r0, r0

    if(fileSize & 0x01)
900113d0:	e8730028 	lwi	r3, r19, 40
900113d4:	a4630001 	andi	r3, r3, 1
900113d8:	a46300ff 	andi	r3, r3, 255
900113dc:	bc030020 	beqi	r3, 32		// 900113fc
    {
        //Must be on 16-bit boundry (no odd fileSize)
        printf("Invalid Image - odd byte count");
900113e0:	b0009002 	imm	-28670
900113e4:	30a02cd0 	addik	r5, r0, 11472
900113e8:	b9f4ea5c 	brlid	r15, -5540	// 9000fe44 <printf>
900113ec:	80000000 	or	r0, r0, r0
        return false;
900113f0:	10600000 	addk	r3, r0, r0
900113f4:	f873001c 	swi	r3, r19, 28
900113f8:	b8000094 	bri	148		// 9001148c
    }

    if(fileSize != updataData.fileIndex)
900113fc:	b0009002 	imm	-28670
90011400:	e880fdcc 	lwi	r4, r0, -564
90011404:	e8730028 	lwi	r3, r19, 40
90011408:	16432000 	rsubk	r18, r3, r4
9001140c:	bc120030 	beqi	r18, 48		// 9001143c
    {
        printf("Invalid Image - Size incorrect (expected %ld, actual %ld)\n", fileSize, updataData.fileIndex);
90011410:	b0009002 	imm	-28670
90011414:	e860fdcc 	lwi	r3, r0, -564
90011418:	b0009002 	imm	-28670
9001141c:	30a02cf0 	addik	r5, r0, 11504
90011420:	e8d30028 	lwi	r6, r19, 40
90011424:	10e30000 	addk	r7, r3, r0
90011428:	b9f4ea1c 	brlid	r15, -5604	// 9000fe44 <printf>
9001142c:	80000000 	or	r0, r0, r0
        return false;
90011430:	10600000 	addk	r3, r0, r0
90011434:	f873001c 	swi	r3, r19, 28
90011438:	b8000054 	bri	84		// 9001148c
    }

    if(!verifyRamFirmwareImage((char*)SCRATCH_RAM, fileSize, imageCRC))
9001143c:	b0009002 	imm	-28670
90011440:	e8602c70 	lwi	r3, r0, 11376
90011444:	10a30000 	addk	r5, r3, r0
90011448:	e8d30028 	lwi	r6, r19, 40
9001144c:	e8f3002c 	lwi	r7, r19, 44
90011450:	b9f4c640 	brlid	r15, -14784	// 9000da90 <verifyRamFirmwareImage>
90011454:	80000000 	or	r0, r0, r0
90011458:	bc230020 	bnei	r3, 32		// 90011478
    {
        printf("Invalid Firmware Image\n");
9001145c:	b0009002 	imm	-28670
90011460:	30a02d2c 	addik	r5, r0, 11564
90011464:	b9f4ead4 	brlid	r15, -5420	// 9000ff38 <puts>
90011468:	80000000 	or	r0, r0, r0
        return false;
9001146c:	10600000 	addk	r3, r0, r0
90011470:	f873001c 	swi	r3, r19, 28
90011474:	b8000018 	bri	24		// 9001148c
    }

    updataData.imageVerified = true;
90011478:	30600001 	addik	r3, r0, 1
9001147c:	b0009002 	imm	-28670
90011480:	f860fdd0 	swi	r3, r0, -560
    
    return true;
90011484:	30600001 	addik	r3, r0, 1
90011488:	f873001c 	swi	r3, r19, 28
9001148c:	e873001c 	lwi	r3, r19, 28
}
90011490:	e9e10000 	lwi	r15, r1, 0
90011494:	10330000 	addk	r1, r19, r0
90011498:	ea610020 	lwi	r19, r1, 32
9001149c:	30210024 	addik	r1, r1, 36
900114a0:	b60f0008 	rtsd	r15, 8
900114a4:	80000000 	or	r0, r0, r0

900114a8 <updateFirmware>:



void updateFirmware(uint32 fileSize, uint32 imageCRC)
{
900114a8:	3021ffe0 	addik	r1, r1, -32
900114ac:	f9e10000 	swi	r15, r1, 0
900114b0:	fa61001c 	swi	r19, r1, 28
900114b4:	12610000 	addk	r19, r1, r0
900114b8:	f8b30024 	swi	r5, r19, 36
900114bc:	f8d30028 	swi	r6, r19, 40
    if(!updataData.imageVerified)
900114c0:	b0009002 	imm	-28670
900114c4:	e860fdd0 	lwi	r3, r0, -560
900114c8:	bc23002c 	bnei	r3, 44		// 900114f4
    {
        if(!verifyFirmwareImage(fileSize, imageCRC))
900114cc:	e8b30024 	lwi	r5, r19, 36
900114d0:	e8d30028 	lwi	r6, r19, 40
900114d4:	b9f4fec4 	brlid	r15, -316	// 90011398 <verifyFirmwareImage>
900114d8:	80000000 	or	r0, r0, r0
900114dc:	bc230018 	bnei	r3, 24		// 900114f4
        {
            printf("Invalid Firmware Image - skipping update\n");
900114e0:	b0009002 	imm	-28670
900114e4:	30a02d44 	addik	r5, r0, 11588
900114e8:	b9f4ea50 	brlid	r15, -5552	// 9000ff38 <puts>
900114ec:	80000000 	or	r0, r0, r0
            return;
900114f0:	b80000a8 	bri	168		// 90011598
        }
    }


    printf("Running Firmware Upgrade...\n");
900114f4:	b0009002 	imm	-28670
900114f8:	30a02d70 	addik	r5, r0, 11632
900114fc:	b9f4ea3c 	brlid	r15, -5572	// 9000ff38 <puts>
90011500:	80000000 	or	r0, r0, r0
    printf("Writing Flash...\n");
90011504:	b0009002 	imm	-28670
90011508:	30a02d8c 	addik	r5, r0, 11660
9001150c:	b9f4ea2c 	brlid	r15, -5588	// 9000ff38 <puts>
90011510:	80000000 	or	r0, r0, r0



    if(!programFlashFirmwareImage(fileSize, SCRATCH_RAM))
90011514:	b0009002 	imm	-28670
90011518:	e8602c70 	lwi	r3, r0, 11376
9001151c:	e8b30024 	lwi	r5, r19, 36
90011520:	10c30000 	addk	r6, r3, r0
90011524:	b9f4c874 	brlid	r15, -14220	// 9000dd98 <programFlashFirmwareImage>
90011528:	80000000 	or	r0, r0, r0
9001152c:	bc230018 	bnei	r3, 24		// 90011544
    {
        printf("Write Failed\n");
90011530:	b0009002 	imm	-28670
90011534:	30a02da0 	addik	r5, r0, 11680
90011538:	b9f4ea00 	brlid	r15, -5632	// 9000ff38 <puts>
9001153c:	80000000 	or	r0, r0, r0
        return;
90011540:	b8000058 	bri	88		// 90011598
    }



    printf("Verifing Flash...\n");
90011544:	b0009002 	imm	-28670
90011548:	30a02db0 	addik	r5, r0, 11696
9001154c:	b9f4e9ec 	brlid	r15, -5652	// 9000ff38 <puts>
90011550:	80000000 	or	r0, r0, r0
    if(!verifyFlashFirmwareImage())
90011554:	b9f4c744 	brlid	r15, -14524	// 9000dc98 <verifyFlashFirmwareImage>
90011558:	80000000 	or	r0, r0, r0
9001155c:	bc230018 	bnei	r3, 24		// 90011574
    {
        printf("Verify Failed\n");
90011560:	b0009002 	imm	-28670
90011564:	30a02dc4 	addik	r5, r0, 11716
90011568:	b9f4e9d0 	brlid	r15, -5680	// 9000ff38 <puts>
9001156c:	80000000 	or	r0, r0, r0
        return;
90011570:	b8000028 	bri	40		// 90011598
    }

    printf("Rebooting...\n");
90011574:	b0009002 	imm	-28670
90011578:	30a02dd4 	addik	r5, r0, 11732
9001157c:	b9f4e9bc 	brlid	r15, -5700	// 9000ff38 <puts>
90011580:	80000000 	or	r0, r0, r0
    
    mdelay(1000);
90011584:	30a003e8 	addik	r5, r0, 1000
90011588:	b9f4ab7c 	brlid	r15, -21636	// 9000c104 <mdelay>
9001158c:	80000000 	or	r0, r0, r0

    reboot();
90011590:	b9f4ead8 	brlid	r15, -5416	// 90010068 <reboot>
90011594:	80000000 	or	r0, r0, r0
}
90011598:	e9e10000 	lwi	r15, r1, 0
9001159c:	10330000 	addk	r1, r19, r0
900115a0:	ea61001c 	lwi	r19, r1, 28
900115a4:	30210020 	addik	r1, r1, 32
900115a8:	b60f0008 	rtsd	r15, 8
900115ac:	80000000 	or	r0, r0, r0

900115b0 <verifyFPGAImage>:


#ifndef BOOTLOADER

bool verifyFPGAImage(uint32 fileSize, uint32 imageCRC)
{
900115b0:	3021ffdc 	addik	r1, r1, -36
900115b4:	f9e10000 	swi	r15, r1, 0
900115b8:	fa610020 	swi	r19, r1, 32
900115bc:	12610000 	addk	r19, r1, r0
900115c0:	f8b30028 	swi	r5, r19, 40
900115c4:	f8d3002c 	swi	r6, r19, 44
    printf("FPGA Upgrade:\n");
900115c8:	b0009002 	imm	-28670
900115cc:	30a02de4 	addik	r5, r0, 11748
900115d0:	b9f4e968 	brlid	r15, -5784	// 9000ff38 <puts>
900115d4:	80000000 	or	r0, r0, r0
    printf("Verifying image...\n");
900115d8:	b0009002 	imm	-28670
900115dc:	30a02cbc 	addik	r5, r0, 11452
900115e0:	b9f4e958 	brlid	r15, -5800	// 9000ff38 <puts>
900115e4:	80000000 	or	r0, r0, r0

    if(fileSize != updataData.fileIndex)
900115e8:	b0009002 	imm	-28670
900115ec:	e880fdcc 	lwi	r4, r0, -564
900115f0:	e8730028 	lwi	r3, r19, 40
900115f4:	16432000 	rsubk	r18, r3, r4
900115f8:	bc120030 	beqi	r18, 48		// 90011628
    {
        printf("Invalid Image - Size incorrect (expected %ld, actual %ld)\n", fileSize, updataData.fileIndex);
900115fc:	b0009002 	imm	-28670
90011600:	e860fdcc 	lwi	r3, r0, -564
90011604:	b0009002 	imm	-28670
90011608:	30a02cf0 	addik	r5, r0, 11504
9001160c:	e8d30028 	lwi	r6, r19, 40
90011610:	10e30000 	addk	r7, r3, r0
90011614:	b9f4e830 	brlid	r15, -6096	// 9000fe44 <printf>
90011618:	80000000 	or	r0, r0, r0
        return false;
9001161c:	10600000 	addk	r3, r0, r0
90011620:	f873001c 	swi	r3, r19, 28
90011624:	b8000054 	bri	84		// 90011678
    }

    if(!verifyRamFPGAImage((char*)SCRATCH_RAM, fileSize, imageCRC))
90011628:	b0009002 	imm	-28670
9001162c:	e8602c70 	lwi	r3, r0, 11376
90011630:	10a30000 	addk	r5, r3, r0
90011634:	e8d30028 	lwi	r6, r19, 40
90011638:	e8f3002c 	lwi	r7, r19, 44
9001163c:	b9f4c7a4 	brlid	r15, -14428	// 9000dde0 <verifyRamFPGAImage>
90011640:	80000000 	or	r0, r0, r0
90011644:	bc230020 	bnei	r3, 32		// 90011664
    {
        printf("Invalid FPGA Image\n");
90011648:	b0009002 	imm	-28670
9001164c:	30a02df4 	addik	r5, r0, 11764
90011650:	b9f4e8e8 	brlid	r15, -5912	// 9000ff38 <puts>
90011654:	80000000 	or	r0, r0, r0
        return false;
90011658:	10600000 	addk	r3, r0, r0
9001165c:	f873001c 	swi	r3, r19, 28
90011660:	b8000018 	bri	24		// 90011678
    }

    updataData.imageVerified = true;
90011664:	30600001 	addik	r3, r0, 1
90011668:	b0009002 	imm	-28670
9001166c:	f860fdd0 	swi	r3, r0, -560
    
    return true;
90011670:	30600001 	addik	r3, r0, 1
90011674:	f873001c 	swi	r3, r19, 28
90011678:	e873001c 	lwi	r3, r19, 28
}
9001167c:	e9e10000 	lwi	r15, r1, 0
90011680:	10330000 	addk	r1, r19, r0
90011684:	ea610020 	lwi	r19, r1, 32
90011688:	30210024 	addik	r1, r1, 36
9001168c:	b60f0008 	rtsd	r15, 8
90011690:	80000000 	or	r0, r0, r0

90011694 <updateFPGA>:



void updateFPGA(uint32 fileSize, uint32 imageCRC)
{
90011694:	3021ffe0 	addik	r1, r1, -32
90011698:	f9e10000 	swi	r15, r1, 0
9001169c:	fa61001c 	swi	r19, r1, 28
900116a0:	12610000 	addk	r19, r1, r0
900116a4:	f8b30024 	swi	r5, r19, 36
900116a8:	f8d30028 	swi	r6, r19, 40
    if(!updataData.imageVerified)
900116ac:	b0009002 	imm	-28670
900116b0:	e860fdd0 	lwi	r3, r0, -560
900116b4:	bc23002c 	bnei	r3, 44		// 900116e0
    {
        if(!verifyFPGAImage(fileSize, imageCRC))
900116b8:	e8b30024 	lwi	r5, r19, 36
900116bc:	e8d30028 	lwi	r6, r19, 40
900116c0:	b9f4fef0 	brlid	r15, -272	// 900115b0 <verifyFPGAImage>
900116c4:	80000000 	or	r0, r0, r0
900116c8:	bc230018 	bnei	r3, 24		// 900116e0
        {
            printf("Invalid FPGA Image - skipping update\n");
900116cc:	b0009002 	imm	-28670
900116d0:	30a02e08 	addik	r5, r0, 11784
900116d4:	b9f4e864 	brlid	r15, -6044	// 9000ff38 <puts>
900116d8:	80000000 	or	r0, r0, r0
            return;
900116dc:	b8000098 	bri	152		// 90011774
        }
    }


    printf("Running FPGA Upgrade...\n");
900116e0:	b0009002 	imm	-28670
900116e4:	30a02e30 	addik	r5, r0, 11824
900116e8:	b9f4e850 	brlid	r15, -6064	// 9000ff38 <puts>
900116ec:	80000000 	or	r0, r0, r0
    printf("Writing Flash...\n");
900116f0:	b0009002 	imm	-28670
900116f4:	30a02d8c 	addik	r5, r0, 11660
900116f8:	b9f4e840 	brlid	r15, -6080	// 9000ff38 <puts>
900116fc:	80000000 	or	r0, r0, r0



    if(!programFlashFPGAImage(fileSize, SCRATCH_RAM))
90011700:	b0009002 	imm	-28670
90011704:	e8602c70 	lwi	r3, r0, 11376
90011708:	e8b30024 	lwi	r5, r19, 36
9001170c:	10c30000 	addk	r6, r3, r0
90011710:	b9f4c8b4 	brlid	r15, -14156	// 9000dfc4 <programFlashFPGAImage>
90011714:	80000000 	or	r0, r0, r0
90011718:	bc230018 	bnei	r3, 24		// 90011730
    {
        printf("Write Failed\n");
9001171c:	b0009002 	imm	-28670
90011720:	30a02da0 	addik	r5, r0, 11680
90011724:	b9f4e814 	brlid	r15, -6124	// 9000ff38 <puts>
90011728:	80000000 	or	r0, r0, r0
        return;
9001172c:	b8000048 	bri	72		// 90011774
    }



    printf("Verifing Flash...\n");
90011730:	b0009002 	imm	-28670
90011734:	30a02db0 	addik	r5, r0, 11696
90011738:	b9f4e800 	brlid	r15, -6144	// 9000ff38 <puts>
9001173c:	80000000 	or	r0, r0, r0
    if(!verifyFlashFPGAImage(imageCRC))
90011740:	e8b30028 	lwi	r5, r19, 40
90011744:	b9f4c7d8 	brlid	r15, -14376	// 9000df1c <verifyFlashFPGAImage>
90011748:	80000000 	or	r0, r0, r0
9001174c:	bc230018 	bnei	r3, 24		// 90011764
    {
        printf("Verify Failed - FPGA image is corrupt\n");
90011750:	b0009002 	imm	-28670
90011754:	30a02e48 	addik	r5, r0, 11848
90011758:	b9f4e7e0 	brlid	r15, -6176	// 9000ff38 <puts>
9001175c:	80000000 	or	r0, r0, r0
        return;
90011760:	b8000014 	bri	20		// 90011774
    }
    
    printf("Verified.\n");
90011764:	b0009002 	imm	-28670
90011768:	30a02e70 	addik	r5, r0, 11888
9001176c:	b9f4e7cc 	brlid	r15, -6196	// 9000ff38 <puts>
90011770:	80000000 	or	r0, r0, r0
}
90011774:	e9e10000 	lwi	r15, r1, 0
90011778:	10330000 	addk	r1, r19, r0
9001177c:	ea61001c 	lwi	r19, r1, 28
90011780:	30210020 	addik	r1, r1, 32
90011784:	b60f0008 	rtsd	r15, 8
90011788:	80000000 	or	r0, r0, r0

9001178c <__muldi3>:
9001178c:	3021ffec 	addik	r1, r1, -20
90011790:	11680000 	addk	r11, r8, r0
90011794:	fae10008 	swi	r23, r1, 8
90011798:	12e60000 	addk	r23, r6, r0
9001179c:	10c80000 	addk	r6, r8, r0
900117a0:	11470000 	addk	r10, r7, r0
900117a4:	b0000000 	imm	0
900117a8:	a497ffff 	andi	r4, r23, -1
900117ac:	64eb0010 	bsrli	r7, r11, 16
900117b0:	65170010 	bsrli	r8, r23, 16
900117b4:	41775000 	mul	r11, r23, r10
900117b8:	fac10004 	swi	r22, r1, 4
900117bc:	12c50000 	addk	r22, r5, r0
900117c0:	b0000000 	imm	0
900117c4:	a4a6ffff 	andi	r5, r6, -1
900117c8:	40642800 	mul	r3, r4, r5
900117cc:	fb01000c 	swi	r24, r1, 12
900117d0:	40a82800 	mul	r5, r8, r5
900117d4:	b0000000 	imm	0
900117d8:	a523ffff 	andi	r9, r3, -1
900117dc:	40843800 	mul	r4, r4, r7
900117e0:	fb210010 	swi	r25, r1, 16
900117e4:	64630010 	bsrli	r3, r3, 16
900117e8:	4146b000 	mul	r10, r6, r22
900117ec:	10842800 	addk	r4, r4, r5
900117f0:	41083800 	mul	r8, r8, r7
900117f4:	10632000 	addk	r3, r3, r4
900117f8:	64830010 	bsrli	r4, r3, 16
900117fc:	16451803 	cmpu	r18, r5, r3
90011800:	beb20010 	bgeid	r18, 16		// 90011810
90011804:	64c30410 	bslli	r6, r3, 16
90011808:	b0000001 	imm	1
9001180c:	31080000 	addik	r8, r8, 0
90011810:	13082000 	addk	r24, r8, r4
90011814:	106bc000 	addk	r3, r11, r24
90011818:	13264800 	addk	r25, r6, r9
9001181c:	10ca1800 	addk	r6, r10, r3
90011820:	10990000 	addk	r4, r25, r0
90011824:	10660000 	addk	r3, r6, r0
90011828:	eac10004 	lwi	r22, r1, 4
9001182c:	eae10008 	lwi	r23, r1, 8
90011830:	eb01000c 	lwi	r24, r1, 12
90011834:	eb210010 	lwi	r25, r1, 16
90011838:	b60f0008 	rtsd	r15, 8
9001183c:	30210014 	addik	r1, r1, 20

90011840 <__udivdi3>:
90011840:	11660000 	addk	r11, r6, r0
90011844:	11450000 	addk	r10, r5, r0
90011848:	3021ffb4 	addik	r1, r1, -76
9001184c:	fa610020 	swi	r19, r1, 32
90011850:	fae10028 	swi	r23, r1, 40
90011854:	fba10040 	swi	r29, r1, 64
90011858:	f9e10000 	swi	r15, r1, 0
9001185c:	fac10024 	swi	r22, r1, 36
90011860:	fb01002c 	swi	r24, r1, 44
90011864:	fb210030 	swi	r25, r1, 48
90011868:	fb410034 	swi	r26, r1, 52
9001186c:	fb610038 	swi	r27, r1, 56
90011870:	fb81003c 	swi	r28, r1, 60
90011874:	fbc10044 	swi	r30, r1, 68
90011878:	fbe10048 	swi	r31, r1, 72
9001187c:	12ea0000 	addk	r23, r10, r0
90011880:	10c80000 	addk	r6, r8, r0
90011884:	12680000 	addk	r19, r8, r0
90011888:	be27011c 	bneid	r7, 284		// 900119a4
9001188c:	13ab0000 	addk	r29, r11, r0
90011890:	16485003 	cmpu	r18, r8, r10
90011894:	bc5201c4 	blti	r18, 452		// 90011a58
90011898:	bc080324 	beqi	r8, 804		// 90011bbc
9001189c:	b0000000 	imm	0
900118a0:	2240ffff 	addi	r18, r0, -1
900118a4:	16539003 	cmpu	r18, r19, r18
900118a8:	bc5202dc 	blti	r18, 732		// 90011b84
900118ac:	224000ff 	addi	r18, r0, 255
900118b0:	16539003 	cmpu	r18, r19, r18
900118b4:	be520594 	bltid	r18, 1428		// 90011e48
900118b8:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
900118bc:	10a00000 	addk	r5, r0, r0
900118c0:	10650000 	addk	r3, r5, r0
900118c4:	44931800 	bsrl	r4, r19, r3
900118c8:	b0009002 	imm	-28670
900118cc:	e0642e7c 	lbui	r3, r4, 11900
900118d0:	10651800 	addk	r3, r5, r3
900118d4:	37230020 	rsubik	r25, r3, 32
900118d8:	be390450 	bneid	r25, 1104		// 90011d28
900118dc:	4497cc00 	bsll	r4, r23, r25
900118e0:	67130010 	bsrli	r24, r19, 16
900118e4:	16d3b800 	rsubk	r22, r19, r23
900118e8:	b0000000 	imm	0
900118ec:	a793ffff 	andi	r28, r19, -1
900118f0:	33c00001 	addik	r30, r0, 1
900118f4:	10b60000 	addk	r5, r22, r0
900118f8:	b9f40694 	brlid	r15, 1684	// 90011f8c <__udivsi3>
900118fc:	10d80000 	addk	r6, r24, r0
90011900:	10b60000 	addk	r5, r22, r0
90011904:	10d80000 	addk	r6, r24, r0
90011908:	13230000 	addk	r25, r3, r0
9001190c:	b9f405c4 	brlid	r15, 1476	// 90011ed0 <__umodsi3>
90011910:	42dc1800 	mul	r22, r28, r3
90011914:	64630410 	bslli	r3, r3, 16
90011918:	649d0010 	bsrli	r4, r29, 16
9001191c:	80632000 	or	r3, r3, r4
90011920:	16561803 	cmpu	r18, r22, r3
90011924:	bcb2001c 	bgei	r18, 28		// 90011940
90011928:	10639800 	addk	r3, r3, r19
9001192c:	16531803 	cmpu	r18, r19, r3
90011930:	be520010 	bltid	r18, 16		// 90011940
90011934:	3339ffff 	addik	r25, r25, -1
90011938:	16561803 	cmpu	r18, r22, r3
9001193c:	bc520574 	blti	r18, 1396		// 90011eb0
90011940:	16d61800 	rsubk	r22, r22, r3
90011944:	10b60000 	addk	r5, r22, r0
90011948:	b9f40644 	brlid	r15, 1604	// 90011f8c <__udivsi3>
9001194c:	10d80000 	addk	r6, r24, r0
90011950:	10b60000 	addk	r5, r22, r0
90011954:	10d80000 	addk	r6, r24, r0
90011958:	12e30000 	addk	r23, r3, r0
9001195c:	b9f40574 	brlid	r15, 1396	// 90011ed0 <__umodsi3>
90011960:	42dc1800 	mul	r22, r28, r3
90011964:	64630410 	bslli	r3, r3, 16
90011968:	b0000000 	imm	0
9001196c:	a49dffff 	andi	r4, r29, -1
90011970:	80632000 	or	r3, r3, r4
90011974:	16561803 	cmpu	r18, r22, r3
90011978:	bcb2001c 	bgei	r18, 28		// 90011994
9001197c:	10731800 	addk	r3, r19, r3
90011980:	16531803 	cmpu	r18, r19, r3
90011984:	be520010 	bltid	r18, 16		// 90011994
90011988:	32f7ffff 	addik	r23, r23, -1
9001198c:	16561803 	cmpu	r18, r22, r3
90011990:	bc520504 	blti	r18, 1284		// 90011e94
90011994:	64790410 	bslli	r3, r25, 16
90011998:	109e0000 	addk	r4, r30, r0
9001199c:	b8100078 	brid	120		// 90011a14
900119a0:	80771800 	or	r3, r23, r3
900119a4:	16475003 	cmpu	r18, r7, r10
900119a8:	be520064 	bltid	r18, 100		// 90011a0c
900119ac:	10a70000 	addk	r5, r7, r0
900119b0:	b0000000 	imm	0
900119b4:	2240ffff 	addi	r18, r0, -1
900119b8:	16479003 	cmpu	r18, r7, r18
900119bc:	bc5201ac 	blti	r18, 428		// 90011b68
900119c0:	224000ff 	addi	r18, r0, 255
900119c4:	16479003 	cmpu	r18, r7, r18
900119c8:	be52046c 	bltid	r18, 1132		// 90011e34
900119cc:	30c00008 	addik	r6, r0, 8	// 8 <_vector_sw_exception>
900119d0:	10c00000 	addk	r6, r0, r0
900119d4:	10660000 	addk	r3, r6, r0
900119d8:	44851800 	bsrl	r4, r5, r3
900119dc:	b0009002 	imm	-28670
900119e0:	e0642e7c 	lbui	r3, r4, 11900
900119e4:	10661800 	addk	r3, r6, r3
900119e8:	37830020 	rsubik	r28, r3, 32
900119ec:	be3c01f8 	bneid	r28, 504		// 90011be4
900119f0:	44f7e400 	bsll	r7, r23, r28
900119f4:	16572803 	cmpu	r18, r23, r5
900119f8:	be5201e4 	bltid	r18, 484		// 90011bdc
900119fc:	10800000 	addk	r4, r0, r0
90011a00:	1653e803 	cmpu	r18, r19, r29
90011a04:	beb20010 	bgeid	r18, 16		// 90011a14
90011a08:	30600001 	addik	r3, r0, 1
90011a0c:	10600000 	addk	r3, r0, r0
90011a10:	10830000 	addk	r4, r3, r0
90011a14:	13630000 	addk	r27, r3, r0
90011a18:	e9e10000 	lwi	r15, r1, 0
90011a1c:	10640000 	addk	r3, r4, r0
90011a20:	ea610020 	lwi	r19, r1, 32
90011a24:	109b0000 	addk	r4, r27, r0
90011a28:	eac10024 	lwi	r22, r1, 36
90011a2c:	eae10028 	lwi	r23, r1, 40
90011a30:	eb01002c 	lwi	r24, r1, 44
90011a34:	eb210030 	lwi	r25, r1, 48
90011a38:	eb410034 	lwi	r26, r1, 52
90011a3c:	eb610038 	lwi	r27, r1, 56
90011a40:	eb81003c 	lwi	r28, r1, 60
90011a44:	eba10040 	lwi	r29, r1, 64
90011a48:	ebc10044 	lwi	r30, r1, 68
90011a4c:	ebe10048 	lwi	r31, r1, 72
90011a50:	b60f0008 	rtsd	r15, 8
90011a54:	3021004c 	addik	r1, r1, 76
90011a58:	b0000000 	imm	0
90011a5c:	2240ffff 	addi	r18, r0, -1
90011a60:	16489003 	cmpu	r18, r8, r18
90011a64:	bc52013c 	blti	r18, 316		// 90011ba0
90011a68:	224000ff 	addi	r18, r0, 255
90011a6c:	16489003 	cmpu	r18, r8, r18
90011a70:	bc5203cc 	blti	r18, 972		// 90011e3c
90011a74:	10670000 	addk	r3, r7, r0
90011a78:	44931800 	bsrl	r4, r19, r3
90011a7c:	b0009002 	imm	-28670
90011a80:	e0642e7c 	lbui	r3, r4, 11900
90011a84:	10671800 	addk	r3, r7, r3
90011a88:	34e30020 	rsubik	r7, r3, 32
90011a8c:	be070024 	beqid	r7, 36		// 90011ab0
90011a90:	67130010 	bsrli	r24, r19, 16
90011a94:	34670020 	rsubik	r3, r7, 32
90011a98:	447d1800 	bsrl	r3, r29, r3
90011a9c:	44973c00 	bsll	r4, r23, r7
90011aa0:	47bd3c00 	bsll	r29, r29, r7
90011aa4:	46733c00 	bsll	r19, r19, r7
90011aa8:	82e41800 	or	r23, r4, r3
90011aac:	67130010 	bsrli	r24, r19, 16
90011ab0:	10b70000 	addk	r5, r23, r0
90011ab4:	b0000000 	imm	0
90011ab8:	a793ffff 	andi	r28, r19, -1
90011abc:	b9f404d0 	brlid	r15, 1232	// 90011f8c <__udivsi3>
90011ac0:	10d80000 	addk	r6, r24, r0
90011ac4:	10b70000 	addk	r5, r23, r0
90011ac8:	10d80000 	addk	r6, r24, r0
90011acc:	13230000 	addk	r25, r3, r0
90011ad0:	b9f40400 	brlid	r15, 1024	// 90011ed0 <__umodsi3>
90011ad4:	42dc1800 	mul	r22, r28, r3
90011ad8:	64630410 	bslli	r3, r3, 16
90011adc:	649d0010 	bsrli	r4, r29, 16
90011ae0:	80632000 	or	r3, r3, r4
90011ae4:	16561803 	cmpu	r18, r22, r3
90011ae8:	bcb2001c 	bgei	r18, 28		// 90011b04
90011aec:	10639800 	addk	r3, r3, r19
90011af0:	16531803 	cmpu	r18, r19, r3
90011af4:	be520010 	bltid	r18, 16		// 90011b04
90011af8:	3339ffff 	addik	r25, r25, -1
90011afc:	16561803 	cmpu	r18, r22, r3
90011b00:	bc5203a4 	blti	r18, 932		// 90011ea4
90011b04:	16d61800 	rsubk	r22, r22, r3
90011b08:	10b60000 	addk	r5, r22, r0
90011b0c:	b9f40480 	brlid	r15, 1152	// 90011f8c <__udivsi3>
90011b10:	10d80000 	addk	r6, r24, r0
90011b14:	10b60000 	addk	r5, r22, r0
90011b18:	10d80000 	addk	r6, r24, r0
90011b1c:	12e30000 	addk	r23, r3, r0
90011b20:	b9f403b0 	brlid	r15, 944	// 90011ed0 <__umodsi3>
90011b24:	42dc1800 	mul	r22, r28, r3
90011b28:	64630410 	bslli	r3, r3, 16
90011b2c:	b0000000 	imm	0
90011b30:	a49dffff 	andi	r4, r29, -1
90011b34:	80632000 	or	r3, r3, r4
90011b38:	16561803 	cmpu	r18, r22, r3
90011b3c:	bcb2001c 	bgei	r18, 28		// 90011b58
90011b40:	10731800 	addk	r3, r19, r3
90011b44:	16531803 	cmpu	r18, r19, r3
90011b48:	be520010 	bltid	r18, 16		// 90011b58
90011b4c:	32f7ffff 	addik	r23, r23, -1
90011b50:	16561803 	cmpu	r18, r22, r3
90011b54:	bc520348 	blti	r18, 840		// 90011e9c
90011b58:	64790410 	bslli	r3, r25, 16
90011b5c:	10800000 	addk	r4, r0, r0
90011b60:	b810feb4 	brid	-332		// 90011a14
90011b64:	80771800 	or	r3, r23, r3
90011b68:	b00000ff 	imm	255
90011b6c:	2240ffff 	addi	r18, r0, -1
90011b70:	16479003 	cmpu	r18, r7, r18
90011b74:	bc5202b4 	blti	r18, 692		// 90011e28
90011b78:	30c00010 	addik	r6, r0, 16	// 10 <_vector_interrupt>
90011b7c:	b810fe5c 	brid	-420		// 900119d8
90011b80:	10660000 	addk	r3, r6, r0
90011b84:	b00000ff 	imm	255
90011b88:	2240ffff 	addi	r18, r0, -1
90011b8c:	16539003 	cmpu	r18, r19, r18
90011b90:	bc5202c0 	blti	r18, 704		// 90011e50
90011b94:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
90011b98:	b810fd2c 	brid	-724		// 900118c4
90011b9c:	10650000 	addk	r3, r5, r0
90011ba0:	b00000ff 	imm	255
90011ba4:	2240ffff 	addi	r18, r0, -1
90011ba8:	16489003 	cmpu	r18, r8, r18
90011bac:	bc5202b0 	blti	r18, 688		// 90011e5c
90011bb0:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
90011bb4:	b810fec4 	brid	-316		// 90011a78
90011bb8:	10670000 	addk	r3, r7, r0
90011bbc:	b9f403d0 	brlid	r15, 976	// 90011f8c <__udivsi3>
90011bc0:	30a00001 	addik	r5, r0, 1
90011bc4:	12630000 	addk	r19, r3, r0
90011bc8:	b0000000 	imm	0
90011bcc:	2240ffff 	addi	r18, r0, -1
90011bd0:	16539003 	cmpu	r18, r19, r18
90011bd4:	bc52ffb0 	blti	r18, -80		// 90011b84
90011bd8:	b800fcd4 	bri	-812		// 900118ac
90011bdc:	b810fe38 	brid	-456		// 90011a14
90011be0:	30600001 	addik	r3, r0, 1
90011be4:	347c0020 	rsubik	r3, r28, 32
90011be8:	44931800 	bsrl	r4, r19, r3
90011bec:	44a5e400 	bsll	r5, r5, r28
90011bf0:	46d71800 	bsrl	r22, r23, r3
90011bf4:	447d1800 	bsrl	r3, r29, r3
90011bf8:	4673e400 	bsll	r19, r19, r28
90011bfc:	82e52000 	or	r23, r5, r4
90011c00:	67170010 	bsrli	r24, r23, 16
90011c04:	10b60000 	addk	r5, r22, r0
90011c08:	10d80000 	addk	r6, r24, r0
90011c0c:	fa61001c 	swi	r19, r1, 28
90011c10:	b9f4037c 	brlid	r15, 892	// 90011f8c <__udivsi3>
90011c14:	83e71800 	or	r31, r7, r3
90011c18:	10b60000 	addk	r5, r22, r0
90011c1c:	10d80000 	addk	r6, r24, r0
90011c20:	b0000000 	imm	0
90011c24:	a7d7ffff 	andi	r30, r23, -1
90011c28:	13230000 	addk	r25, r3, r0
90011c2c:	b9f402a4 	brlid	r15, 676	// 90011ed0 <__umodsi3>
90011c30:	42de1800 	mul	r22, r30, r3
90011c34:	64630410 	bslli	r3, r3, 16
90011c38:	649f0010 	bsrli	r4, r31, 16
90011c3c:	80632000 	or	r3, r3, r4
90011c40:	16561803 	cmpu	r18, r22, r3
90011c44:	bcb20014 	bgei	r18, 20		// 90011c58
90011c48:	1063b800 	addk	r3, r3, r23
90011c4c:	16571803 	cmpu	r18, r23, r3
90011c50:	beb20230 	bgeid	r18, 560		// 90011e80
90011c54:	3339ffff 	addik	r25, r25, -1
90011c58:	16d61800 	rsubk	r22, r22, r3
90011c5c:	10b60000 	addk	r5, r22, r0
90011c60:	b9f4032c 	brlid	r15, 812	// 90011f8c <__udivsi3>
90011c64:	10d80000 	addk	r6, r24, r0
90011c68:	10b60000 	addk	r5, r22, r0
90011c6c:	10d80000 	addk	r6, r24, r0
90011c70:	12630000 	addk	r19, r3, r0
90011c74:	b9f4025c 	brlid	r15, 604	// 90011ed0 <__umodsi3>
90011c78:	42de1800 	mul	r22, r30, r3
90011c7c:	64630410 	bslli	r3, r3, 16
90011c80:	b0000000 	imm	0
90011c84:	a49fffff 	andi	r4, r31, -1
90011c88:	81432000 	or	r10, r3, r4
90011c8c:	16565003 	cmpu	r18, r22, r10
90011c90:	beb2001c 	bgeid	r18, 28		// 90011cac
90011c94:	64790410 	bslli	r3, r25, 16
90011c98:	114ab800 	addk	r10, r10, r23
90011c9c:	16575003 	cmpu	r18, r23, r10
90011ca0:	beb201c8 	bgeid	r18, 456		// 90011e68
90011ca4:	3273ffff 	addik	r19, r19, -1
90011ca8:	64790410 	bslli	r3, r25, 16
90011cac:	e881001c 	lwi	r4, r1, 28
90011cb0:	e921001c 	lwi	r9, r1, 28
90011cb4:	81131800 	or	r8, r19, r3
90011cb8:	b0000000 	imm	0
90011cbc:	a4a8ffff 	andi	r5, r8, -1
90011cc0:	64e40010 	bsrli	r7, r4, 16
90011cc4:	64c80010 	bsrli	r6, r8, 16
90011cc8:	40853800 	mul	r4, r5, r7
90011ccc:	b0000000 	imm	0
90011cd0:	a469ffff 	andi	r3, r9, -1
90011cd4:	41251800 	mul	r9, r5, r3
90011cd8:	15565000 	rsubk	r10, r22, r10
90011cdc:	40661800 	mul	r3, r6, r3
90011ce0:	64a90010 	bsrli	r5, r9, 16
90011ce4:	10841800 	addk	r4, r4, r3
90011ce8:	10a52000 	addk	r5, r5, r4
90011cec:	16432803 	cmpu	r18, r3, r5
90011cf0:	beb20010 	bgeid	r18, 16		// 90011d00
90011cf4:	40c63800 	mul	r6, r6, r7
90011cf8:	b0000001 	imm	1
90011cfc:	30c60000 	addik	r6, r6, 0
90011d00:	64650010 	bsrli	r3, r5, 16
90011d04:	10c61800 	addk	r6, r6, r3
90011d08:	16465003 	cmpu	r18, r6, r10
90011d0c:	be520114 	bltid	r18, 276		// 90011e20
90011d10:	3068ffff 	addik	r3, r8, -1
90011d14:	16465000 	rsubk	r18, r6, r10
90011d18:	bc1200e8 	beqi	r18, 232		// 90011e00
90011d1c:	10680000 	addk	r3, r8, r0
90011d20:	b810fcf4 	brid	-780		// 90011a14
90011d24:	10800000 	addk	r4, r0, r0
90011d28:	4673cc00 	bsll	r19, r19, r25
90011d2c:	67130010 	bsrli	r24, r19, 16
90011d30:	34790020 	rsubik	r3, r25, 32
90011d34:	46d71800 	bsrl	r22, r23, r3
90011d38:	447d1800 	bsrl	r3, r29, r3
90011d3c:	10b60000 	addk	r5, r22, r0
90011d40:	10d80000 	addk	r6, r24, r0
90011d44:	b0000000 	imm	0
90011d48:	a793ffff 	andi	r28, r19, -1
90011d4c:	b9f40240 	brlid	r15, 576	// 90011f8c <__udivsi3>
90011d50:	83e41800 	or	r31, r4, r3
90011d54:	10b60000 	addk	r5, r22, r0
90011d58:	10d80000 	addk	r6, r24, r0
90011d5c:	13c30000 	addk	r30, r3, r0
90011d60:	b9f40170 	brlid	r15, 368	// 90011ed0 <__umodsi3>
90011d64:	42dc1800 	mul	r22, r28, r3
90011d68:	64630410 	bslli	r3, r3, 16
90011d6c:	649f0010 	bsrli	r4, r31, 16
90011d70:	80632000 	or	r3, r3, r4
90011d74:	16561803 	cmpu	r18, r22, r3
90011d78:	bcb20014 	bgei	r18, 20		// 90011d8c
90011d7c:	10639800 	addk	r3, r3, r19
90011d80:	16531803 	cmpu	r18, r19, r3
90011d84:	beb20138 	bgeid	r18, 312		// 90011ebc
90011d88:	33deffff 	addik	r30, r30, -1
90011d8c:	16d61800 	rsubk	r22, r22, r3
90011d90:	10b60000 	addk	r5, r22, r0
90011d94:	b9f401f8 	brlid	r15, 504	// 90011f8c <__udivsi3>
90011d98:	10d80000 	addk	r6, r24, r0
90011d9c:	10b60000 	addk	r5, r22, r0
90011da0:	10d80000 	addk	r6, r24, r0
90011da4:	12e30000 	addk	r23, r3, r0
90011da8:	b9f40128 	brlid	r15, 296	// 90011ed0 <__umodsi3>
90011dac:	42dc1800 	mul	r22, r28, r3
90011db0:	64630410 	bslli	r3, r3, 16
90011db4:	b0000000 	imm	0
90011db8:	a49fffff 	andi	r4, r31, -1
90011dbc:	80832000 	or	r4, r3, r4
90011dc0:	16562003 	cmpu	r18, r22, r4
90011dc4:	bcb20028 	bgei	r18, 40		// 90011dec
90011dc8:	10849800 	addk	r4, r4, r19
90011dcc:	16532003 	cmpu	r18, r19, r4
90011dd0:	be52001c 	bltid	r18, 28		// 90011dec
90011dd4:	32f7ffff 	addik	r23, r23, -1
90011dd8:	16562003 	cmpu	r18, r22, r4
90011ddc:	beb20014 	bgeid	r18, 20		// 90011df0
90011de0:	647e0410 	bslli	r3, r30, 16
90011de4:	32f7ffff 	addik	r23, r23, -1
90011de8:	10849800 	addk	r4, r4, r19
90011dec:	647e0410 	bslli	r3, r30, 16
90011df0:	47bdcc00 	bsll	r29, r29, r25
90011df4:	16d62000 	rsubk	r22, r22, r4
90011df8:	b810fafc 	brid	-1284		// 900118f4
90011dfc:	83d71800 	or	r30, r23, r3
90011e00:	64650410 	bslli	r3, r5, 16
90011e04:	44bde400 	bsll	r5, r29, r28
90011e08:	b0000000 	imm	0
90011e0c:	a489ffff 	andi	r4, r9, -1
90011e10:	10632000 	addk	r3, r3, r4
90011e14:	16432803 	cmpu	r18, r3, r5
90011e18:	bcb2ff04 	bgei	r18, -252		// 90011d1c
90011e1c:	3068ffff 	addik	r3, r8, -1
90011e20:	b810fbf4 	brid	-1036		// 90011a14
90011e24:	10800000 	addk	r4, r0, r0
90011e28:	30c00018 	addik	r6, r0, 24
90011e2c:	b810fbac 	brid	-1108		// 900119d8
90011e30:	10660000 	addk	r3, r6, r0
90011e34:	b810fba4 	brid	-1116		// 900119d8
90011e38:	10660000 	addk	r3, r6, r0
90011e3c:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
90011e40:	b810fc38 	brid	-968		// 90011a78
90011e44:	10670000 	addk	r3, r7, r0
90011e48:	b810fa7c 	brid	-1412		// 900118c4
90011e4c:	10650000 	addk	r3, r5, r0
90011e50:	30a00018 	addik	r5, r0, 24
90011e54:	b810fa70 	brid	-1424		// 900118c4
90011e58:	10650000 	addk	r3, r5, r0
90011e5c:	30e00018 	addik	r7, r0, 24
90011e60:	b810fc18 	brid	-1000		// 90011a78
90011e64:	10670000 	addk	r3, r7, r0
90011e68:	16565003 	cmpu	r18, r22, r10
90011e6c:	beb2fe40 	bgeid	r18, -448		// 90011cac
90011e70:	64790410 	bslli	r3, r25, 16
90011e74:	114ab800 	addk	r10, r10, r23
90011e78:	b810fe34 	brid	-460		// 90011cac
90011e7c:	3273ffff 	addik	r19, r19, -1
90011e80:	16561803 	cmpu	r18, r22, r3
90011e84:	bcb2fdd4 	bgei	r18, -556		// 90011c58
90011e88:	3339ffff 	addik	r25, r25, -1
90011e8c:	b810fdcc 	brid	-564		// 90011c58
90011e90:	1063b800 	addk	r3, r3, r23
90011e94:	b810fb00 	brid	-1280		// 90011994
90011e98:	32f7ffff 	addik	r23, r23, -1
90011e9c:	b810fcbc 	brid	-836		// 90011b58
90011ea0:	32f7ffff 	addik	r23, r23, -1
90011ea4:	3339ffff 	addik	r25, r25, -1
90011ea8:	b810fc5c 	brid	-932		// 90011b04
90011eac:	10639800 	addk	r3, r3, r19
90011eb0:	3339ffff 	addik	r25, r25, -1
90011eb4:	b810fa8c 	brid	-1396		// 90011940
90011eb8:	10639800 	addk	r3, r3, r19
90011ebc:	16561803 	cmpu	r18, r22, r3
90011ec0:	bcb2fecc 	bgei	r18, -308		// 90011d8c
90011ec4:	33deffff 	addik	r30, r30, -1
90011ec8:	b810fec4 	brid	-316		// 90011d8c
90011ecc:	10639800 	addk	r3, r3, r19

90011ed0 <__umodsi3>:
90011ed0:	3021fff4 	addik	r1, r1, -12
90011ed4:	fba10000 	swi	r29, r1, 0
90011ed8:	fbc10004 	swi	r30, r1, 4
90011edc:	fbe10008 	swi	r31, r1, 8
90011ee0:	bc060094 	beqi	r6, 148		// 90011f74
90011ee4:	be050090 	beqid	r5, 144		// 90011f74
90011ee8:	30600000 	addik	r3, r0, 0
90011eec:	33c00000 	addik	r30, r0, 0
90011ef0:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
90011ef4:	06453000 	rsub	r18, r5, r6
90011ef8:	bc120080 	beqi	r18, 128		// 90011f78
90011efc:	8a453000 	xor	r18, r5, r6
90011f00:	beb20010 	bgeid	r18, 16		// 90011f10
90011f04:	30650000 	addik	r3, r5, 0
90011f08:	bc460070 	blti	r6, 112		// 90011f78
90011f0c:	b800000c 	bri	12		// 90011f18
90011f10:	06453000 	rsub	r18, r5, r6
90011f14:	bc920064 	bgti	r18, 100		// 90011f78
90011f18:	be860020 	bgtid	r6, 32		// 90011f38
90011f1c:	30600000 	addik	r3, r0, 0
90011f20:	b0007fff 	imm	32767
90011f24:	3240ffff 	addik	r18, r0, -1
90011f28:	84a59000 	and	r5, r5, r18
90011f2c:	84c69000 	and	r6, r6, r18
90011f30:	b8100048 	brid	72		// 90011f78
90011f34:	04662800 	rsub	r3, r6, r5
90011f38:	bc450010 	blti	r5, 16		// 90011f48
90011f3c:	00a52800 	add	r5, r5, r5
90011f40:	bea5fffc 	bgeid	r5, -4		// 90011f3c
90011f44:	33bdffff 	addik	r29, r29, -1
90011f48:	00a52800 	add	r5, r5, r5
90011f4c:	08631800 	addc	r3, r3, r3
90011f50:	07e61800 	rsub	r31, r6, r3
90011f54:	bc5f000c 	blti	r31, 12		// 90011f60
90011f58:	8060f800 	or	r3, r0, r31
90011f5c:	33de0001 	addik	r30, r30, 1
90011f60:	33bdffff 	addik	r29, r29, -1
90011f64:	bc1d000c 	beqi	r29, 12		// 90011f70
90011f68:	03def000 	add	r30, r30, r30
90011f6c:	b800ffdc 	bri	-36		// 90011f48
90011f70:	b8000008 	bri	8		// 90011f78
90011f74:	80600000 	or	r3, r0, r0
90011f78:	eba10000 	lwi	r29, r1, 0
90011f7c:	ebc10004 	lwi	r30, r1, 4
90011f80:	ebe10008 	lwi	r31, r1, 8
90011f84:	b60f0008 	rtsd	r15, 8
90011f88:	3021000c 	addik	r1, r1, 12

90011f8c <__udivsi3>:
90011f8c:	3021fff4 	addik	r1, r1, -12
90011f90:	fba10000 	swi	r29, r1, 0
90011f94:	fbc10004 	swi	r30, r1, 4
90011f98:	fbe10008 	swi	r31, r1, 8
90011f9c:	bc060080 	beqi	r6, 128		// 9001201c
90011fa0:	be05007c 	beqid	r5, 124		// 9001201c
90011fa4:	33c00000 	addik	r30, r0, 0
90011fa8:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
90011fac:	06453000 	rsub	r18, r5, r6
90011fb0:	be120070 	beqid	r18, 112		// 90012020
90011fb4:	30600001 	addik	r3, r0, 1
90011fb8:	8a453000 	xor	r18, r5, r6
90011fbc:	beb20010 	bgeid	r18, 16		// 90011fcc
90011fc0:	00600000 	add	r3, r0, r0
90011fc4:	bc46005c 	blti	r6, 92		// 90012020
90011fc8:	b800000c 	bri	12		// 90011fd4
90011fcc:	06462800 	rsub	r18, r6, r5
90011fd0:	bc520050 	blti	r18, 80		// 90012020
90011fd4:	bc86000c 	bgti	r6, 12		// 90011fe0
90011fd8:	b8100048 	brid	72		// 90012020
90011fdc:	30600001 	addik	r3, r0, 1
90011fe0:	bc450010 	blti	r5, 16		// 90011ff0
90011fe4:	00a52800 	add	r5, r5, r5
90011fe8:	be85fffc 	bgtid	r5, -4		// 90011fe4
90011fec:	33bdffff 	addik	r29, r29, -1
90011ff0:	00a52800 	add	r5, r5, r5
90011ff4:	0bdef000 	addc	r30, r30, r30
90011ff8:	07e6f000 	rsub	r31, r6, r30
90011ffc:	bc5f000c 	blti	r31, 12		// 90012008
90012000:	83c0f800 	or	r30, r0, r31
90012004:	30630001 	addik	r3, r3, 1
90012008:	33bdffff 	addik	r29, r29, -1
9001200c:	bc1d000c 	beqi	r29, 12		// 90012018
90012010:	00631800 	add	r3, r3, r3
90012014:	b800ffdc 	bri	-36		// 90011ff0
90012018:	b8000008 	bri	8		// 90012020
9001201c:	80600000 	or	r3, r0, r0
90012020:	eba10000 	lwi	r29, r1, 0
90012024:	ebc10004 	lwi	r30, r1, 4
90012028:	ebe10008 	lwi	r31, r1, 8
9001202c:	b60f0008 	rtsd	r15, 8
90012030:	3021000c 	addik	r1, r1, 12

90012034 <_exception_handler>:
90012034:	b6110000 	rtsd	r17, 0
90012038:	80000000 	or	r0, r0, r0

9001203c <_program_clean>:
9001203c:	b60f0008 	rtsd	r15, 8
90012040:	80000000 	or	r0, r0, r0

90012044 <_program_init>:
90012044:	b60f0008 	rtsd	r15, 8
90012048:	80000000 	or	r0, r0, r0

9001204c <_hw_exception_handler>:
9001204c:	b8000000 	bri	0		// 9001204c

90012050 <inbyte>:
90012050:	b0008402 	imm	-31742
90012054:	30a00000 	addik	r5, r0, 0
90012058:	3021ffe4 	addik	r1, r1, -28
9001205c:	f9e10000 	swi	r15, r1, 0
90012060:	b9f401fc 	brlid	r15, 508	// 9001225c <XUartLite_RecvByte>
90012064:	80000000 	or	r0, r0, r0
90012068:	e9e10000 	lwi	r15, r1, 0
9001206c:	90630060 	sext8	r3, r3
90012070:	b60f0008 	rtsd	r15, 8
90012074:	3021001c 	addik	r1, r1, 28

90012078 <microblaze_disable_dcache>:
90012078:	2021fffc 	addi	r1, r1, -4
9001207c:	f9810000 	swi	r12, r1, 0
90012080:	95808001 	mfs	r12, rmsr
90012084:	a58cff7f 	andi	r12, r12, -129
90012088:	940cc001 	mts	rmsr, r12
9001208c:	e9810000 	lwi	r12, r1, 0
90012090:	b60f0008 	rtsd	r15, 8
90012094:	20210004 	addi	r1, r1, 4

90012098 <microblaze_disable_icache>:
90012098:	2021fffc 	addi	r1, r1, -4
9001209c:	f9810000 	swi	r12, r1, 0
900120a0:	95808001 	mfs	r12, rmsr
900120a4:	a58cffdf 	andi	r12, r12, -33
900120a8:	940cc001 	mts	rmsr, r12
900120ac:	e9810000 	lwi	r12, r1, 0
900120b0:	b60f0008 	rtsd	r15, 8
900120b4:	20210004 	addi	r1, r1, 4

900120b8 <microblaze_enable_dcache>:
900120b8:	2021fffc 	addi	r1, r1, -4
900120bc:	f9810000 	swi	r12, r1, 0
900120c0:	95808001 	mfs	r12, rmsr
900120c4:	a18c0080 	ori	r12, r12, 128
900120c8:	940cc001 	mts	rmsr, r12
900120cc:	e9810000 	lwi	r12, r1, 0
900120d0:	b60f0008 	rtsd	r15, 8
900120d4:	20210004 	addi	r1, r1, 4

900120d8 <microblaze_enable_icache>:
900120d8:	2021fffc 	addi	r1, r1, -4
900120dc:	f9810000 	swi	r12, r1, 0
900120e0:	95808001 	mfs	r12, rmsr
900120e4:	a18c0020 	ori	r12, r12, 32
900120e8:	940cc001 	mts	rmsr, r12
900120ec:	e9810000 	lwi	r12, r1, 0
900120f0:	b60f0008 	rtsd	r15, 8
900120f4:	20210004 	addi	r1, r1, 4

900120f8 <microblaze_init_dcache_range>:
900120f8:	95208001 	mfs	r9, rmsr
900120fc:	a549ff7d 	andi	r10, r9, -131
90012100:	940ac001 	mts	rmsr, r10
90012104:	a4a5fff0 	andi	r5, r5, -16
90012108:	00c53000 	add	r6, r5, r6
9001210c:	a4c6fff0 	andi	r6, r6, -16

90012110 <L_start>:
90012110:	90a50064 	wdc	r5, r0
90012114:	16453003 	cmpu	r18, r5, r6
90012118:	bc72000c 	blei	r18, 12		// 90012124
9001211c:	b810fff4 	brid	-12		// 90012110
90012120:	30a50010 	addik	r5, r5, 16

90012124 <L_done>:
90012124:	b60f0008 	rtsd	r15, 8
90012128:	9409c001 	mts	rmsr, r9

9001212c <microblaze_init_icache_range>:
9001212c:	95208001 	mfs	r9, rmsr
90012130:	a549ffdd 	andi	r10, r9, -35
90012134:	940ac001 	mts	rmsr, r10
90012138:	a4a5fff0 	andi	r5, r5, -16
9001213c:	00c53000 	add	r6, r5, r6
90012140:	a4c6fff0 	andi	r6, r6, -16

90012144 <L_start>:
90012144:	90a50068 	wic	r5, r0
90012148:	16453003 	cmpu	r18, r5, r6
9001214c:	bc72000c 	blei	r18, 12		// 90012158
90012150:	b810fff4 	brid	-12		// 90012144
90012154:	30a50010 	addik	r5, r5, 16

90012158 <L_done>:
90012158:	b60f0008 	rtsd	r15, 8
9001215c:	9409c001 	mts	rmsr, r9

90012160 <__interrupt_handler>:
90012160:	3021ffb0 	addik	r1, r1, -80
90012164:	f9e10000 	swi	r15, r1, 0
90012168:	f8610020 	swi	r3, r1, 32
9001216c:	f8810024 	swi	r4, r1, 36
90012170:	f8a10028 	swi	r5, r1, 40
90012174:	f8c1002c 	swi	r6, r1, 44
90012178:	f8e10030 	swi	r7, r1, 48
9001217c:	f9010034 	swi	r8, r1, 52
90012180:	f9210038 	swi	r9, r1, 56
90012184:	f941003c 	swi	r10, r1, 60
90012188:	f9610040 	swi	r11, r1, 64
9001218c:	f9810044 	swi	r12, r1, 68
90012190:	fa210048 	swi	r17, r1, 72
90012194:	95608001 	mfs	r11, rmsr
90012198:	b0009002 	imm	-28670
9001219c:	e8a03aa4 	lwi	r5, r0, 15012
900121a0:	b0009002 	imm	-28670
900121a4:	e8603aa0 	lwi	r3, r0, 15008
900121a8:	fa41004c 	swi	r18, r1, 76
900121ac:	f961001c 	swi	r11, r1, 28
900121b0:	99fc1800 	brald	r15, r3
900121b4:	80000000 	or	r0, r0, r0
900121b8:	e9e10000 	lwi	r15, r1, 0
900121bc:	e961001c 	lwi	r11, r1, 28
900121c0:	e8610020 	lwi	r3, r1, 32
900121c4:	e8810024 	lwi	r4, r1, 36
900121c8:	940bc001 	mts	rmsr, r11
900121cc:	e8a10028 	lwi	r5, r1, 40
900121d0:	e8c1002c 	lwi	r6, r1, 44
900121d4:	e8e10030 	lwi	r7, r1, 48
900121d8:	e9010034 	lwi	r8, r1, 52
900121dc:	e9210038 	lwi	r9, r1, 56
900121e0:	e941003c 	lwi	r10, r1, 60
900121e4:	e9610040 	lwi	r11, r1, 64
900121e8:	e9810044 	lwi	r12, r1, 68
900121ec:	ea210048 	lwi	r17, r1, 72
900121f0:	ea41004c 	lwi	r18, r1, 76
900121f4:	b62e0000 	rtid	r14, 0
900121f8:	30210050 	addik	r1, r1, 80

900121fc <microblaze_register_handler>:
900121fc:	b0009002 	imm	-28670
90012200:	f8a03aa0 	swi	r5, r0, 15008
90012204:	b0009002 	imm	-28670
90012208:	f8c03aa4 	swi	r6, r0, 15012
9001220c:	b60f0008 	rtsd	r15, 8
90012210:	80000000 	or	r0, r0, r0

90012214 <outbyte>:
90012214:	90c50060 	sext8	r6, r5
90012218:	b0008402 	imm	-31742
9001221c:	30a00000 	addik	r5, r0, 0
90012220:	3021ffe4 	addik	r1, r1, -28
90012224:	f9e10000 	swi	r15, r1, 0
90012228:	b9f40014 	brlid	r15, 20	// 9001223c <XUartLite_SendByte>
9001222c:	80000000 	or	r0, r0, r0
90012230:	e9e10000 	lwi	r15, r1, 0
90012234:	b60f0008 	rtsd	r15, 8
90012238:	3021001c 	addik	r1, r1, 28

9001223c <XUartLite_SendByte>:
9001223c:	a4c600ff 	andi	r6, r6, 255
90012240:	30850008 	addik	r4, r5, 8
90012244:	e8640000 	lwi	r3, r4, 0
90012248:	a4630008 	andi	r3, r3, 8
9001224c:	bc23fff8 	bnei	r3, -8		// 90012244
90012250:	f8c50004 	swi	r6, r5, 4
90012254:	b60f0008 	rtsd	r15, 8
90012258:	80000000 	or	r0, r0, r0

9001225c <XUartLite_RecvByte>:
9001225c:	30850008 	addik	r4, r5, 8
90012260:	e8640000 	lwi	r3, r4, 0
90012264:	a4630001 	andi	r3, r3, 1
90012268:	bc03fff8 	beqi	r3, -8		// 90012260
9001226c:	e8650000 	lwi	r3, r5, 0
90012270:	b60f0008 	rtsd	r15, 8
90012274:	a46300ff 	andi	r3, r3, 255

90012278 <XIntc_LookupConfig>:
90012278:	b0009002 	imm	-28670
9001227c:	e4603aa8 	lhui	r3, r0, 15016
90012280:	b0000000 	imm	0
90012284:	a4a5ffff 	andi	r5, r5, -1
90012288:	b0009002 	imm	-28670
9001228c:	30803aa8 	addik	r4, r0, 15016
90012290:	16451800 	rsubk	r18, r5, r3
90012294:	bc32000c 	bnei	r18, 12		// 900122a0
90012298:	b60f0008 	rtsd	r15, 8
9001229c:	10640000 	addk	r3, r4, r0
900122a0:	10800000 	addk	r4, r0, r0
900122a4:	b60f0008 	rtsd	r15, 8
900122a8:	10640000 	addk	r3, r4, r0

900122ac <StubHandler>:
900122ac:	10850000 	addk	r4, r5, r0
900122b0:	3021ffe4 	addik	r1, r1, -28
900122b4:	f9e10000 	swi	r15, r1, 0
900122b8:	b0009002 	imm	-28670
900122bc:	30a02f7c 	addik	r5, r0, 12156
900122c0:	be040028 	beqid	r4, 40		// 900122e8
900122c4:	30c0021b 	addik	r6, r0, 539
900122c8:	e864000c 	lwi	r3, r4, 12
900122cc:	b0009003 	imm	-28669
900122d0:	f8004ff8 	swi	r0, r0, 20472
900122d4:	30630001 	addik	r3, r3, 1
900122d8:	f864000c 	swi	r3, r4, 12
900122dc:	e9e10000 	lwi	r15, r1, 0
900122e0:	b60f0008 	rtsd	r15, 8
900122e4:	3021001c 	addik	r1, r1, 28
900122e8:	b9f41b20 	brlid	r15, 6944	// 90013e08 <XAssert>
900122ec:	80000000 	or	r0, r0, r0
900122f0:	30600001 	addik	r3, r0, 1
900122f4:	b0009003 	imm	-28669
900122f8:	f8604ff8 	swi	r3, r0, 20472
900122fc:	b800ffe0 	bri	-32		// 900122dc

90012300 <XIntc_Acknowledge>:
90012300:	10850000 	addk	r4, r5, r0
90012304:	3021ffe4 	addik	r1, r1, -28
90012308:	a4e600ff 	andi	r7, r6, 255
9001230c:	f9e10000 	swi	r15, r1, 0
90012310:	b0009002 	imm	-28670
90012314:	30a02f7c 	addik	r5, r0, 12156
90012318:	be040038 	beqid	r4, 56		// 90012350
9001231c:	30c001f7 	addik	r6, r0, 503
90012320:	b0009003 	imm	-28669
90012324:	f8004ff8 	swi	r0, r0, 20472
90012328:	22400009 	addi	r18, r0, 9
9001232c:	16479003 	cmpu	r18, r7, r18
90012330:	bc520068 	blti	r18, 104		// 90012398
90012334:	e8640004 	lwi	r3, r4, 4
90012338:	b0009003 	imm	-28669
9001233c:	f8004ff8 	swi	r0, r0, 20472
90012340:	b0001111 	imm	4369
90012344:	aa431111 	xori	r18, r3, 4369
90012348:	be120028 	beqid	r18, 40		// 90012370
9001234c:	30c001f9 	addik	r6, r0, 505
90012350:	b9f41ab8 	brlid	r15, 6840	// 90013e08 <XAssert>
90012354:	80000000 	or	r0, r0, r0
90012358:	e9e10000 	lwi	r15, r1, 0
9001235c:	30600001 	addik	r3, r0, 1
90012360:	b0009003 	imm	-28669
90012364:	f8604ff8 	swi	r3, r0, 20472
90012368:	b60f0008 	rtsd	r15, 8
9001236c:	3021001c 	addik	r1, r1, 28
90012370:	64670402 	bslli	r3, r7, 2
90012374:	e8a40000 	lwi	r5, r4, 0
90012378:	b0009003 	imm	-28669
9001237c:	e8834fd0 	lwi	r4, r3, 20432
90012380:	b0009003 	imm	-28669
90012384:	f8004ff8 	swi	r0, r0, 20472
90012388:	f885000c 	swi	r4, r5, 12
9001238c:	e9e10000 	lwi	r15, r1, 0
90012390:	b60f0008 	rtsd	r15, 8
90012394:	3021001c 	addik	r1, r1, 28
90012398:	b9f41a70 	brlid	r15, 6768	// 90013e08 <XAssert>
9001239c:	30c001f8 	addik	r6, r0, 504
900123a0:	e9e10000 	lwi	r15, r1, 0
900123a4:	30600001 	addik	r3, r0, 1
900123a8:	b0009003 	imm	-28669
900123ac:	f8604ff8 	swi	r3, r0, 20472
900123b0:	b60f0008 	rtsd	r15, 8
900123b4:	3021001c 	addik	r1, r1, 28

900123b8 <XIntc_Disable>:
900123b8:	10850000 	addk	r4, r5, r0
900123bc:	3021ffe4 	addik	r1, r1, -28
900123c0:	a4e600ff 	andi	r7, r6, 255
900123c4:	f9e10000 	swi	r15, r1, 0
900123c8:	b0009002 	imm	-28670
900123cc:	30a02f7c 	addik	r5, r0, 12156
900123d0:	be040038 	beqid	r4, 56		// 90012408
900123d4:	30c001cc 	addik	r6, r0, 460
900123d8:	b0009003 	imm	-28669
900123dc:	f8004ff8 	swi	r0, r0, 20472
900123e0:	22400009 	addi	r18, r0, 9
900123e4:	16479003 	cmpu	r18, r7, r18
900123e8:	bc520074 	blti	r18, 116		// 9001245c
900123ec:	e8640004 	lwi	r3, r4, 4
900123f0:	b0009003 	imm	-28669
900123f4:	f8004ff8 	swi	r0, r0, 20472
900123f8:	b0001111 	imm	4369
900123fc:	aa431111 	xori	r18, r3, 4369
90012400:	be120028 	beqid	r18, 40		// 90012428
90012404:	30c001ce 	addik	r6, r0, 462
90012408:	b9f41a00 	brlid	r15, 6656	// 90013e08 <XAssert>
9001240c:	80000000 	or	r0, r0, r0
90012410:	e9e10000 	lwi	r15, r1, 0
90012414:	30600001 	addik	r3, r0, 1
90012418:	b0009003 	imm	-28669
9001241c:	f8604ff8 	swi	r3, r0, 20472
90012420:	b60f0008 	rtsd	r15, 8
90012424:	3021001c 	addik	r1, r1, 28
90012428:	e8c40000 	lwi	r6, r4, 0
9001242c:	64670402 	bslli	r3, r7, 2
90012430:	b0009003 	imm	-28669
90012434:	e8834fd0 	lwi	r4, r3, 20432
90012438:	e8a60008 	lwi	r5, r6, 8
9001243c:	b0009003 	imm	-28669
90012440:	f8004ff8 	swi	r0, r0, 20472
90012444:	a884ffff 	xori	r4, r4, -1
90012448:	84a52000 	and	r5, r5, r4
9001244c:	f8a60008 	swi	r5, r6, 8
90012450:	e9e10000 	lwi	r15, r1, 0
90012454:	b60f0008 	rtsd	r15, 8
90012458:	3021001c 	addik	r1, r1, 28
9001245c:	b9f419ac 	brlid	r15, 6572	// 90013e08 <XAssert>
90012460:	30c001cd 	addik	r6, r0, 461
90012464:	e9e10000 	lwi	r15, r1, 0
90012468:	30600001 	addik	r3, r0, 1
9001246c:	b0009003 	imm	-28669
90012470:	f8604ff8 	swi	r3, r0, 20472
90012474:	b60f0008 	rtsd	r15, 8
90012478:	3021001c 	addik	r1, r1, 28

9001247c <XIntc_Enable>:
9001247c:	10e50000 	addk	r7, r5, r0
90012480:	3021ffe4 	addik	r1, r1, -28
90012484:	a48600ff 	andi	r4, r6, 255
90012488:	f9e10000 	swi	r15, r1, 0
9001248c:	b0009002 	imm	-28670
90012490:	30a02f7c 	addik	r5, r0, 12156
90012494:	be070038 	beqid	r7, 56		// 900124cc
90012498:	30c0019f 	addik	r6, r0, 415
9001249c:	b0009003 	imm	-28669
900124a0:	f8004ff8 	swi	r0, r0, 20472
900124a4:	22400009 	addi	r18, r0, 9
900124a8:	16449003 	cmpu	r18, r4, r18
900124ac:	bc520070 	blti	r18, 112		// 9001251c
900124b0:	e8670004 	lwi	r3, r7, 4
900124b4:	b0009003 	imm	-28669
900124b8:	f8004ff8 	swi	r0, r0, 20472
900124bc:	b0001111 	imm	4369
900124c0:	aa431111 	xori	r18, r3, 4369
900124c4:	be120028 	beqid	r18, 40		// 900124ec
900124c8:	30c001a1 	addik	r6, r0, 417
900124cc:	b9f4193c 	brlid	r15, 6460	// 90013e08 <XAssert>
900124d0:	80000000 	or	r0, r0, r0
900124d4:	e9e10000 	lwi	r15, r1, 0
900124d8:	30600001 	addik	r3, r0, 1
900124dc:	b0009003 	imm	-28669
900124e0:	f8604ff8 	swi	r3, r0, 20472
900124e4:	b60f0008 	rtsd	r15, 8
900124e8:	3021001c 	addik	r1, r1, 28
900124ec:	e8c70000 	lwi	r6, r7, 0
900124f0:	64840402 	bslli	r4, r4, 2
900124f4:	e8660008 	lwi	r3, r6, 8
900124f8:	b0009003 	imm	-28669
900124fc:	e8a44fd0 	lwi	r5, r4, 20432
90012500:	b0009003 	imm	-28669
90012504:	f8004ff8 	swi	r0, r0, 20472
90012508:	80632800 	or	r3, r3, r5
9001250c:	f8660008 	swi	r3, r6, 8
90012510:	e9e10000 	lwi	r15, r1, 0
90012514:	b60f0008 	rtsd	r15, 8
90012518:	3021001c 	addik	r1, r1, 28
9001251c:	b9f418ec 	brlid	r15, 6380	// 90013e08 <XAssert>
90012520:	30c001a0 	addik	r6, r0, 416
90012524:	e9e10000 	lwi	r15, r1, 0
90012528:	30600001 	addik	r3, r0, 1
9001252c:	b0009003 	imm	-28669
90012530:	f8604ff8 	swi	r3, r0, 20472
90012534:	b60f0008 	rtsd	r15, 8
90012538:	3021001c 	addik	r1, r1, 28

9001253c <XIntc_Disconnect>:
9001253c:	11050000 	addk	r8, r5, r0
90012540:	3021ffe4 	addik	r1, r1, -28
90012544:	a48600ff 	andi	r4, r6, 255
90012548:	f9e10000 	swi	r15, r1, 0
9001254c:	b0009002 	imm	-28670
90012550:	30a02f7c 	addik	r5, r0, 12156
90012554:	be080038 	beqid	r8, 56		// 9001258c
90012558:	30c0016d 	addik	r6, r0, 365
9001255c:	b0009003 	imm	-28669
90012560:	f8004ff8 	swi	r0, r0, 20472
90012564:	22400009 	addi	r18, r0, 9
90012568:	16449003 	cmpu	r18, r4, r18
9001256c:	bc520090 	blti	r18, 144		// 900125fc
90012570:	e8680004 	lwi	r3, r8, 4
90012574:	b0009003 	imm	-28669
90012578:	f8004ff8 	swi	r0, r0, 20472
9001257c:	b0001111 	imm	4369
90012580:	aa431111 	xori	r18, r3, 4369
90012584:	be120028 	beqid	r18, 40		// 900125ac
90012588:	30c0016f 	addik	r6, r0, 367
9001258c:	b9f4187c 	brlid	r15, 6268	// 90013e08 <XAssert>
90012590:	80000000 	or	r0, r0, r0
90012594:	e9e10000 	lwi	r15, r1, 0
90012598:	30600001 	addik	r3, r0, 1
9001259c:	b0009003 	imm	-28669
900125a0:	f8604ff8 	swi	r3, r0, 20472
900125a4:	b60f0008 	rtsd	r15, 8
900125a8:	3021001c 	addik	r1, r1, 28
900125ac:	e8e80000 	lwi	r7, r8, 0
900125b0:	64a40402 	bslli	r5, r4, 2
900125b4:	64c40403 	bslli	r6, r4, 3
900125b8:	b0009003 	imm	-28669
900125bc:	e8654fd0 	lwi	r3, r5, 20432
900125c0:	e8870008 	lwi	r4, r7, 8
900125c4:	e8a80010 	lwi	r5, r8, 16
900125c8:	a863ffff 	xori	r3, r3, -1
900125cc:	84841800 	and	r4, r4, r3
900125d0:	b0009001 	imm	-28671
900125d4:	306022ac 	addik	r3, r0, 8876
900125d8:	10c62800 	addk	r6, r6, r5
900125dc:	f8870008 	swi	r4, r7, 8
900125e0:	f9060014 	swi	r8, r6, 20
900125e4:	f8660010 	swi	r3, r6, 16
900125e8:	e9e10000 	lwi	r15, r1, 0
900125ec:	b0009003 	imm	-28669
900125f0:	f8004ff8 	swi	r0, r0, 20472
900125f4:	b60f0008 	rtsd	r15, 8
900125f8:	3021001c 	addik	r1, r1, 28
900125fc:	b9f4180c 	brlid	r15, 6156	// 90013e08 <XAssert>
90012600:	30c0016e 	addik	r6, r0, 366
90012604:	e9e10000 	lwi	r15, r1, 0
90012608:	30600001 	addik	r3, r0, 1
9001260c:	b0009003 	imm	-28669
90012610:	f8604ff8 	swi	r3, r0, 20472
90012614:	b60f0008 	rtsd	r15, 8
90012618:	3021001c 	addik	r1, r1, 28

9001261c <XIntc_Connect>:
9001261c:	3021ffe4 	addik	r1, r1, -28
90012620:	f9e10000 	swi	r15, r1, 0
90012624:	be0500bc 	beqid	r5, 188		// 900126e0
90012628:	a4c600ff 	andi	r6, r6, 255
9001262c:	b0009003 	imm	-28669
90012630:	f8004ff8 	swi	r0, r0, 20472
90012634:	22400009 	addi	r18, r0, 9
90012638:	16469003 	cmpu	r18, r6, r18
9001263c:	bc520078 	blti	r18, 120		// 900126b4
90012640:	bc0700c0 	beqi	r7, 192		// 90012700
90012644:	e8650004 	lwi	r3, r5, 4
90012648:	b0009003 	imm	-28669
9001264c:	f8004ff8 	swi	r0, r0, 20472
90012650:	b0001111 	imm	4369
90012654:	aa431111 	xori	r18, r3, 4369
90012658:	be120034 	beqid	r18, 52		// 9001268c
9001265c:	64660403 	bslli	r3, r6, 3
90012660:	b0009002 	imm	-28670
90012664:	30a02f7c 	addik	r5, r0, 12156
90012668:	b9f417a0 	brlid	r15, 6048	// 90013e08 <XAssert>
9001266c:	30c00148 	addik	r6, r0, 328
90012670:	30600001 	addik	r3, r0, 1
90012674:	b0009003 	imm	-28669
90012678:	f8604ff8 	swi	r3, r0, 20472
9001267c:	e9e10000 	lwi	r15, r1, 0
90012680:	10600000 	addk	r3, r0, r0
90012684:	b60f0008 	rtsd	r15, 8
90012688:	3021001c 	addik	r1, r1, 28
9001268c:	e8850010 	lwi	r4, r5, 16
90012690:	10632000 	addk	r3, r3, r4
90012694:	f9030014 	swi	r8, r3, 20
90012698:	f8e30010 	swi	r7, r3, 16
9001269c:	e9e10000 	lwi	r15, r1, 0
900126a0:	10600000 	addk	r3, r0, r0
900126a4:	b0009003 	imm	-28669
900126a8:	f8004ff8 	swi	r0, r0, 20472
900126ac:	b60f0008 	rtsd	r15, 8
900126b0:	3021001c 	addik	r1, r1, 28
900126b4:	b0009002 	imm	-28670
900126b8:	30a02f7c 	addik	r5, r0, 12156
900126bc:	b9f4174c 	brlid	r15, 5964	// 90013e08 <XAssert>
900126c0:	30c00146 	addik	r6, r0, 326
900126c4:	e9e10000 	lwi	r15, r1, 0
900126c8:	30600001 	addik	r3, r0, 1
900126cc:	b0009003 	imm	-28669
900126d0:	f8604ff8 	swi	r3, r0, 20472
900126d4:	10600000 	addk	r3, r0, r0
900126d8:	b60f0008 	rtsd	r15, 8
900126dc:	3021001c 	addik	r1, r1, 28
900126e0:	b0009002 	imm	-28670
900126e4:	30a02f7c 	addik	r5, r0, 12156
900126e8:	b9f41720 	brlid	r15, 5920	// 90013e08 <XAssert>
900126ec:	30c00145 	addik	r6, r0, 325
900126f0:	30600001 	addik	r3, r0, 1
900126f4:	b0009003 	imm	-28669
900126f8:	f8604ff8 	swi	r3, r0, 20472
900126fc:	b800ff80 	bri	-128		// 9001267c
90012700:	b0009002 	imm	-28670
90012704:	30a02f7c 	addik	r5, r0, 12156
90012708:	b9f41700 	brlid	r15, 5888	// 90013e08 <XAssert>
9001270c:	30c00147 	addik	r6, r0, 327
90012710:	30600001 	addik	r3, r0, 1
90012714:	b0009003 	imm	-28669
90012718:	f8604ff8 	swi	r3, r0, 20472
9001271c:	b800ff60 	bri	-160		// 9001267c

90012720 <XIntc_Stop>:
90012720:	10850000 	addk	r4, r5, r0
90012724:	3021ffe4 	addik	r1, r1, -28
90012728:	f9e10000 	swi	r15, r1, 0
9001272c:	b0009002 	imm	-28670
90012730:	30a02f7c 	addik	r5, r0, 12156
90012734:	be040024 	beqid	r4, 36		// 90012758
90012738:	30c00119 	addik	r6, r0, 281
9001273c:	e8640004 	lwi	r3, r4, 4
90012740:	b0009003 	imm	-28669
90012744:	f8004ff8 	swi	r0, r0, 20472
90012748:	b0001111 	imm	4369
9001274c:	aa431111 	xori	r18, r3, 4369
90012750:	be120028 	beqid	r18, 40		// 90012778
90012754:	30c0011a 	addik	r6, r0, 282
90012758:	b9f416b0 	brlid	r15, 5808	// 90013e08 <XAssert>
9001275c:	80000000 	or	r0, r0, r0
90012760:	e9e10000 	lwi	r15, r1, 0
90012764:	30600001 	addik	r3, r0, 1
90012768:	b0009003 	imm	-28669
9001276c:	f8604ff8 	swi	r3, r0, 20472
90012770:	b60f0008 	rtsd	r15, 8
90012774:	3021001c 	addik	r1, r1, 28
90012778:	e8640000 	lwi	r3, r4, 0
9001277c:	b0009003 	imm	-28669
90012780:	f8004ff8 	swi	r0, r0, 20472
90012784:	f803001c 	swi	r0, r3, 28
90012788:	f8040008 	swi	r0, r4, 8
9001278c:	e9e10000 	lwi	r15, r1, 0
90012790:	b60f0008 	rtsd	r15, 8
90012794:	3021001c 	addik	r1, r1, 28

90012798 <XIntc_Start>:
90012798:	3021ffe4 	addik	r1, r1, -28
9001279c:	f9e10000 	swi	r15, r1, 0
900127a0:	be0500bc 	beqid	r5, 188		// 9001285c
900127a4:	a4c600ff 	andi	r6, r6, 255
900127a8:	b0009003 	imm	-28669
900127ac:	f8004ff8 	swi	r0, r0, 20472
900127b0:	22400001 	addi	r18, r0, 1
900127b4:	16469003 	cmpu	r18, r6, r18
900127b8:	bcb20030 	bgei	r18, 48		// 900127e8
900127bc:	b0009002 	imm	-28670
900127c0:	30a02f7c 	addik	r5, r0, 12156
900127c4:	b9f41644 	brlid	r15, 5700	// 90013e08 <XAssert>
900127c8:	30c000ed 	addik	r6, r0, 237
900127cc:	30600001 	addik	r3, r0, 1
900127d0:	b0009003 	imm	-28669
900127d4:	f8604ff8 	swi	r3, r0, 20472
900127d8:	e9e10000 	lwi	r15, r1, 0
900127dc:	10600000 	addk	r3, r0, r0
900127e0:	b60f0008 	rtsd	r15, 8
900127e4:	3021001c 	addik	r1, r1, 28
900127e8:	e8650004 	lwi	r3, r5, 4
900127ec:	b0009003 	imm	-28669
900127f0:	f8004ff8 	swi	r0, r0, 20472
900127f4:	b0001111 	imm	4369
900127f8:	aa431111 	xori	r18, r3, 4369
900127fc:	bc120030 	beqi	r18, 48		// 9001282c
90012800:	b0009002 	imm	-28670
90012804:	30a02f7c 	addik	r5, r0, 12156
90012808:	b9f41600 	brlid	r15, 5632	// 90013e08 <XAssert>
9001280c:	30c000ee 	addik	r6, r0, 238
90012810:	e9e10000 	lwi	r15, r1, 0
90012814:	30600001 	addik	r3, r0, 1
90012818:	b0009003 	imm	-28669
9001281c:	f8604ff8 	swi	r3, r0, 20472
90012820:	10600000 	addk	r3, r0, r0
90012824:	b60f0008 	rtsd	r15, 8
90012828:	3021001c 	addik	r1, r1, 28
9001282c:	be26000c 	bneid	r6, 12		// 90012838
90012830:	30e00003 	addik	r7, r0, 3
90012834:	30e00001 	addik	r7, r0, 1
90012838:	b0002222 	imm	8738
9001283c:	30602222 	addik	r3, r0, 8738
90012840:	e8850000 	lwi	r4, r5, 0
90012844:	f8650008 	swi	r3, r5, 8
90012848:	f8e4001c 	swi	r7, r4, 28
9001284c:	e9e10000 	lwi	r15, r1, 0
90012850:	10600000 	addk	r3, r0, r0
90012854:	b60f0008 	rtsd	r15, 8
90012858:	3021001c 	addik	r1, r1, 28
9001285c:	b0009002 	imm	-28670
90012860:	30a02f7c 	addik	r5, r0, 12156
90012864:	b9f415a4 	brlid	r15, 5540	// 90013e08 <XAssert>
90012868:	30c000eb 	addik	r6, r0, 235
9001286c:	30600001 	addik	r3, r0, 1
90012870:	b0009003 	imm	-28669
90012874:	f8604ff8 	swi	r3, r0, 20472
90012878:	b800ff60 	bri	-160		// 900127d8

9001287c <XIntc_Initialize>:
9001287c:	3021ffe0 	addik	r1, r1, -32
90012880:	fa61001c 	swi	r19, r1, 28
90012884:	12650000 	addk	r19, r5, r0
90012888:	f9e10000 	swi	r15, r1, 0
9001288c:	b0000000 	imm	0
90012890:	a4a6ffff 	andi	r5, r6, -1
90012894:	bc1300e4 	beqi	r19, 228		// 90012978
90012898:	e8730008 	lwi	r3, r19, 8
9001289c:	b0009003 	imm	-28669
900128a0:	f8004ff8 	swi	r0, r0, 20472
900128a4:	b0002222 	imm	8738
900128a8:	aa432222 	xori	r18, r3, 8738
900128ac:	be1200b8 	beqid	r18, 184		// 90012964
900128b0:	30e00005 	addik	r7, r0, 5
900128b4:	b9f4f9c4 	brlid	r15, -1596	// 90012278 <XIntc_LookupConfig>
900128b8:	80000000 	or	r0, r0, r0
900128bc:	10a30000 	addk	r5, r3, r0
900128c0:	be0300a4 	beqid	r3, 164		// 90012964
900128c4:	30e00002 	addik	r7, r0, 2
900128c8:	f8130004 	swi	r0, r19, 4
900128cc:	f8130008 	swi	r0, r19, 8
900128d0:	30600001 	addik	r3, r0, 1
900128d4:	e9050004 	lwi	r8, r5, 4
900128d8:	10e30000 	addk	r7, r3, r0
900128dc:	10850000 	addk	r4, r5, r0
900128e0:	b0009001 	imm	-28671
900128e4:	312022ac 	addik	r9, r0, 8876
900128e8:	f865000c 	swi	r3, r5, 12
900128ec:	f8b30010 	swi	r5, r19, 16
900128f0:	f9130000 	swi	r8, r19, 0
900128f4:	b8100030 	brid	48		// 90012924
900128f8:	10c00000 	addk	r6, r0, r0
900128fc:	b0009001 	imm	-28671
90012900:	aa433e4c 	xori	r18, r3, 15948
90012904:	bc120030 	beqi	r18, 48		// 90012934
90012908:	b0009003 	imm	-28669
9001290c:	f8e54fd0 	swi	r7, r5, 20432
90012910:	fa640014 	swi	r19, r4, 20
90012914:	10e73800 	addk	r7, r7, r7
90012918:	aa46000a 	xori	r18, r6, 10
9001291c:	be120020 	beqid	r18, 32		// 9001293c
90012920:	30840008 	addik	r4, r4, 8
90012924:	e8640010 	lwi	r3, r4, 16
90012928:	64a60402 	bslli	r5, r6, 2
9001292c:	be23ffd0 	bneid	r3, -48		// 900128fc
90012930:	30c60001 	addik	r6, r6, 1
90012934:	f9240010 	swi	r9, r4, 16
90012938:	b800ffd0 	bri	-48		// 90012908
9001293c:	f808001c 	swi	r0, r8, 28
90012940:	e8730000 	lwi	r3, r19, 0
90012944:	b0001111 	imm	4369
90012948:	30801111 	addik	r4, r0, 4369
9001294c:	10e00000 	addk	r7, r0, r0
90012950:	f8030008 	swi	r0, r3, 8
90012954:	e8b30000 	lwi	r5, r19, 0
90012958:	3060ffff 	addik	r3, r0, -1
9001295c:	f865000c 	swi	r3, r5, 12
90012960:	f8930004 	swi	r4, r19, 4
90012964:	10670000 	addk	r3, r7, r0
90012968:	e9e10000 	lwi	r15, r1, 0
9001296c:	ea61001c 	lwi	r19, r1, 28
90012970:	b60f0008 	rtsd	r15, 8
90012974:	30210020 	addik	r1, r1, 32
90012978:	b0009002 	imm	-28670
9001297c:	30a02f7c 	addik	r5, r0, 12156
90012980:	b9f41488 	brlid	r15, 5256	// 90013e08 <XAssert>
90012984:	30c00070 	addik	r6, r0, 112
90012988:	30600001 	addik	r3, r0, 1
9001298c:	b0009003 	imm	-28669
90012990:	f8604ff8 	swi	r3, r0, 20472
90012994:	b810ffd0 	brid	-48		// 90012964
90012998:	10f30000 	addk	r7, r19, r0

9001299c <XIntc_DeviceInterruptHandler>:
9001299c:	b0009002 	imm	-28670
900129a0:	30603aa8 	addik	r3, r0, 15016
900129a4:	60a50060 	muli	r5, r5, 96
900129a8:	3021ffcc 	addik	r1, r1, -52
900129ac:	fa610020 	swi	r19, r1, 32
900129b0:	fac10024 	swi	r22, r1, 36
900129b4:	fae10028 	swi	r23, r1, 40
900129b8:	fb01002c 	swi	r24, r1, 44
900129bc:	fb210030 	swi	r25, r1, 48
900129c0:	f9e10000 	swi	r15, r1, 0
900129c4:	12651800 	addk	r19, r5, r3
900129c8:	e8d30004 	lwi	r6, r19, 4
900129cc:	33000001 	addik	r24, r0, 1
900129d0:	13200000 	addk	r25, r0, r0
900129d4:	e8860000 	lwi	r4, r6, 0
900129d8:	e8660008 	lwi	r3, r6, 8
900129dc:	32e00010 	addik	r23, r0, 16	// 10 <_vector_interrupt>
900129e0:	86c41800 	and	r22, r4, r3
900129e4:	a4760001 	andi	r3, r22, 1
900129e8:	1093b800 	addk	r4, r19, r23
900129ec:	33390001 	addik	r25, r25, 1
900129f0:	be03005c 	beqid	r3, 92		// 90012a4c
900129f4:	92d60041 	srl	r22, r22
900129f8:	e8730008 	lwi	r3, r19, 8
900129fc:	84781800 	and	r3, r24, r3
90012a00:	bc030008 	beqi	r3, 8		// 90012a08
90012a04:	fb06000c 	swi	r24, r6, 12
90012a08:	e8a40004 	lwi	r5, r4, 4
90012a0c:	c893b800 	lw	r4, r19, r23
90012a10:	99fc2000 	brald	r15, r4
90012a14:	80000000 	or	r0, r0, r0
90012a18:	e8730008 	lwi	r3, r19, 8
90012a1c:	84781800 	and	r3, r24, r3
90012a20:	bc23000c 	bnei	r3, 12		// 90012a2c
90012a24:	e8730004 	lwi	r3, r19, 4
90012a28:	fb03000c 	swi	r24, r3, 12
90012a2c:	e8d30004 	lwi	r6, r19, 4
90012a30:	e873000c 	lwi	r3, r19, 12
90012a34:	e8860000 	lwi	r4, r6, 0
90012a38:	e8a60008 	lwi	r5, r6, 8
90012a3c:	84842800 	and	r4, r4, r5
90012a40:	f881001c 	swi	r4, r1, 28
90012a44:	aa430001 	xori	r18, r3, 1
90012a48:	bc120018 	beqi	r18, 24		// 90012a60
90012a4c:	be160014 	beqid	r22, 20		// 90012a60
90012a50:	1318c000 	addk	r24, r24, r24
90012a54:	aa59000a 	xori	r18, r25, 10
90012a58:	be32ff8c 	bneid	r18, -116		// 900129e4
90012a5c:	32f70008 	addik	r23, r23, 8
90012a60:	e9e10000 	lwi	r15, r1, 0
90012a64:	ea610020 	lwi	r19, r1, 32
90012a68:	eac10024 	lwi	r22, r1, 36
90012a6c:	eae10028 	lwi	r23, r1, 40
90012a70:	eb01002c 	lwi	r24, r1, 44
90012a74:	eb210030 	lwi	r25, r1, 48
90012a78:	b60f0008 	rtsd	r15, 8
90012a7c:	30210034 	addik	r1, r1, 52

90012a80 <XIntc_LowLevelInterruptHandler>:
90012a80:	3021ffe4 	addik	r1, r1, -28
90012a84:	f9e10000 	swi	r15, r1, 0
90012a88:	b9f4ff14 	brlid	r15, -236	// 9001299c <XIntc_DeviceInterruptHandler>
90012a8c:	10a00000 	addk	r5, r0, r0
90012a90:	e9e10000 	lwi	r15, r1, 0
90012a94:	b60f0008 	rtsd	r15, 8
90012a98:	3021001c 	addik	r1, r1, 28

90012a9c <LookupConfigByBaseAddress>:
90012a9c:	b0009002 	imm	-28670
90012aa0:	e8603aac 	lwi	r3, r0, 15020
90012aa4:	b0009002 	imm	-28670
90012aa8:	30803aa8 	addik	r4, r0, 15016
90012aac:	16451800 	rsubk	r18, r5, r3
90012ab0:	bc32000c 	bnei	r18, 12		// 90012abc
90012ab4:	b60f0008 	rtsd	r15, 8
90012ab8:	10640000 	addk	r3, r4, r0
90012abc:	10800000 	addk	r4, r0, r0
90012ac0:	b60f0008 	rtsd	r15, 8
90012ac4:	10640000 	addk	r3, r4, r0

90012ac8 <XIntc_RegisterHandler>:
90012ac8:	3021ffd8 	addik	r1, r1, -40
90012acc:	fac10020 	swi	r22, r1, 32
90012ad0:	12c60000 	addk	r22, r6, r0
90012ad4:	fa61001c 	swi	r19, r1, 28
90012ad8:	fae10024 	swi	r23, r1, 36
90012adc:	66d60403 	bslli	r22, r22, 3
90012ae0:	f9e10000 	swi	r15, r1, 0
90012ae4:	12e70000 	addk	r23, r7, r0
90012ae8:	b9f4ffb4 	brlid	r15, -76	// 90012a9c <LookupConfigByBaseAddress>
90012aec:	12680000 	addk	r19, r8, r0
90012af0:	be030010 	beqid	r3, 16		// 90012b00
90012af4:	12d61800 	addk	r22, r22, r3
90012af8:	fa760014 	swi	r19, r22, 20
90012afc:	faf60010 	swi	r23, r22, 16
90012b00:	e9e10000 	lwi	r15, r1, 0
90012b04:	ea61001c 	lwi	r19, r1, 28
90012b08:	eac10020 	lwi	r22, r1, 32
90012b0c:	eae10024 	lwi	r23, r1, 36
90012b10:	b60f0008 	rtsd	r15, 8
90012b14:	30210028 	addik	r1, r1, 40

90012b18 <XIntc_SetIntrSvcOption>:
90012b18:	3021ffe0 	addik	r1, r1, -32
90012b1c:	fa61001c 	swi	r19, r1, 28
90012b20:	f9e10000 	swi	r15, r1, 0
90012b24:	b9f4ff78 	brlid	r15, -136	// 90012a9c <LookupConfigByBaseAddress>
90012b28:	12660000 	addk	r19, r6, r0
90012b2c:	bc030008 	beqi	r3, 8		// 90012b34
90012b30:	fa63000c 	swi	r19, r3, 12
90012b34:	e9e10000 	lwi	r15, r1, 0
90012b38:	ea61001c 	lwi	r19, r1, 28
90012b3c:	b60f0008 	rtsd	r15, 8
90012b40:	30210020 	addik	r1, r1, 32

90012b44 <XSpi_Abort>:
90012b44:	e8850018 	lwi	r4, r5, 24
90012b48:	e8650030 	lwi	r3, r5, 48
90012b4c:	10c50000 	addk	r6, r5, r0
90012b50:	e8a50024 	lwi	r5, r5, 36
90012b54:	f8640070 	swi	r3, r4, 112
90012b58:	e8860018 	lwi	r4, r6, 24
90012b5c:	e4640062 	lhui	r3, r4, 98
90012b60:	b0000000 	imm	0
90012b64:	a463ffff 	andi	r3, r3, -1
90012b68:	a0630100 	ori	r3, r3, 256
90012b6c:	bc050008 	beqi	r5, 8		// 90012b74
90012b70:	a0630060 	ori	r3, r3, 96
90012b74:	f4640062 	shi	r3, r4, 98
90012b78:	f8060048 	swi	r0, r6, 72
90012b7c:	f8060044 	swi	r0, r6, 68
90012b80:	f8060040 	swi	r0, r6, 64
90012b84:	b60f0008 	rtsd	r15, 8
90012b88:	80000000 	or	r0, r0, r0

90012b8c <XSpi_InterruptHandler>:
90012b8c:	3021ffdc 	addik	r1, r1, -36
90012b90:	fa61001c 	swi	r19, r1, 28
90012b94:	f9e10000 	swi	r15, r1, 0
90012b98:	fac10020 	swi	r22, r1, 32
90012b9c:	be050310 	beqid	r5, 784		// 90012eac
90012ba0:	12650000 	addk	r19, r5, r0
90012ba4:	e8650014 	lwi	r3, r5, 20
90012ba8:	e8850018 	lwi	r4, r5, 24
90012bac:	b0009003 	imm	-28669
90012bb0:	f8004ff8 	swi	r0, r0, 20472
90012bb4:	30630001 	addik	r3, r3, 1
90012bb8:	f8650014 	swi	r3, r5, 20
90012bbc:	eac40020 	lwi	r22, r4, 32
90012bc0:	e8640020 	lwi	r3, r4, 32
90012bc4:	a4d60001 	andi	r6, r22, 1
90012bc8:	80761800 	or	r3, r22, r3
90012bcc:	f8640020 	swi	r3, r4, 32
90012bd0:	be260224 	bneid	r6, 548		// 90012df4
90012bd4:	a4760004 	andi	r3, r22, 4
90012bd8:	be0300ac 	beqid	r3, 172		// 90012c84
90012bdc:	a4760002 	andi	r3, r22, 2
90012be0:	e8c50018 	lwi	r6, r5, 24
90012be4:	e4660062 	lhui	r3, r6, 98
90012be8:	b0000000 	imm	0
90012bec:	a503ffff 	andi	r8, r3, -1
90012bf0:	a0880100 	ori	r4, r8, 256
90012bf4:	f4860062 	shi	r4, r6, 98
90012bf8:	e0660067 	lbui	r3, r6, 103
90012bfc:	a4630001 	andi	r3, r3, 1
90012c00:	bc230138 	bnei	r3, 312		// 90012d38
90012c04:	e073002d 	lbui	r3, r19, 45
90012c08:	aa430008 	xori	r18, r3, 8
90012c0c:	bc1200cc 	beqi	r18, 204		// 90012cd8
90012c10:	aa430010 	xori	r18, r3, 16
90012c14:	bc1200f4 	beqi	r18, 244		// 90012d08
90012c18:	aa430020 	xori	r18, r3, 32
90012c1c:	bc32ffdc 	bnei	r18, -36		// 90012bf8
90012c20:	e8730010 	lwi	r3, r19, 16
90012c24:	e893003c 	lwi	r4, r19, 60
90012c28:	30630004 	addik	r3, r3, 4
90012c2c:	f8730010 	swi	r3, r19, 16
90012c30:	30a40004 	addik	r5, r4, 4
90012c34:	e866006c 	lwi	r3, r6, 108
90012c38:	bc04ffc0 	beqi	r4, -64		// 90012bf8
90012c3c:	f8640000 	swi	r3, r4, 0
90012c40:	e8d30018 	lwi	r6, r19, 24
90012c44:	f8b3003c 	swi	r5, r19, 60
90012c48:	b800ffb0 	bri	-80		// 90012bf8
90012c4c:	e8730030 	lwi	r3, r19, 48
90012c50:	e913004c 	lwi	r8, r19, 76
90012c54:	e8b30050 	lwi	r5, r19, 80
90012c58:	f8660070 	swi	r3, r6, 112
90012c5c:	e8930018 	lwi	r4, r19, 24
90012c60:	e8f30040 	lwi	r7, r19, 64
90012c64:	f9330048 	swi	r9, r19, 72
90012c68:	e8640028 	lwi	r3, r4, 40
90012c6c:	30c00480 	addik	r6, r0, 1152
90012c70:	a463fffb 	andi	r3, r3, -5
90012c74:	f8640028 	swi	r3, r4, 40
90012c78:	99fc4000 	brald	r15, r8
90012c7c:	80000000 	or	r0, r0, r0
90012c80:	a4760002 	andi	r3, r22, 2
90012c84:	be2301f0 	bneid	r3, 496		// 90012e74
90012c88:	a4760020 	andi	r3, r22, 32
90012c8c:	be2301b4 	bneid	r3, 436		// 90012e40
90012c90:	a4760008 	andi	r3, r22, 8
90012c94:	bc230018 	bnei	r3, 24		// 90012cac
90012c98:	e9e10000 	lwi	r15, r1, 0
90012c9c:	ea61001c 	lwi	r19, r1, 28
90012ca0:	eac10020 	lwi	r22, r1, 32
90012ca4:	b60f0008 	rtsd	r15, 8
90012ca8:	30210024 	addik	r1, r1, 36
90012cac:	e8730004 	lwi	r3, r19, 4
90012cb0:	e8d30040 	lwi	r6, r19, 64
90012cb4:	e8f30044 	lwi	r7, r19, 68
90012cb8:	e8b30050 	lwi	r5, r19, 80
90012cbc:	e893004c 	lwi	r4, r19, 76
90012cc0:	30630001 	addik	r3, r3, 1
90012cc4:	14e73000 	rsubk	r7, r7, r6
90012cc8:	f8730004 	swi	r3, r19, 4
90012ccc:	99fc2000 	brald	r15, r4
90012cd0:	30c00481 	addik	r6, r0, 1153
90012cd4:	b800ffc4 	bri	-60		// 90012c98
90012cd8:	e8730010 	lwi	r3, r19, 16
90012cdc:	e8b3003c 	lwi	r5, r19, 60
90012ce0:	30630001 	addik	r3, r3, 1
90012ce4:	f8730010 	swi	r3, r19, 16
90012ce8:	e086006f 	lbui	r4, r6, 111
90012cec:	30650001 	addik	r3, r5, 1
90012cf0:	be05ff08 	beqid	r5, -248		// 90012bf8
90012cf4:	a48400ff 	andi	r4, r4, 255
90012cf8:	f0850000 	sbi	r4, r5, 0
90012cfc:	e8d30018 	lwi	r6, r19, 24
90012d00:	f873003c 	swi	r3, r19, 60
90012d04:	b800fef4 	bri	-268		// 90012bf8
90012d08:	e8730010 	lwi	r3, r19, 16
90012d0c:	e486006e 	lhui	r4, r6, 110
90012d10:	e8b3003c 	lwi	r5, r19, 60
90012d14:	30630002 	addik	r3, r3, 2
90012d18:	f8730010 	swi	r3, r19, 16
90012d1c:	b0000000 	imm	0
90012d20:	a484ffff 	andi	r4, r4, -1
90012d24:	be05fed4 	beqid	r5, -300		// 90012bf8
90012d28:	30e50002 	addik	r7, r5, 2
90012d2c:	f4850000 	shi	r4, r5, 0
90012d30:	f8f3003c 	swi	r7, r19, 60
90012d34:	b800fec4 	bri	-316		// 90012bf8
90012d38:	e9330044 	lwi	r9, r19, 68
90012d3c:	bc09ff10 	beqi	r9, -240		// 90012c4c
90012d40:	e0660067 	lbui	r3, r6, 103
90012d44:	a4630008 	andi	r3, r3, 8
90012d48:	be030030 	beqid	r3, 48		// 90012d78
90012d4c:	a4760002 	andi	r3, r22, 2
90012d50:	b80000e0 	bri	224		// 90012e30
90012d54:	aa430010 	xori	r18, r3, 16
90012d58:	bc120058 	beqi	r18, 88		// 90012db0
90012d5c:	aa430020 	xori	r18, r3, 32
90012d60:	bc120070 	beqi	r18, 112		// 90012dd0
90012d64:	e0660067 	lbui	r3, r6, 103
90012d68:	a4630008 	andi	r3, r3, 8
90012d6c:	be2300c4 	bneid	r3, 196		// 90012e30
90012d70:	a4760002 	andi	r3, r22, 2
90012d74:	bc0900bc 	beqi	r9, 188		// 90012e30
90012d78:	e073002d 	lbui	r3, r19, 45
90012d7c:	aa430008 	xori	r18, r3, 8
90012d80:	bc32ffd4 	bnei	r18, -44		// 90012d54
90012d84:	e8730038 	lwi	r3, r19, 56
90012d88:	e0830000 	lbui	r4, r3, 0
90012d8c:	f086006b 	sbi	r4, r6, 107
90012d90:	e8730038 	lwi	r3, r19, 56
90012d94:	e9330044 	lwi	r9, r19, 68
90012d98:	e8d30018 	lwi	r6, r19, 24
90012d9c:	30630001 	addik	r3, r3, 1
90012da0:	3129ffff 	addik	r9, r9, -1
90012da4:	f8730038 	swi	r3, r19, 56
90012da8:	f9330044 	swi	r9, r19, 68
90012dac:	b800ffb8 	bri	-72		// 90012d64
90012db0:	e8730038 	lwi	r3, r19, 56
90012db4:	3129fffe 	addik	r9, r9, -2
90012db8:	f9330044 	swi	r9, r19, 68
90012dbc:	e4830000 	lhui	r4, r3, 0
90012dc0:	30630002 	addik	r3, r3, 2
90012dc4:	f8730038 	swi	r3, r19, 56
90012dc8:	f486006a 	shi	r4, r6, 106
90012dcc:	b800ff98 	bri	-104		// 90012d64
90012dd0:	e8730038 	lwi	r3, r19, 56
90012dd4:	3129fffc 	addik	r9, r9, -4
90012dd8:	f9330044 	swi	r9, r19, 68
90012ddc:	e8830000 	lwi	r4, r3, 0
90012de0:	30630004 	addik	r3, r3, 4
90012de4:	f8730038 	swi	r3, r19, 56
90012de8:	f8860068 	swi	r4, r6, 104
90012dec:	e8d30018 	lwi	r6, r19, 24
90012df0:	b800ff74 	bri	-140		// 90012d64
90012df4:	e8650000 	lwi	r3, r5, 0
90012df8:	e8850044 	lwi	r4, r5, 68
90012dfc:	eac50040 	lwi	r22, r5, 64
90012e00:	30630001 	addik	r3, r3, 1
90012e04:	f8650000 	swi	r3, r5, 0
90012e08:	b9f4fd3c 	brlid	r15, -708	// 90012b44 <XSpi_Abort>
90012e0c:	16c4b000 	rsubk	r22, r4, r22
90012e10:	e8930018 	lwi	r4, r19, 24
90012e14:	e8b30050 	lwi	r5, r19, 80
90012e18:	10f60000 	addk	r7, r22, r0
90012e1c:	e0c40067 	lbui	r6, r4, 103
90012e20:	e873004c 	lwi	r3, r19, 76
90012e24:	99fc1800 	brald	r15, r3
90012e28:	30c0047f 	addik	r6, r0, 1151
90012e2c:	b800fe6c 	bri	-404		// 90012c98
90012e30:	f5060062 	shi	r8, r6, 98
90012e34:	be03fe58 	beqid	r3, -424		// 90012c8c
90012e38:	a4760020 	andi	r3, r22, 32
90012e3c:	b8000038 	bri	56		// 90012e74
90012e40:	e8730008 	lwi	r3, r19, 8
90012e44:	e8930040 	lwi	r4, r19, 64
90012e48:	e8f30044 	lwi	r7, r19, 68
90012e4c:	e913004c 	lwi	r8, r19, 76
90012e50:	e8b30050 	lwi	r5, r19, 80
90012e54:	30630001 	addik	r3, r3, 1
90012e58:	f8730008 	swi	r3, r19, 8
90012e5c:	14e72000 	rsubk	r7, r7, r4
90012e60:	99fc4000 	brald	r15, r8
90012e64:	30c00482 	addik	r6, r0, 1154
90012e68:	a4760008 	andi	r3, r22, 8
90012e6c:	bc03fe2c 	beqi	r3, -468		// 90012c98
90012e70:	b800fe3c 	bri	-452		// 90012cac
90012e74:	e873000c 	lwi	r3, r19, 12
90012e78:	e8930040 	lwi	r4, r19, 64
90012e7c:	e8f30044 	lwi	r7, r19, 68
90012e80:	e913004c 	lwi	r8, r19, 76
90012e84:	e8b30050 	lwi	r5, r19, 80
90012e88:	30630001 	addik	r3, r3, 1
90012e8c:	f873000c 	swi	r3, r19, 12
90012e90:	14e72000 	rsubk	r7, r7, r4
90012e94:	99fc4000 	brald	r15, r8
90012e98:	30c00487 	addik	r6, r0, 1159
90012e9c:	a4760020 	andi	r3, r22, 32
90012ea0:	be03fdf4 	beqid	r3, -524		// 90012c94
90012ea4:	a4760008 	andi	r3, r22, 8
90012ea8:	b800ff98 	bri	-104		// 90012e40
90012eac:	b0009002 	imm	-28670
90012eb0:	30a02f84 	addik	r5, r0, 12164
90012eb4:	b9f40f54 	brlid	r15, 3924	// 90013e08 <XAssert>
90012eb8:	30c00402 	addik	r6, r0, 1026
90012ebc:	30600001 	addik	r3, r0, 1
90012ec0:	b0009003 	imm	-28669
90012ec4:	f8604ff8 	swi	r3, r0, 20472
90012ec8:	b800fdd0 	bri	-560		// 90012c98

90012ecc <StubStatusHandler>:
90012ecc:	b0009002 	imm	-28670
90012ed0:	30a02f84 	addik	r5, r0, 12164
90012ed4:	3021ffe4 	addik	r1, r1, -28
90012ed8:	f9e10000 	swi	r15, r1, 0
90012edc:	b9f40f2c 	brlid	r15, 3884	// 90013e08 <XAssert>
90012ee0:	30c003cb 	addik	r6, r0, 971
90012ee4:	e9e10000 	lwi	r15, r1, 0
90012ee8:	30600001 	addik	r3, r0, 1
90012eec:	b0009003 	imm	-28669
90012ef0:	f8604ff8 	swi	r3, r0, 20472
90012ef4:	b60f0008 	rtsd	r15, 8
90012ef8:	3021001c 	addik	r1, r1, 28

90012efc <XSpi_SetStatusHandler>:
90012efc:	10850000 	addk	r4, r5, r0
90012f00:	3021ffe4 	addik	r1, r1, -28
90012f04:	11060000 	addk	r8, r6, r0
90012f08:	f9e10000 	swi	r15, r1, 0
90012f0c:	b0009002 	imm	-28670
90012f10:	30a02f84 	addik	r5, r0, 12164
90012f14:	be040030 	beqid	r4, 48		// 90012f44
90012f18:	30c003b0 	addik	r6, r0, 944
90012f1c:	b0009003 	imm	-28669
90012f20:	f8004ff8 	swi	r0, r0, 20472
90012f24:	bc07005c 	beqi	r7, 92		// 90012f80
90012f28:	e864001c 	lwi	r3, r4, 28
90012f2c:	b0009003 	imm	-28669
90012f30:	f8004ff8 	swi	r0, r0, 20472
90012f34:	b0001111 	imm	4369
90012f38:	aa431111 	xori	r18, r3, 4369
90012f3c:	be120028 	beqid	r18, 40		// 90012f64
90012f40:	30c003b2 	addik	r6, r0, 946
90012f44:	b9f40ec4 	brlid	r15, 3780	// 90013e08 <XAssert>
90012f48:	80000000 	or	r0, r0, r0
90012f4c:	30600001 	addik	r3, r0, 1
90012f50:	b0009003 	imm	-28669
90012f54:	f8604ff8 	swi	r3, r0, 20472
90012f58:	e9e10000 	lwi	r15, r1, 0
90012f5c:	b60f0008 	rtsd	r15, 8
90012f60:	3021001c 	addik	r1, r1, 28
90012f64:	f9040050 	swi	r8, r4, 80
90012f68:	f8e4004c 	swi	r7, r4, 76
90012f6c:	e9e10000 	lwi	r15, r1, 0
90012f70:	b0009003 	imm	-28669
90012f74:	f8004ff8 	swi	r0, r0, 20472
90012f78:	b60f0008 	rtsd	r15, 8
90012f7c:	3021001c 	addik	r1, r1, 28
90012f80:	b9f40e88 	brlid	r15, 3720	// 90013e08 <XAssert>
90012f84:	30c003b1 	addik	r6, r0, 945
90012f88:	30600001 	addik	r3, r0, 1
90012f8c:	b0009003 	imm	-28669
90012f90:	f8604ff8 	swi	r3, r0, 20472
90012f94:	b800ffc4 	bri	-60		// 90012f58

90012f98 <XSpi_GetSlaveSelect>:
90012f98:	3021ffe0 	addik	r1, r1, -32
90012f9c:	fa61001c 	swi	r19, r1, 28
90012fa0:	12650000 	addk	r19, r5, r0
90012fa4:	f9e10000 	swi	r15, r1, 0
90012fa8:	b0009002 	imm	-28670
90012fac:	30a02f84 	addik	r5, r0, 12164
90012fb0:	be13006c 	beqid	r19, 108		// 9001301c
90012fb4:	30c00371 	addik	r6, r0, 881
90012fb8:	e873001c 	lwi	r3, r19, 28
90012fbc:	b0009003 	imm	-28669
90012fc0:	f8004ff8 	swi	r0, r0, 20472
90012fc4:	b0001111 	imm	4369
90012fc8:	aa431111 	xori	r18, r3, 4369
90012fcc:	be120034 	beqid	r18, 52		// 90013000
90012fd0:	30c00372 	addik	r6, r0, 882
90012fd4:	b9f40e34 	brlid	r15, 3636	// 90013e08 <XAssert>
90012fd8:	80000000 	or	r0, r0, r0
90012fdc:	30600001 	addik	r3, r0, 1
90012fe0:	b0009003 	imm	-28669
90012fe4:	f8604ff8 	swi	r3, r0, 20472
90012fe8:	10a00000 	addk	r5, r0, r0
90012fec:	10650000 	addk	r3, r5, r0
90012ff0:	e9e10000 	lwi	r15, r1, 0
90012ff4:	ea61001c 	lwi	r19, r1, 28
90012ff8:	b60f0008 	rtsd	r15, 8
90012ffc:	30210020 	addik	r1, r1, 32
90013000:	e8730018 	lwi	r3, r19, 24
90013004:	e8930034 	lwi	r4, r19, 52
90013008:	b0009003 	imm	-28669
9001300c:	f8004ff8 	swi	r0, r0, 20472
90013010:	e8a30070 	lwi	r5, r3, 112
90013014:	b810ffd8 	brid	-40		// 90012fec
90013018:	a8a4ffff 	xori	r5, r4, -1
9001301c:	b9f40dec 	brlid	r15, 3564	// 90013e08 <XAssert>
90013020:	80000000 	or	r0, r0, r0
90013024:	30600001 	addik	r3, r0, 1
90013028:	b0009003 	imm	-28669
9001302c:	f8604ff8 	swi	r3, r0, 20472
90013030:	b810ffbc 	brid	-68		// 90012fec
90013034:	10b30000 	addk	r5, r19, r0

90013038 <XSpi_SetSlaveSelect>:
90013038:	3021ffe0 	addik	r1, r1, -32
9001303c:	fa61001c 	swi	r19, r1, 28
90013040:	f9e10000 	swi	r15, r1, 0
90013044:	be050094 	beqid	r5, 148		// 900130d8
90013048:	12650000 	addk	r19, r5, r0
9001304c:	e865001c 	lwi	r3, r5, 28
90013050:	b0009003 	imm	-28669
90013054:	f8004ff8 	swi	r0, r0, 20472
90013058:	b0001111 	imm	4369
9001305c:	aa431111 	xori	r18, r3, 4369
90013060:	bc32009c 	bnei	r18, 156		// 900130fc
90013064:	e8a50048 	lwi	r5, r5, 72
90013068:	b0009003 	imm	-28669
9001306c:	f8004ff8 	swi	r0, r0, 20472
90013070:	be250044 	bneid	r5, 68		// 900130b4
90013074:	30800015 	addik	r4, r0, 21
90013078:	e073002c 	lbui	r3, r19, 44
9001307c:	3083ffff 	addik	r4, r3, -1
90013080:	be44004c 	bltid	r4, 76		// 900130cc
90013084:	a866ffff 	xori	r3, r6, -1
90013088:	44662000 	bsrl	r3, r6, r4
9001308c:	a4630001 	andi	r3, r3, 1
90013090:	8c630400 	pcmpne	r3, r3, r0
90013094:	3084ffff 	addik	r4, r4, -1
90013098:	aa44ffff 	xori	r18, r4, -1
9001309c:	be32ffec 	bneid	r18, -20		// 90013088
900130a0:	10a51800 	addk	r5, r5, r3
900130a4:	32400001 	addik	r18, r0, 1
900130a8:	16459001 	cmp	r18, r5, r18
900130ac:	beb2001c 	bgeid	r18, 28		// 900130c8
900130b0:	30800484 	addik	r4, r0, 1156
900130b4:	10640000 	addk	r3, r4, r0
900130b8:	e9e10000 	lwi	r15, r1, 0
900130bc:	ea61001c 	lwi	r19, r1, 28
900130c0:	b60f0008 	rtsd	r15, 8
900130c4:	30210020 	addik	r1, r1, 32
900130c8:	a866ffff 	xori	r3, r6, -1
900130cc:	f8730034 	swi	r3, r19, 52
900130d0:	b810ffe4 	brid	-28		// 900130b4
900130d4:	10800000 	addk	r4, r0, r0
900130d8:	b0009002 	imm	-28670
900130dc:	30a02f84 	addik	r5, r0, 12164
900130e0:	b9f40d28 	brlid	r15, 3368	// 90013e08 <XAssert>
900130e4:	30c00333 	addik	r6, r0, 819
900130e8:	30600001 	addik	r3, r0, 1
900130ec:	b0009003 	imm	-28669
900130f0:	f8604ff8 	swi	r3, r0, 20472
900130f4:	b810ffc0 	brid	-64		// 900130b4
900130f8:	10930000 	addk	r4, r19, r0
900130fc:	b0009002 	imm	-28670
90013100:	30a02f84 	addik	r5, r0, 12164
90013104:	b9f40d04 	brlid	r15, 3332	// 90013e08 <XAssert>
90013108:	30c00334 	addik	r6, r0, 820
9001310c:	30600001 	addik	r3, r0, 1
90013110:	b0009003 	imm	-28669
90013114:	f8604ff8 	swi	r3, r0, 20472
90013118:	b810ff9c 	brid	-100		// 900130b4
9001311c:	10800000 	addk	r4, r0, r0

90013120 <XSpi_Transfer>:
90013120:	3021ffe0 	addik	r1, r1, -32
90013124:	fa61001c 	swi	r19, r1, 28
90013128:	f9e10000 	swi	r15, r1, 0
9001312c:	be0503e0 	beqid	r5, 992		// 9001350c
90013130:	12650000 	addk	r19, r5, r0
90013134:	b0009003 	imm	-28669
90013138:	f8004ff8 	swi	r0, r0, 20472
9001313c:	bc0603f4 	beqi	r6, 1012		// 90013530
90013140:	bc080380 	beqi	r8, 896		// 900134c0
90013144:	e865001c 	lwi	r3, r5, 28
90013148:	b0009003 	imm	-28669
9001314c:	f8004ff8 	swi	r0, r0, 20472
90013150:	b0001111 	imm	4369
90013154:	aa431111 	xori	r18, r3, 4369
90013158:	bc3203fc 	bnei	r18, 1020		// 90013554
9001315c:	e8650020 	lwi	r3, r5, 32
90013160:	b0009003 	imm	-28669
90013164:	f8004ff8 	swi	r0, r0, 20472
90013168:	b0002222 	imm	8738
9001316c:	aa432222 	xori	r18, r3, 8738
90013170:	be3200f0 	bneid	r18, 240		// 90013260
90013174:	31400006 	addik	r10, r0, 6
90013178:	e8850048 	lwi	r4, r5, 72
9001317c:	be2400e4 	bneid	r4, 228		// 90013260
90013180:	31400015 	addik	r10, r0, 21
90013184:	e8650018 	lwi	r3, r5, 24
90013188:	e943001c 	lwi	r10, r3, 28
9001318c:	f883001c 	swi	r4, r3, 28
90013190:	e8a50018 	lwi	r5, r5, 24
90013194:	e4650062 	lhui	r3, r5, 98
90013198:	b0000000 	imm	0
9001319c:	a463ffff 	andi	r3, r3, -1
900131a0:	a4830004 	andi	r4, r3, 4
900131a4:	be240098 	bneid	r4, 152		// 9001323c
900131a8:	a4630001 	andi	r3, r3, 1
900131ac:	e8930034 	lwi	r4, r19, 52
900131b0:	f8850070 	swi	r4, r5, 112
900131b4:	e9330018 	lwi	r9, r19, 24
900131b8:	30600001 	addik	r3, r0, 1
900131bc:	f8730048 	swi	r3, r19, 72
900131c0:	f8d30038 	swi	r6, r19, 56
900131c4:	f8f3003c 	swi	r7, r19, 60
900131c8:	f9130040 	swi	r8, r19, 64
900131cc:	f9130044 	swi	r8, r19, 68
900131d0:	e0690067 	lbui	r3, r9, 103
900131d4:	a4630008 	andi	r3, r3, 8
900131d8:	bc03002c 	beqi	r3, 44		// 90013204
900131dc:	b80000e4 	bri	228		// 900132c0
900131e0:	aa430010 	xori	r18, r3, 16
900131e4:	bc120090 	beqi	r18, 144		// 90013274
900131e8:	aa430020 	xori	r18, r3, 32
900131ec:	bc1200ac 	beqi	r18, 172		// 90013298
900131f0:	e0690067 	lbui	r3, r9, 103
900131f4:	a4630008 	andi	r3, r3, 8
900131f8:	bc2300c8 	bnei	r3, 200		// 900132c0
900131fc:	e8730044 	lwi	r3, r19, 68
90013200:	bc0300c0 	beqi	r3, 192		// 900132c0
90013204:	e073002d 	lbui	r3, r19, 45
90013208:	aa430008 	xori	r18, r3, 8
9001320c:	bc32ffd4 	bnei	r18, -44		// 900131e0
90013210:	e8730038 	lwi	r3, r19, 56
90013214:	e0830000 	lbui	r4, r3, 0
90013218:	f089006b 	sbi	r4, r9, 107
9001321c:	e8730038 	lwi	r3, r19, 56
90013220:	e8930044 	lwi	r4, r19, 68
90013224:	e9330018 	lwi	r9, r19, 24
90013228:	30630001 	addik	r3, r3, 1
9001322c:	30c4ffff 	addik	r6, r4, -1
90013230:	f8730038 	swi	r3, r19, 56
90013234:	f8d30044 	swi	r6, r19, 68
90013238:	b800ffb8 	bri	-72		// 900131f0
9001323c:	bc23ff70 	bnei	r3, -144		// 900131ac
90013240:	e8930034 	lwi	r4, r19, 52
90013244:	e8730030 	lwi	r3, r19, 48
90013248:	16432000 	rsubk	r18, r3, r4
9001324c:	bc32ff64 	bnei	r18, -156		// 900131b0
90013250:	b0008000 	imm	-32768
90013254:	30600000 	addik	r3, r0, 0
90013258:	31400483 	addik	r10, r0, 1155
9001325c:	f865001c 	swi	r3, r5, 28
90013260:	106a0000 	addk	r3, r10, r0
90013264:	e9e10000 	lwi	r15, r1, 0
90013268:	ea61001c 	lwi	r19, r1, 28
9001326c:	b60f0008 	rtsd	r15, 8
90013270:	30210020 	addik	r1, r1, 32
90013274:	e8730038 	lwi	r3, r19, 56
90013278:	e8930044 	lwi	r4, r19, 68
9001327c:	e4a30000 	lhui	r5, r3, 0
90013280:	30c4fffe 	addik	r6, r4, -2
90013284:	30630002 	addik	r3, r3, 2
90013288:	f4a9006a 	shi	r5, r9, 106
9001328c:	f8730038 	swi	r3, r19, 56
90013290:	f8d30044 	swi	r6, r19, 68
90013294:	b800ff5c 	bri	-164		// 900131f0
90013298:	e8730038 	lwi	r3, r19, 56
9001329c:	e8930044 	lwi	r4, r19, 68
900132a0:	e8a30000 	lwi	r5, r3, 0
900132a4:	30c4fffc 	addik	r6, r4, -4
900132a8:	30630004 	addik	r3, r3, 4
900132ac:	f8a90068 	swi	r5, r9, 104
900132b0:	e9330018 	lwi	r9, r19, 24
900132b4:	f8d30044 	swi	r6, r19, 68
900132b8:	f8730038 	swi	r3, r19, 56
900132bc:	b800ff34 	bri	-204		// 900131f0
900132c0:	e4690062 	lhui	r3, r9, 98
900132c4:	b0000000 	imm	0
900132c8:	a463feff 	andi	r3, r3, -257
900132cc:	f4690062 	shi	r3, r9, 98
900132d0:	b0008000 	imm	-32768
900132d4:	aa4a0000 	xori	r18, r10, 0
900132d8:	bc12020c 	beqi	r18, 524		// 900134e4
900132dc:	e0690067 	lbui	r3, r9, 103
900132e0:	a4630004 	andi	r3, r3, 4
900132e4:	bc03fff8 	beqi	r3, -8		// 900132dc
900132e8:	e4690062 	lhui	r3, r9, 98
900132ec:	b0000000 	imm	0
900132f0:	a463ffff 	andi	r3, r3, -1
900132f4:	a0630100 	ori	r3, r3, 256
900132f8:	f4690062 	shi	r3, r9, 98
900132fc:	e0890067 	lbui	r4, r9, 103
90013300:	a4840001 	andi	r4, r4, 1
90013304:	bc040024 	beqi	r4, 36		// 90013328
90013308:	b80000c4 	bri	196		// 900133cc
9001330c:	aa430010 	xori	r18, r3, 16
90013310:	bc120058 	beqi	r18, 88		// 90013368
90013314:	aa430020 	xori	r18, r3, 32
90013318:	bc120084 	beqi	r18, 132		// 9001339c
9001331c:	e0690067 	lbui	r3, r9, 103
90013320:	a4630001 	andi	r3, r3, 1
90013324:	bc2300a8 	bnei	r3, 168		// 900133cc
90013328:	e073002d 	lbui	r3, r19, 45
9001332c:	aa430008 	xori	r18, r3, 8
90013330:	bc32ffdc 	bnei	r18, -36		// 9001330c
90013334:	e8730010 	lwi	r3, r19, 16
90013338:	e8b3003c 	lwi	r5, r19, 60
9001333c:	30630001 	addik	r3, r3, 1
90013340:	f8730010 	swi	r3, r19, 16
90013344:	e089006f 	lbui	r4, r9, 111
90013348:	be050018 	beqid	r5, 24		// 90013360
9001334c:	a48400ff 	andi	r4, r4, 255
90013350:	f0850000 	sbi	r4, r5, 0
90013354:	e9330018 	lwi	r9, r19, 24
90013358:	30650001 	addik	r3, r5, 1
9001335c:	f873003c 	swi	r3, r19, 60
90013360:	b810ffbc 	brid	-68		// 9001331c
90013364:	3108ffff 	addik	r8, r8, -1
90013368:	e8730010 	lwi	r3, r19, 16
9001336c:	e489006e 	lhui	r4, r9, 110
90013370:	e8b3003c 	lwi	r5, r19, 60
90013374:	30630002 	addik	r3, r3, 2
90013378:	f8730010 	swi	r3, r19, 16
9001337c:	b0000000 	imm	0
90013380:	a484ffff 	andi	r4, r4, -1
90013384:	be050010 	beqid	r5, 16		// 90013394
90013388:	30650002 	addik	r3, r5, 2
9001338c:	f4850000 	shi	r4, r5, 0
90013390:	f873003c 	swi	r3, r19, 60
90013394:	b810ff88 	brid	-120		// 9001331c
90013398:	3108fffe 	addik	r8, r8, -2
9001339c:	e8730010 	lwi	r3, r19, 16
900133a0:	e893003c 	lwi	r4, r19, 60
900133a4:	30630004 	addik	r3, r3, 4
900133a8:	f8730010 	swi	r3, r19, 16
900133ac:	e869006c 	lwi	r3, r9, 108
900133b0:	bc040014 	beqi	r4, 20		// 900133c4
900133b4:	f8640000 	swi	r3, r4, 0
900133b8:	e9330018 	lwi	r9, r19, 24
900133bc:	30640004 	addik	r3, r4, 4
900133c0:	f873003c 	swi	r3, r19, 60
900133c4:	b810ff58 	brid	-168		// 9001331c
900133c8:	3108fffc 	addik	r8, r8, -4
900133cc:	e8d30044 	lwi	r6, r19, 68
900133d0:	bc06009c 	beqi	r6, 156		// 9001346c
900133d4:	e0690067 	lbui	r3, r9, 103
900133d8:	a4630008 	andi	r3, r3, 8
900133dc:	bc030028 	beqi	r3, 40		// 90013404
900133e0:	b800007c 	bri	124		// 9001345c
900133e4:	aa430010 	xori	r18, r3, 16
900133e8:	bc120054 	beqi	r18, 84		// 9001343c
900133ec:	aa430020 	xori	r18, r3, 32
900133f0:	bc1200ac 	beqi	r18, 172		// 9001349c
900133f4:	e0690067 	lbui	r3, r9, 103
900133f8:	a4630008 	andi	r3, r3, 8
900133fc:	bc230060 	bnei	r3, 96		// 9001345c
90013400:	bc06005c 	beqi	r6, 92		// 9001345c
90013404:	e073002d 	lbui	r3, r19, 45
90013408:	aa430008 	xori	r18, r3, 8
9001340c:	bc32ffd8 	bnei	r18, -40		// 900133e4
90013410:	e8730038 	lwi	r3, r19, 56
90013414:	e0830000 	lbui	r4, r3, 0
90013418:	f089006b 	sbi	r4, r9, 107
9001341c:	e8730038 	lwi	r3, r19, 56
90013420:	e8d30044 	lwi	r6, r19, 68
90013424:	e9330018 	lwi	r9, r19, 24
90013428:	30630001 	addik	r3, r3, 1
9001342c:	30c6ffff 	addik	r6, r6, -1
90013430:	f8730038 	swi	r3, r19, 56
90013434:	f8d30044 	swi	r6, r19, 68
90013438:	b800ffbc 	bri	-68		// 900133f4
9001343c:	e8730038 	lwi	r3, r19, 56
90013440:	30c6fffe 	addik	r6, r6, -2
90013444:	f8d30044 	swi	r6, r19, 68
90013448:	e4830000 	lhui	r4, r3, 0
9001344c:	30630002 	addik	r3, r3, 2
90013450:	f8730038 	swi	r3, r19, 56
90013454:	f489006a 	shi	r4, r9, 106
90013458:	b800ff9c 	bri	-100		// 900133f4
9001345c:	e4690062 	lhui	r3, r9, 98
90013460:	b0000000 	imm	0
90013464:	a463feff 	andi	r3, r3, -257
90013468:	f4690062 	shi	r3, r9, 98
9001346c:	bc28fe70 	bnei	r8, -400		// 900132dc
90013470:	e4690062 	lhui	r3, r9, 98
90013474:	e8930030 	lwi	r4, r19, 48
90013478:	11480000 	addk	r10, r8, r0
9001347c:	b0000000 	imm	0
90013480:	a463ffff 	andi	r3, r3, -1
90013484:	a0630100 	ori	r3, r3, 256
90013488:	f4690062 	shi	r3, r9, 98
9001348c:	f8890070 	swi	r4, r9, 112
90013490:	f9130048 	swi	r8, r19, 72
90013494:	b810fdd0 	brid	-560		// 90013264
90013498:	106a0000 	addk	r3, r10, r0
9001349c:	e8730038 	lwi	r3, r19, 56
900134a0:	30c6fffc 	addik	r6, r6, -4
900134a4:	f8d30044 	swi	r6, r19, 68
900134a8:	e8830000 	lwi	r4, r3, 0
900134ac:	30630004 	addik	r3, r3, 4
900134b0:	f8730038 	swi	r3, r19, 56
900134b4:	f8890068 	swi	r4, r9, 104
900134b8:	e9330018 	lwi	r9, r19, 24
900134bc:	b800ff38 	bri	-200		// 900133f4
900134c0:	b0009002 	imm	-28670
900134c4:	30a02f84 	addik	r5, r0, 12164
900134c8:	b9f40940 	brlid	r15, 2368	// 90013e08 <XAssert>
900134cc:	30c001cb 	addik	r6, r0, 459
900134d0:	30600001 	addik	r3, r0, 1
900134d4:	b0009003 	imm	-28669
900134d8:	f8604ff8 	swi	r3, r0, 20472
900134dc:	b810fd84 	brid	-636		// 90013260
900134e0:	11400000 	addk	r10, r0, r0
900134e4:	e8690028 	lwi	r3, r9, 40
900134e8:	11400000 	addk	r10, r0, r0
900134ec:	a0630004 	ori	r3, r3, 4
900134f0:	f8690028 	swi	r3, r9, 40
900134f4:	e8930018 	lwi	r4, r19, 24
900134f8:	b0008000 	imm	-32768
900134fc:	30600000 	addik	r3, r0, 0
90013500:	f864001c 	swi	r3, r4, 28
90013504:	b810fd60 	brid	-672		// 90013264
90013508:	106a0000 	addk	r3, r10, r0
9001350c:	b0009002 	imm	-28670
90013510:	30a02f84 	addik	r5, r0, 12164
90013514:	b9f408f4 	brlid	r15, 2292	// 90013e08 <XAssert>
90013518:	30c001c9 	addik	r6, r0, 457
9001351c:	30600001 	addik	r3, r0, 1
90013520:	b0009003 	imm	-28669
90013524:	f8604ff8 	swi	r3, r0, 20472
90013528:	b810fd38 	brid	-712		// 90013260
9001352c:	11530000 	addk	r10, r19, r0
90013530:	b0009002 	imm	-28670
90013534:	30a02f84 	addik	r5, r0, 12164
90013538:	b9f408d0 	brlid	r15, 2256	// 90013e08 <XAssert>
9001353c:	30c001ca 	addik	r6, r0, 458
90013540:	30600001 	addik	r3, r0, 1
90013544:	b0009003 	imm	-28669
90013548:	f8604ff8 	swi	r3, r0, 20472
9001354c:	b810fd14 	brid	-748		// 90013260
90013550:	11400000 	addk	r10, r0, r0
90013554:	b0009002 	imm	-28670
90013558:	30a02f84 	addik	r5, r0, 12164
9001355c:	b9f408ac 	brlid	r15, 2220	// 90013e08 <XAssert>
90013560:	30c001cc 	addik	r6, r0, 460
90013564:	30600001 	addik	r3, r0, 1
90013568:	b0009003 	imm	-28669
9001356c:	f8604ff8 	swi	r3, r0, 20472
90013570:	b810fcf0 	brid	-784		// 90013260
90013574:	11400000 	addk	r10, r0, r0

90013578 <XSpi_Reset>:
90013578:	3021ffe0 	addik	r1, r1, -32
9001357c:	fa61001c 	swi	r19, r1, 28
90013580:	12650000 	addk	r19, r5, r0
90013584:	f9e10000 	swi	r15, r1, 0
90013588:	b0009002 	imm	-28670
9001358c:	30a02f84 	addik	r5, r0, 12164
90013590:	be130024 	beqid	r19, 36		// 900135b4
90013594:	30c0015a 	addik	r6, r0, 346
90013598:	e873001c 	lwi	r3, r19, 28
9001359c:	b0009003 	imm	-28669
900135a0:	f8004ff8 	swi	r0, r0, 20472
900135a4:	b0001111 	imm	4369
900135a8:	aa431111 	xori	r18, r3, 4369
900135ac:	be12002c 	beqid	r18, 44		// 900135d8
900135b0:	30c0015b 	addik	r6, r0, 347
900135b4:	b9f40854 	brlid	r15, 2132	// 90013e08 <XAssert>
900135b8:	80000000 	or	r0, r0, r0
900135bc:	e9e10000 	lwi	r15, r1, 0
900135c0:	ea61001c 	lwi	r19, r1, 28
900135c4:	30600001 	addik	r3, r0, 1
900135c8:	b0009003 	imm	-28669
900135cc:	f8604ff8 	swi	r3, r0, 20472
900135d0:	b60f0008 	rtsd	r15, 8
900135d4:	30210020 	addik	r1, r1, 32
900135d8:	b9f4f56c 	brlid	r15, -2708	// 90012b44 <XSpi_Abort>
900135dc:	10b30000 	addk	r5, r19, r0
900135e0:	e8730030 	lwi	r3, r19, 48
900135e4:	e8b30018 	lwi	r5, r19, 24
900135e8:	3080000a 	addik	r4, r0, 10
900135ec:	f8730034 	swi	r3, r19, 52
900135f0:	f8850040 	swi	r4, r5, 64
900135f4:	f8130020 	swi	r0, r19, 32
900135f8:	e9e10000 	lwi	r15, r1, 0
900135fc:	ea61001c 	lwi	r19, r1, 28
90013600:	b60f0008 	rtsd	r15, 8
90013604:	30210020 	addik	r1, r1, 32

90013608 <XSpi_Stop>:
90013608:	3021ffe0 	addik	r1, r1, -32
9001360c:	fa61001c 	swi	r19, r1, 28
90013610:	12650000 	addk	r19, r5, r0
90013614:	f9e10000 	swi	r15, r1, 0
90013618:	b0009002 	imm	-28670
9001361c:	30a02f84 	addik	r5, r0, 12164
90013620:	be130070 	beqid	r19, 112		// 90013690
90013624:	30c00125 	addik	r6, r0, 293
90013628:	e873001c 	lwi	r3, r19, 28
9001362c:	b0009003 	imm	-28669
90013630:	f8004ff8 	swi	r0, r0, 20472
90013634:	b0001111 	imm	4369
90013638:	aa431111 	xori	r18, r3, 4369
9001363c:	be320070 	bneid	r18, 112		// 900136ac
90013640:	30a00015 	addik	r5, r0, 21
90013644:	e8930048 	lwi	r4, r19, 72
90013648:	b0009003 	imm	-28669
9001364c:	f8004ff8 	swi	r0, r0, 20472
90013650:	be240030 	bneid	r4, 48		// 90013680
90013654:	10650000 	addk	r3, r5, r0
90013658:	e8730018 	lwi	r3, r19, 24
9001365c:	f8930020 	swi	r4, r19, 32
90013660:	10a40000 	addk	r5, r4, r0
90013664:	f883001c 	swi	r4, r3, 28
90013668:	e8930018 	lwi	r4, r19, 24
9001366c:	e4640062 	lhui	r3, r4, 98
90013670:	b0000000 	imm	0
90013674:	a463fffd 	andi	r3, r3, -3
90013678:	f4640062 	shi	r3, r4, 98
9001367c:	10650000 	addk	r3, r5, r0
90013680:	e9e10000 	lwi	r15, r1, 0
90013684:	ea61001c 	lwi	r19, r1, 28
90013688:	b60f0008 	rtsd	r15, 8
9001368c:	30210020 	addik	r1, r1, 32
90013690:	b9f40778 	brlid	r15, 1912	// 90013e08 <XAssert>
90013694:	80000000 	or	r0, r0, r0
90013698:	30600001 	addik	r3, r0, 1
9001369c:	b0009003 	imm	-28669
900136a0:	f8604ff8 	swi	r3, r0, 20472
900136a4:	b810ffd8 	brid	-40		// 9001367c
900136a8:	10b30000 	addk	r5, r19, r0
900136ac:	b0009002 	imm	-28670
900136b0:	30a02f84 	addik	r5, r0, 12164
900136b4:	b9f40754 	brlid	r15, 1876	// 90013e08 <XAssert>
900136b8:	30c00126 	addik	r6, r0, 294
900136bc:	30600001 	addik	r3, r0, 1
900136c0:	b0009003 	imm	-28669
900136c4:	f8604ff8 	swi	r3, r0, 20472
900136c8:	b810ffb4 	brid	-76		// 9001367c
900136cc:	10a00000 	addk	r5, r0, r0

900136d0 <XSpi_Start>:
900136d0:	3021ffe0 	addik	r1, r1, -32
900136d4:	fa61001c 	swi	r19, r1, 28
900136d8:	12650000 	addk	r19, r5, r0
900136dc:	f9e10000 	swi	r15, r1, 0
900136e0:	b0009002 	imm	-28670
900136e4:	30a02f84 	addik	r5, r0, 12164
900136e8:	be130098 	beqid	r19, 152		// 90013780
900136ec:	30c000d7 	addik	r6, r0, 215
900136f0:	e873001c 	lwi	r3, r19, 28
900136f4:	b0009003 	imm	-28669
900136f8:	f8004ff8 	swi	r0, r0, 20472
900136fc:	b0001111 	imm	4369
90013700:	aa431111 	xori	r18, r3, 4369
90013704:	be320098 	bneid	r18, 152		// 9001379c
90013708:	30e00005 	addik	r7, r0, 5
9001370c:	e8730020 	lwi	r3, r19, 32
90013710:	b0009003 	imm	-28669
90013714:	f8004ff8 	swi	r0, r0, 20472
90013718:	b0002222 	imm	8738
9001371c:	aa432222 	xori	r18, r3, 8738
90013720:	be120050 	beqid	r18, 80		// 90013770
90013724:	10670000 	addk	r3, r7, r0
90013728:	e8d30018 	lwi	r6, r19, 24
9001372c:	b0002222 	imm	8738
90013730:	30802222 	addik	r4, r0, 8738
90013734:	10e00000 	addk	r7, r0, r0
90013738:	e8660028 	lwi	r3, r6, 40
9001373c:	f8930020 	swi	r4, r19, 32
90013740:	b0008000 	imm	-32768
90013744:	30800000 	addik	r4, r0, 0
90013748:	a063002b 	ori	r3, r3, 43
9001374c:	f8660028 	swi	r3, r6, 40
90013750:	e8b30018 	lwi	r5, r19, 24
90013754:	e4650062 	lhui	r3, r5, 98
90013758:	b0000000 	imm	0
9001375c:	a463ffff 	andi	r3, r3, -1
90013760:	a0630062 	ori	r3, r3, 98
90013764:	f4650062 	shi	r3, r5, 98
90013768:	f885001c 	swi	r4, r5, 28
9001376c:	10670000 	addk	r3, r7, r0
90013770:	e9e10000 	lwi	r15, r1, 0
90013774:	ea61001c 	lwi	r19, r1, 28
90013778:	b60f0008 	rtsd	r15, 8
9001377c:	30210020 	addik	r1, r1, 32
90013780:	b9f40688 	brlid	r15, 1672	// 90013e08 <XAssert>
90013784:	80000000 	or	r0, r0, r0
90013788:	30600001 	addik	r3, r0, 1
9001378c:	b0009003 	imm	-28669
90013790:	f8604ff8 	swi	r3, r0, 20472
90013794:	b810ffd8 	brid	-40		// 9001376c
90013798:	10f30000 	addk	r7, r19, r0
9001379c:	b9f4066c 	brlid	r15, 1644	// 90013e08 <XAssert>
900137a0:	30c000d8 	addik	r6, r0, 216
900137a4:	30600001 	addik	r3, r0, 1
900137a8:	b0009003 	imm	-28669
900137ac:	f8604ff8 	swi	r3, r0, 20472
900137b0:	b810ffbc 	brid	-68		// 9001376c
900137b4:	10e00000 	addk	r7, r0, r0

900137b8 <XSpi_CfgInitialize>:
900137b8:	3021ffe0 	addik	r1, r1, -32
900137bc:	fa61001c 	swi	r19, r1, 28
900137c0:	12650000 	addk	r19, r5, r0
900137c4:	11060000 	addk	r8, r6, r0
900137c8:	f9e10000 	swi	r15, r1, 0
900137cc:	b0009002 	imm	-28670
900137d0:	30a02f84 	addik	r5, r0, 12164
900137d4:	be1300d8 	beqid	r19, 216		// 900138ac
900137d8:	30c0007e 	addik	r6, r0, 126
900137dc:	e8730020 	lwi	r3, r19, 32
900137e0:	b0009003 	imm	-28669
900137e4:	f8004ff8 	swi	r0, r0, 20472
900137e8:	b0002222 	imm	8738
900137ec:	aa432222 	xori	r18, r3, 8738
900137f0:	be1200a0 	beqid	r18, 160		// 90013890
900137f4:	30800005 	addik	r4, r0, 5
900137f8:	f8f30018 	swi	r7, r19, 24
900137fc:	e868000c 	lwi	r3, r8, 12
90013800:	f8130020 	swi	r0, r19, 32
90013804:	f8130048 	swi	r0, r19, 72
90013808:	f8130040 	swi	r0, r19, 64
9001380c:	f8130044 	swi	r0, r19, 68
90013810:	f8730028 	swi	r3, r19, 40
90013814:	e8880008 	lwi	r4, r8, 8
90013818:	b0009001 	imm	-28671
9001381c:	30602ecc 	addik	r3, r0, 11980
90013820:	f8130038 	swi	r0, r19, 56
90013824:	f8930024 	swi	r4, r19, 36
90013828:	f873004c 	swi	r3, r19, 76
9001382c:	f813003c 	swi	r0, r19, 60
90013830:	e0680010 	lbui	r3, r8, 16
90013834:	f073002c 	sbi	r3, r19, 44
90013838:	e0c80011 	lbui	r6, r8, 17
9001383c:	be260068 	bneid	r6, 104		// 900138a4
90013840:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
90013844:	f073002d 	sbi	r3, r19, 45
90013848:	e073002c 	lbui	r3, r19, 44
9001384c:	30800001 	addik	r4, r0, 1
90013850:	44841c00 	bsll	r4, r4, r3
90013854:	b0001111 	imm	4369
90013858:	30601111 	addik	r3, r0, 4369
9001385c:	3084ffff 	addik	r4, r4, -1
90013860:	f8930034 	swi	r4, r19, 52
90013864:	f8930030 	swi	r4, r19, 48
90013868:	f8130000 	swi	r0, r19, 0
9001386c:	f873001c 	swi	r3, r19, 28
90013870:	f8130004 	swi	r0, r19, 4
90013874:	f8130008 	swi	r0, r19, 8
90013878:	f813000c 	swi	r0, r19, 12
9001387c:	f8130010 	swi	r0, r19, 16
90013880:	f8130014 	swi	r0, r19, 20
90013884:	b9f4fcf4 	brlid	r15, -780	// 90013578 <XSpi_Reset>
90013888:	10b30000 	addk	r5, r19, r0
9001388c:	10800000 	addk	r4, r0, r0
90013890:	10640000 	addk	r3, r4, r0
90013894:	e9e10000 	lwi	r15, r1, 0
90013898:	ea61001c 	lwi	r19, r1, 28
9001389c:	b60f0008 	rtsd	r15, 8
900138a0:	30210020 	addik	r1, r1, 32
900138a4:	f0d3002d 	sbi	r6, r19, 45
900138a8:	b800ffa0 	bri	-96		// 90013848
900138ac:	b9f4055c 	brlid	r15, 1372	// 90013e08 <XAssert>
900138b0:	80000000 	or	r0, r0, r0
900138b4:	30600001 	addik	r3, r0, 1
900138b8:	b0009003 	imm	-28669
900138bc:	f8604ff8 	swi	r3, r0, 20472
900138c0:	b810ffd0 	brid	-48		// 90013890
900138c4:	10930000 	addk	r4, r19, r0

900138c8 <XSpi_GetOptions>:
900138c8:	3021ffe0 	addik	r1, r1, -32
900138cc:	fa61001c 	swi	r19, r1, 28
900138d0:	f9e10000 	swi	r15, r1, 0
900138d4:	be0500a4 	beqid	r5, 164		// 90013978
900138d8:	12650000 	addk	r19, r5, r0
900138dc:	e865001c 	lwi	r3, r5, 28
900138e0:	b0009003 	imm	-28669
900138e4:	f8004ff8 	swi	r0, r0, 20472
900138e8:	b0001111 	imm	4369
900138ec:	aa431111 	xori	r18, r3, 4369
900138f0:	be12003c 	beqid	r18, 60		// 9001392c
900138f4:	10e00000 	addk	r7, r0, r0
900138f8:	b0009002 	imm	-28670
900138fc:	30a02f8c 	addik	r5, r0, 12172
90013900:	b9f40508 	brlid	r15, 1288	// 90013e08 <XAssert>
90013904:	30c000bf 	addik	r6, r0, 191
90013908:	30600001 	addik	r3, r0, 1
9001390c:	10e00000 	addk	r7, r0, r0
90013910:	b0009003 	imm	-28669
90013914:	f8604ff8 	swi	r3, r0, 20472
90013918:	10670000 	addk	r3, r7, r0
9001391c:	e9e10000 	lwi	r15, r1, 0
90013920:	ea61001c 	lwi	r19, r1, 28
90013924:	b60f0008 	rtsd	r15, 8
90013928:	30210020 	addik	r1, r1, 32
9001392c:	e8850018 	lwi	r4, r5, 24
90013930:	10c70000 	addk	r6, r7, r0
90013934:	e4640062 	lhui	r3, r4, 98
90013938:	b0009003 	imm	-28669
9001393c:	f8e04ff8 	swi	r7, r0, 20472
90013940:	b0000000 	imm	0
90013944:	a4a3ffff 	andi	r5, r3, -1
90013948:	b0009002 	imm	-28670
9001394c:	e4662fa0 	lhui	r3, r6, 12192
90013950:	84651800 	and	r3, r5, r3
90013954:	bc030010 	beqi	r3, 16		// 90013964
90013958:	b0009002 	imm	-28670
9001395c:	e8662f9c 	lwi	r3, r6, 12188
90013960:	80e71800 	or	r7, r7, r3
90013964:	30c60008 	addik	r6, r6, 8
90013968:	aa460028 	xori	r18, r6, 40
9001396c:	be32ffdc 	bneid	r18, -36		// 90013948
90013970:	10670000 	addk	r3, r7, r0
90013974:	b800ffa8 	bri	-88		// 9001391c
90013978:	b0009002 	imm	-28670
9001397c:	30a02f8c 	addik	r5, r0, 12172
90013980:	b9f40488 	brlid	r15, 1160	// 90013e08 <XAssert>
90013984:	30c000be 	addik	r6, r0, 190
90013988:	30600001 	addik	r3, r0, 1
9001398c:	b0009003 	imm	-28669
90013990:	f8604ff8 	swi	r3, r0, 20472
90013994:	b810ff84 	brid	-124		// 90013918
90013998:	10f30000 	addk	r7, r19, r0

9001399c <XSpi_SetOptions>:
9001399c:	3021ffe0 	addik	r1, r1, -32
900139a0:	fa61001c 	swi	r19, r1, 28
900139a4:	f9e10000 	swi	r15, r1, 0
900139a8:	be0500c4 	beqid	r5, 196		// 90013a6c
900139ac:	12650000 	addk	r19, r5, r0
900139b0:	e865001c 	lwi	r3, r5, 28
900139b4:	b0009003 	imm	-28669
900139b8:	f8004ff8 	swi	r0, r0, 20472
900139bc:	b0001111 	imm	4369
900139c0:	aa431111 	xori	r18, r3, 4369
900139c4:	bc3200cc 	bnei	r18, 204		// 90013a90
900139c8:	e8650048 	lwi	r3, r5, 72
900139cc:	b0009003 	imm	-28669
900139d0:	f8004ff8 	swi	r0, r0, 20472
900139d4:	be230064 	bneid	r3, 100		// 90013a38
900139d8:	30800015 	addik	r4, r0, 21
900139dc:	a4660001 	andi	r3, r6, 1
900139e0:	bc030010 	beqi	r3, 16		// 900139f0
900139e4:	e8650028 	lwi	r3, r5, 40
900139e8:	be230050 	bneid	r3, 80		// 90013a38
900139ec:	30800486 	addik	r4, r0, 1158
900139f0:	e8730018 	lwi	r3, r19, 24
900139f4:	10e00000 	addk	r7, r0, r0
900139f8:	e4830062 	lhui	r4, r3, 98
900139fc:	30a30062 	addik	r5, r3, 98
90013a00:	b0000000 	imm	0
90013a04:	a484ffff 	andi	r4, r4, -1
90013a08:	b0009002 	imm	-28670
90013a0c:	e8672f9c 	lwi	r3, r7, 12188
90013a10:	84661800 	and	r3, r6, r3
90013a14:	bc030038 	beqi	r3, 56		// 90013a4c
90013a18:	b0009002 	imm	-28670
90013a1c:	e4672fa0 	lhui	r3, r7, 12192
90013a20:	80841800 	or	r4, r4, r3
90013a24:	30e70008 	addik	r7, r7, 8
90013a28:	aa470028 	xori	r18, r7, 40
90013a2c:	bc32ffdc 	bnei	r18, -36		// 90013a08
90013a30:	f4850000 	shi	r4, r5, 0
90013a34:	10800000 	addk	r4, r0, r0
90013a38:	10640000 	addk	r3, r4, r0
90013a3c:	e9e10000 	lwi	r15, r1, 0
90013a40:	ea61001c 	lwi	r19, r1, 28
90013a44:	b60f0008 	rtsd	r15, 8
90013a48:	30210020 	addik	r1, r1, 32
90013a4c:	b0009002 	imm	-28670
90013a50:	e4672fa0 	lhui	r3, r7, 12192
90013a54:	a863ffff 	xori	r3, r3, -1
90013a58:	84632000 	and	r3, r3, r4
90013a5c:	b0000000 	imm	0
90013a60:	a483ffff 	andi	r4, r3, -1
90013a64:	b810ffc4 	brid	-60		// 90013a28
90013a68:	30e70008 	addik	r7, r7, 8
90013a6c:	b0009002 	imm	-28670
90013a70:	30a02f8c 	addik	r5, r0, 12172
90013a74:	b9f40394 	brlid	r15, 916	// 90013e08 <XAssert>
90013a78:	30c00073 	addik	r6, r0, 115
90013a7c:	30600001 	addik	r3, r0, 1
90013a80:	b0009003 	imm	-28669
90013a84:	f8604ff8 	swi	r3, r0, 20472
90013a88:	b810ffb0 	brid	-80		// 90013a38
90013a8c:	10930000 	addk	r4, r19, r0
90013a90:	b0009002 	imm	-28670
90013a94:	30a02f8c 	addik	r5, r0, 12172
90013a98:	b9f40370 	brlid	r15, 880	// 90013e08 <XAssert>
90013a9c:	30c00074 	addik	r6, r0, 116
90013aa0:	30600001 	addik	r3, r0, 1
90013aa4:	b0009003 	imm	-28669
90013aa8:	f8604ff8 	swi	r3, r0, 20472
90013aac:	b810ff8c 	brid	-116		// 90013a38
90013ab0:	10800000 	addk	r4, r0, r0

90013ab4 <XSpi_SelfTest>:
90013ab4:	3021ffe0 	addik	r1, r1, -32
90013ab8:	fa61001c 	swi	r19, r1, 28
90013abc:	f9e10000 	swi	r15, r1, 0
90013ac0:	be05022c 	beqid	r5, 556		// 90013cec
90013ac4:	12650000 	addk	r19, r5, r0
90013ac8:	e865001c 	lwi	r3, r5, 28
90013acc:	b0009003 	imm	-28669
90013ad0:	f8004ff8 	swi	r0, r0, 20472
90013ad4:	b0001111 	imm	4369
90013ad8:	aa431111 	xori	r18, r3, 4369
90013adc:	bc320234 	bnei	r18, 564		// 90013d10
90013ae0:	b9f4fa98 	brlid	r15, -1384	// 90013578 <XSpi_Reset>
90013ae4:	80000000 	or	r0, r0, r0
90013ae8:	e8b30018 	lwi	r5, r19, 24
90013aec:	e4650062 	lhui	r3, r5, 98
90013af0:	aa430180 	xori	r18, r3, 384
90013af4:	be320024 	bneid	r18, 36		// 90013b18
90013af8:	30c50062 	addik	r6, r5, 98
90013afc:	e0650067 	lbui	r3, r5, 103
90013b00:	aa430005 	xori	r18, r3, 5
90013b04:	bc320014 	bnei	r18, 20		// 90013b18
90013b08:	e8850070 	lwi	r4, r5, 112
90013b0c:	e8730030 	lwi	r3, r19, 48
90013b10:	16432000 	rsubk	r18, r3, r4
90013b14:	bc12001c 	beqi	r18, 28		// 90013b30
90013b18:	30a0000e 	addik	r5, r0, 14
90013b1c:	10650000 	addk	r3, r5, r0
90013b20:	e9e10000 	lwi	r15, r1, 0
90013b24:	ea61001c 	lwi	r19, r1, 28
90013b28:	b60f0008 	rtsd	r15, 8
90013b2c:	30210020 	addik	r1, r1, 32
90013b30:	e8730024 	lwi	r3, r19, 36
90013b34:	bc030014 	beqi	r3, 20		// 90013b48
90013b38:	e0650077 	lbui	r3, r5, 119
90013b3c:	bc23ffdc 	bnei	r3, -36		// 90013b18
90013b40:	e065007b 	lbui	r3, r5, 123
90013b44:	bc23ffd4 	bnei	r3, -44		// 90013b18
90013b48:	e8930028 	lwi	r4, r19, 40
90013b4c:	bc2400b8 	bnei	r4, 184		// 90013c04
90013b50:	e4660000 	lhui	r3, r6, 0
90013b54:	10e40000 	addk	r7, r4, r0
90013b58:	b000aa00 	imm	-22016
90013b5c:	31405500 	addik	r10, r0, 21760
90013b60:	b0000000 	imm	0
90013b64:	a463ffff 	andi	r3, r3, -1
90013b68:	a0630005 	ori	r3, r3, 5
90013b6c:	f4660000 	shi	r3, r6, 0
90013b70:	f885001c 	swi	r4, r5, 28
90013b74:	11240000 	addk	r9, r4, r0
90013b78:	e8b30018 	lwi	r5, r19, 24
90013b7c:	e0650067 	lbui	r3, r5, 103
90013b80:	b00055ff 	imm	22015
90013b84:	316aab00 	addik	r11, r10, -21760
90013b88:	a4630008 	andi	r3, r3, 8
90013b8c:	be2300a4 	bneid	r3, 164		// 90013c30
90013b90:	306acd00 	addik	r3, r10, -13056
90013b94:	b0000000 	imm	0
90013b98:	a4c3ffff 	andi	r6, r3, -1
90013b9c:	b8100024 	brid	36		// 90013bc0
90013ba0:	a48a00ff 	andi	r4, r10, 255
90013ba4:	aa430010 	xori	r18, r3, 16
90013ba8:	bc12006c 	beqi	r18, 108		// 90013c14
90013bac:	aa430020 	xori	r18, r3, 32
90013bb0:	bc120070 	beqi	r18, 112		// 90013c20
90013bb4:	e0650067 	lbui	r3, r5, 103
90013bb8:	a4630008 	andi	r3, r3, 8
90013bbc:	bc230074 	bnei	r3, 116		// 90013c30
90013bc0:	e073002d 	lbui	r3, r19, 45
90013bc4:	aa430008 	xori	r18, r3, 8
90013bc8:	bc32ffdc 	bnei	r18, -36		// 90013ba4
90013bcc:	f085006b 	sbi	r4, r5, 107
90013bd0:	e8b30018 	lwi	r5, r19, 24
90013bd4:	b810ffe0 	brid	-32		// 90013bb4
90013bd8:	31290001 	addik	r9, r9, 1
90013bdc:	a06c0100 	ori	r3, r12, 256
90013be0:	b0000000 	imm	0
90013be4:	a463fffd 	andi	r3, r3, -3
90013be8:	314a0001 	addik	r10, r10, 1
90013bec:	f4650062 	shi	r3, r5, 98
90013bf0:	b000aa00 	imm	-22016
90013bf4:	aa4a5504 	xori	r18, r10, 21764
90013bf8:	bc32ff84 	bnei	r18, -124		// 90013b7c
90013bfc:	16474800 	rsubk	r18, r7, r9
90013c00:	bc3200ac 	bnei	r18, 172		// 90013cac
90013c04:	b9f4f974 	brlid	r15, -1676	// 90013578 <XSpi_Reset>
90013c08:	10b30000 	addk	r5, r19, r0
90013c0c:	b810ff10 	brid	-240		// 90013b1c
90013c10:	10a00000 	addk	r5, r0, r0
90013c14:	31290002 	addik	r9, r9, 2
90013c18:	f4c5006a 	shi	r6, r5, 106
90013c1c:	b800ff98 	bri	-104		// 90013bb4
90013c20:	f9450068 	swi	r10, r5, 104
90013c24:	e8b30018 	lwi	r5, r19, 24
90013c28:	b810ff8c 	brid	-116		// 90013bb4
90013c2c:	31290004 	addik	r9, r9, 4
90013c30:	e4850062 	lhui	r4, r5, 98
90013c34:	30c50067 	addik	r6, r5, 103
90013c38:	b0000000 	imm	0
90013c3c:	a584feff 	andi	r12, r4, -257
90013c40:	a06c0002 	ori	r3, r12, 2
90013c44:	f4650062 	shi	r3, r5, 98
90013c48:	e0660000 	lbui	r3, r6, 0
90013c4c:	a46300ff 	andi	r3, r3, 255
90013c50:	a4830004 	andi	r4, r3, 4
90013c54:	be04fff4 	beqid	r4, -12		// 90013c48
90013c58:	a4630001 	andi	r3, r3, 1
90013c5c:	be23ff80 	bneid	r3, -128		// 90013bdc
90013c60:	306acd00 	addik	r3, r10, -13056
90013c64:	e093002d 	lbui	r4, r19, 45
90013c68:	b0000000 	imm	0
90013c6c:	a503ffff 	andi	r8, r3, -1
90013c70:	b8000020 	bri	32		// 90013c90
90013c74:	aa440010 	xori	r18, r4, 16
90013c78:	bc12003c 	beqi	r18, 60		// 90013cb4
90013c7c:	aa440020 	xori	r18, r4, 32
90013c80:	bc120054 	beqi	r18, 84		// 90013cd4
90013c84:	e0660000 	lbui	r3, r6, 0
90013c88:	a4630001 	andi	r3, r3, 1
90013c8c:	bc23ff50 	bnei	r3, -176		// 90013bdc
90013c90:	aa440008 	xori	r18, r4, 8
90013c94:	bc32ffe0 	bnei	r18, -32		// 90013c74
90013c98:	e065006f 	lbui	r3, r5, 111
90013c9c:	a46300ff 	andi	r3, r3, 255
90013ca0:	16435800 	rsubk	r18, r3, r11
90013ca4:	be12ffe0 	beqid	r18, -32		// 90013c84
90013ca8:	30e70001 	addik	r7, r7, 1
90013cac:	b810fe70 	brid	-400		// 90013b1c
90013cb0:	30a00011 	addik	r5, r0, 17
90013cb4:	e465006e 	lhui	r3, r5, 110
90013cb8:	b0000000 	imm	0
90013cbc:	a463ffff 	andi	r3, r3, -1
90013cc0:	16481800 	rsubk	r18, r8, r3
90013cc4:	be12ffc0 	beqid	r18, -64		// 90013c84
90013cc8:	30e70002 	addik	r7, r7, 2
90013ccc:	b810fe50 	brid	-432		// 90013b1c
90013cd0:	30a00011 	addik	r5, r0, 17
90013cd4:	e865006c 	lwi	r3, r5, 108
90013cd8:	16435000 	rsubk	r18, r3, r10
90013cdc:	be12ffa8 	beqid	r18, -88		// 90013c84
90013ce0:	30e70004 	addik	r7, r7, 4
90013ce4:	b810fe38 	brid	-456		// 90013b1c
90013ce8:	30a00011 	addik	r5, r0, 17
90013cec:	b0009002 	imm	-28670
90013cf0:	30a02fc4 	addik	r5, r0, 12228
90013cf4:	b9f40114 	brlid	r15, 276	// 90013e08 <XAssert>
90013cf8:	30c00062 	addik	r6, r0, 98
90013cfc:	30600001 	addik	r3, r0, 1
90013d00:	b0009003 	imm	-28669
90013d04:	f8604ff8 	swi	r3, r0, 20472
90013d08:	b810fe14 	brid	-492		// 90013b1c
90013d0c:	10b30000 	addk	r5, r19, r0
90013d10:	b0009002 	imm	-28670
90013d14:	30a02fc4 	addik	r5, r0, 12228
90013d18:	b9f400f0 	brlid	r15, 240	// 90013e08 <XAssert>
90013d1c:	30c00063 	addik	r6, r0, 99
90013d20:	30600001 	addik	r3, r0, 1
90013d24:	b0009003 	imm	-28669
90013d28:	f8604ff8 	swi	r3, r0, 20472
90013d2c:	b810fdf0 	brid	-528		// 90013b1c
90013d30:	10a00000 	addk	r5, r0, r0

90013d34 <XSpi_LookupConfig>:
90013d34:	10800000 	addk	r4, r0, r0
90013d38:	10c40000 	addk	r6, r4, r0
90013d3c:	b0000000 	imm	0
90013d40:	a4a5ffff 	andi	r5, r5, -1
90013d44:	b0009002 	imm	-28670
90013d48:	e4663b0c 	lhui	r3, r6, 15116
90013d4c:	16451800 	rsubk	r18, r5, r3
90013d50:	be120020 	beqid	r18, 32		// 90013d70
90013d54:	30c60014 	addik	r6, r6, 20
90013d58:	30840001 	addik	r4, r4, 1
90013d5c:	aa440004 	xori	r18, r4, 4
90013d60:	be32ffe4 	bneid	r18, -28		// 90013d44
90013d64:	10600000 	addk	r3, r0, r0
90013d68:	b60f0008 	rtsd	r15, 8
90013d6c:	80000000 	or	r0, r0, r0
90013d70:	60840014 	muli	r4, r4, 20
90013d74:	b0009002 	imm	-28670
90013d78:	30603b0c 	addik	r3, r0, 15116
90013d7c:	b60f0008 	rtsd	r15, 8
90013d80:	10641800 	addk	r3, r4, r3

90013d84 <XSpi_Initialize>:
90013d84:	3021ffe0 	addik	r1, r1, -32
90013d88:	fa61001c 	swi	r19, r1, 28
90013d8c:	12650000 	addk	r19, r5, r0
90013d90:	b0000000 	imm	0
90013d94:	a466ffff 	andi	r3, r6, -1
90013d98:	f9e10000 	swi	r15, r1, 0
90013d9c:	b0009002 	imm	-28670
90013da0:	30a02fd4 	addik	r5, r0, 12244
90013da4:	be130048 	beqid	r19, 72		// 90013dec
90013da8:	30c0007e 	addik	r6, r0, 126
90013dac:	b0009003 	imm	-28669
90013db0:	f8004ff8 	swi	r0, r0, 20472
90013db4:	b9f4ff80 	brlid	r15, -128	// 90013d34 <XSpi_LookupConfig>
90013db8:	10a30000 	addk	r5, r3, r0
90013dbc:	be03001c 	beqid	r3, 28		// 90013dd8
90013dc0:	30800002 	addik	r4, r0, 2
90013dc4:	10c30000 	addk	r6, r3, r0
90013dc8:	e8e30004 	lwi	r7, r3, 4
90013dcc:	b9f4f9ec 	brlid	r15, -1556	// 900137b8 <XSpi_CfgInitialize>
90013dd0:	10b30000 	addk	r5, r19, r0
90013dd4:	10830000 	addk	r4, r3, r0
90013dd8:	10640000 	addk	r3, r4, r0
90013ddc:	e9e10000 	lwi	r15, r1, 0
90013de0:	ea61001c 	lwi	r19, r1, 28
90013de4:	b60f0008 	rtsd	r15, 8
90013de8:	30210020 	addik	r1, r1, 32
90013dec:	b9f4001c 	brlid	r15, 28	// 90013e08 <XAssert>
90013df0:	80000000 	or	r0, r0, r0
90013df4:	30600001 	addik	r3, r0, 1
90013df8:	b0009003 	imm	-28669
90013dfc:	f8604ff8 	swi	r3, r0, 20472
90013e00:	b810ffd8 	brid	-40		// 90013dd8
90013e04:	10930000 	addk	r4, r19, r0

90013e08 <XAssert>:
90013e08:	b0009002 	imm	-28670
90013e0c:	e860fdd4 	lwi	r3, r0, -556
90013e10:	3021ffe4 	addik	r1, r1, -28
90013e14:	f9e10000 	swi	r15, r1, 0
90013e18:	bc03000c 	beqi	r3, 12		// 90013e24
90013e1c:	99fc1800 	brald	r15, r3
90013e20:	80000000 	or	r0, r0, r0
90013e24:	b0009002 	imm	-28670
90013e28:	e8603b08 	lwi	r3, r0, 15112
90013e2c:	bc230000 	bnei	r3, 0		// 90013e2c
90013e30:	e9e10000 	lwi	r15, r1, 0
90013e34:	b60f0008 	rtsd	r15, 8
90013e38:	3021001c 	addik	r1, r1, 28

90013e3c <XAssertSetCallback>:
90013e3c:	b0009002 	imm	-28670
90013e40:	f8a0fdd4 	swi	r5, r0, -556
90013e44:	b60f0008 	rtsd	r15, 8
90013e48:	80000000 	or	r0, r0, r0

90013e4c <XNullHandler>:
90013e4c:	b60f0008 	rtsd	r15, 8
90013e50:	80000000 	or	r0, r0, r0

90013e54 <exit>:
90013e54:	3021ffe0 	addik	r1, r1, -32
90013e58:	10c00000 	addk	r6, r0, r0
90013e5c:	fa61001c 	swi	r19, r1, 28
90013e60:	f9e10000 	swi	r15, r1, 0
90013e64:	b9f43ee4 	brlid	r15, 16100	// 90017d48 <__call_exitprocs>
90013e68:	12650000 	addk	r19, r5, r0
90013e6c:	b0009002 	imm	-28670
90013e70:	e8a03268 	lwi	r5, r0, 12904
90013e74:	e8650028 	lwi	r3, r5, 40
90013e78:	bc03000c 	beqi	r3, 12		// 90013e84
90013e7c:	99fc1800 	brald	r15, r3
90013e80:	80000000 	or	r0, r0, r0
90013e84:	b000fffe 	imm	-2
90013e88:	b9f4c1a4 	brlid	r15, -15964	// 9000002c <_exit>
90013e8c:	10b30000 	addk	r5, r19, r0

90013e90 <memcmp>:
90013e90:	22400003 	addi	r18, r0, 3
90013e94:	16479003 	cmpu	r18, r7, r18
90013e98:	beb2005c 	bgeid	r18, 92		// 90013ef4
90013e9c:	80653000 	or	r3, r5, r6
90013ea0:	a4630003 	andi	r3, r3, 3
90013ea4:	bc230050 	bnei	r3, 80		// 90013ef4
90013ea8:	e8850000 	lwi	r4, r5, 0
90013eac:	e8660000 	lwi	r3, r6, 0
90013eb0:	16432000 	rsubk	r18, r3, r4
90013eb4:	bc320040 	bnei	r18, 64		// 90013ef4
90013eb8:	30e7fffc 	addik	r7, r7, -4
90013ebc:	30a50004 	addik	r5, r5, 4
90013ec0:	22400003 	addi	r18, r0, 3
90013ec4:	16479003 	cmpu	r18, r7, r18
90013ec8:	be52ffe0 	bltid	r18, -32		// 90013ea8
90013ecc:	30c60004 	addik	r6, r6, 4
90013ed0:	30e7ffff 	addik	r7, r7, -1
90013ed4:	aa47ffff 	xori	r18, r7, -1
90013ed8:	bc120028 	beqi	r18, 40		// 90013f00
90013edc:	e1050000 	lbui	r8, r5, 0
90013ee0:	e0660000 	lbui	r3, r6, 0
90013ee4:	16434000 	rsubk	r18, r3, r8
90013ee8:	be320020 	bneid	r18, 32		// 90013f08
90013eec:	30a50001 	addik	r5, r5, 1
90013ef0:	30c60001 	addik	r6, r6, 1
90013ef4:	30e7ffff 	addik	r7, r7, -1
90013ef8:	aa47ffff 	xori	r18, r7, -1
90013efc:	bc32ffe0 	bnei	r18, -32		// 90013edc
90013f00:	b60f0008 	rtsd	r15, 8
90013f04:	10600000 	addk	r3, r0, r0
90013f08:	b60f0008 	rtsd	r15, 8
90013f0c:	14634000 	rsubk	r3, r3, r8

90013f10 <memcpy>:
90013f10:	2240000f 	addi	r18, r0, 15
90013f14:	16479003 	cmpu	r18, r7, r18
90013f18:	beb20018 	bgeid	r18, 24		// 90013f30
90013f1c:	10850000 	addk	r4, r5, r0
90013f20:	80662800 	or	r3, r6, r5
90013f24:	a4630003 	andi	r3, r3, 3
90013f28:	be030034 	beqid	r3, 52		// 90013f5c
90013f2c:	11050000 	addk	r8, r5, r0
90013f30:	bc070024 	beqi	r7, 36		// 90013f54
90013f34:	11040000 	addk	r8, r4, r0
90013f38:	10e72000 	addk	r7, r7, r4
90013f3c:	e0660000 	lbui	r3, r6, 0
90013f40:	f0680000 	sbi	r3, r8, 0
90013f44:	31080001 	addik	r8, r8, 1
90013f48:	16474000 	rsubk	r18, r7, r8
90013f4c:	be32fff0 	bneid	r18, -16		// 90013f3c
90013f50:	30c60001 	addik	r6, r6, 1
90013f54:	b60f0008 	rtsd	r15, 8
90013f58:	10650000 	addk	r3, r5, r0
90013f5c:	e8860000 	lwi	r4, r6, 0
90013f60:	30e7fff0 	addik	r7, r7, -16
90013f64:	f8880000 	swi	r4, r8, 0
90013f68:	e8660004 	lwi	r3, r6, 4
90013f6c:	f8680004 	swi	r3, r8, 4
90013f70:	e8860008 	lwi	r4, r6, 8
90013f74:	f8880008 	swi	r4, r8, 8
90013f78:	e866000c 	lwi	r3, r6, 12
90013f7c:	30c60010 	addik	r6, r6, 16
90013f80:	f868000c 	swi	r3, r8, 12
90013f84:	2240000f 	addi	r18, r0, 15
90013f88:	16479003 	cmpu	r18, r7, r18
90013f8c:	be52ffd0 	bltid	r18, -48		// 90013f5c
90013f90:	31080010 	addik	r8, r8, 16
90013f94:	22400003 	addi	r18, r0, 3
90013f98:	16479003 	cmpu	r18, r7, r18
90013f9c:	bcb2002c 	bgei	r18, 44		// 90013fc8
90013fa0:	10800000 	addk	r4, r0, r0
90013fa4:	c8662000 	lw	r3, r6, r4
90013fa8:	30e7fffc 	addik	r7, r7, -4
90013fac:	d8682000 	sw	r3, r8, r4
90013fb0:	22400003 	addi	r18, r0, 3
90013fb4:	16479003 	cmpu	r18, r7, r18
90013fb8:	be52ffec 	bltid	r18, -20		// 90013fa4
90013fbc:	30840004 	addik	r4, r4, 4
90013fc0:	10c43000 	addk	r6, r4, r6
90013fc4:	11044000 	addk	r8, r4, r8
90013fc8:	b810ff68 	brid	-152		// 90013f30
90013fcc:	10880000 	addk	r4, r8, r0

90013fd0 <memset>:
90013fd0:	a4c600ff 	andi	r6, r6, 255
90013fd4:	22400003 	addi	r18, r0, 3
90013fd8:	16479003 	cmpu	r18, r7, r18
90013fdc:	beb20014 	bgeid	r18, 20		// 90013ff0
90013fe0:	10850000 	addk	r4, r5, r0
90013fe4:	a4650003 	andi	r3, r5, 3
90013fe8:	be03002c 	beqid	r3, 44		// 90014014
90013fec:	64660408 	bslli	r3, r6, 8
90013ff0:	bc07001c 	beqi	r7, 28		// 9001400c
90013ff4:	90660060 	sext8	r3, r6
90013ff8:	10e72000 	addk	r7, r7, r4
90013ffc:	f0640000 	sbi	r3, r4, 0
90014000:	30840001 	addik	r4, r4, 1
90014004:	16472000 	rsubk	r18, r7, r4
90014008:	bc32fff4 	bnei	r18, -12		// 90013ffc
9001400c:	b60f0008 	rtsd	r15, 8
90014010:	10650000 	addk	r3, r5, r0
90014014:	80661800 	or	r3, r6, r3
90014018:	64830410 	bslli	r4, r3, 16
9001401c:	80632000 	or	r3, r3, r4
90014020:	2240000f 	addi	r18, r0, 15
90014024:	16479003 	cmpu	r18, r7, r18
90014028:	beb20038 	bgeid	r18, 56		// 90014060
9001402c:	10850000 	addk	r4, r5, r0
90014030:	30e7fff0 	addik	r7, r7, -16
90014034:	f8640000 	swi	r3, r4, 0
90014038:	f8640004 	swi	r3, r4, 4
9001403c:	f8640008 	swi	r3, r4, 8
90014040:	f864000c 	swi	r3, r4, 12
90014044:	2240000f 	addi	r18, r0, 15
90014048:	16479003 	cmpu	r18, r7, r18
9001404c:	be52ffe4 	bltid	r18, -28		// 90014030
90014050:	30840010 	addik	r4, r4, 16
90014054:	22400003 	addi	r18, r0, 3
90014058:	16479003 	cmpu	r18, r7, r18
9001405c:	bcb2ff94 	bgei	r18, -108		// 90013ff0
90014060:	30e7fffc 	addik	r7, r7, -4
90014064:	f8640000 	swi	r3, r4, 0
90014068:	22400003 	addi	r18, r0, 3
9001406c:	16479003 	cmpu	r18, r7, r18
90014070:	be52fff0 	bltid	r18, -16		// 90014060
90014074:	30840004 	addik	r4, r4, 4
90014078:	b800ff78 	bri	-136		// 90013ff0

9001407c <_putchar_r>:
9001407c:	3021ffdc 	addik	r1, r1, -36
90014080:	fa61001c 	swi	r19, r1, 28
90014084:	fac10020 	swi	r22, r1, 32
90014088:	f9e10000 	swi	r15, r1, 0
9001408c:	12650000 	addk	r19, r5, r0
90014090:	be050010 	beqid	r5, 16		// 900140a0
90014094:	12c60000 	addk	r22, r6, r0
90014098:	e8650018 	lwi	r3, r5, 24
9001409c:	bc03004c 	beqi	r3, 76		// 900140e8
900140a0:	e8d30004 	lwi	r6, r19, 4
900140a4:	e8660008 	lwi	r3, r6, 8
900140a8:	3083ffff 	addik	r4, r3, -1
900140ac:	f8860008 	swi	r4, r6, 8
900140b0:	bc440044 	blti	r4, 68		// 900140f4
900140b4:	e8660000 	lwi	r3, r6, 0
900140b8:	f2c30000 	sbi	r22, r3, 0
900140bc:	e8b30004 	lwi	r5, r19, 4
900140c0:	e8650000 	lwi	r3, r5, 0
900140c4:	30830001 	addik	r4, r3, 1
900140c8:	e0e30000 	lbui	r7, r3, 0
900140cc:	f8850000 	swi	r4, r5, 0
900140d0:	10670000 	addk	r3, r7, r0
900140d4:	e9e10000 	lwi	r15, r1, 0
900140d8:	ea61001c 	lwi	r19, r1, 28
900140dc:	eac10020 	lwi	r22, r1, 32
900140e0:	b60f0008 	rtsd	r15, 8
900140e4:	30210024 	addik	r1, r1, 36
900140e8:	b9f4597c 	brlid	r15, 22908	// 90019a64 <__sinit>
900140ec:	80000000 	or	r0, r0, r0
900140f0:	b800ffb0 	bri	-80		// 900140a0
900140f4:	e8660018 	lwi	r3, r6, 24
900140f8:	16432001 	cmp	r18, r3, r4
900140fc:	bc520034 	blti	r18, 52		// 90014130
90014100:	e8660000 	lwi	r3, r6, 0
90014104:	f2c30000 	sbi	r22, r3, 0
90014108:	e8d30004 	lwi	r6, r19, 4
9001410c:	e8860000 	lwi	r4, r6, 0
90014110:	e0640000 	lbui	r3, r4, 0
90014114:	aa43000a 	xori	r18, r3, 10
90014118:	bc120028 	beqi	r18, 40		// 90014140
9001411c:	10e30000 	addk	r7, r3, r0
90014120:	30640001 	addik	r3, r4, 1
90014124:	f8660000 	swi	r3, r6, 0
90014128:	b810ffac 	brid	-84		// 900140d4
9001412c:	10670000 	addk	r3, r7, r0
90014130:	b9f43110 	brlid	r15, 12560	// 90017240 <__swbuf>
90014134:	10b60000 	addk	r5, r22, r0
90014138:	b810ff98 	brid	-104		// 900140d0
9001413c:	10e30000 	addk	r7, r3, r0
90014140:	b9f43100 	brlid	r15, 12544	// 90017240 <__swbuf>
90014144:	30a0000a 	addik	r5, r0, 10
90014148:	b810ff88 	brid	-120		// 900140d0
9001414c:	10e30000 	addk	r7, r3, r0

90014150 <putchar>:
90014150:	3021ffdc 	addik	r1, r1, -36
90014154:	fa61001c 	swi	r19, r1, 28
90014158:	b0009002 	imm	-28670
9001415c:	ea603b60 	lwi	r19, r0, 15200
90014160:	fac10020 	swi	r22, r1, 32
90014164:	f9e10000 	swi	r15, r1, 0
90014168:	be130010 	beqid	r19, 16		// 90014178
9001416c:	12c50000 	addk	r22, r5, r0
90014170:	e8730018 	lwi	r3, r19, 24
90014174:	bc03004c 	beqi	r3, 76		// 900141c0
90014178:	e8d30004 	lwi	r6, r19, 4
9001417c:	e8660008 	lwi	r3, r6, 8
90014180:	3083ffff 	addik	r4, r3, -1
90014184:	f8860008 	swi	r4, r6, 8
90014188:	bc440044 	blti	r4, 68		// 900141cc
9001418c:	e8660000 	lwi	r3, r6, 0
90014190:	f2c30000 	sbi	r22, r3, 0
90014194:	e8b30004 	lwi	r5, r19, 4
90014198:	e8650000 	lwi	r3, r5, 0
9001419c:	30830001 	addik	r4, r3, 1
900141a0:	e0e30000 	lbui	r7, r3, 0
900141a4:	f8850000 	swi	r4, r5, 0
900141a8:	10670000 	addk	r3, r7, r0
900141ac:	e9e10000 	lwi	r15, r1, 0
900141b0:	ea61001c 	lwi	r19, r1, 28
900141b4:	eac10020 	lwi	r22, r1, 32
900141b8:	b60f0008 	rtsd	r15, 8
900141bc:	30210024 	addik	r1, r1, 36
900141c0:	b9f458a4 	brlid	r15, 22692	// 90019a64 <__sinit>
900141c4:	10b30000 	addk	r5, r19, r0
900141c8:	b800ffb0 	bri	-80		// 90014178
900141cc:	e8660018 	lwi	r3, r6, 24
900141d0:	16432001 	cmp	r18, r3, r4
900141d4:	bc520034 	blti	r18, 52		// 90014208
900141d8:	e8660000 	lwi	r3, r6, 0
900141dc:	f2c30000 	sbi	r22, r3, 0
900141e0:	e8d30004 	lwi	r6, r19, 4
900141e4:	e8860000 	lwi	r4, r6, 0
900141e8:	e0640000 	lbui	r3, r4, 0
900141ec:	aa43000a 	xori	r18, r3, 10
900141f0:	bc120028 	beqi	r18, 40		// 90014218
900141f4:	10e30000 	addk	r7, r3, r0
900141f8:	30640001 	addik	r3, r4, 1
900141fc:	f8660000 	swi	r3, r6, 0
90014200:	b810ffac 	brid	-84		// 900141ac
90014204:	10670000 	addk	r3, r7, r0
90014208:	b9f43038 	brlid	r15, 12344	// 90017240 <__swbuf>
9001420c:	10b60000 	addk	r5, r22, r0
90014210:	b810ff98 	brid	-104		// 900141a8
90014214:	10e30000 	addk	r7, r3, r0
90014218:	b9f43028 	brlid	r15, 12328	// 90017240 <__swbuf>
9001421c:	30a0000a 	addik	r5, r0, 10
90014220:	b810ff88 	brid	-120		// 900141a8
90014224:	10e30000 	addk	r7, r3, r0

90014228 <snprintf>:
90014228:	10860000 	addk	r4, r6, r0
9001422c:	f9010010 	swi	r8, r1, 16
90014230:	f9210014 	swi	r9, r1, 20
90014234:	f9410018 	swi	r10, r1, 24
90014238:	f8e1000c 	swi	r7, r1, 12
9001423c:	3021ff84 	addik	r1, r1, -124
90014240:	3141008c 	addik	r10, r1, 140
90014244:	30600208 	addik	r3, r0, 520
90014248:	f9e10000 	swi	r15, r1, 0
9001424c:	110a0000 	addk	r8, r10, r0
90014250:	30c10020 	addik	r6, r1, 32
90014254:	f461002c 	shi	r3, r1, 44
90014258:	f8a10030 	swi	r5, r1, 48
9001425c:	f8a10020 	swi	r5, r1, 32
90014260:	be040048 	beqid	r4, 72		// 900142a8
90014264:	3124ffff 	addik	r9, r4, -1
90014268:	b0009002 	imm	-28670
9001426c:	e8a03b60 	lwi	r5, r0, 15200
90014270:	3060ffff 	addik	r3, r0, -1
90014274:	f9210034 	swi	r9, r1, 52
90014278:	f461002e 	shi	r3, r1, 46
9001427c:	f9210028 	swi	r9, r1, 40
90014280:	f941001c 	swi	r10, r1, 28
90014284:	b9f40bac 	brlid	r15, 2988	// 90014e30 <_vfprintf_r>
90014288:	80000000 	or	r0, r0, r0
9001428c:	10830000 	addk	r4, r3, r0
90014290:	e8610020 	lwi	r3, r1, 32
90014294:	f0030000 	sbi	r0, r3, 0
90014298:	e9e10000 	lwi	r15, r1, 0
9001429c:	10640000 	addk	r3, r4, r0
900142a0:	b60f0008 	rtsd	r15, 8
900142a4:	3021007c 	addik	r1, r1, 124
900142a8:	b0009002 	imm	-28670
900142ac:	e8a03b60 	lwi	r5, r0, 15200
900142b0:	3060ffff 	addik	r3, r0, -1
900142b4:	f8810034 	swi	r4, r1, 52
900142b8:	f8810028 	swi	r4, r1, 40
900142bc:	f461002e 	shi	r3, r1, 46
900142c0:	f941001c 	swi	r10, r1, 28
900142c4:	b9f40b6c 	brlid	r15, 2924	// 90014e30 <_vfprintf_r>
900142c8:	30c10020 	addik	r6, r1, 32
900142cc:	10830000 	addk	r4, r3, r0
900142d0:	e9e10000 	lwi	r15, r1, 0
900142d4:	10640000 	addk	r3, r4, r0
900142d8:	b60f0008 	rtsd	r15, 8
900142dc:	3021007c 	addik	r1, r1, 124

900142e0 <_snprintf_r>:
900142e0:	f9010010 	swi	r8, r1, 16
900142e4:	f9210014 	swi	r9, r1, 20
900142e8:	f9410018 	swi	r10, r1, 24
900142ec:	30600208 	addik	r3, r0, 520
900142f0:	3021ff84 	addik	r1, r1, -124
900142f4:	10860000 	addk	r4, r6, r0
900142f8:	11270000 	addk	r9, r7, r0
900142fc:	f461002c 	shi	r3, r1, 44
90014300:	10680000 	addk	r3, r8, r0
90014304:	31610090 	addik	r11, r1, 144
90014308:	3147ffff 	addik	r10, r7, -1
9001430c:	f9e10000 	swi	r15, r1, 0
90014310:	30c10020 	addik	r6, r1, 32
90014314:	f8810030 	swi	r4, r1, 48
90014318:	110b0000 	addk	r8, r11, r0
9001431c:	f8810020 	swi	r4, r1, 32
90014320:	be090040 	beqid	r9, 64		// 90014360
90014324:	10e30000 	addk	r7, r3, r0
90014328:	3060ffff 	addik	r3, r0, -1
9001432c:	f9410034 	swi	r10, r1, 52
90014330:	f461002e 	shi	r3, r1, 46
90014334:	f9410028 	swi	r10, r1, 40
90014338:	f961001c 	swi	r11, r1, 28
9001433c:	b9f40af4 	brlid	r15, 2804	// 90014e30 <_vfprintf_r>
90014340:	80000000 	or	r0, r0, r0
90014344:	10830000 	addk	r4, r3, r0
90014348:	e8610020 	lwi	r3, r1, 32
9001434c:	f0030000 	sbi	r0, r3, 0
90014350:	e9e10000 	lwi	r15, r1, 0
90014354:	10640000 	addk	r3, r4, r0
90014358:	b60f0008 	rtsd	r15, 8
9001435c:	3021007c 	addik	r1, r1, 124
90014360:	3060ffff 	addik	r3, r0, -1
90014364:	f9210034 	swi	r9, r1, 52
90014368:	f461002e 	shi	r3, r1, 46
9001436c:	f9210028 	swi	r9, r1, 40
90014370:	f961001c 	swi	r11, r1, 28
90014374:	b9f40abc 	brlid	r15, 2748	// 90014e30 <_vfprintf_r>
90014378:	30c10020 	addik	r6, r1, 32
9001437c:	10830000 	addk	r4, r3, r0
90014380:	e9e10000 	lwi	r15, r1, 0
90014384:	10640000 	addk	r3, r4, r0
90014388:	b60f0008 	rtsd	r15, 8
9001438c:	3021007c 	addik	r1, r1, 124

90014390 <strcmp>:
90014390:	81200000 	or	r9, r0, r0

90014394 <check_alignment>:
90014394:	a4650003 	andi	r3, r5, 3
90014398:	a4860003 	andi	r4, r6, 3
9001439c:	bc230048 	bnei	r3, 72		// 900143e4
900143a0:	bc240074 	bnei	r4, 116		// 90014414

900143a4 <cmp_loop>:
900143a4:	c8654800 	lw	r3, r5, r9
900143a8:	c8864800 	lw	r4, r6, r9
900143ac:	80e30400 	pcmpbf	r7, r3, r0
900143b0:	bc270014 	bnei	r7, 20		// 900143c4
900143b4:	14e41803 	cmpu	r7, r4, r3
900143b8:	bc270078 	bnei	r7, 120		// 90014430
900143bc:	b810ffe8 	brid	-24		// 900143a4
900143c0:	31290004 	addik	r9, r9, 4

900143c4 <end_cmp_loop>:
900143c4:	c0654800 	lbu	r3, r5, r9
900143c8:	c0864800 	lbu	r4, r6, r9
900143cc:	14e41803 	cmpu	r7, r4, r3
900143d0:	bc27000c 	bnei	r7, 12		// 900143dc
900143d4:	be23fff0 	bneid	r3, -16		// 900143c4
900143d8:	31290001 	addik	r9, r9, 1

900143dc <end_cmp_early>:
900143dc:	b60f0008 	rtsd	r15, 8
900143e0:	80603800 	or	r3, r0, r7

900143e4 <try_align_args>:
900143e4:	88e41800 	xor	r7, r4, r3
900143e8:	bc27002c 	bnei	r7, 44		// 90014414
900143ec:	35430004 	rsubik	r10, r3, 4

900143f0 <align_loop>:
900143f0:	c0654800 	lbu	r3, r5, r9
900143f4:	c0864800 	lbu	r4, r6, r9
900143f8:	14e41803 	cmpu	r7, r4, r3
900143fc:	bc270034 	bnei	r7, 52		// 90014430
90014400:	bc030030 	beqi	r3, 48		// 90014430
90014404:	314affff 	addik	r10, r10, -1
90014408:	be0aff9c 	beqid	r10, -100		// 900143a4
9001440c:	31290001 	addik	r9, r9, 1
90014410:	b800ffe0 	bri	-32		// 900143f0

90014414 <regular_strcmp>:
90014414:	c0654800 	lbu	r3, r5, r9
90014418:	c0864800 	lbu	r4, r6, r9
9001441c:	14e41803 	cmpu	r7, r4, r3
90014420:	bc270010 	bnei	r7, 16		// 90014430
90014424:	bc03000c 	beqi	r3, 12		// 90014430
90014428:	b810ffec 	brid	-20		// 90014414
9001442c:	31290001 	addik	r9, r9, 1

90014430 <end_cmp>:
90014430:	b60f0008 	rtsd	r15, 8
90014434:	80603800 	or	r3, r0, r7
90014438:	b60f0008 	rtsd	r15, 8
9001443c:	80000000 	or	r0, r0, r0

90014440 <strlen>:
90014440:	81200000 	or	r9, r0, r0

90014444 <check_alignment>:
90014444:	a4650003 	andi	r3, r5, 3
90014448:	bc230030 	bnei	r3, 48		// 90014478

9001444c <len_loop>:
9001444c:	c8654800 	lw	r3, r5, r9
90014450:	80830400 	pcmpbf	r4, r3, r0
90014454:	bc24000c 	bnei	r4, 12		// 90014460
90014458:	b810fff4 	brid	-12		// 9001444c
9001445c:	31290004 	addik	r9, r9, 4

90014460 <end_len>:
90014460:	c0654800 	lbu	r3, r5, r9
90014464:	bc03000c 	beqi	r3, 12		// 90014470
90014468:	b810fff8 	brid	-8		// 90014460
9001446c:	31290001 	addik	r9, r9, 1

90014470 <done_len>:
90014470:	b60f0008 	rtsd	r15, 8
90014474:	80604800 	or	r3, r0, r9

90014478 <align_arg>:
90014478:	35430004 	rsubik	r10, r3, 4

9001447c <align_loop>:
9001447c:	c0654800 	lbu	r3, r5, r9
90014480:	be03fff0 	beqid	r3, -16		// 90014470
90014484:	314affff 	addik	r10, r10, -1
90014488:	be2afff4 	bneid	r10, -12		// 9001447c
9001448c:	31290001 	addik	r9, r9, 1
90014490:	b800ffbc 	bri	-68		// 9001444c
90014494:	b60f0008 	rtsd	r15, 8
90014498:	80000000 	or	r0, r0, r0

9001449c <strncmp>:
9001449c:	be07011c 	beqid	r7, 284		// 900145b8
900144a0:	10600000 	addk	r3, r0, r0
900144a4:	80653000 	or	r3, r5, r6
900144a8:	a4630003 	andi	r3, r3, 3
900144ac:	be2300b0 	bneid	r3, 176		// 9001455c
900144b0:	11250000 	addk	r9, r5, r0
900144b4:	22400003 	addi	r18, r0, 3
900144b8:	16479003 	cmpu	r18, r7, r18
900144bc:	beb20098 	bgeid	r18, 152		// 90014554
900144c0:	11060000 	addk	r8, r6, r0
900144c4:	e8a50000 	lwi	r5, r5, 0
900144c8:	e8660000 	lwi	r3, r6, 0
900144cc:	16432800 	rsubk	r18, r3, r5
900144d0:	bc320084 	bnei	r18, 132		// 90014554
900144d4:	30e7fffc 	addik	r7, r7, -4
900144d8:	be0700e0 	beqid	r7, 224		// 900145b8
900144dc:	10600000 	addk	r3, r0, r0
900144e0:	b000fefe 	imm	-258
900144e4:	3085feff 	addik	r4, r5, -257
900144e8:	b0008080 	imm	-32640
900144ec:	a4848080 	andi	r4, r4, -32640
900144f0:	a865ffff 	xori	r3, r5, -1
900144f4:	84632000 	and	r3, r3, r4
900144f8:	be03004c 	beqid	r3, 76		// 90014544
900144fc:	31290004 	addik	r9, r9, 4
90014500:	3129fffc 	addik	r9, r9, -4
90014504:	b60f0008 	rtsd	r15, 8
90014508:	10600000 	addk	r3, r0, r0
9001450c:	e8a90000 	lwi	r5, r9, 0
90014510:	e8c80000 	lwi	r6, r8, 0
90014514:	b000fefe 	imm	-258
90014518:	3065feff 	addik	r3, r5, -257
9001451c:	b0008080 	imm	-32640
90014520:	a4638080 	andi	r3, r3, -32640
90014524:	a885ffff 	xori	r4, r5, -1
90014528:	16462800 	rsubk	r18, r6, r5
9001452c:	be320028 	bneid	r18, 40		// 90014554
90014530:	84841800 	and	r4, r4, r3
90014534:	30e7fffc 	addik	r7, r7, -4
90014538:	bc07007c 	beqi	r7, 124		// 900145b4
9001453c:	be240078 	bneid	r4, 120		// 900145b4
90014540:	31290004 	addik	r9, r9, 4
90014544:	22400003 	addi	r18, r0, 3
90014548:	16479003 	cmpu	r18, r7, r18
9001454c:	be52ffc0 	bltid	r18, -64		// 9001450c
90014550:	31080004 	addik	r8, r8, 4
90014554:	10a90000 	addk	r5, r9, r0
90014558:	10c80000 	addk	r6, r8, r0
9001455c:	30e7ffff 	addik	r7, r7, -1
90014560:	aa47ffff 	xori	r18, r7, -1
90014564:	bc320034 	bnei	r18, 52		// 90014598
90014568:	e0850000 	lbui	r4, r5, 0
9001456c:	e0660000 	lbui	r3, r6, 0
90014570:	b60f0008 	rtsd	r15, 8
90014574:	14632000 	rsubk	r3, r3, r4
90014578:	be070040 	beqid	r7, 64		// 900145b8
9001457c:	10600000 	addk	r3, r0, r0
90014580:	be040038 	beqid	r4, 56		// 900145b8
90014584:	30e7ffff 	addik	r7, r7, -1
90014588:	30a50001 	addik	r5, r5, 1
9001458c:	aa47ffff 	xori	r18, r7, -1
90014590:	be12ffd8 	beqid	r18, -40		// 90014568
90014594:	30c60001 	addik	r6, r6, 1
90014598:	e0850000 	lbui	r4, r5, 0
9001459c:	e0660000 	lbui	r3, r6, 0
900145a0:	90840060 	sext8	r4, r4
900145a4:	90630060 	sext8	r3, r3
900145a8:	16441800 	rsubk	r18, r4, r3
900145ac:	bc12ffcc 	beqi	r18, -52		// 90014578
900145b0:	b800ffb8 	bri	-72		// 90014568
900145b4:	10600000 	addk	r3, r0, r0
900145b8:	b60f0008 	rtsd	r15, 8
900145bc:	80000000 	or	r0, r0, r0

900145c0 <strncpy>:
900145c0:	80662800 	or	r3, r6, r5
900145c4:	a4630003 	andi	r3, r3, 3
900145c8:	be23001c 	bneid	r3, 28		// 900145e4
900145cc:	11450000 	addk	r10, r5, r0
900145d0:	22400003 	addi	r18, r0, 3
900145d4:	16479003 	cmpu	r18, r7, r18
900145d8:	be520070 	bltid	r18, 112		// 90014648
900145dc:	11050000 	addk	r8, r5, r0
900145e0:	11450000 	addk	r10, r5, r0
900145e4:	be07005c 	beqid	r7, 92		// 90014640
900145e8:	310a0001 	addik	r8, r10, 1
900145ec:	e0660000 	lbui	r3, r6, 0
900145f0:	30e7ffff 	addik	r7, r7, -1
900145f4:	90630060 	sext8	r3, r3
900145f8:	f06a0000 	sbi	r3, r10, 0
900145fc:	be030028 	beqid	r3, 40		// 90014624
90014600:	30860001 	addik	r4, r6, 1
90014604:	bc07003c 	beqi	r7, 60		// 90014640
90014608:	e0640000 	lbui	r3, r4, 0
9001460c:	30e7ffff 	addik	r7, r7, -1
90014610:	30840001 	addik	r4, r4, 1
90014614:	90630060 	sext8	r3, r3
90014618:	f0680000 	sbi	r3, r8, 0
9001461c:	be23ffe8 	bneid	r3, -24		// 90014604
90014620:	31080001 	addik	r8, r8, 1
90014624:	bc07001c 	beqi	r7, 28		// 90014640
90014628:	10680000 	addk	r3, r8, r0
9001462c:	10e74000 	addk	r7, r7, r8
90014630:	f0030000 	sbi	r0, r3, 0
90014634:	30630001 	addik	r3, r3, 1
90014638:	16471800 	rsubk	r18, r7, r3
9001463c:	bc32fff4 	bnei	r18, -12		// 90014630
90014640:	b60f0008 	rtsd	r15, 8
90014644:	10650000 	addk	r3, r5, r0
90014648:	22400003 	addi	r18, r0, 3
9001464c:	16479003 	cmpu	r18, r7, r18
90014650:	beb20050 	bgeid	r18, 80		// 900146a0
90014654:	11260000 	addk	r9, r6, r0
90014658:	e8c60000 	lwi	r6, r6, 0
9001465c:	b8000020 	bri	32		// 9001467c
90014660:	f8c80000 	swi	r6, r8, 0
90014664:	31290004 	addik	r9, r9, 4
90014668:	22400003 	addi	r18, r0, 3
9001466c:	16479003 	cmpu	r18, r7, r18
90014670:	beb20030 	bgeid	r18, 48		// 900146a0
90014674:	31080004 	addik	r8, r8, 4
90014678:	e8c90000 	lwi	r6, r9, 0
9001467c:	b000fefe 	imm	-258
90014680:	3066feff 	addik	r3, r6, -257
90014684:	a886ffff 	xori	r4, r6, -1
90014688:	84632000 	and	r3, r3, r4
9001468c:	b0008080 	imm	-32640
90014690:	a4638080 	andi	r3, r3, -32640
90014694:	be03ffcc 	beqid	r3, -52		// 90014660
90014698:	30e7fffc 	addik	r7, r7, -4
9001469c:	30e70004 	addik	r7, r7, 4
900146a0:	11480000 	addk	r10, r8, r0
900146a4:	b810ff40 	brid	-192		// 900145e4
900146a8:	10c90000 	addk	r6, r9, r0

900146ac <strrchr>:
900146ac:	3021ffdc 	addik	r1, r1, -36
900146b0:	fa61001c 	swi	r19, r1, 28
900146b4:	fac10020 	swi	r22, r1, 32
900146b8:	f9e10000 	swi	r15, r1, 0
900146bc:	12c60000 	addk	r22, r6, r0
900146c0:	10650000 	addk	r3, r5, r0
900146c4:	be260038 	bneid	r6, 56		// 900146fc
900146c8:	12600000 	addk	r19, r0, r0
900146cc:	b0000000 	imm	0
900146d0:	b9f4943c 	brlid	r15, -27588	// 9001db0c <strchr>
900146d4:	80000000 	or	r0, r0, r0
900146d8:	12630000 	addk	r19, r3, r0
900146dc:	10730000 	addk	r3, r19, r0
900146e0:	e9e10000 	lwi	r15, r1, 0
900146e4:	ea61001c 	lwi	r19, r1, 28
900146e8:	eac10020 	lwi	r22, r1, 32
900146ec:	b60f0008 	rtsd	r15, 8
900146f0:	30210024 	addik	r1, r1, 36
900146f4:	12630000 	addk	r19, r3, r0
900146f8:	30630001 	addik	r3, r3, 1
900146fc:	10a30000 	addk	r5, r3, r0
90014700:	b0000000 	imm	0
90014704:	b9f49408 	brlid	r15, -27640	// 9001db0c <strchr>
90014708:	10d60000 	addk	r6, r22, r0
9001470c:	bc23ffe8 	bnei	r3, -24		// 900146f4
90014710:	b810ffd0 	brid	-48		// 900146e0
90014714:	10730000 	addk	r3, r19, r0

90014718 <_strtol_r>:
90014718:	3021ffb8 	addik	r1, r1, -72
9001471c:	fac10020 	swi	r22, r1, 32
90014720:	fae10024 	swi	r23, r1, 36
90014724:	fb21002c 	swi	r25, r1, 44
90014728:	fb810038 	swi	r28, r1, 56
9001472c:	fbc10040 	swi	r30, r1, 64
90014730:	fbe10044 	swi	r31, r1, 68
90014734:	13860000 	addk	r28, r6, r0
90014738:	13e50000 	addk	r31, r5, r0
9001473c:	13c70000 	addk	r30, r7, r0
90014740:	12e80000 	addk	r23, r8, r0
90014744:	b0009002 	imm	-28670
90014748:	eb203b5c 	lwi	r25, r0, 15196
9001474c:	12c60000 	addk	r22, r6, r0
90014750:	f9e10000 	swi	r15, r1, 0
90014754:	fa61001c 	swi	r19, r1, 28
90014758:	fb010028 	swi	r24, r1, 40
9001475c:	fb410030 	swi	r26, r1, 48
90014760:	fb610034 	swi	r27, r1, 52
90014764:	fba1003c 	swi	r29, r1, 60
90014768:	e0960000 	lbui	r4, r22, 0
9001476c:	92640060 	sext8	r19, r4
90014770:	c073c800 	lbu	r3, r19, r25
90014774:	a4630008 	andi	r3, r3, 8
90014778:	be23fff0 	bneid	r3, -16		// 90014768
9001477c:	32d60001 	addik	r22, r22, 1
90014780:	aa53002d 	xori	r18, r19, 45
90014784:	be12016c 	beqid	r18, 364		// 900148f0
90014788:	33a00001 	addik	r29, r0, 1
9001478c:	aa53002b 	xori	r18, r19, 43
90014790:	be120188 	beqid	r18, 392		// 90014918
90014794:	13a00000 	addk	r29, r0, r0
90014798:	88970400 	pcmpeq	r4, r23, r0
9001479c:	bc2400b8 	bnei	r4, 184		// 90014854
900147a0:	aa570010 	xori	r18, r23, 16
900147a4:	be1200b0 	beqid	r18, 176		// 90014854
900147a8:	13570000 	addk	r26, r23, r0
900147ac:	b0007fff 	imm	32767
900147b0:	3300ffff 	addik	r24, r0, -1
900147b4:	bc1d000c 	beqi	r29, 12		// 900147c0
900147b8:	b0008000 	imm	-32768
900147bc:	33000000 	addik	r24, r0, 0
900147c0:	10b80000 	addk	r5, r24, r0
900147c4:	b9f4d70c 	brlid	r15, -10484	// 90011ed0 <__umodsi3>
900147c8:	10da0000 	addk	r6, r26, r0
900147cc:	10da0000 	addk	r6, r26, r0
900147d0:	10b80000 	addk	r5, r24, r0
900147d4:	b9f4d7b8 	brlid	r15, -10312	// 90011f8c <__udivsi3>
900147d8:	13630000 	addk	r27, r3, r0
900147dc:	10e00000 	addk	r7, r0, r0
900147e0:	11030000 	addk	r8, r3, r0
900147e4:	b8100028 	brid	40		// 9001480c
900147e8:	10c70000 	addk	r6, r7, r0
900147ec:	16483000 	rsubk	r18, r8, r6
900147f0:	be120088 	beqid	r18, 136		// 90014878
900147f4:	407a3000 	mul	r3, r26, r6
900147f8:	30e00001 	addik	r7, r0, 1
900147fc:	10c32800 	addk	r6, r3, r5
90014800:	e0760000 	lbui	r3, r22, 0
90014804:	32d60001 	addik	r22, r22, 1
90014808:	92630060 	sext8	r19, r3
9001480c:	c093c800 	lbu	r4, r19, r25
90014810:	a4640004 	andi	r3, r4, 4
90014814:	be230024 	bneid	r3, 36		// 90014838
90014818:	30b3ffd0 	addik	r5, r19, -48
9001481c:	a4640003 	andi	r3, r4, 3
90014820:	be030068 	beqid	r3, 104		// 90014888
90014824:	a4640001 	andi	r3, r4, 1
90014828:	be23000c 	bneid	r3, 12		// 90014834
9001482c:	30800037 	addik	r4, r0, 55
90014830:	30800057 	addik	r4, r0, 87
90014834:	14a49800 	rsubk	r5, r4, r19
90014838:	16572801 	cmp	r18, r23, r5
9001483c:	bcb2004c 	bgei	r18, 76		// 90014888
90014840:	be47ffc0 	bltid	r7, -64		// 90014800
90014844:	30e0ffff 	addik	r7, r0, -1
90014848:	16464003 	cmpu	r18, r6, r8
9001484c:	bcb2ffa0 	bgei	r18, -96		// 900147ec
90014850:	b800ffb0 	bri	-80		// 90014800
90014854:	aa530030 	xori	r18, r19, 48
90014858:	bc1200d0 	beqi	r18, 208		// 90014928
9001485c:	be04ff50 	beqid	r4, -176		// 900147ac
90014860:	13570000 	addk	r26, r23, r0
90014864:	aa530030 	xori	r18, r19, 48
90014868:	bc120100 	beqi	r18, 256		// 90014968
9001486c:	3340000a 	addik	r26, r0, 10
90014870:	b810ff3c 	brid	-196		// 900147ac
90014874:	12fa0000 	addk	r23, r26, r0
90014878:	1645d801 	cmp	r18, r5, r27
9001487c:	bcb2ff7c 	bgei	r18, -132		// 900147f8
90014880:	b810ff80 	brid	-128		// 90014800
90014884:	30e0ffff 	addik	r7, r0, -1
90014888:	bc470078 	blti	r7, 120		// 90014900
9001488c:	be3d005c 	bneid	r29, 92		// 900148e8
90014890:	10860000 	addk	r4, r6, r0
90014894:	be1e0014 	beqid	r30, 20		// 900148a8
90014898:	10640000 	addk	r3, r4, r0
9001489c:	bc270044 	bnei	r7, 68		// 900148e0
900148a0:	fb9e0000 	swi	r28, r30, 0
900148a4:	10640000 	addk	r3, r4, r0
900148a8:	e9e10000 	lwi	r15, r1, 0
900148ac:	ea61001c 	lwi	r19, r1, 28
900148b0:	eac10020 	lwi	r22, r1, 32
900148b4:	eae10024 	lwi	r23, r1, 36
900148b8:	eb010028 	lwi	r24, r1, 40
900148bc:	eb21002c 	lwi	r25, r1, 44
900148c0:	eb410030 	lwi	r26, r1, 48
900148c4:	eb610034 	lwi	r27, r1, 52
900148c8:	eb810038 	lwi	r28, r1, 56
900148cc:	eba1003c 	lwi	r29, r1, 60
900148d0:	ebc10040 	lwi	r30, r1, 64
900148d4:	ebe10044 	lwi	r31, r1, 68
900148d8:	b60f0008 	rtsd	r15, 8
900148dc:	30210048 	addik	r1, r1, 72
900148e0:	b810ffc0 	brid	-64		// 900148a0
900148e4:	3396ffff 	addik	r28, r22, -1
900148e8:	b810ffac 	brid	-84		// 90014894
900148ec:	14860000 	rsubk	r4, r6, r0
900148f0:	e0760000 	lbui	r3, r22, 0
900148f4:	32d60001 	addik	r22, r22, 1
900148f8:	b810fea0 	brid	-352		// 90014798
900148fc:	92630060 	sext8	r19, r3
90014900:	b0008000 	imm	-32768
90014904:	30800000 	addik	r4, r0, 0
90014908:	be1d0050 	beqid	r29, 80		// 90014958
9001490c:	30600022 	addik	r3, r0, 34
90014910:	f87f000c 	swi	r3, r31, 12
90014914:	b800ff80 	bri	-128		// 90014894
90014918:	e0760000 	lbui	r3, r22, 0
9001491c:	32d60001 	addik	r22, r22, 1
90014920:	b810fe78 	brid	-392		// 90014798
90014924:	92630060 	sext8	r19, r3
90014928:	e0760000 	lbui	r3, r22, 0
9001492c:	90630060 	sext8	r3, r3
90014930:	aa430078 	xori	r18, r3, 120
90014934:	bc12000c 	beqi	r18, 12		// 90014940
90014938:	aa430058 	xori	r18, r3, 88
9001493c:	bc32ff20 	bnei	r18, -224		// 9001485c
90014940:	e0760001 	lbui	r3, r22, 1
90014944:	33400010 	addik	r26, r0, 16	// 10 <_vector_interrupt>
90014948:	12fa0000 	addk	r23, r26, r0
9001494c:	92630060 	sext8	r19, r3
90014950:	b810fe5c 	brid	-420		// 900147ac
90014954:	32d60002 	addik	r22, r22, 2
90014958:	b0007fff 	imm	32767
9001495c:	3080ffff 	addik	r4, r0, -1
90014960:	f87f000c 	swi	r3, r31, 12
90014964:	b800ff30 	bri	-208		// 90014894
90014968:	33400008 	addik	r26, r0, 8	// 8 <_vector_sw_exception>
9001496c:	b810fe40 	brid	-448		// 900147ac
90014970:	12fa0000 	addk	r23, r26, r0

90014974 <strtol>:
90014974:	10660000 	addk	r3, r6, r0
90014978:	11070000 	addk	r8, r7, r0
9001497c:	10c50000 	addk	r6, r5, r0
90014980:	b0009002 	imm	-28670
90014984:	e8a03b60 	lwi	r5, r0, 15200
90014988:	3021ffe4 	addik	r1, r1, -28
9001498c:	f9e10000 	swi	r15, r1, 0
90014990:	b9f4fd88 	brlid	r15, -632	// 90014718 <_strtol_r>
90014994:	10e30000 	addk	r7, r3, r0
90014998:	e9e10000 	lwi	r15, r1, 0
9001499c:	b60f0008 	rtsd	r15, 8
900149a0:	3021001c 	addik	r1, r1, 28

900149a4 <_strtoul_r>:
900149a4:	3021ffbc 	addik	r1, r1, -68
900149a8:	fac10020 	swi	r22, r1, 32
900149ac:	fae10024 	swi	r23, r1, 36
900149b0:	fb21002c 	swi	r25, r1, 44
900149b4:	fb610034 	swi	r27, r1, 52
900149b8:	fba1003c 	swi	r29, r1, 60
900149bc:	fbc10040 	swi	r30, r1, 64
900149c0:	13660000 	addk	r27, r6, r0
900149c4:	13c50000 	addk	r30, r5, r0
900149c8:	13a70000 	addk	r29, r7, r0
900149cc:	12e80000 	addk	r23, r8, r0
900149d0:	b0009002 	imm	-28670
900149d4:	eb203b5c 	lwi	r25, r0, 15196
900149d8:	12c60000 	addk	r22, r6, r0
900149dc:	f9e10000 	swi	r15, r1, 0
900149e0:	fa61001c 	swi	r19, r1, 28
900149e4:	fb010028 	swi	r24, r1, 40
900149e8:	fb410030 	swi	r26, r1, 48
900149ec:	fb810038 	swi	r28, r1, 56
900149f0:	e0960000 	lbui	r4, r22, 0
900149f4:	92640060 	sext8	r19, r4
900149f8:	c073c800 	lbu	r3, r19, r25
900149fc:	a4630008 	andi	r3, r3, 8
90014a00:	be23fff0 	bneid	r3, -16		// 900149f0
90014a04:	32d60001 	addik	r22, r22, 1
90014a08:	aa53002d 	xori	r18, r19, 45
90014a0c:	be12015c 	beqid	r18, 348		// 90014b68
90014a10:	33800001 	addik	r28, r0, 1
90014a14:	aa53002b 	xori	r18, r19, 43
90014a18:	be120160 	beqid	r18, 352		// 90014b78
90014a1c:	13800000 	addk	r28, r0, r0
90014a20:	88970400 	pcmpeq	r4, r23, r0
90014a24:	bc2400a4 	bnei	r4, 164		// 90014ac8
90014a28:	aa570010 	xori	r18, r23, 16
90014a2c:	be12009c 	beqid	r18, 156		// 90014ac8
90014a30:	10d70000 	addk	r6, r23, r0
90014a34:	30a0ffff 	addik	r5, r0, -1
90014a38:	b9f4d554 	brlid	r15, -10924	// 90011f8c <__udivsi3>
90014a3c:	13570000 	addk	r26, r23, r0
90014a40:	10d70000 	addk	r6, r23, r0
90014a44:	30a0ffff 	addik	r5, r0, -1
90014a48:	b9f4d488 	brlid	r15, -11128	// 90011ed0 <__umodsi3>
90014a4c:	13030000 	addk	r24, r3, r0
90014a50:	11030000 	addk	r8, r3, r0
90014a54:	10c00000 	addk	r6, r0, r0
90014a58:	b8100028 	brid	40		// 90014a80
90014a5c:	10e60000 	addk	r7, r6, r0
90014a60:	16583000 	rsubk	r18, r24, r6
90014a64:	be120094 	beqid	r18, 148		// 90014af8
90014a68:	407a3000 	mul	r3, r26, r6
90014a6c:	30e00001 	addik	r7, r0, 1
90014a70:	10c32800 	addk	r6, r3, r5
90014a74:	e0760000 	lbui	r3, r22, 0
90014a78:	32d60001 	addik	r22, r22, 1
90014a7c:	92630060 	sext8	r19, r3
90014a80:	c093c800 	lbu	r4, r19, r25
90014a84:	a4640004 	andi	r3, r4, 4
90014a88:	be230024 	bneid	r3, 36		// 90014aac
90014a8c:	30b3ffd0 	addik	r5, r19, -48
90014a90:	a4640003 	andi	r3, r4, 3
90014a94:	be030074 	beqid	r3, 116		// 90014b08
90014a98:	a4640001 	andi	r3, r4, 1
90014a9c:	be23000c 	bneid	r3, 12		// 90014aa8
90014aa0:	30800037 	addik	r4, r0, 55
90014aa4:	30800057 	addik	r4, r0, 87
90014aa8:	14a49800 	rsubk	r5, r4, r19
90014aac:	16572801 	cmp	r18, r23, r5
90014ab0:	bcb20058 	bgei	r18, 88		// 90014b08
90014ab4:	be47ffc0 	bltid	r7, -64		// 90014a74
90014ab8:	30e0ffff 	addik	r7, r0, -1
90014abc:	1646c003 	cmpu	r18, r6, r24
90014ac0:	bcb2ffa0 	bgei	r18, -96		// 90014a60
90014ac4:	b800ffb0 	bri	-80		// 90014a74
90014ac8:	aa530030 	xori	r18, r19, 48
90014acc:	bc1200bc 	beqi	r18, 188		// 90014b88
90014ad0:	be04ff64 	beqid	r4, -156		// 90014a34
90014ad4:	10d70000 	addk	r6, r23, r0
90014ad8:	aa530030 	xori	r18, r19, 48
90014adc:	bc1200e8 	beqi	r18, 232		// 90014bc4
90014ae0:	3340000a 	addik	r26, r0, 10
90014ae4:	12fa0000 	addk	r23, r26, r0
90014ae8:	b0001999 	imm	6553
90014aec:	33009999 	addik	r24, r0, -26215
90014af0:	b810ff64 	brid	-156		// 90014a54
90014af4:	31000005 	addik	r8, r0, 5
90014af8:	16454001 	cmp	r18, r5, r8
90014afc:	bcb2ff70 	bgei	r18, -144		// 90014a6c
90014b00:	b810ff74 	brid	-140		// 90014a74
90014b04:	30e0ffff 	addik	r7, r0, -1
90014b08:	bea700d4 	bgeid	r7, 212		// 90014bdc
90014b0c:	30600022 	addik	r3, r0, 34
90014b10:	30c0ffff 	addik	r6, r0, -1
90014b14:	f87e000c 	swi	r3, r30, 12
90014b18:	be1d0014 	beqid	r29, 20		// 90014b2c
90014b1c:	10660000 	addk	r3, r6, r0
90014b20:	bc270040 	bnei	r7, 64		// 90014b60
90014b24:	fb7d0000 	swi	r27, r29, 0
90014b28:	10660000 	addk	r3, r6, r0
90014b2c:	e9e10000 	lwi	r15, r1, 0
90014b30:	ea61001c 	lwi	r19, r1, 28
90014b34:	eac10020 	lwi	r22, r1, 32
90014b38:	eae10024 	lwi	r23, r1, 36
90014b3c:	eb010028 	lwi	r24, r1, 40
90014b40:	eb21002c 	lwi	r25, r1, 44
90014b44:	eb410030 	lwi	r26, r1, 48
90014b48:	eb610034 	lwi	r27, r1, 52
90014b4c:	eb810038 	lwi	r28, r1, 56
90014b50:	eba1003c 	lwi	r29, r1, 60
90014b54:	ebc10040 	lwi	r30, r1, 64
90014b58:	b60f0008 	rtsd	r15, 8
90014b5c:	30210044 	addik	r1, r1, 68
90014b60:	b810ffc4 	brid	-60		// 90014b24
90014b64:	3376ffff 	addik	r27, r22, -1
90014b68:	e0760000 	lbui	r3, r22, 0
90014b6c:	32d60001 	addik	r22, r22, 1
90014b70:	b810feb0 	brid	-336		// 90014a20
90014b74:	92630060 	sext8	r19, r3
90014b78:	e0760000 	lbui	r3, r22, 0
90014b7c:	32d60001 	addik	r22, r22, 1
90014b80:	b810fea0 	brid	-352		// 90014a20
90014b84:	92630060 	sext8	r19, r3
90014b88:	e0760000 	lbui	r3, r22, 0
90014b8c:	90630060 	sext8	r3, r3
90014b90:	aa430078 	xori	r18, r3, 120
90014b94:	bc12000c 	beqi	r18, 12		// 90014ba0
90014b98:	aa430058 	xori	r18, r3, 88
90014b9c:	bc32ff34 	bnei	r18, -204		// 90014ad0
90014ba0:	e0760001 	lbui	r3, r22, 1
90014ba4:	33400010 	addik	r26, r0, 16	// 10 <_vector_interrupt>
90014ba8:	12fa0000 	addk	r23, r26, r0
90014bac:	b0000fff 	imm	4095
90014bb0:	3300ffff 	addik	r24, r0, -1
90014bb4:	92630060 	sext8	r19, r3
90014bb8:	32d60002 	addik	r22, r22, 2
90014bbc:	b810fe98 	brid	-360		// 90014a54
90014bc0:	3100000f 	addik	r8, r0, 15
90014bc4:	33400008 	addik	r26, r0, 8	// 8 <_vector_sw_exception>
90014bc8:	12fa0000 	addk	r23, r26, r0
90014bcc:	b0001fff 	imm	8191
90014bd0:	3300ffff 	addik	r24, r0, -1
90014bd4:	b810fe80 	brid	-384		// 90014a54
90014bd8:	31000007 	addik	r8, r0, 7
90014bdc:	bc1cff3c 	beqi	r28, -196		// 90014b18
90014be0:	b810ff38 	brid	-200		// 90014b18
90014be4:	14c60000 	rsubk	r6, r6, r0

90014be8 <strtoul>:
90014be8:	3021ffbc 	addik	r1, r1, -68
90014bec:	fac10020 	swi	r22, r1, 32
90014bf0:	fae10024 	swi	r23, r1, 36
90014bf4:	fb21002c 	swi	r25, r1, 44
90014bf8:	fb610034 	swi	r27, r1, 52
90014bfc:	fb810038 	swi	r28, r1, 56
90014c00:	fbc10040 	swi	r30, r1, 64
90014c04:	13650000 	addk	r27, r5, r0
90014c08:	13c60000 	addk	r30, r6, r0
90014c0c:	12e70000 	addk	r23, r7, r0
90014c10:	b0009002 	imm	-28670
90014c14:	eb803b60 	lwi	r28, r0, 15200
90014c18:	b0009002 	imm	-28670
90014c1c:	eb203b5c 	lwi	r25, r0, 15196
90014c20:	12c50000 	addk	r22, r5, r0
90014c24:	f9e10000 	swi	r15, r1, 0
90014c28:	fa61001c 	swi	r19, r1, 28
90014c2c:	fb010028 	swi	r24, r1, 40
90014c30:	fb410030 	swi	r26, r1, 48
90014c34:	fba1003c 	swi	r29, r1, 60
90014c38:	e0960000 	lbui	r4, r22, 0
90014c3c:	92640060 	sext8	r19, r4
90014c40:	c073c800 	lbu	r3, r19, r25
90014c44:	a4630008 	andi	r3, r3, 8
90014c48:	be23fff0 	bneid	r3, -16		// 90014c38
90014c4c:	32d60001 	addik	r22, r22, 1
90014c50:	aa53002d 	xori	r18, r19, 45
90014c54:	be12015c 	beqid	r18, 348		// 90014db0
90014c58:	33a00001 	addik	r29, r0, 1
90014c5c:	aa53002b 	xori	r18, r19, 43
90014c60:	be120160 	beqid	r18, 352		// 90014dc0
90014c64:	13a00000 	addk	r29, r0, r0
90014c68:	88970400 	pcmpeq	r4, r23, r0
90014c6c:	bc2400a4 	bnei	r4, 164		// 90014d10
90014c70:	aa570010 	xori	r18, r23, 16
90014c74:	be12009c 	beqid	r18, 156		// 90014d10
90014c78:	10d70000 	addk	r6, r23, r0
90014c7c:	30a0ffff 	addik	r5, r0, -1
90014c80:	b9f4d30c 	brlid	r15, -11508	// 90011f8c <__udivsi3>
90014c84:	13570000 	addk	r26, r23, r0
90014c88:	10d70000 	addk	r6, r23, r0
90014c8c:	30a0ffff 	addik	r5, r0, -1
90014c90:	b9f4d240 	brlid	r15, -11712	// 90011ed0 <__umodsi3>
90014c94:	13030000 	addk	r24, r3, r0
90014c98:	11030000 	addk	r8, r3, r0
90014c9c:	10c00000 	addk	r6, r0, r0
90014ca0:	b8100028 	brid	40		// 90014cc8
90014ca4:	10e60000 	addk	r7, r6, r0
90014ca8:	16583000 	rsubk	r18, r24, r6
90014cac:	be120094 	beqid	r18, 148		// 90014d40
90014cb0:	407a3000 	mul	r3, r26, r6
90014cb4:	30e00001 	addik	r7, r0, 1
90014cb8:	10c32800 	addk	r6, r3, r5
90014cbc:	e0760000 	lbui	r3, r22, 0
90014cc0:	32d60001 	addik	r22, r22, 1
90014cc4:	92630060 	sext8	r19, r3
90014cc8:	c093c800 	lbu	r4, r19, r25
90014ccc:	a4640004 	andi	r3, r4, 4
90014cd0:	be230024 	bneid	r3, 36		// 90014cf4
90014cd4:	30b3ffd0 	addik	r5, r19, -48
90014cd8:	a4640003 	andi	r3, r4, 3
90014cdc:	be030074 	beqid	r3, 116		// 90014d50
90014ce0:	a4640001 	andi	r3, r4, 1
90014ce4:	be23000c 	bneid	r3, 12		// 90014cf0
90014ce8:	30800037 	addik	r4, r0, 55
90014cec:	30800057 	addik	r4, r0, 87
90014cf0:	14a49800 	rsubk	r5, r4, r19
90014cf4:	16572801 	cmp	r18, r23, r5
90014cf8:	bcb20058 	bgei	r18, 88		// 90014d50
90014cfc:	be47ffc0 	bltid	r7, -64		// 90014cbc
90014d00:	30e0ffff 	addik	r7, r0, -1
90014d04:	1646c003 	cmpu	r18, r6, r24
90014d08:	bcb2ffa0 	bgei	r18, -96		// 90014ca8
90014d0c:	b800ffb0 	bri	-80		// 90014cbc
90014d10:	aa530030 	xori	r18, r19, 48
90014d14:	bc1200bc 	beqi	r18, 188		// 90014dd0
90014d18:	be04ff64 	beqid	r4, -156		// 90014c7c
90014d1c:	10d70000 	addk	r6, r23, r0
90014d20:	aa530030 	xori	r18, r19, 48
90014d24:	bc1200e8 	beqi	r18, 232		// 90014e0c
90014d28:	3340000a 	addik	r26, r0, 10
90014d2c:	12fa0000 	addk	r23, r26, r0
90014d30:	b0001999 	imm	6553
90014d34:	33009999 	addik	r24, r0, -26215
90014d38:	b810ff64 	brid	-156		// 90014c9c
90014d3c:	31000005 	addik	r8, r0, 5
90014d40:	16454001 	cmp	r18, r5, r8
90014d44:	bcb2ff70 	bgei	r18, -144		// 90014cb4
90014d48:	b810ff74 	brid	-140		// 90014cbc
90014d4c:	30e0ffff 	addik	r7, r0, -1
90014d50:	bea700d4 	bgeid	r7, 212		// 90014e24
90014d54:	30600022 	addik	r3, r0, 34
90014d58:	30c0ffff 	addik	r6, r0, -1
90014d5c:	f87c000c 	swi	r3, r28, 12
90014d60:	be1e0014 	beqid	r30, 20		// 90014d74
90014d64:	10660000 	addk	r3, r6, r0
90014d68:	bc270040 	bnei	r7, 64		// 90014da8
90014d6c:	fb7e0000 	swi	r27, r30, 0
90014d70:	10660000 	addk	r3, r6, r0
90014d74:	e9e10000 	lwi	r15, r1, 0
90014d78:	ea61001c 	lwi	r19, r1, 28
90014d7c:	eac10020 	lwi	r22, r1, 32
90014d80:	eae10024 	lwi	r23, r1, 36
90014d84:	eb010028 	lwi	r24, r1, 40
90014d88:	eb21002c 	lwi	r25, r1, 44
90014d8c:	eb410030 	lwi	r26, r1, 48
90014d90:	eb610034 	lwi	r27, r1, 52
90014d94:	eb810038 	lwi	r28, r1, 56
90014d98:	eba1003c 	lwi	r29, r1, 60
90014d9c:	ebc10040 	lwi	r30, r1, 64
90014da0:	b60f0008 	rtsd	r15, 8
90014da4:	30210044 	addik	r1, r1, 68
90014da8:	b810ffc4 	brid	-60		// 90014d6c
90014dac:	3376ffff 	addik	r27, r22, -1
90014db0:	e0760000 	lbui	r3, r22, 0
90014db4:	32d60001 	addik	r22, r22, 1
90014db8:	b810feb0 	brid	-336		// 90014c68
90014dbc:	92630060 	sext8	r19, r3
90014dc0:	e0760000 	lbui	r3, r22, 0
90014dc4:	32d60001 	addik	r22, r22, 1
90014dc8:	b810fea0 	brid	-352		// 90014c68
90014dcc:	92630060 	sext8	r19, r3
90014dd0:	e0760000 	lbui	r3, r22, 0
90014dd4:	90630060 	sext8	r3, r3
90014dd8:	aa430078 	xori	r18, r3, 120
90014ddc:	bc12000c 	beqi	r18, 12		// 90014de8
90014de0:	aa430058 	xori	r18, r3, 88
90014de4:	bc32ff34 	bnei	r18, -204		// 90014d18
90014de8:	e0760001 	lbui	r3, r22, 1
90014dec:	33400010 	addik	r26, r0, 16	// 10 <_vector_interrupt>
90014df0:	12fa0000 	addk	r23, r26, r0
90014df4:	b0000fff 	imm	4095
90014df8:	3300ffff 	addik	r24, r0, -1
90014dfc:	92630060 	sext8	r19, r3
90014e00:	32d60002 	addik	r22, r22, 2
90014e04:	b810fe98 	brid	-360		// 90014c9c
90014e08:	3100000f 	addik	r8, r0, 15
90014e0c:	33400008 	addik	r26, r0, 8	// 8 <_vector_sw_exception>
90014e10:	12fa0000 	addk	r23, r26, r0
90014e14:	b0001fff 	imm	8191
90014e18:	3300ffff 	addik	r24, r0, -1
90014e1c:	b810fe80 	brid	-384		// 90014c9c
90014e20:	31000007 	addik	r8, r0, 7
90014e24:	bc1dff3c 	beqi	r29, -196		// 90014d60
90014e28:	b810ff38 	brid	-200		// 90014d60
90014e2c:	14c60000 	rsubk	r6, r6, r0

90014e30 <_vfprintf_r>:
90014e30:	3021f918 	addik	r1, r1, -1768
90014e34:	fac106c0 	swi	r22, r1, 1728
90014e38:	fbc106e0 	swi	r30, r1, 1760
90014e3c:	f9e10000 	swi	r15, r1, 0
90014e40:	fa6106bc 	swi	r19, r1, 1724
90014e44:	fae106c4 	swi	r23, r1, 1732
90014e48:	fb0106c8 	swi	r24, r1, 1736
90014e4c:	fb2106cc 	swi	r25, r1, 1740
90014e50:	fb4106d0 	swi	r26, r1, 1744
90014e54:	fb6106d4 	swi	r27, r1, 1748
90014e58:	fb8106d8 	swi	r28, r1, 1752
90014e5c:	fba106dc 	swi	r29, r1, 1756
90014e60:	fbe106e4 	swi	r31, r1, 1764
90014e64:	f8a106ec 	swi	r5, r1, 1772
90014e68:	13c60000 	addk	r30, r6, r0
90014e6c:	f90106f8 	swi	r8, r1, 1784
90014e70:	b9f45b94 	brlid	r15, 23444	// 9001aa04 <localeconv>
90014e74:	12c70000 	addk	r22, r7, r0
90014e78:	e8630000 	lwi	r3, r3, 0
90014e7c:	f86106a4 	swi	r3, r1, 1700
90014e80:	e86106ec 	lwi	r3, r1, 1772
90014e84:	bc03000c 	beqi	r3, 12		// 90014e90
90014e88:	e8630018 	lwi	r3, r3, 24
90014e8c:	bc030a20 	beqi	r3, 2592		// 900158ac
90014e90:	b0009002 	imm	-28670
90014e94:	aa5e34a4 	xori	r18, r30, 13476
90014e98:	bc120a2c 	beqi	r18, 2604		// 900158c4
90014e9c:	b0009002 	imm	-28670
90014ea0:	aa5e34c4 	xori	r18, r30, 13508
90014ea4:	bc120db8 	beqi	r18, 3512		// 90015c5c
90014ea8:	b0009002 	imm	-28670
90014eac:	aa5e34e4 	xori	r18, r30, 13540
90014eb0:	bc120dbc 	beqi	r18, 3516		// 90015c6c
90014eb4:	e47e000c 	lhui	r3, r30, 12
90014eb8:	a4630008 	andi	r3, r3, 8
90014ebc:	bc030a18 	beqi	r3, 2584		// 900158d4
90014ec0:	e87e0010 	lwi	r3, r30, 16
90014ec4:	bc030a10 	beqi	r3, 2576		// 900158d4
90014ec8:	e47e000c 	lhui	r3, r30, 12
90014ecc:	91230061 	sext16	r9, r3
90014ed0:	a489001a 	andi	r4, r9, 26
90014ed4:	aa44000a 	xori	r18, r4, 10
90014ed8:	be3200d0 	bneid	r18, 208		// 90014fa8
90014edc:	33a10088 	addik	r29, r1, 136
90014ee0:	e59e000e 	lhui	r12, r30, 14
90014ee4:	906c0061 	sext16	r3, r12
90014ee8:	be4300c0 	bltid	r3, 192		// 90014fa8
90014eec:	326100c8 	addik	r19, r1, 200
90014ef0:	e95e0020 	lwi	r10, r30, 32
90014ef4:	e97e0028 	lwi	r11, r30, 40
90014ef8:	e8a106ec 	lwi	r5, r1, 1772
90014efc:	10f60000 	addk	r7, r22, r0
90014f00:	e90106f8 	lwi	r8, r1, 1784
90014f04:	a469fffd 	andi	r3, r9, -3
90014f08:	30810280 	addik	r4, r1, 640
90014f0c:	31200400 	addik	r9, r0, 1024
90014f10:	f46100d4 	shi	r3, r1, 212
90014f14:	f58100d6 	shi	r12, r1, 214
90014f18:	f94100e8 	swi	r10, r1, 232
90014f1c:	f96100f0 	swi	r11, r1, 240
90014f20:	f88100d8 	swi	r4, r1, 216
90014f24:	f92100dc 	swi	r9, r1, 220
90014f28:	f88100c8 	swi	r4, r1, 200
90014f2c:	f92100d0 	swi	r9, r1, 208
90014f30:	f80100e0 	swi	r0, r1, 224
90014f34:	b9f4fefc 	brlid	r15, -260	// 90014e30 <_vfprintf_r>
90014f38:	10d30000 	addk	r6, r19, r0
90014f3c:	f86106ac 	swi	r3, r1, 1708
90014f40:	bc430014 	blti	r3, 20		// 90014f54
90014f44:	b9f44894 	brlid	r15, 18580	// 900197d8 <fflush>
90014f48:	10b30000 	addk	r5, r19, r0
90014f4c:	be230b38 	bneid	r3, 2872		// 90015a84
90014f50:	3080ffff 	addik	r4, r0, -1
90014f54:	e46100d4 	lhui	r3, r1, 212
90014f58:	a4630040 	andi	r3, r3, 64
90014f5c:	bc030010 	beqi	r3, 16		// 90014f6c
90014f60:	e47e000c 	lhui	r3, r30, 12
90014f64:	a0630040 	ori	r3, r3, 64
90014f68:	f47e000c 	shi	r3, r30, 12
90014f6c:	e86106ac 	lwi	r3, r1, 1708
90014f70:	e9e10000 	lwi	r15, r1, 0
90014f74:	ea6106bc 	lwi	r19, r1, 1724
90014f78:	eac106c0 	lwi	r22, r1, 1728
90014f7c:	eae106c4 	lwi	r23, r1, 1732
90014f80:	eb0106c8 	lwi	r24, r1, 1736
90014f84:	eb2106cc 	lwi	r25, r1, 1740
90014f88:	eb4106d0 	lwi	r26, r1, 1744
90014f8c:	eb6106d4 	lwi	r27, r1, 1748
90014f90:	eb8106d8 	lwi	r28, r1, 1752
90014f94:	eba106dc 	lwi	r29, r1, 1756
90014f98:	ebc106e0 	lwi	r30, r1, 1760
90014f9c:	ebe106e4 	lwi	r31, r1, 1764
90014fa0:	b60f0008 	rtsd	r15, 8
90014fa4:	302106e8 	addik	r1, r1, 1768
90014fa8:	13f60000 	addk	r31, r22, r0
90014fac:	131d0000 	addk	r24, r29, r0
90014fb0:	12e00000 	addk	r23, r0, r0
90014fb4:	10800000 	addk	r4, r0, r0
90014fb8:	10a00000 	addk	r5, r0, r0
90014fbc:	fae1069c 	swi	r23, r1, 1692
90014fc0:	fba10054 	swi	r29, r1, 84
90014fc4:	fae106ac 	swi	r23, r1, 1708
90014fc8:	fae10690 	swi	r23, r1, 1680
90014fcc:	fae1005c 	swi	r23, r1, 92
90014fd0:	fae1068c 	swi	r23, r1, 1676
90014fd4:	fae10058 	swi	r23, r1, 88
90014fd8:	f8810684 	swi	r4, r1, 1668
90014fdc:	f8a10688 	swi	r5, r1, 1672
90014fe0:	e07f0000 	lbui	r3, r31, 0
90014fe4:	90830060 	sext8	r4, r3
90014fe8:	be040070 	beqid	r4, 112		// 90015058
90014fec:	12df0000 	addk	r22, r31, r0
90014ff0:	aa440025 	xori	r18, r4, 37
90014ff4:	bc120064 	beqi	r18, 100		// 90015058
90014ff8:	32d60001 	addik	r22, r22, 1
90014ffc:	e0760000 	lbui	r3, r22, 0
90015000:	90830060 	sext8	r4, r3
90015004:	be040010 	beqid	r4, 16		// 90015014
90015008:	173fb000 	rsubk	r25, r31, r22
9001500c:	aa440025 	xori	r18, r4, 37
90015010:	bc32ffe8 	bnei	r18, -24		// 90014ff8
90015014:	bc190044 	beqi	r25, 68		// 90015058
90015018:	eae1005c 	lwi	r23, r1, 92
9001501c:	ea610058 	lwi	r19, r1, 88
90015020:	fbf80000 	swi	r31, r24, 0
90015024:	12f7c800 	addk	r23, r23, r25
90015028:	32730001 	addik	r19, r19, 1
9001502c:	fb380004 	swi	r25, r24, 4
90015030:	fae1005c 	swi	r23, r1, 92
90015034:	fa610058 	swi	r19, r1, 88
90015038:	32400007 	addik	r18, r0, 7
9001503c:	16539001 	cmp	r18, r19, r18
90015040:	be520988 	bltid	r18, 2440		// 900159c8
90015044:	33180008 	addik	r24, r24, 8
90015048:	e8a106ac 	lwi	r5, r1, 1708
9001504c:	e0760000 	lbui	r3, r22, 0
90015050:	10a5c800 	addk	r5, r5, r25
90015054:	f8a106ac 	swi	r5, r1, 1708
90015058:	90630060 	sext8	r3, r3
9001505c:	be031c58 	beqid	r3, 7256		// 90016cb4
90015060:	10c00000 	addk	r6, r0, r0
90015064:	f0010024 	sbi	r0, r1, 36
90015068:	f8c106a8 	swi	r6, r1, 1704
9001506c:	e0760001 	lbui	r3, r22, 1
90015070:	33f60001 	addik	r31, r22, 1
90015074:	f8c106b0 	swi	r6, r1, 1712
90015078:	3360ffff 	addik	r27, r0, -1
9001507c:	93430060 	sext8	r26, r3
90015080:	33ff0001 	addik	r31, r31, 1
90015084:	307affe0 	addik	r3, r26, -32
90015088:	22400058 	addi	r18, r0, 88
9001508c:	16439003 	cmpu	r18, r3, r18
90015090:	be520014 	bltid	r18, 20		// 900150a4
90015094:	64630402 	bslli	r3, r3, 2
90015098:	b0009002 	imm	-28670
9001509c:	e88332d4 	lwi	r4, r3, 13012
900150a0:	98082000 	bra	r4
900150a4:	be1a1c10 	beqid	r26, 7184		// 90016cb4
900150a8:	33800001 	addik	r28, r0, 1
900150ac:	133c0000 	addk	r25, r28, r0
900150b0:	30e10124 	addik	r7, r1, 292
900150b4:	f8e106b4 	swi	r7, r1, 1716
900150b8:	f3410124 	sbi	r26, r1, 292
900150bc:	f0010024 	sbi	r0, r1, 36
900150c0:	10800000 	addk	r4, r0, r0
900150c4:	f8810694 	swi	r4, r1, 1684
900150c8:	e8a106b0 	lwi	r5, r1, 1712
900150cc:	a4650002 	andi	r3, r5, 2
900150d0:	bc030008 	beqi	r3, 8		// 900150d8
900150d4:	339c0002 	addik	r28, r28, 2
900150d8:	e8c106b0 	lwi	r6, r1, 1712
900150dc:	a4c60084 	andi	r6, r6, 132
900150e0:	f8c106b8 	swi	r6, r1, 1720
900150e4:	bc260124 	bnei	r6, 292		// 90015208
900150e8:	e8e106a8 	lwi	r7, r1, 1704
900150ec:	16dc3800 	rsubk	r22, r28, r7
900150f0:	bc760118 	blei	r22, 280		// 90015208
900150f4:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900150f8:	16569001 	cmp	r18, r22, r18
900150fc:	bcb215c0 	bgei	r18, 5568		// 900166bc
90015100:	eae1005c 	lwi	r23, r1, 92
90015104:	ea610058 	lwi	r19, r1, 88
90015108:	b0009002 	imm	-28670
9001510c:	33603448 	addik	r27, r0, 13384
90015110:	b8100024 	brid	36		// 90015134
90015114:	32f70010 	addik	r23, r23, 16
90015118:	131d0000 	addk	r24, r29, r0
9001511c:	fae10058 	swi	r23, r1, 88
90015120:	32d6fff0 	addik	r22, r22, -16
90015124:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015128:	16569001 	cmp	r18, r22, r18
9001512c:	bcb2006c 	bgei	r18, 108		// 90015198
90015130:	32f70010 	addik	r23, r23, 16
90015134:	32730001 	addik	r19, r19, 1
90015138:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
9001513c:	f8780004 	swi	r3, r24, 4
90015140:	fb780000 	swi	r27, r24, 0
90015144:	fae1005c 	swi	r23, r1, 92
90015148:	fa610058 	swi	r19, r1, 88
9001514c:	32400007 	addik	r18, r0, 7
90015150:	16539001 	cmp	r18, r19, r18
90015154:	beb2ffcc 	bgeid	r18, -52		// 90015120
90015158:	33180008 	addik	r24, r24, 8
9001515c:	be17ffbc 	beqid	r23, -68		// 90015118
90015160:	12770000 	addk	r19, r23, r0
90015164:	10be0000 	addk	r5, r30, r0
90015168:	30c10054 	addik	r6, r1, 84
9001516c:	b9f45240 	brlid	r15, 21056	// 9001a3ac <__sfvwrite>
90015170:	12e00000 	addk	r23, r0, r0
90015174:	fae1005c 	swi	r23, r1, 92
90015178:	fae10058 	swi	r23, r1, 88
9001517c:	be2305ac 	bneid	r3, 1452		// 90015728
90015180:	12770000 	addk	r19, r23, r0
90015184:	32d6fff0 	addik	r22, r22, -16
90015188:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
9001518c:	16569001 	cmp	r18, r22, r18
90015190:	be52ffa0 	bltid	r18, -96		// 90015130
90015194:	131d0000 	addk	r24, r29, r0
90015198:	12f7b000 	addk	r23, r23, r22
9001519c:	32730001 	addik	r19, r19, 1
900151a0:	fb780000 	swi	r27, r24, 0
900151a4:	fad80004 	swi	r22, r24, 4
900151a8:	fae1005c 	swi	r23, r1, 92
900151ac:	fa610058 	swi	r19, r1, 88
900151b0:	32400007 	addik	r18, r0, 7
900151b4:	16539001 	cmp	r18, r19, r18
900151b8:	beb20058 	bgeid	r18, 88		// 90015210
900151bc:	33180008 	addik	r24, r24, 8
900151c0:	be370af4 	bneid	r23, 2804		// 90015cb4
900151c4:	12770000 	addk	r19, r23, r0
900151c8:	e0610024 	lbui	r3, r1, 36
900151cc:	fae10058 	swi	r23, r1, 88
900151d0:	be230048 	bneid	r3, 72		// 90015218
900151d4:	131d0000 	addk	r24, r29, r0
900151d8:	e88106b0 	lwi	r4, r1, 1712
900151dc:	a4640002 	andi	r3, r4, 2
900151e0:	be030078 	beqid	r3, 120		// 90015258
900151e4:	30600030 	addik	r3, r0, 48
900151e8:	f0610028 	sbi	r3, r1, 40
900151ec:	f3410029 	sbi	r26, r1, 41
900151f0:	30610028 	addik	r3, r1, 40
900151f4:	32f70002 	addik	r23, r23, 2
900151f8:	32730001 	addik	r19, r19, 1
900151fc:	f8780000 	swi	r3, r24, 0
90015200:	b810002c 	brid	44		// 9001522c
90015204:	30800002 	addik	r4, r0, 2
90015208:	eae1005c 	lwi	r23, r1, 92
9001520c:	ea610058 	lwi	r19, r1, 88
90015210:	e0610024 	lbui	r3, r1, 36
90015214:	bc03ffc4 	beqi	r3, -60		// 900151d8
90015218:	30610024 	addik	r3, r1, 36
9001521c:	32f70001 	addik	r23, r23, 1
90015220:	32730001 	addik	r19, r19, 1
90015224:	f8780000 	swi	r3, r24, 0
90015228:	30800001 	addik	r4, r0, 1
9001522c:	f8980004 	swi	r4, r24, 4
90015230:	fae1005c 	swi	r23, r1, 92
90015234:	fa610058 	swi	r19, r1, 88
90015238:	32400007 	addik	r18, r0, 7
9001523c:	16539001 	cmp	r18, r19, r18
90015240:	beb20018 	bgeid	r18, 24		// 90015258
90015244:	33180008 	addik	r24, r24, 8
90015248:	be3709c4 	bneid	r23, 2500		// 90015c0c
9001524c:	12770000 	addk	r19, r23, r0
90015250:	131d0000 	addk	r24, r29, r0
90015254:	fae10058 	swi	r23, r1, 88
90015258:	e8a106b8 	lwi	r5, r1, 1720
9001525c:	aa450080 	xori	r18, r5, 128
90015260:	bc1203cc 	beqi	r18, 972		// 9001562c
90015264:	e8e10694 	lwi	r7, r1, 1684
90015268:	16d93800 	rsubk	r22, r25, r7
9001526c:	bc7600d8 	blei	r22, 216		// 90015344
90015270:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015274:	16569001 	cmp	r18, r22, r18
90015278:	bcb20bcc 	bgei	r18, 3020		// 90015e44
9001527c:	b0009002 	imm	-28670
90015280:	33603438 	addik	r27, r0, 13368
90015284:	b8100024 	brid	36		// 900152a8
90015288:	32f70010 	addik	r23, r23, 16
9001528c:	131d0000 	addk	r24, r29, r0
90015290:	fae10058 	swi	r23, r1, 88
90015294:	32d6fff0 	addik	r22, r22, -16
90015298:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
9001529c:	16569001 	cmp	r18, r22, r18
900152a0:	bcb2006c 	bgei	r18, 108		// 9001530c
900152a4:	32f70010 	addik	r23, r23, 16
900152a8:	32730001 	addik	r19, r19, 1
900152ac:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
900152b0:	f8780004 	swi	r3, r24, 4
900152b4:	fb780000 	swi	r27, r24, 0
900152b8:	fae1005c 	swi	r23, r1, 92
900152bc:	fa610058 	swi	r19, r1, 88
900152c0:	32400007 	addik	r18, r0, 7
900152c4:	16539001 	cmp	r18, r19, r18
900152c8:	beb2ffcc 	bgeid	r18, -52		// 90015294
900152cc:	33180008 	addik	r24, r24, 8
900152d0:	be17ffbc 	beqid	r23, -68		// 9001528c
900152d4:	12770000 	addk	r19, r23, r0
900152d8:	10be0000 	addk	r5, r30, r0
900152dc:	30c10054 	addik	r6, r1, 84
900152e0:	b9f450cc 	brlid	r15, 20684	// 9001a3ac <__sfvwrite>
900152e4:	12e00000 	addk	r23, r0, r0
900152e8:	fae1005c 	swi	r23, r1, 92
900152ec:	fae10058 	swi	r23, r1, 88
900152f0:	be230438 	bneid	r3, 1080		// 90015728
900152f4:	12770000 	addk	r19, r23, r0
900152f8:	32d6fff0 	addik	r22, r22, -16
900152fc:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015300:	16569001 	cmp	r18, r22, r18
90015304:	be52ffa0 	bltid	r18, -96		// 900152a4
90015308:	131d0000 	addk	r24, r29, r0
9001530c:	12f7b000 	addk	r23, r23, r22
90015310:	32730001 	addik	r19, r19, 1
90015314:	fb780000 	swi	r27, r24, 0
90015318:	fad80004 	swi	r22, r24, 4
9001531c:	fae1005c 	swi	r23, r1, 92
90015320:	fa610058 	swi	r19, r1, 88
90015324:	32400007 	addik	r18, r0, 7
90015328:	16539001 	cmp	r18, r19, r18
9001532c:	beb20018 	bgeid	r18, 24		// 90015344
90015330:	33180008 	addik	r24, r24, 8
90015334:	be370900 	bneid	r23, 2304		// 90015c34
90015338:	12770000 	addk	r19, r23, r0
9001533c:	131d0000 	addk	r24, r29, r0
90015340:	fae10058 	swi	r23, r1, 88
90015344:	e88106b0 	lwi	r4, r1, 1712
90015348:	a4640100 	andi	r3, r4, 256
9001534c:	bc230178 	bnei	r3, 376		// 900154c4
90015350:	e8a106b4 	lwi	r5, r1, 1716
90015354:	12f7c800 	addk	r23, r23, r25
90015358:	32730001 	addik	r19, r19, 1
9001535c:	f8b80000 	swi	r5, r24, 0
90015360:	fb380004 	swi	r25, r24, 4
90015364:	fae1005c 	swi	r23, r1, 92
90015368:	fa610058 	swi	r19, r1, 88
9001536c:	32400007 	addik	r18, r0, 7
90015370:	16539001 	cmp	r18, r19, r18
90015374:	beb20018 	bgeid	r18, 24		// 9001538c
90015378:	30b80008 	addik	r5, r24, 8
9001537c:	be3706e8 	bneid	r23, 1768		// 90015a64
90015380:	10be0000 	addk	r5, r30, r0
90015384:	10bd0000 	addk	r5, r29, r0
90015388:	fae10058 	swi	r23, r1, 88
9001538c:	e8c106b0 	lwi	r6, r1, 1712
90015390:	a4660004 	andi	r3, r6, 4
90015394:	bc0300e0 	beqi	r3, 224		// 90015474
90015398:	e8e106a8 	lwi	r7, r1, 1704
9001539c:	16dc3800 	rsubk	r22, r28, r7
900153a0:	bc7600d4 	blei	r22, 212		// 90015474
900153a4:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900153a8:	16569001 	cmp	r18, r22, r18
900153ac:	bcb2136c 	bgei	r18, 4972		// 90016718
900153b0:	ea610058 	lwi	r19, r1, 88
900153b4:	b0009002 	imm	-28670
900153b8:	33603448 	addik	r27, r0, 13384
900153bc:	b8100024 	brid	36		// 900153e0
900153c0:	32f70010 	addik	r23, r23, 16
900153c4:	10bd0000 	addk	r5, r29, r0
900153c8:	fae10058 	swi	r23, r1, 88
900153cc:	32d6fff0 	addik	r22, r22, -16
900153d0:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900153d4:	16569001 	cmp	r18, r22, r18
900153d8:	bcb2006c 	bgei	r18, 108		// 90015444
900153dc:	32f70010 	addik	r23, r23, 16
900153e0:	32730001 	addik	r19, r19, 1
900153e4:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
900153e8:	f8650004 	swi	r3, r5, 4
900153ec:	fb650000 	swi	r27, r5, 0
900153f0:	fae1005c 	swi	r23, r1, 92
900153f4:	fa610058 	swi	r19, r1, 88
900153f8:	32400007 	addik	r18, r0, 7
900153fc:	16539001 	cmp	r18, r19, r18
90015400:	beb2ffcc 	bgeid	r18, -52		// 900153cc
90015404:	30a50008 	addik	r5, r5, 8
90015408:	be17ffbc 	beqid	r23, -68		// 900153c4
9001540c:	12770000 	addk	r19, r23, r0
90015410:	10be0000 	addk	r5, r30, r0
90015414:	30c10054 	addik	r6, r1, 84
90015418:	b9f44f94 	brlid	r15, 20372	// 9001a3ac <__sfvwrite>
9001541c:	12e00000 	addk	r23, r0, r0
90015420:	fae1005c 	swi	r23, r1, 92
90015424:	fae10058 	swi	r23, r1, 88
90015428:	be230300 	bneid	r3, 768		// 90015728
9001542c:	12770000 	addk	r19, r23, r0
90015430:	32d6fff0 	addik	r22, r22, -16
90015434:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015438:	16569001 	cmp	r18, r22, r18
9001543c:	be52ffa0 	bltid	r18, -96		// 900153dc
90015440:	10bd0000 	addk	r5, r29, r0
90015444:	12f7b000 	addk	r23, r23, r22
90015448:	32730001 	addik	r19, r19, 1
9001544c:	fb650000 	swi	r27, r5, 0
90015450:	fac50004 	swi	r22, r5, 4
90015454:	fae1005c 	swi	r23, r1, 92
90015458:	fa610058 	swi	r19, r1, 88
9001545c:	32400007 	addik	r18, r0, 7
90015460:	16539001 	cmp	r18, r19, r18
90015464:	bcb20010 	bgei	r18, 16		// 90015474
90015468:	be370624 	bneid	r23, 1572		// 90015a8c
9001546c:	10be0000 	addk	r5, r30, r0
90015470:	fae10058 	swi	r23, r1, 88
90015474:	e86106a8 	lwi	r3, r1, 1704
90015478:	165c1801 	cmp	r18, r28, r3
9001547c:	bcb20008 	bgei	r18, 8		// 90015484
90015480:	107c0000 	addk	r3, r28, r0
90015484:	e88106ac 	lwi	r4, r1, 1708
90015488:	10841800 	addk	r4, r4, r3
9001548c:	f88106ac 	swi	r4, r1, 1708
90015490:	be370280 	bneid	r23, 640		// 90015710
90015494:	10be0000 	addk	r5, r30, r0
90015498:	e8a1068c 	lwi	r5, r1, 1676
9001549c:	12600000 	addk	r19, r0, r0
900154a0:	fa610058 	swi	r19, r1, 88
900154a4:	be05fb3c 	beqid	r5, -1220		// 90014fe0
900154a8:	131d0000 	addk	r24, r29, r0
900154ac:	10c50000 	addk	r6, r5, r0
900154b0:	e8a106ec 	lwi	r5, r1, 1772
900154b4:	fa61068c 	swi	r19, r1, 1676
900154b8:	b9f44c1c 	brlid	r15, 19484	// 9001a0d4 <_free_r>
900154bc:	80000000 	or	r0, r0, r0
900154c0:	b800fb20 	bri	-1248		// 90014fe0
900154c4:	32400065 	addik	r18, r0, 101
900154c8:	165a9001 	cmp	r18, r26, r18
900154cc:	bcb20288 	bgei	r18, 648		// 90015754
900154d0:	e8a10684 	lwi	r5, r1, 1668
900154d4:	e8c10688 	lwi	r6, r1, 1672
900154d8:	10e00000 	addk	r7, r0, r0
900154dc:	11000000 	addk	r8, r0, r0
900154e0:	b0000000 	imm	0
900154e4:	b9f4a298 	brlid	r15, -23912	// 9001f77c <__eqdf2>
900154e8:	80000000 	or	r0, r0, r0
900154ec:	be2303fc 	bneid	r3, 1020		// 900158e8
900154f0:	30800001 	addik	r4, r0, 1
900154f4:	b0009002 	imm	-28670
900154f8:	306032c4 	addik	r3, r0, 12996
900154fc:	32f70001 	addik	r23, r23, 1
90015500:	32730001 	addik	r19, r19, 1
90015504:	f8780000 	swi	r3, r24, 0
90015508:	f8980004 	swi	r4, r24, 4
9001550c:	fae1005c 	swi	r23, r1, 92
90015510:	fa610058 	swi	r19, r1, 88
90015514:	32400007 	addik	r18, r0, 7
90015518:	16539001 	cmp	r18, r19, r18
9001551c:	beb20014 	bgeid	r18, 20		// 90015530
90015520:	30b80008 	addik	r5, r24, 8
90015524:	be3711d0 	bneid	r23, 4560		// 900166f4
90015528:	10bd0000 	addk	r5, r29, r0
9001552c:	fae10058 	swi	r23, r1, 88
90015530:	e8610038 	lwi	r3, r1, 56
90015534:	e8c10698 	lwi	r6, r1, 1688
90015538:	16461801 	cmp	r18, r6, r3
9001553c:	bc520010 	blti	r18, 16		// 9001554c
90015540:	e8e106b0 	lwi	r7, r1, 1712
90015544:	a4670001 	andi	r3, r7, 1
90015548:	bc03fe44 	beqi	r3, -444		// 9001538c
9001554c:	ea610058 	lwi	r19, r1, 88
90015550:	30600001 	addik	r3, r0, 1
90015554:	f8650004 	swi	r3, r5, 4
90015558:	e86106a4 	lwi	r3, r1, 1700
9001555c:	32f70001 	addik	r23, r23, 1
90015560:	32730001 	addik	r19, r19, 1
90015564:	f8650000 	swi	r3, r5, 0
90015568:	fae1005c 	swi	r23, r1, 92
9001556c:	fa610058 	swi	r19, r1, 88
90015570:	32400007 	addik	r18, r0, 7
90015574:	16539001 	cmp	r18, r19, r18
90015578:	beb20014 	bgeid	r18, 20		// 9001558c
9001557c:	30a50008 	addik	r5, r5, 8
90015580:	be370e34 	bneid	r23, 3636		// 900163b4
90015584:	10bd0000 	addk	r5, r29, r0
90015588:	fae10058 	swi	r23, r1, 88
9001558c:	e8810698 	lwi	r4, r1, 1688
90015590:	32c4ffff 	addik	r22, r4, -1
90015594:	bc76fdf8 	blei	r22, -520		// 9001538c
90015598:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
9001559c:	16569001 	cmp	r18, r22, r18
900155a0:	bcb206dc 	bgei	r18, 1756		// 90015c7c
900155a4:	ea610058 	lwi	r19, r1, 88
900155a8:	b0009002 	imm	-28670
900155ac:	33603438 	addik	r27, r0, 13368
900155b0:	b8100024 	brid	36		// 900155d4
900155b4:	32f70010 	addik	r23, r23, 16
900155b8:	10bd0000 	addk	r5, r29, r0
900155bc:	fae10058 	swi	r23, r1, 88
900155c0:	32d6fff0 	addik	r22, r22, -16
900155c4:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900155c8:	16569001 	cmp	r18, r22, r18
900155cc:	bcb206bc 	bgei	r18, 1724		// 90015c88
900155d0:	32f70010 	addik	r23, r23, 16
900155d4:	32730001 	addik	r19, r19, 1
900155d8:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
900155dc:	f8650004 	swi	r3, r5, 4
900155e0:	fb650000 	swi	r27, r5, 0
900155e4:	fae1005c 	swi	r23, r1, 92
900155e8:	fa610058 	swi	r19, r1, 88
900155ec:	32400007 	addik	r18, r0, 7
900155f0:	16539001 	cmp	r18, r19, r18
900155f4:	beb2ffcc 	bgeid	r18, -52		// 900155c0
900155f8:	30a50008 	addik	r5, r5, 8
900155fc:	be17ffbc 	beqid	r23, -68		// 900155b8
90015600:	12770000 	addk	r19, r23, r0
90015604:	10be0000 	addk	r5, r30, r0
90015608:	30c10054 	addik	r6, r1, 84
9001560c:	b9f44da0 	brlid	r15, 19872	// 9001a3ac <__sfvwrite>
90015610:	12e00000 	addk	r23, r0, r0
90015614:	fae1005c 	swi	r23, r1, 92
90015618:	fae10058 	swi	r23, r1, 88
9001561c:	be23010c 	bneid	r3, 268		// 90015728
90015620:	12770000 	addk	r19, r23, r0
90015624:	b810ff9c 	brid	-100		// 900155c0
90015628:	10bd0000 	addk	r5, r29, r0
9001562c:	e8c106a8 	lwi	r6, r1, 1704
90015630:	16dc3000 	rsubk	r22, r28, r6
90015634:	bc76fc30 	blei	r22, -976		// 90015264
90015638:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
9001563c:	16569001 	cmp	r18, r22, r18
90015640:	bcb212c4 	bgei	r18, 4804		// 90016904
90015644:	b0009002 	imm	-28670
90015648:	33603438 	addik	r27, r0, 13368
9001564c:	b8100024 	brid	36		// 90015670
90015650:	32f70010 	addik	r23, r23, 16
90015654:	131d0000 	addk	r24, r29, r0
90015658:	fae10058 	swi	r23, r1, 88
9001565c:	32d6fff0 	addik	r22, r22, -16
90015660:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015664:	16569001 	cmp	r18, r22, r18
90015668:	bcb2006c 	bgei	r18, 108		// 900156d4
9001566c:	32f70010 	addik	r23, r23, 16
90015670:	32730001 	addik	r19, r19, 1
90015674:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
90015678:	f8780004 	swi	r3, r24, 4
9001567c:	fb780000 	swi	r27, r24, 0
90015680:	fae1005c 	swi	r23, r1, 92
90015684:	fa610058 	swi	r19, r1, 88
90015688:	32400007 	addik	r18, r0, 7
9001568c:	16539001 	cmp	r18, r19, r18
90015690:	beb2ffcc 	bgeid	r18, -52		// 9001565c
90015694:	33180008 	addik	r24, r24, 8
90015698:	be17ffbc 	beqid	r23, -68		// 90015654
9001569c:	12770000 	addk	r19, r23, r0
900156a0:	10be0000 	addk	r5, r30, r0
900156a4:	30c10054 	addik	r6, r1, 84
900156a8:	b9f44d04 	brlid	r15, 19716	// 9001a3ac <__sfvwrite>
900156ac:	12e00000 	addk	r23, r0, r0
900156b0:	fae1005c 	swi	r23, r1, 92
900156b4:	fae10058 	swi	r23, r1, 88
900156b8:	be230070 	bneid	r3, 112		// 90015728
900156bc:	12770000 	addk	r19, r23, r0
900156c0:	32d6fff0 	addik	r22, r22, -16
900156c4:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900156c8:	16569001 	cmp	r18, r22, r18
900156cc:	be52ffa0 	bltid	r18, -96		// 9001566c
900156d0:	131d0000 	addk	r24, r29, r0
900156d4:	12f7b000 	addk	r23, r23, r22
900156d8:	32730001 	addik	r19, r19, 1
900156dc:	fb780000 	swi	r27, r24, 0
900156e0:	fad80004 	swi	r22, r24, 4
900156e4:	fae1005c 	swi	r23, r1, 92
900156e8:	fa610058 	swi	r19, r1, 88
900156ec:	32400007 	addik	r18, r0, 7
900156f0:	16539001 	cmp	r18, r19, r18
900156f4:	beb2fb70 	bgeid	r18, -1168		// 90015264
900156f8:	33180008 	addik	r24, r24, 8
900156fc:	be37077c 	bneid	r23, 1916		// 90015e78
90015700:	12770000 	addk	r19, r23, r0
90015704:	fae10058 	swi	r23, r1, 88
90015708:	b810fb5c 	brid	-1188		// 90015264
9001570c:	131d0000 	addk	r24, r29, r0
90015710:	30c10054 	addik	r6, r1, 84
90015714:	b9f44c98 	brlid	r15, 19608	// 9001a3ac <__sfvwrite>
90015718:	12e00000 	addk	r23, r0, r0
9001571c:	fae1005c 	swi	r23, r1, 92
90015720:	fae10058 	swi	r23, r1, 88
90015724:	bc03fd74 	beqi	r3, -652		// 90015498
90015728:	e8c1068c 	lwi	r6, r1, 1676
9001572c:	bc060010 	beqi	r6, 16		// 9001573c
90015730:	e8a106ec 	lwi	r5, r1, 1772
90015734:	b9f449a0 	brlid	r15, 18848	// 9001a0d4 <_free_r>
90015738:	80000000 	or	r0, r0, r0
9001573c:	e47e000c 	lhui	r3, r30, 12
90015740:	a4630040 	andi	r3, r3, 64
90015744:	be03f828 	beqid	r3, -2008		// 90014f6c
90015748:	30e0ffff 	addik	r7, r0, -1
9001574c:	f8e106ac 	swi	r7, r1, 1708
90015750:	b800f81c 	bri	-2020		// 90014f6c
90015754:	e8c10698 	lwi	r6, r1, 1688
90015758:	32400001 	addik	r18, r0, 1
9001575c:	16469001 	cmp	r18, r6, r18
90015760:	bcb2057c 	bgei	r18, 1404		// 90015cdc
90015764:	e86106b4 	lwi	r3, r1, 1716
90015768:	32f70002 	addik	r23, r23, 2
9001576c:	32730001 	addik	r19, r19, 1
90015770:	e0830000 	lbui	r4, r3, 0
90015774:	3060002e 	addik	r3, r0, 46
90015778:	f0610029 	sbi	r3, r1, 41
9001577c:	f0810028 	sbi	r4, r1, 40
90015780:	30610028 	addik	r3, r1, 40
90015784:	30800002 	addik	r4, r0, 2
90015788:	f8780000 	swi	r3, r24, 0
9001578c:	f8980004 	swi	r4, r24, 4
90015790:	fae1005c 	swi	r23, r1, 92
90015794:	fa610058 	swi	r19, r1, 88
90015798:	32400007 	addik	r18, r0, 7
9001579c:	16539001 	cmp	r18, r19, r18
900157a0:	beb20018 	bgeid	r18, 24		// 900157b8
900157a4:	32d80008 	addik	r22, r24, 8
900157a8:	be3706f8 	bneid	r23, 1784		// 90015ea0
900157ac:	12770000 	addk	r19, r23, r0
900157b0:	12dd0000 	addk	r22, r29, r0
900157b4:	fae10058 	swi	r23, r1, 88
900157b8:	e8a10684 	lwi	r5, r1, 1668
900157bc:	e8c10688 	lwi	r6, r1, 1672
900157c0:	10e00000 	addk	r7, r0, r0
900157c4:	11000000 	addk	r8, r0, r0
900157c8:	b0000000 	imm	0
900157cc:	b9f4a064 	brlid	r15, -24476	// 9001f830 <__nedf2>
900157d0:	80000000 	or	r0, r0, r0
900157d4:	bc230204 	bnei	r3, 516		// 900159d8
900157d8:	e8e10698 	lwi	r7, r1, 1688
900157dc:	3307ffff 	addik	r24, r7, -1
900157e0:	bc780248 	blei	r24, 584		// 90015a28
900157e4:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900157e8:	16589001 	cmp	r18, r24, r18
900157ec:	bcb214b8 	bgei	r18, 5304		// 90016ca4
900157f0:	b0009002 	imm	-28670
900157f4:	33603438 	addik	r27, r0, 13368
900157f8:	b8100024 	brid	36		// 9001581c
900157fc:	32f70010 	addik	r23, r23, 16
90015800:	12dd0000 	addk	r22, r29, r0
90015804:	fae10058 	swi	r23, r1, 88
90015808:	3318fff0 	addik	r24, r24, -16
9001580c:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015810:	16589001 	cmp	r18, r24, r18
90015814:	bcb2006c 	bgei	r18, 108		// 90015880
90015818:	32f70010 	addik	r23, r23, 16
9001581c:	32730001 	addik	r19, r19, 1
90015820:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
90015824:	f8760004 	swi	r3, r22, 4
90015828:	fb760000 	swi	r27, r22, 0
9001582c:	fae1005c 	swi	r23, r1, 92
90015830:	fa610058 	swi	r19, r1, 88
90015834:	32400007 	addik	r18, r0, 7
90015838:	16539001 	cmp	r18, r19, r18
9001583c:	beb2ffcc 	bgeid	r18, -52		// 90015808
90015840:	32d60008 	addik	r22, r22, 8
90015844:	be17ffbc 	beqid	r23, -68		// 90015800
90015848:	12770000 	addk	r19, r23, r0
9001584c:	10be0000 	addk	r5, r30, r0
90015850:	30c10054 	addik	r6, r1, 84
90015854:	b9f44b58 	brlid	r15, 19288	// 9001a3ac <__sfvwrite>
90015858:	12e00000 	addk	r23, r0, r0
9001585c:	fae1005c 	swi	r23, r1, 92
90015860:	fae10058 	swi	r23, r1, 88
90015864:	be23fec4 	bneid	r3, -316		// 90015728
90015868:	12770000 	addk	r19, r23, r0
9001586c:	3318fff0 	addik	r24, r24, -16
90015870:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015874:	16589001 	cmp	r18, r24, r18
90015878:	be52ffa0 	bltid	r18, -96		// 90015818
9001587c:	12dd0000 	addk	r22, r29, r0
90015880:	12f7c000 	addk	r23, r23, r24
90015884:	32730001 	addik	r19, r19, 1
90015888:	fb760000 	swi	r27, r22, 0
9001588c:	fb160004 	swi	r24, r22, 4
90015890:	fae1005c 	swi	r23, r1, 92
90015894:	fa610058 	swi	r19, r1, 88
90015898:	32400007 	addik	r18, r0, 7
9001589c:	16539001 	cmp	r18, r19, r18
900158a0:	beb20188 	bgeid	r18, 392		// 90015a28
900158a4:	32d60008 	addik	r22, r22, 8
900158a8:	b8000170 	bri	368		// 90015a18
900158ac:	e8a106ec 	lwi	r5, r1, 1772
900158b0:	b9f441b4 	brlid	r15, 16820	// 90019a64 <__sinit>
900158b4:	80000000 	or	r0, r0, r0
900158b8:	b0009002 	imm	-28670
900158bc:	aa5e34a4 	xori	r18, r30, 13476
900158c0:	bc32f5dc 	bnei	r18, -2596		// 90014e9c
900158c4:	b0009002 	imm	-28670
900158c8:	e8603b60 	lwi	r3, r0, 15200
900158cc:	ebc30000 	lwi	r30, r3, 0
900158d0:	b800f5e4 	bri	-2588		// 90014eb4
900158d4:	b9f42310 	brlid	r15, 8976	// 90017be4 <__swsetup>
900158d8:	10be0000 	addk	r5, r30, r0
900158dc:	be03f5ec 	beqid	r3, -2580		// 90014ec8
900158e0:	30e0ffff 	addik	r7, r0, -1
900158e4:	b800fe68 	bri	-408		// 9001574c
900158e8:	e9210038 	lwi	r9, r1, 56
900158ec:	bc690c68 	blei	r9, 3176		// 90016554
900158f0:	e8c10698 	lwi	r6, r1, 1688
900158f4:	16464801 	cmp	r18, r6, r9
900158f8:	bc520424 	blti	r18, 1060		// 90015d1c
900158fc:	e8e106b4 	lwi	r7, r1, 1716
90015900:	12f73000 	addk	r23, r23, r6
90015904:	32730001 	addik	r19, r19, 1
90015908:	f8f80000 	swi	r7, r24, 0
9001590c:	f8d80004 	swi	r6, r24, 4
90015910:	fae1005c 	swi	r23, r1, 92
90015914:	fa610058 	swi	r19, r1, 88
90015918:	32400007 	addik	r18, r0, 7
9001591c:	16539001 	cmp	r18, r19, r18
90015920:	be520a84 	bltid	r18, 2692		// 900163a4
90015924:	30b80008 	addik	r5, r24, 8
90015928:	e8610698 	lwi	r3, r1, 1688
9001592c:	16c34800 	rsubk	r22, r3, r9
90015930:	bc7604cc 	blei	r22, 1228		// 90015dfc
90015934:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015938:	16569001 	cmp	r18, r22, r18
9001593c:	bcb2058c 	bgei	r18, 1420		// 90015ec8
90015940:	ea610058 	lwi	r19, r1, 88
90015944:	b0009002 	imm	-28670
90015948:	33603438 	addik	r27, r0, 13368
9001594c:	b8100024 	brid	36		// 90015970
90015950:	32f70010 	addik	r23, r23, 16
90015954:	10bd0000 	addk	r5, r29, r0
90015958:	fae10058 	swi	r23, r1, 88
9001595c:	32d6fff0 	addik	r22, r22, -16
90015960:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90015964:	16569001 	cmp	r18, r22, r18
90015968:	bcb2056c 	bgei	r18, 1388		// 90015ed4
9001596c:	32f70010 	addik	r23, r23, 16
90015970:	32730001 	addik	r19, r19, 1
90015974:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
90015978:	f8650004 	swi	r3, r5, 4
9001597c:	fb650000 	swi	r27, r5, 0
90015980:	fae1005c 	swi	r23, r1, 92
90015984:	fa610058 	swi	r19, r1, 88
90015988:	32400007 	addik	r18, r0, 7
9001598c:	16539001 	cmp	r18, r19, r18
90015990:	beb2ffcc 	bgeid	r18, -52		// 9001595c
90015994:	30a50008 	addik	r5, r5, 8
90015998:	be17ffbc 	beqid	r23, -68		// 90015954
9001599c:	12770000 	addk	r19, r23, r0
900159a0:	10be0000 	addk	r5, r30, r0
900159a4:	30c10054 	addik	r6, r1, 84
900159a8:	b9f44a04 	brlid	r15, 18948	// 9001a3ac <__sfvwrite>
900159ac:	12e00000 	addk	r23, r0, r0
900159b0:	fae1005c 	swi	r23, r1, 92
900159b4:	fae10058 	swi	r23, r1, 88
900159b8:	be23fd70 	bneid	r3, -656		// 90015728
900159bc:	12770000 	addk	r19, r23, r0
900159c0:	b810ff9c 	brid	-100		// 9001595c
900159c4:	10bd0000 	addk	r5, r29, r0
900159c8:	be37048c 	bneid	r23, 1164		// 90015e54
900159cc:	131d0000 	addk	r24, r29, r0
900159d0:	fae10058 	swi	r23, r1, 88
900159d4:	b800f674 	bri	-2444		// 90015048
900159d8:	e8810698 	lwi	r4, r1, 1688
900159dc:	e8a106b4 	lwi	r5, r1, 1716
900159e0:	e8c10698 	lwi	r6, r1, 1688
900159e4:	1064b800 	addk	r3, r4, r23
900159e8:	32e3ffff 	addik	r23, r3, -1
900159ec:	30850001 	addik	r4, r5, 1
900159f0:	32730001 	addik	r19, r19, 1
900159f4:	3066ffff 	addik	r3, r6, -1
900159f8:	f8960000 	swi	r4, r22, 0
900159fc:	f8760004 	swi	r3, r22, 4
90015a00:	fae1005c 	swi	r23, r1, 92
90015a04:	fa610058 	swi	r19, r1, 88
90015a08:	32400007 	addik	r18, r0, 7
90015a0c:	16539001 	cmp	r18, r19, r18
90015a10:	beb20018 	bgeid	r18, 24		// 90015a28
90015a14:	32d60008 	addik	r22, r22, 8
90015a18:	be3704f4 	bneid	r23, 1268		// 90015f0c
90015a1c:	12770000 	addk	r19, r23, r0
90015a20:	12dd0000 	addk	r22, r29, r0
90015a24:	fae10058 	swi	r23, r1, 88
90015a28:	e881069c 	lwi	r4, r1, 1692
90015a2c:	32730001 	addik	r19, r19, 1
90015a30:	3061003c 	addik	r3, r1, 60
90015a34:	12f72000 	addk	r23, r23, r4
90015a38:	f8760000 	swi	r3, r22, 0
90015a3c:	f8960004 	swi	r4, r22, 4
90015a40:	fae1005c 	swi	r23, r1, 92
90015a44:	fa610058 	swi	r19, r1, 88
90015a48:	32400007 	addik	r18, r0, 7
90015a4c:	16539001 	cmp	r18, r19, r18
90015a50:	beb2f93c 	bgeid	r18, -1732		// 9001538c
90015a54:	30b60008 	addik	r5, r22, 8
90015a58:	be17f930 	beqid	r23, -1744		// 90015388
90015a5c:	10bd0000 	addk	r5, r29, r0
90015a60:	10be0000 	addk	r5, r30, r0
90015a64:	30c10054 	addik	r6, r1, 84
90015a68:	b9f44944 	brlid	r15, 18756	// 9001a3ac <__sfvwrite>
90015a6c:	12e00000 	addk	r23, r0, r0
90015a70:	fae1005c 	swi	r23, r1, 92
90015a74:	fae10058 	swi	r23, r1, 88
90015a78:	be23fcb0 	bneid	r3, -848		// 90015728
90015a7c:	10bd0000 	addk	r5, r29, r0
90015a80:	b800f90c 	bri	-1780		// 9001538c
90015a84:	f88106ac 	swi	r4, r1, 1708
90015a88:	b800f4cc 	bri	-2868		// 90014f54
90015a8c:	30c10054 	addik	r6, r1, 84
90015a90:	b9f4491c 	brlid	r15, 18716	// 9001a3ac <__sfvwrite>
90015a94:	12e00000 	addk	r23, r0, r0
90015a98:	fae1005c 	swi	r23, r1, 92
90015a9c:	fae10058 	swi	r23, r1, 88
90015aa0:	bc03f9d4 	beqi	r3, -1580		// 90015474
90015aa4:	b800fc84 	bri	-892		// 90015728
90015aa8:	e8c106b0 	lwi	r6, r1, 1712
90015aac:	a0c60010 	ori	r6, r6, 16
90015ab0:	f8c106b0 	swi	r6, r1, 1712
90015ab4:	e8e106b0 	lwi	r7, r1, 1712
90015ab8:	a4670020 	andi	r3, r7, 32
90015abc:	be0304bc 	beqid	r3, 1212		// 90015f78
90015ac0:	a4670010 	andi	r3, r7, 16
90015ac4:	e86106f8 	lwi	r3, r1, 1784
90015ac8:	eac30000 	lwi	r22, r3, 0
90015acc:	eae30004 	lwi	r23, r3, 4
90015ad0:	30630008 	addik	r3, r3, 8
90015ad4:	f86106f8 	swi	r3, r1, 1784
90015ad8:	beb6009c 	bgeid	r22, 156		// 90015b74
90015adc:	30800001 	addik	r4, r0, 1
90015ae0:	06f70000 	rsub	r23, r23, r0
90015ae4:	0ed60000 	rsubc	r22, r22, r0
90015ae8:	3060002d 	addik	r3, r0, 45
90015aec:	f0610024 	sbi	r3, r1, 36
90015af0:	b8000084 	bri	132		// 90015b74
90015af4:	e8e106b0 	lwi	r7, r1, 1712
90015af8:	a0e70010 	ori	r7, r7, 16
90015afc:	f8e106b0 	swi	r7, r1, 1712
90015b00:	e88106b0 	lwi	r4, r1, 1712
90015b04:	a4640020 	andi	r3, r4, 32
90015b08:	be230454 	bneid	r3, 1108		// 90015f5c
90015b0c:	10c40000 	addk	r6, r4, r0
90015b10:	a4840010 	andi	r4, r4, 16
90015b14:	bc240bc0 	bnei	r4, 3008		// 900166d4
90015b18:	a4660040 	andi	r3, r6, 64
90015b1c:	bc030bb8 	beqi	r3, 3000		// 900166d4
90015b20:	e8c106f8 	lwi	r6, r1, 1784
90015b24:	e6e60002 	lhui	r23, r6, 2
90015b28:	30c60004 	addik	r6, r6, 4
90015b2c:	f8c106f8 	swi	r6, r1, 1784
90015b30:	32f70000 	addik	r23, r23, 0
90015b34:	32c00000 	addik	r22, r0, 0
90015b38:	b8000038 	bri	56		// 90015b70
90015b3c:	e88106b0 	lwi	r4, r1, 1712
90015b40:	a0840010 	ori	r4, r4, 16
90015b44:	f88106b0 	swi	r4, r1, 1712
90015b48:	e8a106b0 	lwi	r5, r1, 1712
90015b4c:	a4650020 	andi	r3, r5, 32
90015b50:	be0303e4 	beqid	r3, 996		// 90015f34
90015b54:	a4650010 	andi	r3, r5, 16
90015b58:	e8c106f8 	lwi	r6, r1, 1784
90015b5c:	30800001 	addik	r4, r0, 1
90015b60:	eac60000 	lwi	r22, r6, 0
90015b64:	eae60004 	lwi	r23, r6, 4
90015b68:	30c60008 	addik	r6, r6, 8
90015b6c:	f8c106f8 	swi	r6, r1, 1784
90015b70:	f0010024 	sbi	r0, r1, 36
90015b74:	be5b0864 	bltid	r27, 2148		// 900163d8
90015b78:	8076b800 	or	r3, r22, r23
90015b7c:	e8a106b0 	lwi	r5, r1, 1712
90015b80:	a4a5ff7f 	andi	r5, r5, -129
90015b84:	f8a106b0 	swi	r5, r1, 1712
90015b88:	bc230850 	bnei	r3, 2128		// 900163d8
90015b8c:	be3b084c 	bneid	r27, 2124		// 900163d8
90015b90:	30c10280 	addik	r6, r1, 640
90015b94:	f8c106b4 	swi	r6, r1, 1716
90015b98:	bc240020 	bnei	r4, 32		// 90015bb8
90015b9c:	e8e106b0 	lwi	r7, r1, 1712
90015ba0:	a4670001 	andi	r3, r7, 1
90015ba4:	be030014 	beqid	r3, 20		// 90015bb8
90015ba8:	30600030 	addik	r3, r0, 48
90015bac:	30a1027f 	addik	r5, r1, 639
90015bb0:	f061027f 	sbi	r3, r1, 639
90015bb4:	f8a106b4 	swi	r5, r1, 1716
90015bb8:	e8c106b4 	lwi	r6, r1, 1716
90015bbc:	14660800 	rsubk	r3, r6, r1
90015bc0:	33230280 	addik	r25, r3, 640
90015bc4:	1659d801 	cmp	r18, r25, r27
90015bc8:	beb2000c 	bgeid	r18, 12		// 90015bd4
90015bcc:	139b0000 	addk	r28, r27, r0
90015bd0:	13990000 	addk	r28, r25, r0
90015bd4:	fb610694 	swi	r27, r1, 1684
90015bd8:	e0610024 	lbui	r3, r1, 36
90015bdc:	bc03f4ec 	beqi	r3, -2836		// 900150c8
90015be0:	b810f4f8 	brid	-2824		// 900150d8
90015be4:	339c0001 	addik	r28, r28, 1
90015be8:	14a50000 	rsubk	r5, r5, r0
90015bec:	f86106f8 	swi	r3, r1, 1784
90015bf0:	f8a106a8 	swi	r5, r1, 1704
90015bf4:	e8e106b0 	lwi	r7, r1, 1712
90015bf8:	e07f0000 	lbui	r3, r31, 0
90015bfc:	a0e70004 	ori	r7, r7, 4
90015c00:	f8e106b0 	swi	r7, r1, 1712
90015c04:	b810f47c 	brid	-2948		// 90015080
90015c08:	93430060 	sext8	r26, r3
90015c0c:	10be0000 	addk	r5, r30, r0
90015c10:	30c10054 	addik	r6, r1, 84
90015c14:	b9f44798 	brlid	r15, 18328	// 9001a3ac <__sfvwrite>
90015c18:	12e00000 	addk	r23, r0, r0
90015c1c:	fae1005c 	swi	r23, r1, 92
90015c20:	fae10058 	swi	r23, r1, 88
90015c24:	be23fb04 	bneid	r3, -1276		// 90015728
90015c28:	12770000 	addk	r19, r23, r0
90015c2c:	b810f62c 	brid	-2516		// 90015258
90015c30:	131d0000 	addk	r24, r29, r0
90015c34:	10be0000 	addk	r5, r30, r0
90015c38:	30c10054 	addik	r6, r1, 84
90015c3c:	b9f44770 	brlid	r15, 18288	// 9001a3ac <__sfvwrite>
90015c40:	12e00000 	addk	r23, r0, r0
90015c44:	fae1005c 	swi	r23, r1, 92
90015c48:	fae10058 	swi	r23, r1, 88
90015c4c:	be23fadc 	bneid	r3, -1316		// 90015728
90015c50:	12770000 	addk	r19, r23, r0
90015c54:	b810f6f0 	brid	-2320		// 90015344
90015c58:	131d0000 	addk	r24, r29, r0
90015c5c:	b0009002 	imm	-28670
90015c60:	e8603b60 	lwi	r3, r0, 15200
90015c64:	ebc30004 	lwi	r30, r3, 4
90015c68:	b800f24c 	bri	-3508		// 90014eb4
90015c6c:	b0009002 	imm	-28670
90015c70:	e8603b60 	lwi	r3, r0, 15200
90015c74:	ebc30008 	lwi	r30, r3, 8
90015c78:	b800f23c 	bri	-3524		// 90014eb4
90015c7c:	ea610058 	lwi	r19, r1, 88
90015c80:	b0009002 	imm	-28670
90015c84:	33603438 	addik	r27, r0, 13368
90015c88:	12f7b000 	addk	r23, r23, r22
90015c8c:	32730001 	addik	r19, r19, 1
90015c90:	fb650000 	swi	r27, r5, 0
90015c94:	fac50004 	swi	r22, r5, 4
90015c98:	fae1005c 	swi	r23, r1, 92
90015c9c:	fa610058 	swi	r19, r1, 88
90015ca0:	32400007 	addik	r18, r0, 7
90015ca4:	16539001 	cmp	r18, r19, r18
90015ca8:	beb2f6e4 	bgeid	r18, -2332		// 9001538c
90015cac:	30a50008 	addik	r5, r5, 8
90015cb0:	b800f6cc 	bri	-2356		// 9001537c
90015cb4:	10be0000 	addk	r5, r30, r0
90015cb8:	30c10054 	addik	r6, r1, 84
90015cbc:	b9f446f0 	brlid	r15, 18160	// 9001a3ac <__sfvwrite>
90015cc0:	12e00000 	addk	r23, r0, r0
90015cc4:	fae1005c 	swi	r23, r1, 92
90015cc8:	fae10058 	swi	r23, r1, 88
90015ccc:	be23fa5c 	bneid	r3, -1444		// 90015728
90015cd0:	12770000 	addk	r19, r23, r0
90015cd4:	b810f53c 	brid	-2756		// 90015210
90015cd8:	131d0000 	addk	r24, r29, r0
90015cdc:	e8e106b0 	lwi	r7, r1, 1712
90015ce0:	a4670001 	andi	r3, r7, 1
90015ce4:	bc23fa80 	bnei	r3, -1408		// 90015764
90015ce8:	e86106b4 	lwi	r3, r1, 1716
90015cec:	32f70001 	addik	r23, r23, 1
90015cf0:	32730001 	addik	r19, r19, 1
90015cf4:	f8780000 	swi	r3, r24, 0
90015cf8:	30600001 	addik	r3, r0, 1
90015cfc:	f8780004 	swi	r3, r24, 4
90015d00:	fae1005c 	swi	r23, r1, 92
90015d04:	fa610058 	swi	r19, r1, 88
90015d08:	32400007 	addik	r18, r0, 7
90015d0c:	16539001 	cmp	r18, r19, r18
90015d10:	beb2fd18 	bgeid	r18, -744		// 90015a28
90015d14:	32d80008 	addik	r22, r24, 8
90015d18:	b800fd00 	bri	-768		// 90015a18
90015d1c:	e8a106b4 	lwi	r5, r1, 1716
90015d20:	12f74800 	addk	r23, r23, r9
90015d24:	32730001 	addik	r19, r19, 1
90015d28:	f8b80000 	swi	r5, r24, 0
90015d2c:	f9380004 	swi	r9, r24, 4
90015d30:	fae1005c 	swi	r23, r1, 92
90015d34:	fa610058 	swi	r19, r1, 88
90015d38:	32400007 	addik	r18, r0, 7
90015d3c:	16539001 	cmp	r18, r19, r18
90015d40:	beb20018 	bgeid	r18, 24		// 90015d58
90015d44:	30b80008 	addik	r5, r24, 8
90015d48:	be370d14 	bneid	r23, 3348		// 90016a5c
90015d4c:	12770000 	addk	r19, r23, r0
90015d50:	10bd0000 	addk	r5, r29, r0
90015d54:	fae10058 	swi	r23, r1, 88
90015d58:	b0009002 	imm	-28670
90015d5c:	306032c8 	addik	r3, r0, 13000
90015d60:	32f70001 	addik	r23, r23, 1
90015d64:	32730001 	addik	r19, r19, 1
90015d68:	30800001 	addik	r4, r0, 1
90015d6c:	f8650000 	swi	r3, r5, 0
90015d70:	f8850004 	swi	r4, r5, 4
90015d74:	fae1005c 	swi	r23, r1, 92
90015d78:	fa610058 	swi	r19, r1, 88
90015d7c:	30e50008 	addik	r7, r5, 8
90015d80:	32400007 	addik	r18, r0, 7
90015d84:	16539001 	cmp	r18, r19, r18
90015d88:	beb20018 	bgeid	r18, 24		// 90015da0
90015d8c:	12c90000 	addk	r22, r9, r0
90015d90:	be370c64 	bneid	r23, 3172		// 900169f4
90015d94:	12770000 	addk	r19, r23, r0
90015d98:	10fd0000 	addk	r7, r29, r0
90015d9c:	fae10058 	swi	r23, r1, 88
90015da0:	e8c10698 	lwi	r6, r1, 1688
90015da4:	e8a106b4 	lwi	r5, r1, 1716
90015da8:	32730001 	addik	r19, r19, 1
90015dac:	14893000 	rsubk	r4, r9, r6
90015db0:	10762800 	addk	r3, r22, r5
90015db4:	12f72000 	addk	r23, r23, r4
90015db8:	f8670000 	swi	r3, r7, 0
90015dbc:	f8870004 	swi	r4, r7, 4
90015dc0:	fae1005c 	swi	r23, r1, 92
90015dc4:	fa610058 	swi	r19, r1, 88
90015dc8:	32400007 	addik	r18, r0, 7
90015dcc:	16539001 	cmp	r18, r19, r18
90015dd0:	beb2f5bc 	bgeid	r18, -2628		// 9001538c
90015dd4:	30a70008 	addik	r5, r7, 8
90015dd8:	b800f5a4 	bri	-2652		// 9001537c
90015ddc:	10be0000 	addk	r5, r30, r0
90015de0:	30c10054 	addik	r6, r1, 84
90015de4:	b9f445c8 	brlid	r15, 17864	// 9001a3ac <__sfvwrite>
90015de8:	12e00000 	addk	r23, r0, r0
90015dec:	fae1005c 	swi	r23, r1, 92
90015df0:	fae10058 	swi	r23, r1, 88
90015df4:	be23f934 	bneid	r3, -1740		// 90015728
90015df8:	10bd0000 	addk	r5, r29, r0
90015dfc:	e88106b0 	lwi	r4, r1, 1712
90015e00:	a4640001 	andi	r3, r4, 1
90015e04:	be03f588 	beqid	r3, -2680		// 9001538c
90015e08:	30800001 	addik	r4, r0, 1
90015e0c:	ea610058 	lwi	r19, r1, 88
90015e10:	b0009002 	imm	-28670
90015e14:	306032c8 	addik	r3, r0, 13000
90015e18:	32f70001 	addik	r23, r23, 1
90015e1c:	32730001 	addik	r19, r19, 1
90015e20:	f8650000 	swi	r3, r5, 0
90015e24:	f8850004 	swi	r4, r5, 4
90015e28:	fae1005c 	swi	r23, r1, 92
90015e2c:	fa610058 	swi	r19, r1, 88
90015e30:	32400007 	addik	r18, r0, 7
90015e34:	16539001 	cmp	r18, r19, r18
90015e38:	beb2f554 	bgeid	r18, -2732		// 9001538c
90015e3c:	30a50008 	addik	r5, r5, 8
90015e40:	b800f53c 	bri	-2756		// 9001537c
90015e44:	b0009002 	imm	-28670
90015e48:	33603438 	addik	r27, r0, 13368
90015e4c:	b810f4c4 	brid	-2876		// 90015310
90015e50:	12f7b000 	addk	r23, r23, r22
90015e54:	10be0000 	addk	r5, r30, r0
90015e58:	30c10054 	addik	r6, r1, 84
90015e5c:	b9f44550 	brlid	r15, 17744	// 9001a3ac <__sfvwrite>
90015e60:	12e00000 	addk	r23, r0, r0
90015e64:	fae1005c 	swi	r23, r1, 92
90015e68:	fae10058 	swi	r23, r1, 88
90015e6c:	be23f8d0 	bneid	r3, -1840		// 9001573c
90015e70:	131d0000 	addk	r24, r29, r0
90015e74:	b800f1d4 	bri	-3628		// 90015048
90015e78:	10be0000 	addk	r5, r30, r0
90015e7c:	30c10054 	addik	r6, r1, 84
90015e80:	b9f4452c 	brlid	r15, 17708	// 9001a3ac <__sfvwrite>
90015e84:	12e00000 	addk	r23, r0, r0
90015e88:	fae1005c 	swi	r23, r1, 92
90015e8c:	fae10058 	swi	r23, r1, 88
90015e90:	be23f898 	bneid	r3, -1896		// 90015728
90015e94:	12770000 	addk	r19, r23, r0
90015e98:	b810f3cc 	brid	-3124		// 90015264
90015e9c:	131d0000 	addk	r24, r29, r0
90015ea0:	10be0000 	addk	r5, r30, r0
90015ea4:	30c10054 	addik	r6, r1, 84
90015ea8:	b9f44504 	brlid	r15, 17668	// 9001a3ac <__sfvwrite>
90015eac:	12e00000 	addk	r23, r0, r0
90015eb0:	fae1005c 	swi	r23, r1, 92
90015eb4:	fae10058 	swi	r23, r1, 88
90015eb8:	be23f870 	bneid	r3, -1936		// 90015728
90015ebc:	12770000 	addk	r19, r23, r0
90015ec0:	b810f8f8 	brid	-1800		// 900157b8
90015ec4:	12dd0000 	addk	r22, r29, r0
90015ec8:	ea610058 	lwi	r19, r1, 88
90015ecc:	b0009002 	imm	-28670
90015ed0:	33603438 	addik	r27, r0, 13368
90015ed4:	12f7b000 	addk	r23, r23, r22
90015ed8:	32730001 	addik	r19, r19, 1
90015edc:	fb650000 	swi	r27, r5, 0
90015ee0:	fac50004 	swi	r22, r5, 4
90015ee4:	fae1005c 	swi	r23, r1, 92
90015ee8:	fa610058 	swi	r19, r1, 88
90015eec:	32400007 	addik	r18, r0, 7
90015ef0:	16539001 	cmp	r18, r19, r18
90015ef4:	beb2ff08 	bgeid	r18, -248		// 90015dfc
90015ef8:	30a50008 	addik	r5, r5, 8
90015efc:	be37fee0 	bneid	r23, -288		// 90015ddc
90015f00:	10bd0000 	addk	r5, r29, r0
90015f04:	fae10058 	swi	r23, r1, 88
90015f08:	b800fef4 	bri	-268		// 90015dfc
90015f0c:	10be0000 	addk	r5, r30, r0
90015f10:	30c10054 	addik	r6, r1, 84
90015f14:	b9f44498 	brlid	r15, 17560	// 9001a3ac <__sfvwrite>
90015f18:	12e00000 	addk	r23, r0, r0
90015f1c:	fae1005c 	swi	r23, r1, 92
90015f20:	fae10058 	swi	r23, r1, 88
90015f24:	be23f804 	bneid	r3, -2044		// 90015728
90015f28:	12770000 	addk	r19, r23, r0
90015f2c:	b810fafc 	brid	-1284		// 90015a28
90015f30:	12dd0000 	addk	r22, r29, r0
90015f34:	be0308fc 	beqid	r3, 2300		// 90016830
90015f38:	a4650040 	andi	r3, r5, 64
90015f3c:	e86106f8 	lwi	r3, r1, 1784
90015f40:	eac30000 	lwi	r22, r3, 0
90015f44:	12e0b000 	addk	r23, r0, r22
90015f48:	12c00000 	addk	r22, r0, r0
90015f4c:	30630004 	addik	r3, r3, 4
90015f50:	f86106f8 	swi	r3, r1, 1784
90015f54:	b810fc1c 	brid	-996		// 90015b70
90015f58:	30800001 	addik	r4, r0, 1
90015f5c:	e8a106f8 	lwi	r5, r1, 1784
90015f60:	eac50000 	lwi	r22, r5, 0
90015f64:	eae50004 	lwi	r23, r5, 4
90015f68:	30a50008 	addik	r5, r5, 8
90015f6c:	f8a106f8 	swi	r5, r1, 1784
90015f70:	b810fc00 	brid	-1024		// 90015b70
90015f74:	10800000 	addk	r4, r0, r0
90015f78:	be0308dc 	beqid	r3, 2268		// 90016854
90015f7c:	a4670040 	andi	r3, r7, 64
90015f80:	e8a106f8 	lwi	r5, r1, 1784
90015f84:	eac50000 	lwi	r22, r5, 0
90015f88:	02e0b000 	add	r23, r0, r22
90015f8c:	02d7b800 	add	r22, r23, r23
90015f90:	0ac00000 	addc	r22, r0, r0
90015f94:	bc160008 	beqi	r22, 8		// 90015f9c
90015f98:	22c0ffff 	addi	r22, r0, -1
90015f9c:	30a50004 	addik	r5, r5, 4
90015fa0:	f8a106f8 	swi	r5, r1, 1784
90015fa4:	b800fb34 	bri	-1228		// 90015ad8
90015fa8:	e8c106b0 	lwi	r6, r1, 1712
90015fac:	e07f0000 	lbui	r3, r31, 0
90015fb0:	a0c60040 	ori	r6, r6, 64
90015fb4:	f8c106b0 	swi	r6, r1, 1712
90015fb8:	b810f0c8 	brid	-3896		// 90015080
90015fbc:	93430060 	sext8	r26, r3
90015fc0:	e8a106b0 	lwi	r5, r1, 1712
90015fc4:	e07f0000 	lbui	r3, r31, 0
90015fc8:	a0a50008 	ori	r5, r5, 8
90015fcc:	f8a106b0 	swi	r5, r1, 1712
90015fd0:	b810f0b0 	brid	-3920		// 90015080
90015fd4:	93430060 	sext8	r26, r3
90015fd8:	e8a106b0 	lwi	r5, r1, 1712
90015fdc:	e88106f8 	lwi	r4, r1, 1784
90015fe0:	a4650020 	andi	r3, r5, 32
90015fe4:	be030800 	beqid	r3, 2048		// 900167e4
90015fe8:	a4650010 	andi	r3, r5, 16
90015fec:	e8640000 	lwi	r3, r4, 0
90015ff0:	30c40004 	addik	r6, r4, 4
90015ff4:	f8c106f8 	swi	r6, r1, 1784
90015ff8:	e88106ac 	lwi	r4, r1, 1708
90015ffc:	00a02000 	add	r5, r0, r4
90016000:	00852800 	add	r4, r5, r5
90016004:	08800000 	addc	r4, r0, r0
90016008:	bc040008 	beqi	r4, 8		// 90016010
9001600c:	2080ffff 	addi	r4, r0, -1
90016010:	f8830000 	swi	r4, r3, 0
90016014:	f8a30004 	swi	r5, r3, 4
90016018:	b800efc8 	bri	-4152		// 90014fe0
9001601c:	e07f0000 	lbui	r3, r31, 0
90016020:	aa43006c 	xori	r18, r3, 108
90016024:	bc120964 	beqi	r18, 2404		// 90016988
90016028:	e88106b0 	lwi	r4, r1, 1712
9001602c:	a0840010 	ori	r4, r4, 16
90016030:	f88106b0 	swi	r4, r1, 1712
90016034:	b810f04c 	brid	-4020		// 90015080
90016038:	93430060 	sext8	r26, r3
9001603c:	e8a106f8 	lwi	r5, r1, 1784
90016040:	e8c106f8 	lwi	r6, r1, 1784
90016044:	e8a50000 	lwi	r5, r5, 0
90016048:	f8a106a8 	swi	r5, r1, 1704
9001604c:	be45fb9c 	bltid	r5, -1124		// 90015be8
90016050:	30660004 	addik	r3, r6, 4
90016054:	f86106f8 	swi	r3, r1, 1784
90016058:	e07f0000 	lbui	r3, r31, 0
9001605c:	b810f024 	brid	-4060		// 90015080
90016060:	93430060 	sext8	r26, r3
90016064:	3060002b 	addik	r3, r0, 43
90016068:	f0610024 	sbi	r3, r1, 36
9001606c:	e07f0000 	lbui	r3, r31, 0
90016070:	b810f010 	brid	-4080		// 90015080
90016074:	93430060 	sext8	r26, r3
90016078:	e88106b0 	lwi	r4, r1, 1712
9001607c:	e07f0000 	lbui	r3, r31, 0
90016080:	a0840001 	ori	r4, r4, 1
90016084:	f88106b0 	swi	r4, r1, 1712
90016088:	b810eff8 	brid	-4104		// 90015080
9001608c:	93430060 	sext8	r26, r3
90016090:	e0610024 	lbui	r3, r1, 36
90016094:	be230770 	bneid	r3, 1904		// 90016804
90016098:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
9001609c:	f0610024 	sbi	r3, r1, 36
900160a0:	e07f0000 	lbui	r3, r31, 0
900160a4:	b810efdc 	brid	-4132		// 90015080
900160a8:	93430060 	sext8	r26, r3
900160ac:	10c00000 	addk	r6, r0, r0
900160b0:	64660402 	bslli	r3, r6, 2
900160b4:	e0bf0000 	lbui	r5, r31, 0
900160b8:	10633000 	addk	r3, r3, r6
900160bc:	10631800 	addk	r3, r3, r3
900160c0:	107a1800 	addk	r3, r26, r3
900160c4:	93450060 	sext8	r26, r5
900160c8:	309affd0 	addik	r4, r26, -48
900160cc:	30c3ffd0 	addik	r6, r3, -48
900160d0:	22400009 	addi	r18, r0, 9
900160d4:	16449003 	cmpu	r18, r4, r18
900160d8:	beb2ffd8 	bgeid	r18, -40		// 900160b0
900160dc:	33ff0001 	addik	r31, r31, 1
900160e0:	f8c106a8 	swi	r6, r1, 1704
900160e4:	b810efa4 	brid	-4188		// 90015088
900160e8:	307affe0 	addik	r3, r26, -32
900160ec:	e88106f8 	lwi	r4, r1, 1784
900160f0:	fb410680 	swi	r26, r1, 1664
900160f4:	aa5bffff 	xori	r18, r27, -1
900160f8:	bc120888 	beqi	r18, 2184		// 90016980
900160fc:	aa5a0067 	xori	r18, r26, 103
90016100:	bc120814 	beqi	r18, 2068		// 90016914
90016104:	aa5a0047 	xori	r18, r26, 71
90016108:	bc12080c 	beqi	r18, 2060		// 90016914
9001610c:	e8c40000 	lwi	r6, r4, 0
90016110:	e8e40004 	lwi	r7, r4, 4
90016114:	f8c10684 	swi	r6, r1, 1668
90016118:	f8e10688 	swi	r7, r1, 1672
9001611c:	e8e106f8 	lwi	r7, r1, 1784
90016120:	e8a10684 	lwi	r5, r1, 1668
90016124:	e8c10688 	lwi	r6, r1, 1672
90016128:	30e70008 	addik	r7, r7, 8
9001612c:	f8e106f8 	swi	r7, r1, 1784
90016130:	b0000000 	imm	0
90016134:	b9f48224 	brlid	r15, -32220	// 9001e358 <isinf>
90016138:	80000000 	or	r0, r0, r0
9001613c:	be030800 	beqid	r3, 2048		// 9001693c
90016140:	12630000 	addk	r19, r3, r0
90016144:	e8a10684 	lwi	r5, r1, 1668
90016148:	e8c10688 	lwi	r6, r1, 1672
9001614c:	10e00000 	addk	r7, r0, r0
90016150:	11000000 	addk	r8, r0, r0
90016154:	b0000000 	imm	0
90016158:	b9f498f4 	brlid	r15, -26380	// 9001fa4c <__ltdf2>
9001615c:	80000000 	or	r0, r0, r0
90016160:	be430bac 	bltid	r3, 2988		// 90016d0c
90016164:	3060002d 	addik	r3, r0, 45
90016168:	307affbb 	addik	r3, r26, -69
9001616c:	22400002 	addi	r18, r0, 2
90016170:	16439003 	cmpu	r18, r3, r18
90016174:	be5207ac 	bltid	r18, 1964		// 90016920
90016178:	10800000 	addk	r4, r0, r0
9001617c:	33800003 	addik	r28, r0, 3
90016180:	b0009002 	imm	-28670
90016184:	30603284 	addik	r3, r0, 12932
90016188:	f86106b4 	swi	r3, r1, 1716
9001618c:	f8810694 	swi	r4, r1, 1684
90016190:	b810fa48 	brid	-1464		// 90015bd8
90016194:	133c0000 	addk	r25, r28, r0
90016198:	aa5a0043 	xori	r18, r26, 67
9001619c:	be120590 	beqid	r18, 1424		// 9001672c
900161a0:	32c10044 	addik	r22, r1, 68
900161a4:	e8c106b0 	lwi	r6, r1, 1712
900161a8:	a4660010 	andi	r3, r6, 16
900161ac:	be230584 	bneid	r3, 1412		// 90016730
900161b0:	10b60000 	addk	r5, r22, r0
900161b4:	e8a106f8 	lwi	r5, r1, 1784
900161b8:	33200001 	addik	r25, r0, 1
900161bc:	32610124 	addik	r19, r1, 292
900161c0:	e8650000 	lwi	r3, r5, 0
900161c4:	31050004 	addik	r8, r5, 4
900161c8:	f0610124 	sbi	r3, r1, 292
900161cc:	a879ffff 	xori	r3, r25, -1
900161d0:	6463021f 	bsrai	r3, r3, 31
900161d4:	f90106f8 	swi	r8, r1, 1784
900161d8:	fa6106b4 	swi	r19, r1, 1716
900161dc:	f0010024 	sbi	r0, r1, 36
900161e0:	b810eee0 	brid	-4384		// 900150c0
900161e4:	87991800 	and	r28, r25, r3
900161e8:	b0009002 	imm	-28670
900161ec:	30e03290 	addik	r7, r0, 12944
900161f0:	f8e10690 	swi	r7, r1, 1680
900161f4:	e88106b0 	lwi	r4, r1, 1712
900161f8:	a4640020 	andi	r3, r4, 32
900161fc:	be030334 	beqid	r3, 820		// 90016530
90016200:	a4640010 	andi	r3, r4, 16
90016204:	e8a106f8 	lwi	r5, r1, 1784
90016208:	eac50000 	lwi	r22, r5, 0
9001620c:	eae50004 	lwi	r23, r5, 4
90016210:	30a50008 	addik	r5, r5, 8
90016214:	f8a106f8 	swi	r5, r1, 1784
90016218:	e8e106b0 	lwi	r7, r1, 1712
9001621c:	a4670001 	andi	r3, r7, 1
90016220:	be03f950 	beqid	r3, -1712		// 90015b70
90016224:	30800002 	addik	r4, r0, 2
90016228:	8076b800 	or	r3, r22, r23
9001622c:	bc03f944 	beqi	r3, -1724		// 90015b70
90016230:	e86106b0 	lwi	r3, r1, 1712
90016234:	a0630002 	ori	r3, r3, 2
90016238:	f86106b0 	swi	r3, r1, 1712
9001623c:	b800f934 	bri	-1740		// 90015b70
90016240:	e86106f8 	lwi	r3, r1, 1784
90016244:	f0010024 	sbi	r0, r1, 36
90016248:	30e30004 	addik	r7, r3, 4
9001624c:	e8630000 	lwi	r3, r3, 0
90016250:	f8e106f8 	swi	r7, r1, 1784
90016254:	f86106b4 	swi	r3, r1, 1716
90016258:	be030858 	beqid	r3, 2136		// 90016ab0
9001625c:	33800006 	addik	r28, r0, 6
90016260:	aa5a0053 	xori	r18, r26, 83
90016264:	be120620 	beqid	r18, 1568		// 90016884
90016268:	32c1004c 	addik	r22, r1, 76
9001626c:	e86106b0 	lwi	r3, r1, 1712
90016270:	a6630010 	andi	r19, r3, 16
90016274:	bc330610 	bnei	r19, 1552		// 90016884
90016278:	be5b0b98 	bltid	r27, 2968		// 90016e10
9001627c:	10d30000 	addk	r6, r19, r0
90016280:	e8a106b4 	lwi	r5, r1, 1716
90016284:	b9f4525c 	brlid	r15, 21084	// 9001b4e0 <memchr>
90016288:	10fb0000 	addk	r7, r27, r0
9001628c:	be030c00 	beqid	r3, 3072		// 90016e8c
90016290:	139b0000 	addk	r28, r27, r0
90016294:	e8e106b4 	lwi	r7, r1, 1716
90016298:	17271800 	rsubk	r25, r7, r3
9001629c:	1659d801 	cmp	r18, r25, r27
900162a0:	be520b10 	bltid	r18, 2832		// 90016db0
900162a4:	10600000 	addk	r3, r0, r0
900162a8:	be590b80 	bltid	r25, 2944		// 90016e28
900162ac:	13990000 	addk	r28, r25, r0
900162b0:	fa610694 	swi	r19, r1, 1684
900162b4:	b800f924 	bri	-1756		// 90015bd8
900162b8:	b0009002 	imm	-28670
900162bc:	30e03270 	addik	r7, r0, 12912
900162c0:	f8e10690 	swi	r7, r1, 1680
900162c4:	b800ff30 	bri	-208		// 900161f4
900162c8:	e8a106b0 	lwi	r5, r1, 1712
900162cc:	e07f0000 	lbui	r3, r31, 0
900162d0:	a0a50020 	ori	r5, r5, 32
900162d4:	f8a106b0 	swi	r5, r1, 1712
900162d8:	b810eda8 	brid	-4696		// 90015080
900162dc:	93430060 	sext8	r26, r3
900162e0:	e86106f8 	lwi	r3, r1, 1784
900162e4:	b0009002 	imm	-28670
900162e8:	30803270 	addik	r4, r0, 12912
900162ec:	e8c106b0 	lwi	r6, r1, 1712
900162f0:	30a30004 	addik	r5, r3, 4
900162f4:	f8a106f8 	swi	r5, r1, 1784
900162f8:	eac30000 	lwi	r22, r3, 0
900162fc:	12e0b000 	addk	r23, r0, r22
90016300:	12c00000 	addk	r22, r0, r0
90016304:	f8810690 	swi	r4, r1, 1680
90016308:	a0c60002 	ori	r6, r6, 2
9001630c:	30800002 	addik	r4, r0, 2
90016310:	f8c106b0 	swi	r6, r1, 1712
90016314:	b810f85c 	brid	-1956		// 90015b70
90016318:	33400078 	addik	r26, r0, 120
9001631c:	e88106b0 	lwi	r4, r1, 1712
90016320:	e07f0000 	lbui	r3, r31, 0
90016324:	a0840080 	ori	r4, r4, 128
90016328:	f88106b0 	swi	r4, r1, 1712
9001632c:	b810ed54 	brid	-4780		// 90015080
90016330:	93430060 	sext8	r26, r3
90016334:	e07f0000 	lbui	r3, r31, 0
90016338:	90630060 	sext8	r3, r3
9001633c:	aa43002a 	xori	r18, r3, 42
90016340:	be120d14 	beqid	r18, 3348		// 90017054
90016344:	33ff0001 	addik	r31, r31, 1
90016348:	13430000 	addk	r26, r3, r0
9001634c:	3063ffd0 	addik	r3, r3, -48
90016350:	22400009 	addi	r18, r0, 9
90016354:	16439003 	cmpu	r18, r3, r18
90016358:	be52ed2c 	bltid	r18, -4820		// 90015084
9001635c:	13600000 	addk	r27, r0, r0
90016360:	10e00000 	addk	r7, r0, r0
90016364:	64670402 	bslli	r3, r7, 2
90016368:	e0bf0000 	lbui	r5, r31, 0
9001636c:	10633800 	addk	r3, r3, r7
90016370:	10631800 	addk	r3, r3, r3
90016374:	1063d000 	addk	r3, r3, r26
90016378:	93450060 	sext8	r26, r5
9001637c:	309affd0 	addik	r4, r26, -48
90016380:	30e3ffd0 	addik	r7, r3, -48
90016384:	22400009 	addi	r18, r0, 9
90016388:	16449003 	cmpu	r18, r4, r18
9001638c:	beb2ffd8 	bgeid	r18, -40		// 90016364
90016390:	33ff0001 	addik	r31, r31, 1
90016394:	bea7ecf0 	bgeid	r7, -4880		// 90015084
90016398:	13670000 	addk	r27, r7, r0
9001639c:	b810ece8 	brid	-4888		// 90015084
900163a0:	3360ffff 	addik	r27, r0, -1
900163a4:	be3706e4 	bneid	r23, 1764		// 90016a88
900163a8:	10bd0000 	addk	r5, r29, r0
900163ac:	fae10058 	swi	r23, r1, 88
900163b0:	b800f578 	bri	-2696		// 90015928
900163b4:	10be0000 	addk	r5, r30, r0
900163b8:	30c10054 	addik	r6, r1, 84
900163bc:	b9f43ff0 	brlid	r15, 16368	// 9001a3ac <__sfvwrite>
900163c0:	12e00000 	addk	r23, r0, r0
900163c4:	fae1005c 	swi	r23, r1, 92
900163c8:	fae10058 	swi	r23, r1, 88
900163cc:	be23f35c 	bneid	r3, -3236		// 90015728
900163d0:	10bd0000 	addk	r5, r29, r0
900163d4:	b800f1b8 	bri	-3656		// 9001558c
900163d8:	aa440001 	xori	r18, r4, 1
900163dc:	be1200b8 	beqid	r18, 184		// 90016494
900163e0:	30c10280 	addik	r6, r1, 640
900163e4:	f8c106b4 	swi	r6, r1, 1716
900163e8:	22400001 	addi	r18, r0, 1
900163ec:	16522003 	cmpu	r18, r18, r4
900163f0:	bc520040 	blti	r18, 64		// 90016430
900163f4:	aa440002 	xori	r18, r4, 2
900163f8:	bc120280 	beqi	r18, 640		// 90016678
900163fc:	b0009002 	imm	-28670
90016400:	30a032a4 	addik	r5, r0, 12964
90016404:	b9f4e03c 	brlid	r15, -8132	// 90014440 <strlen>
90016408:	139b0000 	addk	r28, r27, r0
9001640c:	1643d801 	cmp	r18, r3, r27
90016410:	beb2000c 	bgeid	r18, 12		// 9001641c
90016414:	13230000 	addk	r25, r3, r0
90016418:	13830000 	addk	r28, r3, r0
9001641c:	b0009002 	imm	-28670
90016420:	30a032a4 	addik	r5, r0, 12964
90016424:	fb610694 	swi	r27, r1, 1684
90016428:	f8a106b4 	swi	r5, r1, 1716
9001642c:	b800f7ac 	bri	-2132		// 90015bd8
90016430:	e8c106b4 	lwi	r6, r1, 1716
90016434:	6476041d 	bslli	r3, r22, 29
90016438:	64b70003 	bsrli	r5, r23, 3
9001643c:	64960003 	bsrli	r4, r22, 3
90016440:	30c6ffff 	addik	r6, r6, -1
90016444:	f8c106b4 	swi	r6, r1, 1716
90016448:	e8e106b4 	lwi	r7, r1, 1716
9001644c:	80a32800 	or	r5, r3, r5
90016450:	a4770007 	andi	r3, r23, 7
90016454:	30c30030 	addik	r6, r3, 48
90016458:	80642800 	or	r3, r4, r5
9001645c:	12c40000 	addk	r22, r4, r0
90016460:	f0c70000 	sbi	r6, r7, 0
90016464:	be23ffcc 	bneid	r3, -52		// 90016430
90016468:	12e50000 	addk	r23, r5, r0
9001646c:	e88106b0 	lwi	r4, r1, 1712
90016470:	a4640001 	andi	r3, r4, 1
90016474:	bc03f744 	beqi	r3, -2236		// 90015bb8
90016478:	aa460030 	xori	r18, r6, 48
9001647c:	be12f73c 	beqid	r18, -2244		// 90015bb8
90016480:	30e7ffff 	addik	r7, r7, -1
90016484:	f8e106b4 	swi	r7, r1, 1716
90016488:	30600030 	addik	r3, r0, 48
9001648c:	f0670000 	sbi	r3, r7, 0
90016490:	b800f728 	bri	-2264		// 90015bb8
90016494:	be360038 	bneid	r22, 56		// 900164cc
90016498:	32610280 	addik	r19, r1, 640
9001649c:	be36001c 	bneid	r22, 28		// 900164b8
900164a0:	30e1027f 	addik	r7, r1, 639
900164a4:	22400009 	addi	r18, r0, 9
900164a8:	16579003 	cmpu	r18, r23, r18
900164ac:	be520024 	bltid	r18, 36		// 900164d0
900164b0:	10b60000 	addk	r5, r22, r0
900164b4:	30e1027f 	addik	r7, r1, 639
900164b8:	10a70000 	addk	r5, r7, r0
900164bc:	f8e106b4 	swi	r7, r1, 1716
900164c0:	30770030 	addik	r3, r23, 48
900164c4:	f0650000 	sbi	r3, r5, 0
900164c8:	b800f6f0 	bri	-2320		// 90015bb8
900164cc:	10b60000 	addk	r5, r22, r0
900164d0:	10d70000 	addk	r6, r23, r0
900164d4:	30e00000 	addik	r7, r0, 0
900164d8:	3100000a 	addik	r8, r0, 10
900164dc:	b0000000 	imm	0
900164e0:	b9f480ac 	brlid	r15, -32596	// 9001e58c <__umoddi3>
900164e4:	3273ffff 	addik	r19, r19, -1
900164e8:	10b60000 	addk	r5, r22, r0
900164ec:	30640030 	addik	r3, r4, 48
900164f0:	30e00000 	addik	r7, r0, 0
900164f4:	3100000a 	addik	r8, r0, 10
900164f8:	f0730000 	sbi	r3, r19, 0
900164fc:	b9f4b344 	brlid	r15, -19644	// 90011840 <__udivdi3>
90016500:	10d70000 	addk	r6, r23, r0
90016504:	12c30000 	addk	r22, r3, r0
90016508:	be36ffc4 	bneid	r22, -60		// 900164cc
9001650c:	12e40000 	addk	r23, r4, r0
90016510:	bc360010 	bnei	r22, 16		// 90016520
90016514:	22400009 	addi	r18, r0, 9
90016518:	16449003 	cmpu	r18, r4, r18
9001651c:	bc52ffb0 	blti	r18, -80		// 900164cc
90016520:	3273ffff 	addik	r19, r19, -1
90016524:	fa6106b4 	swi	r19, r1, 1716
90016528:	b810ff98 	brid	-104		// 900164c0
9001652c:	10b30000 	addk	r5, r19, r0
90016530:	be0302e0 	beqid	r3, 736		// 90016810
90016534:	a4640040 	andi	r3, r4, 64
90016538:	e8e106f8 	lwi	r7, r1, 1784
9001653c:	eac70000 	lwi	r22, r7, 0
90016540:	12e0b000 	addk	r23, r0, r22
90016544:	12c00000 	addk	r22, r0, r0
90016548:	30e70004 	addik	r7, r7, 4
9001654c:	f8e106f8 	swi	r7, r1, 1784
90016550:	b800fcc8 	bri	-824		// 90016218
90016554:	b0009002 	imm	-28670
90016558:	306032c4 	addik	r3, r0, 12996
9001655c:	32f70001 	addik	r23, r23, 1
90016560:	32730001 	addik	r19, r19, 1
90016564:	f8780000 	swi	r3, r24, 0
90016568:	f8980004 	swi	r4, r24, 4
9001656c:	fae1005c 	swi	r23, r1, 92
90016570:	fa610058 	swi	r19, r1, 88
90016574:	32400007 	addik	r18, r0, 7
90016578:	16539001 	cmp	r18, r19, r18
9001657c:	beb20014 	bgeid	r18, 20		// 90016590
90016580:	30b80008 	addik	r5, r24, 8
90016584:	be370760 	bneid	r23, 1888		// 90016ce4
90016588:	10bd0000 	addk	r5, r29, r0
9001658c:	fae10058 	swi	r23, r1, 88
90016590:	bc29000c 	bnei	r9, 12		// 9001659c
90016594:	e8c10698 	lwi	r6, r1, 1688
90016598:	bc06edf4 	beqi	r6, -4620		// 9001538c
9001659c:	ea610058 	lwi	r19, r1, 88
900165a0:	e8e106a4 	lwi	r7, r1, 1700
900165a4:	32f70001 	addik	r23, r23, 1
900165a8:	32730001 	addik	r19, r19, 1
900165ac:	30600001 	addik	r3, r0, 1
900165b0:	f8650004 	swi	r3, r5, 4
900165b4:	f8e50000 	swi	r7, r5, 0
900165b8:	fae1005c 	swi	r23, r1, 92
900165bc:	fa610058 	swi	r19, r1, 88
900165c0:	32400007 	addik	r18, r0, 7
900165c4:	16539001 	cmp	r18, r19, r18
900165c8:	beb20018 	bgeid	r18, 24		// 900165e0
900165cc:	30850008 	addik	r4, r5, 8
900165d0:	be370860 	bneid	r23, 2144		// 90016e30
900165d4:	12770000 	addk	r19, r23, r0
900165d8:	109d0000 	addk	r4, r29, r0
900165dc:	fae10058 	swi	r23, r1, 88
900165e0:	16c90000 	rsubk	r22, r9, r0
900165e4:	bc7601cc 	blei	r22, 460		// 900167b0
900165e8:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
900165ec:	16569001 	cmp	r18, r22, r18
900165f0:	bcb20180 	bgei	r18, 384		// 90016770
900165f4:	b0009002 	imm	-28670
900165f8:	33603438 	addik	r27, r0, 13368
900165fc:	b8100024 	brid	36		// 90016620
90016600:	32f70010 	addik	r23, r23, 16
90016604:	109d0000 	addk	r4, r29, r0
90016608:	fae10058 	swi	r23, r1, 88
9001660c:	32d6fff0 	addik	r22, r22, -16
90016610:	32400010 	addik	r18, r0, 16	// 10 <_vector_interrupt>
90016614:	16569001 	cmp	r18, r22, r18
90016618:	bcb20160 	bgei	r18, 352		// 90016778
9001661c:	32f70010 	addik	r23, r23, 16
90016620:	32730001 	addik	r19, r19, 1
90016624:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
90016628:	f8640004 	swi	r3, r4, 4
9001662c:	fb640000 	swi	r27, r4, 0
90016630:	fae1005c 	swi	r23, r1, 92
90016634:	fa610058 	swi	r19, r1, 88
90016638:	32400007 	addik	r18, r0, 7
9001663c:	16539001 	cmp	r18, r19, r18
90016640:	beb2ffcc 	bgeid	r18, -52		// 9001660c
90016644:	30840008 	addik	r4, r4, 8
90016648:	be17ffbc 	beqid	r23, -68		// 90016604
9001664c:	12770000 	addk	r19, r23, r0
90016650:	10be0000 	addk	r5, r30, r0
90016654:	30c10054 	addik	r6, r1, 84
90016658:	b9f43d54 	brlid	r15, 15700	// 9001a3ac <__sfvwrite>
9001665c:	12e00000 	addk	r23, r0, r0
90016660:	fae1005c 	swi	r23, r1, 92
90016664:	fae10058 	swi	r23, r1, 88
90016668:	be23f0c0 	bneid	r3, -3904		// 90015728
9001666c:	12770000 	addk	r19, r23, r0
90016670:	b810ff9c 	brid	-100		// 9001660c
90016674:	109d0000 	addk	r4, r29, r0
90016678:	e8e10690 	lwi	r7, r1, 1680
9001667c:	64d6041c 	bslli	r6, r22, 28
90016680:	64b70004 	bsrli	r5, r23, 4
90016684:	64960004 	bsrli	r4, r22, 4
90016688:	a477000f 	andi	r3, r23, 15
9001668c:	80a62800 	or	r5, r6, r5
90016690:	c0c33800 	lbu	r6, r3, r7
90016694:	e86106b4 	lwi	r3, r1, 1716
90016698:	12c40000 	addk	r22, r4, r0
9001669c:	3063ffff 	addik	r3, r3, -1
900166a0:	f86106b4 	swi	r3, r1, 1716
900166a4:	80642800 	or	r3, r4, r5
900166a8:	e88106b4 	lwi	r4, r1, 1716
900166ac:	f0c40000 	sbi	r6, r4, 0
900166b0:	be23ffc8 	bneid	r3, -56		// 90016678
900166b4:	12e50000 	addk	r23, r5, r0
900166b8:	b800f500 	bri	-2816		// 90015bb8
900166bc:	eae1005c 	lwi	r23, r1, 92
900166c0:	ea610058 	lwi	r19, r1, 88
900166c4:	b0009002 	imm	-28670
900166c8:	33603448 	addik	r27, r0, 13384
900166cc:	b810ead0 	brid	-5424		// 9001519c
900166d0:	12f7b000 	addk	r23, r23, r22
900166d4:	e8e106f8 	lwi	r7, r1, 1784
900166d8:	eac70000 	lwi	r22, r7, 0
900166dc:	12e0b000 	addk	r23, r0, r22
900166e0:	12c00000 	addk	r22, r0, r0
900166e4:	30e70004 	addik	r7, r7, 4
900166e8:	f8e106f8 	swi	r7, r1, 1784
900166ec:	b810f484 	brid	-2940		// 90015b70
900166f0:	10830000 	addk	r4, r3, r0
900166f4:	10be0000 	addk	r5, r30, r0
900166f8:	30c10054 	addik	r6, r1, 84
900166fc:	b9f43cb0 	brlid	r15, 15536	// 9001a3ac <__sfvwrite>
90016700:	12e00000 	addk	r23, r0, r0
90016704:	fae1005c 	swi	r23, r1, 92
90016708:	fae10058 	swi	r23, r1, 88
9001670c:	be23f01c 	bneid	r3, -4068		// 90015728
90016710:	10bd0000 	addk	r5, r29, r0
90016714:	b800ee1c 	bri	-4580		// 90015530
90016718:	ea610058 	lwi	r19, r1, 88
9001671c:	b0009002 	imm	-28670
90016720:	33603448 	addik	r27, r0, 13384
90016724:	b810ed24 	brid	-4828		// 90015448
90016728:	12f7b000 	addk	r23, r23, r22
9001672c:	10b60000 	addk	r5, r22, r0
90016730:	10c00000 	addk	r6, r0, r0
90016734:	b9f4d89c 	brlid	r15, -10084	// 90013fd0 <memset>
90016738:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9001673c:	e86106f8 	lwi	r3, r1, 1784
90016740:	32610124 	addik	r19, r1, 292
90016744:	11160000 	addk	r8, r22, r0
90016748:	e8a106ec 	lwi	r5, r1, 1772
9001674c:	e8e30000 	lwi	r7, r3, 0
90016750:	b9f40c54 	brlid	r15, 3156	// 900173a4 <_wcrtomb_r>
90016754:	10d30000 	addk	r6, r19, r0
90016758:	aa43ffff 	xori	r18, r3, -1
9001675c:	be1207e4 	beqid	r18, 2020		// 90016f40
90016760:	13230000 	addk	r25, r3, r0
90016764:	e88106f8 	lwi	r4, r1, 1784
90016768:	b810fa64 	brid	-1436		// 900161cc
9001676c:	31040004 	addik	r8, r4, 4
90016770:	b0009002 	imm	-28670
90016774:	33603438 	addik	r27, r0, 13368
90016778:	12f7b000 	addk	r23, r23, r22
9001677c:	32730001 	addik	r19, r19, 1
90016780:	fb640000 	swi	r27, r4, 0
90016784:	fac40004 	swi	r22, r4, 4
90016788:	fae1005c 	swi	r23, r1, 92
9001678c:	fa610058 	swi	r19, r1, 88
90016790:	32400007 	addik	r18, r0, 7
90016794:	16539001 	cmp	r18, r19, r18
90016798:	beb20018 	bgeid	r18, 24		// 900167b0
9001679c:	30840008 	addik	r4, r4, 8
900167a0:	be37070c 	bneid	r23, 1804		// 90016eac
900167a4:	12770000 	addk	r19, r23, r0
900167a8:	109d0000 	addk	r4, r29, r0
900167ac:	fae10058 	swi	r23, r1, 88
900167b0:	e8610698 	lwi	r3, r1, 1688
900167b4:	e8a106b4 	lwi	r5, r1, 1716
900167b8:	32730001 	addik	r19, r19, 1
900167bc:	12f71800 	addk	r23, r23, r3
900167c0:	f8a40000 	swi	r5, r4, 0
900167c4:	f8640004 	swi	r3, r4, 4
900167c8:	fae1005c 	swi	r23, r1, 92
900167cc:	fa610058 	swi	r19, r1, 88
900167d0:	32400007 	addik	r18, r0, 7
900167d4:	16539001 	cmp	r18, r19, r18
900167d8:	beb2ebb4 	bgeid	r18, -5196		// 9001538c
900167dc:	30a40008 	addik	r5, r4, 8
900167e0:	b800eb9c 	bri	-5220		// 9001537c
900167e4:	bc0301c0 	beqi	r3, 448		// 900169a4
900167e8:	e8640000 	lwi	r3, r4, 0
900167ec:	e88106f8 	lwi	r4, r1, 1784
900167f0:	e8a106ac 	lwi	r5, r1, 1708
900167f4:	30840004 	addik	r4, r4, 4
900167f8:	f88106f8 	swi	r4, r1, 1784
900167fc:	f8a30000 	swi	r5, r3, 0
90016800:	b800e7e0 	bri	-6176		// 90014fe0
90016804:	e07f0000 	lbui	r3, r31, 0
90016808:	b810e878 	brid	-6024		// 90015080
9001680c:	93430060 	sext8	r26, r3
90016810:	bc030210 	beqi	r3, 528		// 90016a20
90016814:	e8a106f8 	lwi	r5, r1, 1784
90016818:	e6e50002 	lhui	r23, r5, 2
9001681c:	30a50004 	addik	r5, r5, 4
90016820:	f8a106f8 	swi	r5, r1, 1784
90016824:	32f70000 	addik	r23, r23, 0
90016828:	32c00000 	addik	r22, r0, 0
9001682c:	b800f9ec 	bri	-1556		// 90016218
90016830:	bc03020c 	beqi	r3, 524		// 90016a3c
90016834:	e8a106f8 	lwi	r5, r1, 1784
90016838:	e6e50002 	lhui	r23, r5, 2
9001683c:	30a50004 	addik	r5, r5, 4
90016840:	f8a106f8 	swi	r5, r1, 1784
90016844:	32f70000 	addik	r23, r23, 0
90016848:	32c00000 	addik	r22, r0, 0
9001684c:	b810f324 	brid	-3292		// 90015b70
90016850:	30800001 	addik	r4, r0, 1
90016854:	bc030178 	beqi	r3, 376		// 900169cc
90016858:	e8e106f8 	lwi	r7, r1, 1784
9001685c:	e6c70002 	lhui	r22, r7, 2
90016860:	92d60061 	sext16	r22, r22
90016864:	02e0b000 	add	r23, r0, r22
90016868:	02d7b800 	add	r22, r23, r23
9001686c:	0ac00000 	addc	r22, r0, r0
90016870:	bc160008 	beqi	r22, 8		// 90016878
90016874:	22c0ffff 	addi	r22, r0, -1
90016878:	30e70004 	addik	r7, r7, 4
9001687c:	f8e106f8 	swi	r7, r1, 1784
90016880:	b800f258 	bri	-3496		// 90015ad8
90016884:	e88106b4 	lwi	r4, r1, 1716
90016888:	10b60000 	addk	r5, r22, r0
9001688c:	10c00000 	addk	r6, r0, r0
90016890:	f8810030 	swi	r4, r1, 48
90016894:	b9f4d73c 	brlid	r15, -10436	// 90013fd0 <memset>
90016898:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9001689c:	be5b0674 	bltid	r27, 1652		// 90016f10
900168a0:	13200000 	addk	r25, r0, r0
900168a4:	12790000 	addk	r19, r25, r0
900168a8:	b810000c 	brid	12		// 900168b4
900168ac:	32e10124 	addik	r23, r1, 292
900168b0:	13230000 	addk	r25, r3, r0
900168b4:	e8610030 	lwi	r3, r1, 48
900168b8:	c8f31800 	lw	r7, r19, r3
900168bc:	be070038 	beqid	r7, 56		// 900168f4
900168c0:	10d70000 	addk	r6, r23, r0
900168c4:	e8a106ec 	lwi	r5, r1, 1772
900168c8:	b9f40adc 	brlid	r15, 2780	// 900173a4 <_wcrtomb_r>
900168cc:	11160000 	addk	r8, r22, r0
900168d0:	aa43ffff 	xori	r18, r3, -1
900168d4:	be12066c 	beqid	r18, 1644		// 90016f40
900168d8:	10791800 	addk	r3, r25, r3
900168dc:	1643d801 	cmp	r18, r3, r27
900168e0:	bc520014 	blti	r18, 20		// 900168f4
900168e4:	1643d800 	rsubk	r18, r3, r27
900168e8:	be32ffc8 	bneid	r18, -56		// 900168b0
900168ec:	32730004 	addik	r19, r19, 4
900168f0:	13230000 	addk	r25, r3, r0
900168f4:	be390424 	bneid	r25, 1060		// 90016d18
900168f8:	13990000 	addk	r28, r25, r0
900168fc:	fb210694 	swi	r25, r1, 1684
90016900:	b800f2d8 	bri	-3368		// 90015bd8
90016904:	b0009002 	imm	-28670
90016908:	33603438 	addik	r27, r0, 13368
9001690c:	b810edcc 	brid	-4660		// 900156d8
90016910:	12f7b000 	addk	r23, r23, r22
90016914:	bc3bf7f8 	bnei	r27, -2056		// 9001610c
90016918:	b810f7f4 	brid	-2060		// 9001610c
9001691c:	33600001 	addik	r27, r0, 1
90016920:	33800003 	addik	r28, r0, 3
90016924:	b0009002 	imm	-28670
90016928:	306032c0 	addik	r3, r0, 12992
9001692c:	f86106b4 	swi	r3, r1, 1716
90016930:	f8810694 	swi	r4, r1, 1684
90016934:	b810f2a4 	brid	-3420		// 90015bd8
90016938:	133c0000 	addk	r25, r28, r0
9001693c:	e8a10684 	lwi	r5, r1, 1668
90016940:	e8c10688 	lwi	r6, r1, 1672
90016944:	b9f47a4c 	brlid	r15, 31308	// 9001e390 <isnan>
90016948:	80000000 	or	r0, r0, r0
9001694c:	be030178 	beqid	r3, 376		// 90016ac4
90016950:	307affbb 	addik	r3, r26, -69
90016954:	22400002 	addi	r18, r0, 2
90016958:	16439003 	cmpu	r18, r3, r18
9001695c:	be520438 	bltid	r18, 1080		// 90016d94
90016960:	10e00000 	addk	r7, r0, r0
90016964:	33800003 	addik	r28, r0, 3
90016968:	b0009002 	imm	-28670
9001696c:	30a03288 	addik	r5, r0, 12936
90016970:	fa610694 	swi	r19, r1, 1684
90016974:	f8a106b4 	swi	r5, r1, 1716
90016978:	b810f260 	brid	-3488		// 90015bd8
9001697c:	133c0000 	addk	r25, r28, r0
90016980:	b810f78c 	brid	-2164		// 9001610c
90016984:	33600006 	addik	r27, r0, 6
90016988:	e8e106b0 	lwi	r7, r1, 1712
9001698c:	33ff0001 	addik	r31, r31, 1
90016990:	e07f0000 	lbui	r3, r31, 0
90016994:	a0e70020 	ori	r7, r7, 32
90016998:	f8e106b0 	swi	r7, r1, 1712
9001699c:	b810e6e4 	brid	-6428		// 90015080
900169a0:	93430060 	sext8	r26, r3
900169a4:	e8c106b0 	lwi	r6, r1, 1712
900169a8:	a4660040 	andi	r3, r6, 64
900169ac:	bc03031c 	beqi	r3, 796		// 90016cc8
900169b0:	e8e106f8 	lwi	r7, r1, 1784
900169b4:	e8640000 	lwi	r3, r4, 0
900169b8:	e88106ac 	lwi	r4, r1, 1708
900169bc:	30e70004 	addik	r7, r7, 4
900169c0:	f8e106f8 	swi	r7, r1, 1784
900169c4:	f4830000 	shi	r4, r3, 0
900169c8:	b800e618 	bri	-6632		// 90014fe0
900169cc:	e86106f8 	lwi	r3, r1, 1784
900169d0:	eac30000 	lwi	r22, r3, 0
900169d4:	02e0b000 	add	r23, r0, r22
900169d8:	02d7b800 	add	r22, r23, r23
900169dc:	0ac00000 	addc	r22, r0, r0
900169e0:	bc160008 	beqi	r22, 8		// 900169e8
900169e4:	22c0ffff 	addi	r22, r0, -1
900169e8:	30630004 	addik	r3, r3, 4
900169ec:	f86106f8 	swi	r3, r1, 1784
900169f0:	b800f0e8 	bri	-3864		// 90015ad8
900169f4:	10be0000 	addk	r5, r30, r0
900169f8:	30c10054 	addik	r6, r1, 84
900169fc:	b9f439b0 	brlid	r15, 14768	// 9001a3ac <__sfvwrite>
90016a00:	12e00000 	addk	r23, r0, r0
90016a04:	fae1005c 	swi	r23, r1, 92
90016a08:	fae10058 	swi	r23, r1, 88
90016a0c:	be23ed1c 	bneid	r3, -4836		// 90015728
90016a10:	12770000 	addk	r19, r23, r0
90016a14:	e9210038 	lwi	r9, r1, 56
90016a18:	b810f388 	brid	-3192		// 90015da0
90016a1c:	10fd0000 	addk	r7, r29, r0
90016a20:	e8c106f8 	lwi	r6, r1, 1784
90016a24:	eac60000 	lwi	r22, r6, 0
90016a28:	12e0b000 	addk	r23, r0, r22
90016a2c:	12c00000 	addk	r22, r0, r0
90016a30:	30c60004 	addik	r6, r6, 4
90016a34:	f8c106f8 	swi	r6, r1, 1784
90016a38:	b800f7e0 	bri	-2080		// 90016218
90016a3c:	e8c106f8 	lwi	r6, r1, 1784
90016a40:	eac60000 	lwi	r22, r6, 0
90016a44:	12e0b000 	addk	r23, r0, r22
90016a48:	12c00000 	addk	r22, r0, r0
90016a4c:	30c60004 	addik	r6, r6, 4
90016a50:	f8c106f8 	swi	r6, r1, 1784
90016a54:	b810f11c 	brid	-3812		// 90015b70
90016a58:	30800001 	addik	r4, r0, 1
90016a5c:	10be0000 	addk	r5, r30, r0
90016a60:	30c10054 	addik	r6, r1, 84
90016a64:	b9f43948 	brlid	r15, 14664	// 9001a3ac <__sfvwrite>
90016a68:	12e00000 	addk	r23, r0, r0
90016a6c:	fae1005c 	swi	r23, r1, 92
90016a70:	fae10058 	swi	r23, r1, 88
90016a74:	be23ecb4 	bneid	r3, -4940		// 90015728
90016a78:	12770000 	addk	r19, r23, r0
90016a7c:	e9210038 	lwi	r9, r1, 56
90016a80:	b810f2d8 	brid	-3368		// 90015d58
90016a84:	10bd0000 	addk	r5, r29, r0
90016a88:	10be0000 	addk	r5, r30, r0
90016a8c:	30c10054 	addik	r6, r1, 84
90016a90:	b9f4391c 	brlid	r15, 14620	// 9001a3ac <__sfvwrite>
90016a94:	12e00000 	addk	r23, r0, r0
90016a98:	fae1005c 	swi	r23, r1, 92
90016a9c:	fae10058 	swi	r23, r1, 88
90016aa0:	be23ec88 	bneid	r3, -4984		// 90015728
90016aa4:	10bd0000 	addk	r5, r29, r0
90016aa8:	e9210038 	lwi	r9, r1, 56
90016aac:	b800ee7c 	bri	-4484		// 90015928
90016ab0:	b0009002 	imm	-28670
90016ab4:	306032cc 	addik	r3, r0, 13004
90016ab8:	f86106b4 	swi	r3, r1, 1716
90016abc:	b810e604 	brid	-6652		// 900150c0
90016ac0:	133c0000 	addk	r25, r28, r0
90016ac4:	e86106b0 	lwi	r3, r1, 1712
90016ac8:	a0630100 	ori	r3, r3, 256
90016acc:	f86106b0 	swi	r3, r1, 1712
90016ad0:	aa5a0066 	xori	r18, r26, 102
90016ad4:	be12047c 	beqid	r18, 1148		// 90016f50
90016ad8:	133b0000 	addk	r25, r27, r0
90016adc:	aa5a0065 	xori	r18, r26, 101
90016ae0:	be120498 	beqid	r18, 1176		// 90016f78
90016ae4:	333b0001 	addik	r25, r27, 1
90016ae8:	aa5a0045 	xori	r18, r26, 69
90016aec:	be12000c 	beqid	r18, 12		// 90016af8
90016af0:	31000002 	addik	r8, r0, 2
90016af4:	133b0000 	addk	r25, r27, r0
90016af8:	e8810684 	lwi	r4, r1, 1668
90016afc:	e8a10688 	lwi	r5, r1, 1672
90016b00:	be440458 	bltid	r4, 1112		// 90016f58
90016b04:	10800000 	addk	r4, r0, r0
90016b08:	eac10684 	lwi	r22, r1, 1668
90016b0c:	eae10688 	lwi	r23, r1, 1672
90016b10:	f88106a0 	swi	r4, r1, 1696
90016b14:	e8a106ec 	lwi	r5, r1, 1772
90016b18:	11390000 	addk	r9, r25, r0
90016b1c:	10d60000 	addk	r6, r22, r0
90016b20:	10f70000 	addk	r7, r23, r0
90016b24:	3061002c 	addik	r3, r1, 44
90016b28:	30810034 	addik	r4, r1, 52
90016b2c:	f861001c 	swi	r3, r1, 28
90016b30:	f8810020 	swi	r4, r1, 32
90016b34:	b9f41644 	brlid	r15, 5700	// 90018178 <_dtoa_r>
90016b38:	31410038 	addik	r10, r1, 56
90016b3c:	f86106b4 	swi	r3, r1, 1716
90016b40:	aa5a0067 	xori	r18, r26, 103
90016b44:	bc12023c 	beqi	r18, 572		// 90016d80
90016b48:	aa5a0047 	xori	r18, r26, 71
90016b4c:	bc120234 	beqi	r18, 564		// 90016d80
90016b50:	e8a106b4 	lwi	r5, r1, 1716
90016b54:	aa5a0066 	xori	r18, r26, 102
90016b58:	be120428 	beqid	r18, 1064		// 90016f80
90016b5c:	1265c800 	addk	r19, r5, r25
90016b60:	10b60000 	addk	r5, r22, r0
90016b64:	10e00000 	addk	r7, r0, r0
90016b68:	11000000 	addk	r8, r0, r0
90016b6c:	b0000000 	imm	0
90016b70:	b9f48c0c 	brlid	r15, -29684	// 9001f77c <__eqdf2>
90016b74:	10d70000 	addk	r6, r23, r0
90016b78:	be23036c 	bneid	r3, 876		// 90016ee4
90016b7c:	10730000 	addk	r3, r19, r0
90016b80:	fa610034 	swi	r19, r1, 52
90016b84:	e8c106b4 	lwi	r6, r1, 1716
90016b88:	30a00067 	addik	r5, r0, 103
90016b8c:	889a2c00 	pcmpeq	r4, r26, r5
90016b90:	be240238 	bneid	r4, 568		// 90016dc8
90016b94:	16e61800 	rsubk	r23, r6, r3
90016b98:	aa5a0047 	xori	r18, r26, 71
90016b9c:	bc12022c 	beqi	r18, 556		// 90016dc8
90016ba0:	32400065 	addik	r18, r0, 101
90016ba4:	165a9001 	cmp	r18, r26, r18
90016ba8:	be5203f4 	bltid	r18, 1012		// 90016f9c
90016bac:	907a0060 	sext8	r3, r26
90016bb0:	e9210038 	lwi	r9, r1, 56
90016bb4:	fb410680 	swi	r26, r1, 1664
90016bb8:	3129ffff 	addik	r9, r9, -1
90016bbc:	f061003c 	sbi	r3, r1, 60
90016bc0:	f9210038 	swi	r9, r1, 56
90016bc4:	be490408 	bltid	r9, 1032		// 90016fcc
90016bc8:	12690000 	addk	r19, r9, r0
90016bcc:	3060002b 	addik	r3, r0, 43
90016bd0:	f061003d 	sbi	r3, r1, 61
90016bd4:	32400009 	addik	r18, r0, 9
90016bd8:	16539001 	cmp	r18, r19, r18
90016bdc:	beb202bc 	bgeid	r18, 700		// 90016e98
90016be0:	30930030 	addik	r4, r19, 48
90016be4:	12dd0000 	addk	r22, r29, r0
90016be8:	10b30000 	addk	r5, r19, r0
90016bec:	30c0000a 	addik	r6, r0, 10
90016bf0:	b0000000 	imm	0
90016bf4:	b9f49100 	brlid	r15, -28416	// 9001fcf4 <__modsi3>
90016bf8:	32d6ffff 	addik	r22, r22, -1
90016bfc:	10b30000 	addk	r5, r19, r0
90016c00:	30630030 	addik	r3, r3, 48
90016c04:	f0760000 	sbi	r3, r22, 0
90016c08:	b0000000 	imm	0
90016c0c:	b9f49180 	brlid	r15, -28288	// 9001fd8c <__divsi3>
90016c10:	30c0000a 	addik	r6, r0, 10
90016c14:	32400009 	addik	r18, r0, 9
90016c18:	16439001 	cmp	r18, r3, r18
90016c1c:	be52ffcc 	bltid	r18, -52		// 90016be8
90016c20:	12630000 	addk	r19, r3, r0
90016c24:	30630030 	addik	r3, r3, 48
90016c28:	30d6ffff 	addik	r6, r22, -1
90016c2c:	f076ffff 	sbi	r3, r22, -1
90016c30:	165d3003 	cmpu	r18, r29, r6
90016c34:	beb20020 	bgeid	r18, 32		// 90016c54
90016c38:	3081003e 	addik	r4, r1, 62
90016c3c:	e0660000 	lbui	r3, r6, 0
90016c40:	30c60001 	addik	r6, r6, 1
90016c44:	f0640000 	sbi	r3, r4, 0
90016c48:	165d3003 	cmpu	r18, r29, r6
90016c4c:	be52fff0 	bltid	r18, -16		// 90016c3c
90016c50:	30840001 	addik	r4, r4, 1
90016c54:	3061003c 	addik	r3, r1, 60
90016c58:	14832000 	rsubk	r4, r3, r4
90016c5c:	f881069c 	swi	r4, r1, 1692
90016c60:	32400001 	addik	r18, r0, 1
90016c64:	16579001 	cmp	r18, r23, r18
90016c68:	beb203ac 	bgeid	r18, 940		// 90017014
90016c6c:	13372000 	addk	r25, r23, r4
90016c70:	33990001 	addik	r28, r25, 1
90016c74:	be5c0398 	bltid	r28, 920		// 9001700c
90016c78:	133c0000 	addk	r25, r28, r0
90016c7c:	e8e106a0 	lwi	r7, r1, 1696
90016c80:	be2701dc 	bneid	r7, 476		// 90016e5c
90016c84:	3060002d 	addik	r3, r0, 45
90016c88:	be5903a0 	bltid	r25, 928		// 90017028
90016c8c:	13990000 	addk	r28, r25, r0
90016c90:	e86106a0 	lwi	r3, r1, 1696
90016c94:	eb410680 	lwi	r26, r1, 1664
90016c98:	fae10698 	swi	r23, r1, 1688
90016c9c:	f8610694 	swi	r3, r1, 1684
90016ca0:	b800ef38 	bri	-4296		// 90015bd8
90016ca4:	b0009002 	imm	-28670
90016ca8:	33603438 	addik	r27, r0, 13368
90016cac:	b810ebd8 	brid	-5160		// 90015884
90016cb0:	12f7c000 	addk	r23, r23, r24
90016cb4:	e861005c 	lwi	r3, r1, 92
90016cb8:	be2302f8 	bneid	r3, 760		// 90016fb0
90016cbc:	10be0000 	addk	r5, r30, r0
90016cc0:	f8010058 	swi	r0, r1, 88
90016cc4:	b800ea78 	bri	-5512		// 9001573c
90016cc8:	e8a106f8 	lwi	r5, r1, 1784
90016ccc:	e8640000 	lwi	r3, r4, 0
90016cd0:	e8c106ac 	lwi	r6, r1, 1708
90016cd4:	30a50004 	addik	r5, r5, 4
90016cd8:	f8a106f8 	swi	r5, r1, 1784
90016cdc:	f8c30000 	swi	r6, r3, 0
90016ce0:	b800e300 	bri	-7424		// 90014fe0
90016ce4:	10be0000 	addk	r5, r30, r0
90016ce8:	30c10054 	addik	r6, r1, 84
90016cec:	b9f436c0 	brlid	r15, 14016	// 9001a3ac <__sfvwrite>
90016cf0:	12e00000 	addk	r23, r0, r0
90016cf4:	fae1005c 	swi	r23, r1, 92
90016cf8:	fae10058 	swi	r23, r1, 88
90016cfc:	be23ea2c 	bneid	r3, -5588		// 90015728
90016d00:	10bd0000 	addk	r5, r29, r0
90016d04:	e9210038 	lwi	r9, r1, 56
90016d08:	b800f888 	bri	-1912		// 90016590
90016d0c:	f0610024 	sbi	r3, r1, 36
90016d10:	b810f45c 	brid	-2980		// 9001616c
90016d14:	307affbb 	addik	r3, r26, -69
90016d18:	e8a106ec 	lwi	r5, r1, 1772
90016d1c:	b9f43f28 	brlid	r15, 16168	// 9001ac44 <_malloc_r>
90016d20:	30d90001 	addik	r6, r25, 1
90016d24:	be03021c 	beqid	r3, 540		// 90016f40
90016d28:	12630000 	addk	r19, r3, r0
90016d2c:	10b60000 	addk	r5, r22, r0
90016d30:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
90016d34:	f861068c 	swi	r3, r1, 1676
90016d38:	b9f4d298 	brlid	r15, -11624	// 90013fd0 <memset>
90016d3c:	10c00000 	addk	r6, r0, r0
90016d40:	11360000 	addk	r9, r22, r0
90016d44:	e8a106ec 	lwi	r5, r1, 1772
90016d48:	e8c1068c 	lwi	r6, r1, 1676
90016d4c:	11190000 	addk	r8, r25, r0
90016d50:	b9f40740 	brlid	r15, 1856	// 90017490 <_wcsrtombs_r>
90016d54:	30e10030 	addik	r7, r1, 48
90016d58:	1643c800 	rsubk	r18, r3, r25
90016d5c:	be320318 	bneid	r18, 792		// 90017074
90016d60:	a879ffff 	xori	r3, r25, -1
90016d64:	6463021f 	bsrai	r3, r3, 31
90016d68:	10c00000 	addk	r6, r0, r0
90016d6c:	fa6106b4 	swi	r19, r1, 1716
90016d70:	f8c10694 	swi	r6, r1, 1684
90016d74:	d0199800 	sb	r0, r25, r19
90016d78:	b810ee60 	brid	-4512		// 90015bd8
90016d7c:	87991800 	and	r28, r25, r3
90016d80:	e88106b0 	lwi	r4, r1, 1712
90016d84:	a4640001 	andi	r3, r4, 1
90016d88:	bc23fdc8 	bnei	r3, -568		// 90016b50
90016d8c:	e8610034 	lwi	r3, r1, 52
90016d90:	b800fdf4 	bri	-524		// 90016b84
90016d94:	33800003 	addik	r28, r0, 3
90016d98:	b0009002 	imm	-28670
90016d9c:	30c0328c 	addik	r6, r0, 12940
90016da0:	f8c106b4 	swi	r6, r1, 1716
90016da4:	f8e10694 	swi	r7, r1, 1684
90016da8:	b810ee30 	brid	-4560		// 90015bd8
90016dac:	133c0000 	addk	r25, r28, r0
90016db0:	f8610694 	swi	r3, r1, 1684
90016db4:	a87bffff 	xori	r3, r27, -1
90016db8:	6463021f 	bsrai	r3, r3, 31
90016dbc:	133b0000 	addk	r25, r27, r0
90016dc0:	b810ee18 	brid	-4584		// 90015bd8
90016dc4:	879b1800 	and	r28, r27, r3
90016dc8:	e9210038 	lwi	r9, r1, 56
90016dcc:	3240fffc 	addik	r18, r0, -4
90016dd0:	16499001 	cmp	r18, r9, r18
90016dd4:	bcb200a4 	bgei	r18, 164		// 90016e78
90016dd8:	f8a10680 	swi	r5, r1, 1664
90016ddc:	1649d801 	cmp	r18, r9, r27
90016de0:	bc520098 	blti	r18, 152		// 90016e78
90016de4:	16574801 	cmp	r18, r23, r9
90016de8:	be520248 	bltid	r18, 584		// 90017030
90016dec:	13290000 	addk	r25, r9, r0
90016df0:	e8c106b0 	lwi	r6, r1, 1712
90016df4:	a4660001 	andi	r3, r6, 1
90016df8:	be23fe7c 	bneid	r3, -388		// 90016c74
90016dfc:	33990001 	addik	r28, r25, 1
90016e00:	beb9fe7c 	bgeid	r25, -388		// 90016c7c
90016e04:	13990000 	addk	r28, r25, r0
90016e08:	b810fe74 	brid	-396		// 90016c7c
90016e0c:	13830000 	addk	r28, r3, r0
90016e10:	e8a106b4 	lwi	r5, r1, 1716
90016e14:	b9f4d62c 	brlid	r15, -10708	// 90014440 <strlen>
90016e18:	80000000 	or	r0, r0, r0
90016e1c:	13830000 	addk	r28, r3, r0
90016e20:	bea3f490 	bgeid	r3, -2928		// 900162b0
90016e24:	13230000 	addk	r25, r3, r0
90016e28:	b810f488 	brid	-2936		// 900162b0
90016e2c:	13930000 	addk	r28, r19, r0
90016e30:	10be0000 	addk	r5, r30, r0
90016e34:	30c10054 	addik	r6, r1, 84
90016e38:	b9f43574 	brlid	r15, 13684	// 9001a3ac <__sfvwrite>
90016e3c:	12e00000 	addk	r23, r0, r0
90016e40:	fae1005c 	swi	r23, r1, 92
90016e44:	fae10058 	swi	r23, r1, 88
90016e48:	be23e8e0 	bneid	r3, -5920		// 90015728
90016e4c:	12770000 	addk	r19, r23, r0
90016e50:	e9210038 	lwi	r9, r1, 56
90016e54:	b810f78c 	brid	-2164		// 900165e0
90016e58:	109d0000 	addk	r4, r29, r0
90016e5c:	eb410680 	lwi	r26, r1, 1664
90016e60:	10800000 	addk	r4, r0, r0
90016e64:	fae10698 	swi	r23, r1, 1688
90016e68:	f8810694 	swi	r4, r1, 1684
90016e6c:	f0610024 	sbi	r3, r1, 36
90016e70:	b810e268 	brid	-7576		// 900150d8
90016e74:	339c0001 	addik	r28, r28, 1
90016e78:	bc04005c 	beqi	r4, 92		// 90016ed4
90016e7c:	30600065 	addik	r3, r0, 101
90016e80:	f8610680 	swi	r3, r1, 1664
90016e84:	b810fd38 	brid	-712		// 90016bbc
90016e88:	3129ffff 	addik	r9, r9, -1
90016e8c:	f8610694 	swi	r3, r1, 1684
90016e90:	b810ed48 	brid	-4792		// 90015bd8
90016e94:	133b0000 	addk	r25, r27, r0
90016e98:	30600030 	addik	r3, r0, 48
90016e9c:	f081003f 	sbi	r4, r1, 63
90016ea0:	f061003e 	sbi	r3, r1, 62
90016ea4:	b810fdb0 	brid	-592		// 90016c54
90016ea8:	30810040 	addik	r4, r1, 64
90016eac:	10be0000 	addk	r5, r30, r0
90016eb0:	30c10054 	addik	r6, r1, 84
90016eb4:	b9f434f8 	brlid	r15, 13560	// 9001a3ac <__sfvwrite>
90016eb8:	12e00000 	addk	r23, r0, r0
90016ebc:	fae1005c 	swi	r23, r1, 92
90016ec0:	fae10058 	swi	r23, r1, 88
90016ec4:	be23e864 	bneid	r3, -6044		// 90015728
90016ec8:	12770000 	addk	r19, r23, r0
90016ecc:	b810f8e4 	brid	-1820		// 900167b0
90016ed0:	109d0000 	addk	r4, r29, r0
90016ed4:	30600045 	addik	r3, r0, 69
90016ed8:	f8610680 	swi	r3, r1, 1664
90016edc:	b810fce0 	brid	-800		// 90016bbc
90016ee0:	3129ffff 	addik	r9, r9, -1
90016ee4:	e8610034 	lwi	r3, r1, 52
90016ee8:	16531803 	cmpu	r18, r19, r3
90016eec:	beb2fc98 	bgeid	r18, -872		// 90016b84
90016ef0:	10930000 	addk	r4, r19, r0
90016ef4:	30a00030 	addik	r5, r0, 48
90016ef8:	f0a30000 	sbi	r5, r3, 0
90016efc:	30630001 	addik	r3, r3, 1
90016f00:	f8610034 	swi	r3, r1, 52
90016f04:	16441800 	rsubk	r18, r4, r3
90016f08:	bc32fff0 	bnei	r18, -16		// 90016ef8
90016f0c:	b800fc78 	bri	-904		// 90016b84
90016f10:	10c00000 	addk	r6, r0, r0
90016f14:	e8a106ec 	lwi	r5, r1, 1772
90016f18:	11060000 	addk	r8, r6, r0
90016f1c:	11360000 	addk	r9, r22, r0
90016f20:	b9f40570 	brlid	r15, 1392	// 90017490 <_wcsrtombs_r>
90016f24:	30e10030 	addik	r7, r1, 48
90016f28:	aa43ffff 	xori	r18, r3, -1
90016f2c:	be120014 	beqid	r18, 20		// 90016f40
90016f30:	13230000 	addk	r25, r3, r0
90016f34:	e8a106b4 	lwi	r5, r1, 1716
90016f38:	f8a10030 	swi	r5, r1, 48
90016f3c:	b800f9b8 	bri	-1608		// 900168f4
90016f40:	e47e000c 	lhui	r3, r30, 12
90016f44:	a0630040 	ori	r3, r3, 64
90016f48:	f47e000c 	shi	r3, r30, 12
90016f4c:	b800e7f0 	bri	-6160		// 9001573c
90016f50:	b810fba8 	brid	-1112		// 90016af8
90016f54:	31000003 	addik	r8, r0, 3
90016f58:	e8e10688 	lwi	r7, r1, 1672
90016f5c:	e8c10684 	lwi	r6, r1, 1668
90016f60:	30a0002d 	addik	r5, r0, 45
90016f64:	b0008000 	imm	-32768
90016f68:	32c60000 	addik	r22, r6, 0
90016f6c:	f8a106a0 	swi	r5, r1, 1696
90016f70:	b810fba4 	brid	-1116		// 90016b14
90016f74:	12e70000 	addk	r23, r7, r0
90016f78:	b810fb80 	brid	-1152		// 90016af8
90016f7c:	31000002 	addik	r8, r0, 2
90016f80:	e0650000 	lbui	r3, r5, 0
90016f84:	aa430030 	xori	r18, r3, 48
90016f88:	be120100 	beqid	r18, 256		// 90017088
90016f8c:	10b60000 	addk	r5, r22, r0
90016f90:	e9210038 	lwi	r9, r1, 56
90016f94:	b810fbcc 	brid	-1076		// 90016b60
90016f98:	12734800 	addk	r19, r19, r9
90016f9c:	aa5a0066 	xori	r18, r26, 102
90016fa0:	bc12003c 	beqi	r18, 60		// 90016fdc
90016fa4:	e9210038 	lwi	r9, r1, 56
90016fa8:	fb410680 	swi	r26, r1, 1664
90016fac:	b800fe38 	bri	-456		// 90016de4
90016fb0:	30c10054 	addik	r6, r1, 84
90016fb4:	b9f433f8 	brlid	r15, 13304	// 9001a3ac <__sfvwrite>
90016fb8:	12e00000 	addk	r23, r0, r0
90016fbc:	fae1005c 	swi	r23, r1, 92
90016fc0:	fae10058 	swi	r23, r1, 88
90016fc4:	bc23e778 	bnei	r3, -6280		// 9001573c
90016fc8:	b800fcf8 	bri	-776		// 90016cc0
90016fcc:	3060002d 	addik	r3, r0, 45
90016fd0:	f061003d 	sbi	r3, r1, 61
90016fd4:	b810fc00 	brid	-1024		// 90016bd4
90016fd8:	16690000 	rsubk	r19, r9, r0
90016fdc:	eb210038 	lwi	r25, r1, 56
90016fe0:	bc7900cc 	blei	r25, 204		// 900170ac
90016fe4:	be3b001c 	bneid	r27, 28		// 90017000
90016fe8:	30790001 	addik	r3, r25, 1
90016fec:	e88106b0 	lwi	r4, r1, 1712
90016ff0:	a4640001 	andi	r3, r4, 1
90016ff4:	be03fc88 	beqid	r3, -888		// 90016c7c
90016ff8:	13990000 	addk	r28, r25, r0
90016ffc:	30790001 	addik	r3, r25, 1
90017000:	139b1800 	addk	r28, r27, r3
90017004:	bebcfc78 	bgeid	r28, -904		// 90016c7c
90017008:	133c0000 	addk	r25, r28, r0
9001700c:	b810fc70 	brid	-912		// 90016c7c
90017010:	13800000 	addk	r28, r0, r0
90017014:	e8e106b0 	lwi	r7, r1, 1712
90017018:	a4670001 	andi	r3, r7, 1
9001701c:	be23fc58 	bneid	r3, -936		// 90016c74
90017020:	33990001 	addik	r28, r25, 1
90017024:	b800fddc 	bri	-548		// 90016e00
90017028:	b810fc68 	brid	-920		// 90016c90
9001702c:	13870000 	addk	r28, r7, r0
90017030:	be89000c 	bgtid	r9, 12		// 9001703c
90017034:	30600001 	addik	r3, r0, 1
90017038:	34690002 	rsubik	r3, r9, 2
9001703c:	1383b800 	addk	r28, r3, r23
90017040:	a87cffff 	xori	r3, r28, -1
90017044:	6463021f 	bsrai	r3, r3, 31
90017048:	133c0000 	addk	r25, r28, r0
9001704c:	b810fc30 	brid	-976		// 90016c7c
90017050:	879c1800 	and	r28, r28, r3
90017054:	e86106f8 	lwi	r3, r1, 1784
90017058:	eb630000 	lwi	r27, r3, 0
9001705c:	bebbeff8 	bgeid	r27, -4104		// 90016054
90017060:	30630004 	addik	r3, r3, 4
90017064:	f86106f8 	swi	r3, r1, 1784
90017068:	e07f0000 	lbui	r3, r31, 0
9001706c:	b810e010 	brid	-8176		// 9001507c
90017070:	3360ffff 	addik	r27, r0, -1
90017074:	e47e000c 	lhui	r3, r30, 12
90017078:	e8c1068c 	lwi	r6, r1, 1676
9001707c:	a0630040 	ori	r3, r3, 64
90017080:	f47e000c 	shi	r3, r30, 12
90017084:	b800e6ac 	bri	-6484		// 90015730
90017088:	10e00000 	addk	r7, r0, r0
9001708c:	11000000 	addk	r8, r0, r0
90017090:	b0000000 	imm	0
90017094:	b9f4879c 	brlid	r15, -30820	// 9001f830 <__nedf2>
90017098:	10d70000 	addk	r6, r23, r0
9001709c:	be03fef4 	beqid	r3, -268		// 90016f90
900170a0:	35390001 	rsubik	r9, r25, 1
900170a4:	f9210038 	swi	r9, r1, 56
900170a8:	b800fee8 	bri	-280		// 90016f90
900170ac:	be3b0020 	bneid	r27, 32		// 900170cc
900170b0:	339b0002 	addik	r28, r27, 2
900170b4:	e8a106b0 	lwi	r5, r1, 1712
900170b8:	a4650001 	andi	r3, r5, 1
900170bc:	bc230010 	bnei	r3, 16		// 900170cc
900170c0:	33800001 	addik	r28, r0, 1
900170c4:	b810fbb8 	brid	-1096		// 90016c7c
900170c8:	133c0000 	addk	r25, r28, r0
900170cc:	bebcfbb0 	bgeid	r28, -1104		// 90016c7c
900170d0:	133c0000 	addk	r25, r28, r0
900170d4:	b810fba8 	brid	-1112		// 90016c7c
900170d8:	13800000 	addk	r28, r0, r0

900170dc <vfprintf>:
900170dc:	10660000 	addk	r3, r6, r0
900170e0:	11070000 	addk	r8, r7, r0
900170e4:	10c50000 	addk	r6, r5, r0
900170e8:	b0009002 	imm	-28670
900170ec:	e8a03b60 	lwi	r5, r0, 15200
900170f0:	3021ffe4 	addik	r1, r1, -28
900170f4:	f9e10000 	swi	r15, r1, 0
900170f8:	b9f4dd38 	brlid	r15, -8904	// 90014e30 <_vfprintf_r>
900170fc:	10e30000 	addk	r7, r3, r0
90017100:	e9e10000 	lwi	r15, r1, 0
90017104:	b60f0008 	rtsd	r15, 8
90017108:	3021001c 	addik	r1, r1, 28

9001710c <_vsnprintf_r>:
9001710c:	10860000 	addk	r4, r6, r0
90017110:	11470000 	addk	r10, r7, r0
90017114:	3021ff88 	addik	r1, r1, -120
90017118:	30600208 	addik	r3, r0, 520
9001711c:	3167ffff 	addik	r11, r7, -1
90017120:	f4610028 	shi	r3, r1, 40
90017124:	10e80000 	addk	r7, r8, r0
90017128:	10680000 	addk	r3, r8, r0
9001712c:	f9e10000 	swi	r15, r1, 0
90017130:	30c1001c 	addik	r6, r1, 28
90017134:	f881002c 	swi	r4, r1, 44
90017138:	f881001c 	swi	r4, r1, 28
9001713c:	be0a003c 	beqid	r10, 60		// 90017178
90017140:	11090000 	addk	r8, r9, r0
90017144:	3060ffff 	addik	r3, r0, -1
90017148:	f9610030 	swi	r11, r1, 48
9001714c:	f461002a 	shi	r3, r1, 42
90017150:	f9610024 	swi	r11, r1, 36
90017154:	b9f4dcdc 	brlid	r15, -8996	// 90014e30 <_vfprintf_r>
90017158:	80000000 	or	r0, r0, r0
9001715c:	10830000 	addk	r4, r3, r0
90017160:	e861001c 	lwi	r3, r1, 28
90017164:	f0030000 	sbi	r0, r3, 0
90017168:	e9e10000 	lwi	r15, r1, 0
9001716c:	10640000 	addk	r3, r4, r0
90017170:	b60f0008 	rtsd	r15, 8
90017174:	30210078 	addik	r1, r1, 120
90017178:	10e30000 	addk	r7, r3, r0
9001717c:	3060ffff 	addik	r3, r0, -1
90017180:	f9410030 	swi	r10, r1, 48
90017184:	f461002a 	shi	r3, r1, 42
90017188:	f9410024 	swi	r10, r1, 36
9001718c:	b9f4dca4 	brlid	r15, -9052	// 90014e30 <_vfprintf_r>
90017190:	30c1001c 	addik	r6, r1, 28
90017194:	10830000 	addk	r4, r3, r0
90017198:	e9e10000 	lwi	r15, r1, 0
9001719c:	10640000 	addk	r3, r4, r0
900171a0:	b60f0008 	rtsd	r15, 8
900171a4:	30210078 	addik	r1, r1, 120

900171a8 <vsnprintf>:
900171a8:	10860000 	addk	r4, r6, r0
900171ac:	3021ff88 	addik	r1, r1, -120
900171b0:	30600208 	addik	r3, r0, 520
900171b4:	f9e10000 	swi	r15, r1, 0
900171b8:	30c1001c 	addik	r6, r1, 28
900171bc:	f4610028 	shi	r3, r1, 40
900171c0:	f8a1002c 	swi	r5, r1, 44
900171c4:	f8a1001c 	swi	r5, r1, 28
900171c8:	be040044 	beqid	r4, 68		// 9001720c
900171cc:	3124ffff 	addik	r9, r4, -1
900171d0:	b0009002 	imm	-28670
900171d4:	e8a03b60 	lwi	r5, r0, 15200
900171d8:	3060ffff 	addik	r3, r0, -1
900171dc:	f9210030 	swi	r9, r1, 48
900171e0:	f461002a 	shi	r3, r1, 42
900171e4:	f9210024 	swi	r9, r1, 36
900171e8:	b9f4dc48 	brlid	r15, -9144	// 90014e30 <_vfprintf_r>
900171ec:	80000000 	or	r0, r0, r0
900171f0:	10830000 	addk	r4, r3, r0
900171f4:	e861001c 	lwi	r3, r1, 28
900171f8:	f0030000 	sbi	r0, r3, 0
900171fc:	e9e10000 	lwi	r15, r1, 0
90017200:	10640000 	addk	r3, r4, r0
90017204:	b60f0008 	rtsd	r15, 8
90017208:	30210078 	addik	r1, r1, 120
9001720c:	b0009002 	imm	-28670
90017210:	e8a03b60 	lwi	r5, r0, 15200
90017214:	3060ffff 	addik	r3, r0, -1
90017218:	f8810030 	swi	r4, r1, 48
9001721c:	f8810024 	swi	r4, r1, 36
90017220:	f461002a 	shi	r3, r1, 42
90017224:	b9f4dc0c 	brlid	r15, -9204	// 90014e30 <_vfprintf_r>
90017228:	30c1001c 	addik	r6, r1, 28
9001722c:	10830000 	addk	r4, r3, r0
90017230:	e9e10000 	lwi	r15, r1, 0
90017234:	10640000 	addk	r3, r4, r0
90017238:	b60f0008 	rtsd	r15, 8
9001723c:	30210078 	addik	r1, r1, 120

90017240 <__swbuf>:
90017240:	b0009002 	imm	-28670
90017244:	e8803b60 	lwi	r4, r0, 15200
90017248:	3021ffdc 	addik	r1, r1, -36
9001724c:	fa61001c 	swi	r19, r1, 28
90017250:	fac10020 	swi	r22, r1, 32
90017254:	f9e10000 	swi	r15, r1, 0
90017258:	12c50000 	addk	r22, r5, r0
9001725c:	be040010 	beqid	r4, 16		// 9001726c
90017260:	12660000 	addk	r19, r6, r0
90017264:	e8640018 	lwi	r3, r4, 24
90017268:	bc0300cc 	beqi	r3, 204		// 90017334
9001726c:	b0009002 	imm	-28670
90017270:	aa5334a4 	xori	r18, r19, 13476
90017274:	bc1200d4 	beqi	r18, 212		// 90017348
90017278:	b0009002 	imm	-28670
9001727c:	aa5334c4 	xori	r18, r19, 13508
90017280:	bc1200ec 	beqi	r18, 236		// 9001736c
90017284:	b0009002 	imm	-28670
90017288:	aa5334e4 	xori	r18, r19, 13540
9001728c:	bc1200f0 	beqi	r18, 240		// 9001737c
90017290:	e473000c 	lhui	r3, r19, 12
90017294:	e8930018 	lwi	r4, r19, 24
90017298:	a4630008 	andi	r3, r3, 8
9001729c:	f8930008 	swi	r4, r19, 8
900172a0:	bc0300b8 	beqi	r3, 184		// 90017358
900172a4:	e8730010 	lwi	r3, r19, 16
900172a8:	bc0300b0 	beqi	r3, 176		// 90017358
900172ac:	e8b30000 	lwi	r5, r19, 0
900172b0:	e8930014 	lwi	r4, r19, 20
900172b4:	14632800 	rsubk	r3, r3, r5
900172b8:	16441801 	cmp	r18, r4, r3
900172bc:	beb200d0 	bgeid	r18, 208		// 9001738c
900172c0:	30c30001 	addik	r6, r3, 1
900172c4:	e8730008 	lwi	r3, r19, 8
900172c8:	a6d600ff 	andi	r22, r22, 255
900172cc:	30850001 	addik	r4, r5, 1
900172d0:	3063ffff 	addik	r3, r3, -1
900172d4:	f8730008 	swi	r3, r19, 8
900172d8:	f2c50000 	sbi	r22, r5, 0
900172dc:	e8730014 	lwi	r3, r19, 20
900172e0:	f8930000 	swi	r4, r19, 0
900172e4:	16461800 	rsubk	r18, r6, r3
900172e8:	bc120034 	beqi	r18, 52		// 9001731c
900172ec:	e473000c 	lhui	r3, r19, 12
900172f0:	a4630001 	andi	r3, r3, 1
900172f4:	bc23001c 	bnei	r3, 28		// 90017310
900172f8:	10760000 	addk	r3, r22, r0
900172fc:	e9e10000 	lwi	r15, r1, 0
90017300:	ea61001c 	lwi	r19, r1, 28
90017304:	eac10020 	lwi	r22, r1, 32
90017308:	b60f0008 	rtsd	r15, 8
9001730c:	30210024 	addik	r1, r1, 36
90017310:	aa56000a 	xori	r18, r22, 10
90017314:	be32ffe8 	bneid	r18, -24		// 900172fc
90017318:	10760000 	addk	r3, r22, r0
9001731c:	b9f424bc 	brlid	r15, 9404	// 900197d8 <fflush>
90017320:	10b30000 	addk	r5, r19, r0
90017324:	be03ffd8 	beqid	r3, -40		// 900172fc
90017328:	10760000 	addk	r3, r22, r0
9001732c:	b810ffcc 	brid	-52		// 900172f8
90017330:	32c0ffff 	addik	r22, r0, -1
90017334:	b9f42730 	brlid	r15, 10032	// 90019a64 <__sinit>
90017338:	10a40000 	addk	r5, r4, r0
9001733c:	b0009002 	imm	-28670
90017340:	aa5334a4 	xori	r18, r19, 13476
90017344:	bc32ff34 	bnei	r18, -204		// 90017278
90017348:	b0009002 	imm	-28670
9001734c:	e8603b60 	lwi	r3, r0, 15200
90017350:	ea630000 	lwi	r19, r3, 0
90017354:	b800ff3c 	bri	-196		// 90017290
90017358:	b9f4088c 	brlid	r15, 2188	// 90017be4 <__swsetup>
9001735c:	10b30000 	addk	r5, r19, r0
90017360:	bc23ffcc 	bnei	r3, -52		// 9001732c
90017364:	e8730010 	lwi	r3, r19, 16
90017368:	b800ff44 	bri	-188		// 900172ac
9001736c:	b0009002 	imm	-28670
90017370:	e8603b60 	lwi	r3, r0, 15200
90017374:	ea630004 	lwi	r19, r3, 4
90017378:	b800ff18 	bri	-232		// 90017290
9001737c:	b0009002 	imm	-28670
90017380:	e8603b60 	lwi	r3, r0, 15200
90017384:	ea630008 	lwi	r19, r3, 8
90017388:	b800ff08 	bri	-248		// 90017290
9001738c:	b9f4244c 	brlid	r15, 9292	// 900197d8 <fflush>
90017390:	10b30000 	addk	r5, r19, r0
90017394:	be23ff98 	bneid	r3, -104		// 9001732c
90017398:	30c00001 	addik	r6, r0, 1
9001739c:	e8b30000 	lwi	r5, r19, 0
900173a0:	b800ff24 	bri	-220		// 900172c4

900173a4 <_wcrtomb_r>:
900173a4:	3021ffd0 	addik	r1, r1, -48
900173a8:	fa610028 	swi	r19, r1, 40
900173ac:	fac1002c 	swi	r22, r1, 44
900173b0:	f9e10000 	swi	r15, r1, 0
900173b4:	12c50000 	addk	r22, r5, r0
900173b8:	be060044 	beqid	r6, 68		// 900173fc
900173bc:	12680000 	addk	r19, r8, r0
900173c0:	b9f403b4 	brlid	r15, 948	// 90017774 <_wctomb_r>
900173c4:	80000000 	or	r0, r0, r0
900173c8:	aa43ffff 	xori	r18, r3, -1
900173cc:	be320018 	bneid	r18, 24		// 900173e4
900173d0:	10830000 	addk	r4, r3, r0
900173d4:	f8130000 	swi	r0, r19, 0
900173d8:	3060008a 	addik	r3, r0, 138
900173dc:	3080ffff 	addik	r4, r0, -1
900173e0:	f876000c 	swi	r3, r22, 12
900173e4:	10640000 	addk	r3, r4, r0
900173e8:	e9e10000 	lwi	r15, r1, 0
900173ec:	ea610028 	lwi	r19, r1, 40
900173f0:	eac1002c 	lwi	r22, r1, 44
900173f4:	b60f0008 	rtsd	r15, 8
900173f8:	30210030 	addik	r1, r1, 48
900173fc:	10e60000 	addk	r7, r6, r0
90017400:	b9f40374 	brlid	r15, 884	// 90017774 <_wctomb_r>
90017404:	30c1001c 	addik	r6, r1, 28
90017408:	b800ffc0 	bri	-64		// 900173c8

9001740c <wcrtomb>:
9001740c:	3021ffd0 	addik	r1, r1, -48
90017410:	fac1002c 	swi	r22, r1, 44
90017414:	12c70000 	addk	r22, r7, r0
90017418:	fa610028 	swi	r19, r1, 40
9001741c:	10660000 	addk	r3, r6, r0
90017420:	f9e10000 	swi	r15, r1, 0
90017424:	10e50000 	addk	r7, r5, r0
90017428:	11160000 	addk	r8, r22, r0
9001742c:	b0009002 	imm	-28670
90017430:	ea603b60 	lwi	r19, r0, 15200
90017434:	be050050 	beqid	r5, 80		// 90017484
90017438:	30c1001c 	addik	r6, r1, 28
9001743c:	10c50000 	addk	r6, r5, r0
90017440:	10e30000 	addk	r7, r3, r0
90017444:	10b30000 	addk	r5, r19, r0
90017448:	b9f4032c 	brlid	r15, 812	// 90017774 <_wctomb_r>
9001744c:	11160000 	addk	r8, r22, r0
90017450:	aa43ffff 	xori	r18, r3, -1
90017454:	be320018 	bneid	r18, 24		// 9001746c
90017458:	10830000 	addk	r4, r3, r0
9001745c:	f8160000 	swi	r0, r22, 0
90017460:	3060008a 	addik	r3, r0, 138
90017464:	3080ffff 	addik	r4, r0, -1
90017468:	f873000c 	swi	r3, r19, 12
9001746c:	10640000 	addk	r3, r4, r0
90017470:	e9e10000 	lwi	r15, r1, 0
90017474:	ea610028 	lwi	r19, r1, 40
90017478:	eac1002c 	lwi	r22, r1, 44
9001747c:	b60f0008 	rtsd	r15, 8
90017480:	30210030 	addik	r1, r1, 48
90017484:	b9f402f0 	brlid	r15, 752	// 90017774 <_wctomb_r>
90017488:	10b30000 	addk	r5, r19, r0
9001748c:	b800ffc4 	bri	-60		// 90017450

90017490 <_wcsrtombs_r>:
90017490:	3021ffac 	addik	r1, r1, -84
90017494:	fb210038 	swi	r25, r1, 56
90017498:	fb41003c 	swi	r26, r1, 60
9001749c:	fb810044 	swi	r28, r1, 68
900174a0:	fba10048 	swi	r29, r1, 72
900174a4:	fbe10050 	swi	r31, r1, 80
900174a8:	f9e10000 	swi	r15, r1, 0
900174ac:	fa610028 	swi	r19, r1, 40
900174b0:	fac1002c 	swi	r22, r1, 44
900174b4:	fae10030 	swi	r23, r1, 48
900174b8:	fb010034 	swi	r24, r1, 52
900174bc:	fb610040 	swi	r27, r1, 64
900174c0:	fbc1004c 	swi	r30, r1, 76
900174c4:	13860000 	addk	r28, r6, r0
900174c8:	13e50000 	addk	r31, r5, r0
900174cc:	13a70000 	addk	r29, r7, r0
900174d0:	13280000 	addk	r25, r8, r0
900174d4:	be0600f8 	beqid	r6, 248		// 900175cc
900174d8:	13490000 	addk	r26, r9, r0
900174dc:	eb670000 	lwi	r27, r7, 0
900174e0:	be0800b0 	beqid	r8, 176		// 90017590
900174e4:	12c00000 	addk	r22, r0, r0
900174e8:	131c0000 	addk	r24, r28, r0
900174ec:	12c00000 	addk	r22, r0, r0
900174f0:	33c1001c 	addik	r30, r1, 28
900174f4:	10de0000 	addk	r6, r30, r0
900174f8:	10bf0000 	addk	r5, r31, r0
900174fc:	e8fb0000 	lwi	r7, r27, 0
90017500:	eafa0000 	lwi	r23, r26, 0
90017504:	ea7a0004 	lwi	r19, r26, 4
90017508:	b9f4fe9c 	brlid	r15, -356	// 900173a4 <_wcrtomb_r>
9001750c:	111a0000 	addk	r8, r26, r0
90017510:	aa43ffff 	xori	r18, r3, -1
90017514:	be1200c4 	beqid	r18, 196		// 900175d8
90017518:	10c30000 	addk	r6, r3, r0
9001751c:	1463c800 	rsubk	r3, r3, r25
90017520:	16561803 	cmpu	r18, r22, r3
90017524:	bc520064 	blti	r18, 100		// 90017588
90017528:	16593003 	cmpu	r18, r25, r6
9001752c:	bcb2005c 	bgei	r18, 92		// 90017588
90017530:	be1c003c 	beqid	r28, 60		// 9001756c
90017534:	12d63000 	addk	r22, r22, r6
90017538:	bc660028 	blei	r6, 40		// 90017560
9001753c:	10a00000 	addk	r5, r0, r0
90017540:	10650800 	addk	r3, r5, r1
90017544:	e083001c 	lbui	r4, r3, 28
90017548:	d0982800 	sb	r4, r24, r5
9001754c:	30a50001 	addik	r5, r5, 1
90017550:	16453000 	rsubk	r18, r5, r6
90017554:	be32fff0 	bneid	r18, -16		// 90017544
90017558:	10650800 	addk	r3, r5, r1
9001755c:	13183000 	addk	r24, r24, r6
90017560:	e87d0000 	lwi	r3, r29, 0
90017564:	30630004 	addik	r3, r3, 4
90017568:	f87d0000 	swi	r3, r29, 0
9001756c:	e87b0000 	lwi	r3, r27, 0
90017570:	bc03007c 	beqi	r3, 124		// 900175ec
90017574:	1659b003 	cmpu	r18, r25, r22
90017578:	beb20018 	bgeid	r18, 24		// 90017590
9001757c:	337b0004 	addik	r27, r27, 4
90017580:	b810ff78 	brid	-136		// 900174f8
90017584:	10de0000 	addk	r6, r30, r0
90017588:	fa7a0004 	swi	r19, r26, 4
9001758c:	fafa0000 	swi	r23, r26, 0
90017590:	10760000 	addk	r3, r22, r0
90017594:	e9e10000 	lwi	r15, r1, 0
90017598:	ea610028 	lwi	r19, r1, 40
9001759c:	eac1002c 	lwi	r22, r1, 44
900175a0:	eae10030 	lwi	r23, r1, 48
900175a4:	eb010034 	lwi	r24, r1, 52
900175a8:	eb210038 	lwi	r25, r1, 56
900175ac:	eb41003c 	lwi	r26, r1, 60
900175b0:	eb610040 	lwi	r27, r1, 64
900175b4:	eb810044 	lwi	r28, r1, 68
900175b8:	eba10048 	lwi	r29, r1, 72
900175bc:	ebc1004c 	lwi	r30, r1, 76
900175c0:	ebe10050 	lwi	r31, r1, 80
900175c4:	b60f0008 	rtsd	r15, 8
900175c8:	30210054 	addik	r1, r1, 84
900175cc:	eb670000 	lwi	r27, r7, 0
900175d0:	b810ff18 	brid	-232		// 900174e8
900175d4:	3320ffff 	addik	r25, r0, -1
900175d8:	3060008a 	addik	r3, r0, 138
900175dc:	f87f000c 	swi	r3, r31, 12
900175e0:	f81a0000 	swi	r0, r26, 0
900175e4:	b810ffac 	brid	-84		// 90017590
900175e8:	32c0ffff 	addik	r22, r0, -1
900175ec:	bc1c0008 	beqi	r28, 8		// 900175f4
900175f0:	f87d0000 	swi	r3, r29, 0
900175f4:	f87a0000 	swi	r3, r26, 0
900175f8:	b810ff98 	brid	-104		// 90017590
900175fc:	32d6ffff 	addik	r22, r22, -1

90017600 <wcsrtombs>:
90017600:	3021ffac 	addik	r1, r1, -84
90017604:	fb210038 	swi	r25, r1, 56
90017608:	fb41003c 	swi	r26, r1, 60
9001760c:	fb810044 	swi	r28, r1, 68
90017610:	fba10048 	swi	r29, r1, 72
90017614:	fbc1004c 	swi	r30, r1, 76
90017618:	f9e10000 	swi	r15, r1, 0
9001761c:	fa610028 	swi	r19, r1, 40
90017620:	fac1002c 	swi	r22, r1, 44
90017624:	fae10030 	swi	r23, r1, 48
90017628:	fb010034 	swi	r24, r1, 52
9001762c:	fb610040 	swi	r27, r1, 64
90017630:	fbe10050 	swi	r31, r1, 80
90017634:	13850000 	addk	r28, r5, r0
90017638:	13a60000 	addk	r29, r6, r0
9001763c:	13270000 	addk	r25, r7, r0
90017640:	b0009002 	imm	-28670
90017644:	ebc03b60 	lwi	r30, r0, 15200
90017648:	be0500f8 	beqid	r5, 248		// 90017740
9001764c:	13480000 	addk	r26, r8, r0
90017650:	eb660000 	lwi	r27, r6, 0
90017654:	be0700b0 	beqid	r7, 176		// 90017704
90017658:	12c00000 	addk	r22, r0, r0
9001765c:	131c0000 	addk	r24, r28, r0
90017660:	12c00000 	addk	r22, r0, r0
90017664:	33e1001c 	addik	r31, r1, 28
90017668:	10df0000 	addk	r6, r31, r0
9001766c:	10be0000 	addk	r5, r30, r0
90017670:	e8fb0000 	lwi	r7, r27, 0
90017674:	eafa0000 	lwi	r23, r26, 0
90017678:	ea7a0004 	lwi	r19, r26, 4
9001767c:	b9f4fd28 	brlid	r15, -728	// 900173a4 <_wcrtomb_r>
90017680:	111a0000 	addk	r8, r26, r0
90017684:	aa43ffff 	xori	r18, r3, -1
90017688:	be1200c4 	beqid	r18, 196		// 9001774c
9001768c:	10c30000 	addk	r6, r3, r0
90017690:	1463c800 	rsubk	r3, r3, r25
90017694:	16561803 	cmpu	r18, r22, r3
90017698:	bc520064 	blti	r18, 100		// 900176fc
9001769c:	16593003 	cmpu	r18, r25, r6
900176a0:	bcb2005c 	bgei	r18, 92		// 900176fc
900176a4:	be1c003c 	beqid	r28, 60		// 900176e0
900176a8:	12d63000 	addk	r22, r22, r6
900176ac:	bc660028 	blei	r6, 40		// 900176d4
900176b0:	10a00000 	addk	r5, r0, r0
900176b4:	10650800 	addk	r3, r5, r1
900176b8:	e083001c 	lbui	r4, r3, 28
900176bc:	d0982800 	sb	r4, r24, r5
900176c0:	30a50001 	addik	r5, r5, 1
900176c4:	16453000 	rsubk	r18, r5, r6
900176c8:	be32fff0 	bneid	r18, -16		// 900176b8
900176cc:	10650800 	addk	r3, r5, r1
900176d0:	13183000 	addk	r24, r24, r6
900176d4:	e87d0000 	lwi	r3, r29, 0
900176d8:	30630004 	addik	r3, r3, 4
900176dc:	f87d0000 	swi	r3, r29, 0
900176e0:	e87b0000 	lwi	r3, r27, 0
900176e4:	bc03007c 	beqi	r3, 124		// 90017760
900176e8:	1659b003 	cmpu	r18, r25, r22
900176ec:	beb20018 	bgeid	r18, 24		// 90017704
900176f0:	337b0004 	addik	r27, r27, 4
900176f4:	b810ff78 	brid	-136		// 9001766c
900176f8:	10df0000 	addk	r6, r31, r0
900176fc:	fa7a0004 	swi	r19, r26, 4
90017700:	fafa0000 	swi	r23, r26, 0
90017704:	10760000 	addk	r3, r22, r0
90017708:	e9e10000 	lwi	r15, r1, 0
9001770c:	ea610028 	lwi	r19, r1, 40
90017710:	eac1002c 	lwi	r22, r1, 44
90017714:	eae10030 	lwi	r23, r1, 48
90017718:	eb010034 	lwi	r24, r1, 52
9001771c:	eb210038 	lwi	r25, r1, 56
90017720:	eb41003c 	lwi	r26, r1, 60
90017724:	eb610040 	lwi	r27, r1, 64
90017728:	eb810044 	lwi	r28, r1, 68
9001772c:	eba10048 	lwi	r29, r1, 72
90017730:	ebc1004c 	lwi	r30, r1, 76
90017734:	ebe10050 	lwi	r31, r1, 80
90017738:	b60f0008 	rtsd	r15, 8
9001773c:	30210054 	addik	r1, r1, 84
90017740:	eb660000 	lwi	r27, r6, 0
90017744:	b810ff18 	brid	-232		// 9001765c
90017748:	3320ffff 	addik	r25, r0, -1
9001774c:	3060008a 	addik	r3, r0, 138
90017750:	f87e000c 	swi	r3, r30, 12
90017754:	f81a0000 	swi	r0, r26, 0
90017758:	b810ffac 	brid	-84		// 90017704
9001775c:	32c0ffff 	addik	r22, r0, -1
90017760:	bc1c0008 	beqi	r28, 8		// 90017768
90017764:	f87d0000 	swi	r3, r29, 0
90017768:	f87a0000 	swi	r3, r26, 0
9001776c:	b810ff98 	brid	-104		// 90017704
90017770:	32d6ffff 	addik	r22, r22, -1

90017774 <_wctomb_r>:
90017774:	b0009002 	imm	-28670
90017778:	30a03c58 	addik	r5, r0, 15448
9001777c:	3021ffd8 	addik	r1, r1, -40
90017780:	fa61001c 	swi	r19, r1, 28
90017784:	fac10020 	swi	r22, r1, 32
90017788:	fae10024 	swi	r23, r1, 36
9001778c:	f9e10000 	swi	r15, r1, 0
90017790:	12660000 	addk	r19, r6, r0
90017794:	12c70000 	addk	r22, r7, r0
90017798:	b9f4cca8 	brlid	r15, -13144	// 90014440 <strlen>
9001779c:	12e80000 	addk	r23, r8, r0
900177a0:	22400001 	addi	r18, r0, 1
900177a4:	16439003 	cmpu	r18, r3, r18
900177a8:	bcb200c0 	bgei	r18, 192		// 90017868
900177ac:	b0009002 	imm	-28670
900177b0:	30a03c58 	addik	r5, r0, 15448
900177b4:	b0009002 	imm	-28670
900177b8:	30c03458 	addik	r6, r0, 13400
900177bc:	b9f4cbd4 	brlid	r15, -13356	// 90014390 <strcmp>
900177c0:	80000000 	or	r0, r0, r0
900177c4:	bc230050 	bnei	r3, 80		// 90017814
900177c8:	be130084 	beqid	r19, 132		// 9001784c
900177cc:	11200000 	addk	r9, r0, r0
900177d0:	3240007f 	addik	r18, r0, 127
900177d4:	16569001 	cmp	r18, r22, r18
900177d8:	beb20070 	bgeid	r18, 112		// 90017848
900177dc:	31200001 	addik	r9, r0, 1
900177e0:	3076ff80 	addik	r3, r22, -128
900177e4:	2240077f 	addi	r18, r0, 1919
900177e8:	16439003 	cmpu	r18, r3, r18
900177ec:	be5201a8 	bltid	r18, 424		// 90017994
900177f0:	a49607c0 	andi	r4, r22, 1984
900177f4:	64840206 	bsrai	r4, r4, 6
900177f8:	a476003f 	andi	r3, r22, 63
900177fc:	a084ffc0 	ori	r4, r4, -64
90017800:	a063ff80 	ori	r3, r3, -128
90017804:	f0730001 	sbi	r3, r19, 1
90017808:	f0930000 	sbi	r4, r19, 0
9001780c:	b8100040 	brid	64		// 9001784c
90017810:	31200002 	addik	r9, r0, 2
90017814:	b0009002 	imm	-28670
90017818:	30a03c58 	addik	r5, r0, 15448
9001781c:	b0009002 	imm	-28670
90017820:	30c03460 	addik	r6, r0, 13408
90017824:	b9f4cb6c 	brlid	r15, -13460	// 90014390 <strcmp>
90017828:	80000000 	or	r0, r0, r0
9001782c:	bc230048 	bnei	r3, 72		// 90017874
90017830:	be13003c 	beqid	r19, 60		// 9001786c
90017834:	64760208 	bsrai	r3, r22, 8
90017838:	a54300ff 	andi	r10, r3, 255
9001783c:	be2a00f4 	bneid	r10, 244		// 90017930
90017840:	306a007f 	addik	r3, r10, 127
90017844:	31200001 	addik	r9, r0, 1
90017848:	f2d30000 	sbi	r22, r19, 0
9001784c:	10690000 	addk	r3, r9, r0
90017850:	e9e10000 	lwi	r15, r1, 0
90017854:	ea61001c 	lwi	r19, r1, 28
90017858:	eac10020 	lwi	r22, r1, 32
9001785c:	eae10024 	lwi	r23, r1, 36
90017860:	b60f0008 	rtsd	r15, 8
90017864:	30210028 	addik	r1, r1, 40
90017868:	bc33ffdc 	bnei	r19, -36		// 90017844
9001786c:	b810ffe0 	brid	-32		// 9001784c
90017870:	11200000 	addk	r9, r0, r0
90017874:	b0009002 	imm	-28670
90017878:	30a03c58 	addik	r5, r0, 15448
9001787c:	b0009002 	imm	-28670
90017880:	30c03468 	addik	r6, r0, 13416
90017884:	b9f4cb0c 	brlid	r15, -13556	// 90014390 <strcmp>
90017888:	80000000 	or	r0, r0, r0
9001788c:	bc230038 	bnei	r3, 56		// 900178c4
90017890:	be13ffdc 	beqid	r19, -36		// 9001786c
90017894:	64760208 	bsrai	r3, r22, 8
90017898:	a54300ff 	andi	r10, r3, 255
9001789c:	be0affac 	beqid	r10, -84		// 90017848
900178a0:	31200001 	addik	r9, r0, 1
900178a4:	306a005f 	addik	r3, r10, 95
900178a8:	a46300ff 	andi	r3, r3, 255
900178ac:	2240005d 	addi	r18, r0, 93
900178b0:	16439003 	cmpu	r18, r3, r18
900178b4:	beb20290 	bgeid	r18, 656		// 90017b44
900178b8:	a49600ff 	andi	r4, r22, 255
900178bc:	b810ff90 	brid	-112		// 9001784c
900178c0:	3120ffff 	addik	r9, r0, -1
900178c4:	b0009002 	imm	-28670
900178c8:	30a03c58 	addik	r5, r0, 15448
900178cc:	b0009002 	imm	-28670
900178d0:	30c03470 	addik	r6, r0, 13424
900178d4:	b9f4cabc 	brlid	r15, -13636	// 90014390 <strcmp>
900178d8:	80000000 	or	r0, r0, r0
900178dc:	bc23ff8c 	bnei	r3, -116		// 90017868
900178e0:	be13ff6c 	beqid	r19, -148		// 9001784c
900178e4:	31200001 	addik	r9, r0, 1
900178e8:	64760208 	bsrai	r3, r22, 8
900178ec:	a54300ff 	andi	r10, r3, 255
900178f0:	be2a011c 	bneid	r10, 284		// 90017a0c
900178f4:	a4b600ff 	andi	r5, r22, 255
900178f8:	e8770000 	lwi	r3, r23, 0
900178fc:	be030028 	beqid	r3, 40		// 90017924
90017900:	30800028 	addik	r4, r0, 40
90017904:	f9570000 	swi	r10, r23, 0
90017908:	3060001b 	addik	r3, r0, 27
9001790c:	f0730000 	sbi	r3, r19, 0
90017910:	30600042 	addik	r3, r0, 66
90017914:	f0930001 	sbi	r4, r19, 1
90017918:	f0730002 	sbi	r3, r19, 2
9001791c:	31200004 	addik	r9, r0, 4
90017920:	32730003 	addik	r19, r19, 3
90017924:	f0b30000 	sbi	r5, r19, 0
90017928:	b810ff28 	brid	-216		// 90017850
9001792c:	10690000 	addk	r3, r9, r0
90017930:	a46300ff 	andi	r3, r3, 255
90017934:	2240001e 	addi	r18, r0, 30
90017938:	16439003 	cmpu	r18, r3, r18
9001793c:	beb20024 	bgeid	r18, 36		// 90017960
90017940:	a49600ff 	andi	r4, r22, 255
90017944:	306a0020 	addik	r3, r10, 32
90017948:	a46300ff 	andi	r3, r3, 255
9001794c:	2240000f 	addi	r18, r0, 15
90017950:	16439003 	cmpu	r18, r3, r18
90017954:	be52fef8 	bltid	r18, -264		// 9001784c
90017958:	3120ffff 	addik	r9, r0, -1
9001795c:	a49600ff 	andi	r4, r22, 255
90017960:	3064ffc0 	addik	r3, r4, -64
90017964:	a46300ff 	andi	r3, r3, 255
90017968:	2240003e 	addi	r18, r0, 62
9001796c:	16439003 	cmpu	r18, r3, r18
90017970:	beb20014 	bgeid	r18, 20		// 90017984
90017974:	a8640080 	xori	r3, r4, 128
90017978:	2240007c 	addi	r18, r0, 124
9001797c:	16439003 	cmpu	r18, r3, r18
90017980:	bc52ff3c 	blti	r18, -196		// 900178bc
90017984:	f0930001 	sbi	r4, r19, 1
90017988:	f1530000 	sbi	r10, r19, 0
9001798c:	b810fec0 	brid	-320		// 9001784c
90017990:	31200002 	addik	r9, r0, 2
90017994:	3076f800 	addik	r3, r22, -2048
90017998:	b0000000 	imm	0
9001799c:	2240f7ff 	addi	r18, r0, -2049
900179a0:	16439003 	cmpu	r18, r3, r18
900179a4:	bcb20154 	bgei	r18, 340		// 90017af8
900179a8:	b000ffff 	imm	-1
900179ac:	30760000 	addik	r3, r22, 0
900179b0:	b000001e 	imm	30
900179b4:	2240ffff 	addi	r18, r0, -1
900179b8:	16439003 	cmpu	r18, r3, r18
900179bc:	be5200c4 	bltid	r18, 196		// 90017a80
900179c0:	a4d60fc0 	andi	r6, r22, 4032
900179c4:	b000001c 	imm	28
900179c8:	a4960000 	andi	r4, r22, 0
900179cc:	b0000003 	imm	3
900179d0:	a4b6f000 	andi	r5, r22, -4096
900179d4:	64840212 	bsrai	r4, r4, 18
900179d8:	64a5020c 	bsrai	r5, r5, 12
900179dc:	64c60206 	bsrai	r6, r6, 6
900179e0:	a476003f 	andi	r3, r22, 63
900179e4:	a084fff0 	ori	r4, r4, -16
900179e8:	a0a5ff80 	ori	r5, r5, -128
900179ec:	a0c6ff80 	ori	r6, r6, -128
900179f0:	a063ff80 	ori	r3, r3, -128
900179f4:	f0730003 	sbi	r3, r19, 3
900179f8:	f0930000 	sbi	r4, r19, 0
900179fc:	f0b30001 	sbi	r5, r19, 1
90017a00:	f0d30002 	sbi	r6, r19, 2
90017a04:	b810fe48 	brid	-440		// 9001784c
90017a08:	31200004 	addik	r9, r0, 4
90017a0c:	306affdf 	addik	r3, r10, -33
90017a10:	a46300ff 	andi	r3, r3, 255
90017a14:	2240005d 	addi	r18, r0, 93
90017a18:	16439003 	cmpu	r18, r3, r18
90017a1c:	be52fe30 	bltid	r18, -464		// 9001784c
90017a20:	3120ffff 	addik	r9, r0, -1
90017a24:	3065ffdf 	addik	r3, r5, -33
90017a28:	a46300ff 	andi	r3, r3, 255
90017a2c:	2240005d 	addi	r18, r0, 93
90017a30:	16439003 	cmpu	r18, r3, r18
90017a34:	be52fe1c 	bltid	r18, -484		// 90017850
90017a38:	10690000 	addk	r3, r9, r0
90017a3c:	e8770000 	lwi	r3, r23, 0
90017a40:	be230030 	bneid	r3, 48		// 90017a70
90017a44:	31200002 	addik	r9, r0, 2
90017a48:	30600001 	addik	r3, r0, 1
90017a4c:	f8770000 	swi	r3, r23, 0
90017a50:	3080001b 	addik	r4, r0, 27
90017a54:	f0930000 	sbi	r4, r19, 0
90017a58:	30600024 	addik	r3, r0, 36
90017a5c:	30800042 	addik	r4, r0, 66
90017a60:	f0730001 	sbi	r3, r19, 1
90017a64:	f0930002 	sbi	r4, r19, 2
90017a68:	31200005 	addik	r9, r0, 5
90017a6c:	32730003 	addik	r19, r19, 3
90017a70:	f0b30001 	sbi	r5, r19, 1
90017a74:	f1530000 	sbi	r10, r19, 0
90017a78:	b810fdd8 	brid	-552		// 90017850
90017a7c:	10690000 	addk	r3, r9, r0
90017a80:	b000ffe0 	imm	-32
90017a84:	30760000 	addik	r3, r22, 0
90017a88:	b00003df 	imm	991
90017a8c:	2240ffff 	addi	r18, r0, -1
90017a90:	16439003 	cmpu	r18, r3, r18
90017a94:	be5200cc 	bltid	r18, 204		// 90017b60
90017a98:	a4f60fc0 	andi	r7, r22, 4032
90017a9c:	b0000300 	imm	768
90017aa0:	a4960000 	andi	r4, r22, 0
90017aa4:	b00000fc 	imm	252
90017aa8:	a4b60000 	andi	r5, r22, 0
90017aac:	b0000003 	imm	3
90017ab0:	a4d6f000 	andi	r6, r22, -4096
90017ab4:	64840218 	bsrai	r4, r4, 24
90017ab8:	64a50212 	bsrai	r5, r5, 18
90017abc:	64c6020c 	bsrai	r6, r6, 12
90017ac0:	64e70206 	bsrai	r7, r7, 6
90017ac4:	a476003f 	andi	r3, r22, 63
90017ac8:	a084fff8 	ori	r4, r4, -8
90017acc:	a0a5ff80 	ori	r5, r5, -128
90017ad0:	a0c6ff80 	ori	r6, r6, -128
90017ad4:	a0e7ff80 	ori	r7, r7, -128
90017ad8:	a063ff80 	ori	r3, r3, -128
90017adc:	f0730004 	sbi	r3, r19, 4
90017ae0:	f0930000 	sbi	r4, r19, 0
90017ae4:	f0b30001 	sbi	r5, r19, 1
90017ae8:	f0d30002 	sbi	r6, r19, 2
90017aec:	f0f30003 	sbi	r7, r19, 3
90017af0:	b810fd5c 	brid	-676		// 9001784c
90017af4:	31200005 	addik	r9, r0, 5
90017af8:	b000ffff 	imm	-1
90017afc:	30762800 	addik	r3, r22, 10240
90017b00:	224007ff 	addi	r18, r0, 2047
90017b04:	16439003 	cmpu	r18, r3, r18
90017b08:	beb2fdb4 	bgeid	r18, -588		// 900178bc
90017b0c:	a4b60fc0 	andi	r5, r22, 4032
90017b10:	b0000000 	imm	0
90017b14:	a476f000 	andi	r3, r22, -4096
90017b18:	6463020c 	bsrai	r3, r3, 12
90017b1c:	64a50206 	bsrai	r5, r5, 6
90017b20:	a496003f 	andi	r4, r22, 63
90017b24:	a063ffe0 	ori	r3, r3, -32
90017b28:	a0a5ff80 	ori	r5, r5, -128
90017b2c:	a084ff80 	ori	r4, r4, -128
90017b30:	f0930002 	sbi	r4, r19, 2
90017b34:	f0730000 	sbi	r3, r19, 0
90017b38:	f0b30001 	sbi	r5, r19, 1
90017b3c:	b810fd10 	brid	-752		// 9001784c
90017b40:	31200003 	addik	r9, r0, 3
90017b44:	3064005f 	addik	r3, r4, 95
90017b48:	a46300ff 	andi	r3, r3, 255
90017b4c:	2240005d 	addi	r18, r0, 93
90017b50:	16439003 	cmpu	r18, r3, r18
90017b54:	bcb2fe30 	bgei	r18, -464		// 90017984
90017b58:	b810fcf4 	brid	-780		// 9001784c
90017b5c:	3120ffff 	addik	r9, r0, -1
90017b60:	b00003ff 	imm	1023
90017b64:	3240ffff 	addik	r18, r0, -1
90017b68:	16569001 	cmp	r18, r22, r18
90017b6c:	beb2fd50 	bgeid	r18, -688		// 900178bc
90017b70:	a5160fc0 	andi	r8, r22, 4032
90017b74:	b0004000 	imm	16384
90017b78:	a4960000 	andi	r4, r22, 0
90017b7c:	b0003f00 	imm	16128
90017b80:	a4b60000 	andi	r5, r22, 0
90017b84:	b00000fc 	imm	252
90017b88:	a4d60000 	andi	r6, r22, 0
90017b8c:	b0000003 	imm	3
90017b90:	a4f6f000 	andi	r7, r22, -4096
90017b94:	6484021e 	bsrai	r4, r4, 30
90017b98:	64a50218 	bsrai	r5, r5, 24
90017b9c:	64c60212 	bsrai	r6, r6, 18
90017ba0:	64e7020c 	bsrai	r7, r7, 12
90017ba4:	65080206 	bsrai	r8, r8, 6
90017ba8:	a476003f 	andi	r3, r22, 63
90017bac:	a084fffc 	ori	r4, r4, -4
90017bb0:	a0a5ff80 	ori	r5, r5, -128
90017bb4:	a0c6ff80 	ori	r6, r6, -128
90017bb8:	a0e7ff80 	ori	r7, r7, -128
90017bbc:	a108ff80 	ori	r8, r8, -128
90017bc0:	a063ff80 	ori	r3, r3, -128
90017bc4:	f0730005 	sbi	r3, r19, 5
90017bc8:	f0930000 	sbi	r4, r19, 0
90017bcc:	f0b30001 	sbi	r5, r19, 1
90017bd0:	f0d30002 	sbi	r6, r19, 2
90017bd4:	f0f30003 	sbi	r7, r19, 3
90017bd8:	f1130004 	sbi	r8, r19, 4
90017bdc:	b810fc70 	brid	-912		// 9001784c
90017be0:	31200006 	addik	r9, r0, 6

90017be4 <__swsetup>:
90017be4:	b0009002 	imm	-28670
90017be8:	e8803b60 	lwi	r4, r0, 15200
90017bec:	3021ffe0 	addik	r1, r1, -32
90017bf0:	fa61001c 	swi	r19, r1, 28
90017bf4:	f9e10000 	swi	r15, r1, 0
90017bf8:	be040010 	beqid	r4, 16		// 90017c08
90017bfc:	12650000 	addk	r19, r5, r0
90017c00:	e8640018 	lwi	r3, r4, 24
90017c04:	bc03008c 	beqi	r3, 140		// 90017c90
90017c08:	b0009002 	imm	-28670
90017c0c:	aa5334a4 	xori	r18, r19, 13476
90017c10:	bc120094 	beqi	r18, 148		// 90017ca4
90017c14:	b0009002 	imm	-28670
90017c18:	aa5334c4 	xori	r18, r19, 13508
90017c1c:	bc120098 	beqi	r18, 152		// 90017cb4
90017c20:	b0009002 	imm	-28670
90017c24:	aa5334e4 	xori	r18, r19, 13540
90017c28:	bc12009c 	beqi	r18, 156		// 90017cc4
90017c2c:	e493000c 	lhui	r4, r19, 12
90017c30:	a4640008 	andi	r3, r4, 8
90017c34:	be0300ac 	beqid	r3, 172		// 90017ce0
90017c38:	a4640010 	andi	r3, r4, 16
90017c3c:	e8930010 	lwi	r4, r19, 16
90017c40:	bc040094 	beqi	r4, 148		// 90017cd4
90017c44:	e473000c 	lhui	r3, r19, 12
90017c48:	a4830001 	andi	r4, r3, 1
90017c4c:	be240020 	bneid	r4, 32		// 90017c6c
90017c50:	10a00000 	addk	r5, r0, r0
90017c54:	a4630002 	andi	r3, r3, 2
90017c58:	bc230008 	bnei	r3, 8		// 90017c60
90017c5c:	e8930014 	lwi	r4, r19, 20
90017c60:	f8930008 	swi	r4, r19, 8
90017c64:	b8100018 	brid	24		// 90017c7c
90017c68:	10a00000 	addk	r5, r0, r0
90017c6c:	e8730014 	lwi	r3, r19, 20
90017c70:	f8b30008 	swi	r5, r19, 8
90017c74:	14630000 	rsubk	r3, r3, r0
90017c78:	f8730018 	swi	r3, r19, 24
90017c7c:	10650000 	addk	r3, r5, r0
90017c80:	e9e10000 	lwi	r15, r1, 0
90017c84:	ea61001c 	lwi	r19, r1, 28
90017c88:	b60f0008 	rtsd	r15, 8
90017c8c:	30210020 	addik	r1, r1, 32
90017c90:	b9f41dd4 	brlid	r15, 7636	// 90019a64 <__sinit>
90017c94:	10a40000 	addk	r5, r4, r0
90017c98:	b0009002 	imm	-28670
90017c9c:	aa5334a4 	xori	r18, r19, 13476
90017ca0:	bc32ff74 	bnei	r18, -140		// 90017c14
90017ca4:	b0009002 	imm	-28670
90017ca8:	e8603b60 	lwi	r3, r0, 15200
90017cac:	ea630000 	lwi	r19, r3, 0
90017cb0:	b800ff7c 	bri	-132		// 90017c2c
90017cb4:	b0009002 	imm	-28670
90017cb8:	e8603b60 	lwi	r3, r0, 15200
90017cbc:	ea630004 	lwi	r19, r3, 4
90017cc0:	b800ff6c 	bri	-148		// 90017c2c
90017cc4:	b0009002 	imm	-28670
90017cc8:	e8603b60 	lwi	r3, r0, 15200
90017ccc:	ea630008 	lwi	r19, r3, 8
90017cd0:	b800ff5c 	bri	-164		// 90017c2c
90017cd4:	b9f42dd4 	brlid	r15, 11732	// 9001aaa8 <__smakebuf>
90017cd8:	10b30000 	addk	r5, r19, r0
90017cdc:	b800ff68 	bri	-152		// 90017c44
90017ce0:	be03ff9c 	beqid	r3, -100		// 90017c7c
90017ce4:	30a0ffff 	addik	r5, r0, -1
90017ce8:	a4640004 	andi	r3, r4, 4
90017cec:	bc030054 	beqi	r3, 84		// 90017d40
90017cf0:	e8d30034 	lwi	r6, r19, 52
90017cf4:	be060024 	beqid	r6, 36		// 90017d18
90017cf8:	30730044 	addik	r3, r19, 68
90017cfc:	16433000 	rsubk	r18, r3, r6
90017d00:	bc120014 	beqi	r18, 20		// 90017d14
90017d04:	b0009002 	imm	-28670
90017d08:	e8a03b60 	lwi	r5, r0, 15200
90017d0c:	b9f423c8 	brlid	r15, 9160	// 9001a0d4 <_free_r>
90017d10:	80000000 	or	r0, r0, r0
90017d14:	f8130034 	swi	r0, r19, 52
90017d18:	e473000c 	lhui	r3, r19, 12
90017d1c:	e8930010 	lwi	r4, r19, 16
90017d20:	f8130004 	swi	r0, r19, 4
90017d24:	a463ffdb 	andi	r3, r3, -37
90017d28:	f473000c 	shi	r3, r19, 12
90017d2c:	f8930000 	swi	r4, r19, 0
90017d30:	e473000c 	lhui	r3, r19, 12
90017d34:	a0630008 	ori	r3, r3, 8
90017d38:	f473000c 	shi	r3, r19, 12
90017d3c:	b800ff04 	bri	-252		// 90017c40
90017d40:	e8930010 	lwi	r4, r19, 16
90017d44:	b800ffec 	bri	-20		// 90017d30

90017d48 <__call_exitprocs>:
90017d48:	b0009002 	imm	-28670
90017d4c:	e8603268 	lwi	r3, r0, 12904
90017d50:	3021ffc8 	addik	r1, r1, -56
90017d54:	fb410030 	swi	r26, r1, 48
90017d58:	fb610034 	swi	r27, r1, 52
90017d5c:	f9e10000 	swi	r15, r1, 0
90017d60:	fa61001c 	swi	r19, r1, 28
90017d64:	fac10020 	swi	r22, r1, 32
90017d68:	fae10024 	swi	r23, r1, 36
90017d6c:	fb010028 	swi	r24, r1, 40
90017d70:	fb21002c 	swi	r25, r1, 44
90017d74:	eb030048 	lwi	r24, r3, 72
90017d78:	13650000 	addk	r27, r5, r0
90017d7c:	be180050 	beqid	r24, 80		// 90017dcc
90017d80:	13460000 	addk	r26, r6, r0
90017d84:	e8780004 	lwi	r3, r24, 4
90017d88:	eb380088 	lwi	r25, r24, 136
90017d8c:	3263ffff 	addik	r19, r3, -1
90017d90:	bc53003c 	blti	r19, 60		// 90017dcc
90017d94:	64930402 	bslli	r4, r19, 2
90017d98:	30640008 	addik	r3, r4, 8
90017d9c:	12d81800 	addk	r22, r24, r3
90017da0:	be060074 	beqid	r6, 116		// 90017e14
90017da4:	12f92000 	addk	r23, r25, r4
90017da8:	bc1900c0 	beqi	r25, 192		// 90017e68
90017dac:	e8770080 	lwi	r3, r23, 128
90017db0:	1643d000 	rsubk	r18, r3, r26
90017db4:	bc1200ec 	beqi	r18, 236		// 90017ea0
90017db8:	3273ffff 	addik	r19, r19, -1
90017dbc:	32f7fffc 	addik	r23, r23, -4
90017dc0:	aa53ffff 	xori	r18, r19, -1
90017dc4:	be32ffe8 	bneid	r18, -24		// 90017dac
90017dc8:	32d6fffc 	addik	r22, r22, -4
90017dcc:	e9e10000 	lwi	r15, r1, 0
90017dd0:	ea61001c 	lwi	r19, r1, 28
90017dd4:	eac10020 	lwi	r22, r1, 32
90017dd8:	eae10024 	lwi	r23, r1, 36
90017ddc:	eb010028 	lwi	r24, r1, 40
90017de0:	eb21002c 	lwi	r25, r1, 44
90017de4:	eb410030 	lwi	r26, r1, 48
90017de8:	eb610034 	lwi	r27, r1, 52
90017dec:	b60f0008 	rtsd	r15, 8
90017df0:	30210038 	addik	r1, r1, 56
90017df4:	e8b70000 	lwi	r5, r23, 0
90017df8:	99fc3800 	brald	r15, r7
90017dfc:	80000000 	or	r0, r0, r0
90017e00:	3273ffff 	addik	r19, r19, -1
90017e04:	32f7fffc 	addik	r23, r23, -4
90017e08:	aa53ffff 	xori	r18, r19, -1
90017e0c:	be12ffc0 	beqid	r18, -64		// 90017dcc
90017e10:	32d6fffc 	addik	r22, r22, -4
90017e14:	e8780004 	lwi	r3, r24, 4
90017e18:	e8f60000 	lwi	r7, r22, 0
90017e1c:	3063ffff 	addik	r3, r3, -1
90017e20:	16439800 	rsubk	r18, r3, r19
90017e24:	bc120074 	beqi	r18, 116		// 90017e98
90017e28:	f8160000 	swi	r0, r22, 0
90017e2c:	bc07ffd4 	beqi	r7, -44		// 90017e00
90017e30:	be190058 	beqid	r25, 88		// 90017e88
90017e34:	30800001 	addik	r4, r0, 1
90017e38:	e8790100 	lwi	r3, r25, 256
90017e3c:	44849c00 	bsll	r4, r4, r19
90017e40:	84641800 	and	r3, r4, r3
90017e44:	bc030044 	beqi	r3, 68		// 90017e88
90017e48:	e8790104 	lwi	r3, r25, 260
90017e4c:	84641800 	and	r3, r4, r3
90017e50:	bc23ffa4 	bnei	r3, -92		// 90017df4
90017e54:	e8d70000 	lwi	r6, r23, 0
90017e58:	99fc3800 	brald	r15, r7
90017e5c:	10bb0000 	addk	r5, r27, r0
90017e60:	b810ffa4 	brid	-92		// 90017e04
90017e64:	3273ffff 	addik	r19, r19, -1
90017e68:	3273ffff 	addik	r19, r19, -1
90017e6c:	aa53ffff 	xori	r18, r19, -1
90017e70:	be12ff5c 	beqid	r18, -164		// 90017dcc
90017e74:	3273ffff 	addik	r19, r19, -1
90017e78:	aa53ffff 	xori	r18, r19, -1
90017e7c:	be32fff0 	bneid	r18, -16		// 90017e6c
90017e80:	3273ffff 	addik	r19, r19, -1
90017e84:	b800ff48 	bri	-184		// 90017dcc
90017e88:	99fc3800 	brald	r15, r7
90017e8c:	3273ffff 	addik	r19, r19, -1
90017e90:	b810ff78 	brid	-136		// 90017e08
90017e94:	32f7fffc 	addik	r23, r23, -4
90017e98:	fa780004 	swi	r19, r24, 4
90017e9c:	b800ff90 	bri	-112		// 90017e2c
90017ea0:	e8780004 	lwi	r3, r24, 4
90017ea4:	e8f60000 	lwi	r7, r22, 0
90017ea8:	3063ffff 	addik	r3, r3, -1
90017eac:	16439800 	rsubk	r18, r3, r19
90017eb0:	bc120054 	beqi	r18, 84		// 90017f04
90017eb4:	f8160000 	swi	r0, r22, 0
90017eb8:	bc07ff00 	beqi	r7, -256		// 90017db8
90017ebc:	bc190038 	beqi	r25, 56		// 90017ef4
90017ec0:	30800001 	addik	r4, r0, 1
90017ec4:	e8790100 	lwi	r3, r25, 256
90017ec8:	44849c00 	bsll	r4, r4, r19
90017ecc:	84641800 	and	r3, r4, r3
90017ed0:	bc030024 	beqi	r3, 36		// 90017ef4
90017ed4:	e8790104 	lwi	r3, r25, 260
90017ed8:	84641800 	and	r3, r4, r3
90017edc:	bc230030 	bnei	r3, 48		// 90017f0c
90017ee0:	e8d70000 	lwi	r6, r23, 0
90017ee4:	99fc3800 	brald	r15, r7
90017ee8:	10bb0000 	addk	r5, r27, r0
90017eec:	b810fed0 	brid	-304		// 90017dbc
90017ef0:	3273ffff 	addik	r19, r19, -1
90017ef4:	99fc3800 	brald	r15, r7
90017ef8:	3273ffff 	addik	r19, r19, -1
90017efc:	b810fec4 	brid	-316		// 90017dc0
90017f00:	32f7fffc 	addik	r23, r23, -4
90017f04:	fa780004 	swi	r19, r24, 4
90017f08:	b800ffb0 	bri	-80		// 90017eb8
90017f0c:	e8b70000 	lwi	r5, r23, 0
90017f10:	99fc3800 	brald	r15, r7
90017f14:	3273ffff 	addik	r19, r19, -1
90017f18:	b810fea8 	brid	-344		// 90017dc0
90017f1c:	32f7fffc 	addik	r23, r23, -4

90017f20 <quorem>:
90017f20:	3021ffc0 	addik	r1, r1, -64
90017f24:	fb410030 	swi	r26, r1, 48
90017f28:	fb810038 	swi	r28, r1, 56
90017f2c:	f9e10000 	swi	r15, r1, 0
90017f30:	fa61001c 	swi	r19, r1, 28
90017f34:	fac10020 	swi	r22, r1, 32
90017f38:	fae10024 	swi	r23, r1, 36
90017f3c:	fb010028 	swi	r24, r1, 40
90017f40:	fb21002c 	swi	r25, r1, 44
90017f44:	fb610034 	swi	r27, r1, 52
90017f48:	fba1003c 	swi	r29, r1, 60
90017f4c:	13850000 	addk	r28, r5, r0
90017f50:	e8650010 	lwi	r3, r5, 16
90017f54:	e8a60010 	lwi	r5, r6, 16
90017f58:	13460000 	addk	r26, r6, r0
90017f5c:	16451801 	cmp	r18, r5, r3
90017f60:	be520118 	bltid	r18, 280		// 90018078
90017f64:	10800000 	addk	r4, r0, r0
90017f68:	32c5ffff 	addik	r22, r5, -1
90017f6c:	64760402 	bslli	r3, r22, 2
90017f70:	32fc0014 	addik	r23, r28, 20
90017f74:	cb771800 	lw	r27, r23, r3
90017f78:	32660014 	addik	r19, r6, 20
90017f7c:	c8c39800 	lw	r6, r3, r19
90017f80:	10bb0000 	addk	r5, r27, r0
90017f84:	13331800 	addk	r25, r19, r3
90017f88:	30c60001 	addik	r6, r6, 1
90017f8c:	b9f4a000 	brlid	r15, -24576	// 90011f8c <__udivsi3>
90017f90:	13a3b800 	addk	r29, r3, r23
90017f94:	be230118 	bneid	r3, 280		// 900180ac
90017f98:	13030000 	addk	r24, r3, r0
90017f9c:	10da0000 	addk	r6, r26, r0
90017fa0:	b9f438b0 	brlid	r15, 14512	// 9001b850 <__mcmp>
90017fa4:	10bc0000 	addk	r5, r28, r0
90017fa8:	be4300cc 	bltid	r3, 204		// 90018074
90017fac:	11200000 	addk	r9, r0, r0
90017fb0:	11170000 	addk	r8, r23, r0
90017fb4:	11490000 	addk	r10, r9, r0
90017fb8:	33180001 	addik	r24, r24, 1
90017fbc:	e8b30000 	lwi	r5, r19, 0
90017fc0:	e8880000 	lwi	r4, r8, 0
90017fc4:	32730004 	addik	r19, r19, 4
90017fc8:	b0000000 	imm	0
90017fcc:	a465ffff 	andi	r3, r5, -1
90017fd0:	106a1800 	addk	r3, r10, r3
90017fd4:	64e30010 	bsrli	r7, r3, 16
90017fd8:	64c40010 	bsrli	r6, r4, 16
90017fdc:	64a50010 	bsrli	r5, r5, 16
90017fe0:	b0000000 	imm	0
90017fe4:	a463ffff 	andi	r3, r3, -1
90017fe8:	b0000000 	imm	0
90017fec:	a484ffff 	andi	r4, r4, -1
90017ff0:	14832000 	rsubk	r4, r3, r4
90017ff4:	10844800 	addk	r4, r4, r9
90017ff8:	10a53800 	addk	r5, r5, r7
90017ffc:	b0000000 	imm	0
90018000:	a465ffff 	andi	r3, r5, -1
90018004:	64e40210 	bsrai	r7, r4, 16
90018008:	65450010 	bsrli	r10, r5, 16
9001800c:	14c33000 	rsubk	r6, r3, r6
90018010:	10c63800 	addk	r6, r6, r7
90018014:	f4c80000 	shi	r6, r8, 0
90018018:	f4880002 	shi	r4, r8, 2
9001801c:	65260210 	bsrai	r9, r6, 16
90018020:	1653c803 	cmpu	r18, r19, r25
90018024:	beb2ff98 	bgeid	r18, -104		// 90017fbc
90018028:	31080004 	addik	r8, r8, 4
9001802c:	64760402 	bslli	r3, r22, 2
90018030:	c883b800 	lw	r4, r3, r23
90018034:	be240040 	bneid	r4, 64		// 90018074
90018038:	10771800 	addk	r3, r23, r3
9001803c:	3083fffc 	addik	r4, r3, -4
90018040:	1644b803 	cmpu	r18, r4, r23
90018044:	bcb2002c 	bgei	r18, 44		// 90018070
90018048:	e863fffc 	lwi	r3, r3, -4
9001804c:	be030018 	beqid	r3, 24		// 90018064
90018050:	3084fffc 	addik	r4, r4, -4
90018054:	b800001c 	bri	28		// 90018070
90018058:	e8640000 	lwi	r3, r4, 0
9001805c:	be230014 	bneid	r3, 20		// 90018070
90018060:	3084fffc 	addik	r4, r4, -4
90018064:	1644b803 	cmpu	r18, r4, r23
90018068:	be52fff0 	bltid	r18, -16		// 90018058
9001806c:	32d6ffff 	addik	r22, r22, -1
90018070:	fadc0010 	swi	r22, r28, 16
90018074:	10980000 	addk	r4, r24, r0
90018078:	10640000 	addk	r3, r4, r0
9001807c:	e9e10000 	lwi	r15, r1, 0
90018080:	ea61001c 	lwi	r19, r1, 28
90018084:	eac10020 	lwi	r22, r1, 32
90018088:	eae10024 	lwi	r23, r1, 36
9001808c:	eb010028 	lwi	r24, r1, 40
90018090:	eb21002c 	lwi	r25, r1, 44
90018094:	eb410030 	lwi	r26, r1, 48
90018098:	eb610034 	lwi	r27, r1, 52
9001809c:	eb810038 	lwi	r28, r1, 56
900180a0:	eba1003c 	lwi	r29, r1, 60
900180a4:	b60f0008 	rtsd	r15, 8
900180a8:	30210040 	addik	r1, r1, 64
900180ac:	11400000 	addk	r10, r0, r0
900180b0:	11170000 	addk	r8, r23, r0
900180b4:	11330000 	addk	r9, r19, r0
900180b8:	116a0000 	addk	r11, r10, r0
900180bc:	e8890000 	lwi	r4, r9, 0
900180c0:	e8a80000 	lwi	r5, r8, 0
900180c4:	31290004 	addik	r9, r9, 4
900180c8:	b0000000 	imm	0
900180cc:	a464ffff 	andi	r3, r4, -1
900180d0:	40781800 	mul	r3, r24, r3
900180d4:	b0000000 	imm	0
900180d8:	a4c5ffff 	andi	r6, r5, -1
900180dc:	64840010 	bsrli	r4, r4, 16
900180e0:	64a50010 	bsrli	r5, r5, 16
900180e4:	40982000 	mul	r4, r24, r4
900180e8:	106b1800 	addk	r3, r11, r3
900180ec:	64e30010 	bsrli	r7, r3, 16
900180f0:	b0000000 	imm	0
900180f4:	a463ffff 	andi	r3, r3, -1
900180f8:	14c33000 	rsubk	r6, r3, r6
900180fc:	10c65000 	addk	r6, r6, r10
90018100:	10843800 	addk	r4, r4, r7
90018104:	b0000000 	imm	0
90018108:	a464ffff 	andi	r3, r4, -1
9001810c:	64e60210 	bsrai	r7, r6, 16
90018110:	65640010 	bsrli	r11, r4, 16
90018114:	14a32800 	rsubk	r5, r3, r5
90018118:	10a53800 	addk	r5, r5, r7
9001811c:	f4a80000 	shi	r5, r8, 0
90018120:	f4c80002 	shi	r6, r8, 2
90018124:	65450210 	bsrai	r10, r5, 16
90018128:	1649c803 	cmpu	r18, r9, r25
9001812c:	beb2ff90 	bgeid	r18, -112		// 900180bc
90018130:	31080004 	addik	r8, r8, 4
90018134:	be3bfe68 	bneid	r27, -408		// 90017f9c
90018138:	309dfffc 	addik	r4, r29, -4
9001813c:	1644b803 	cmpu	r18, r4, r23
90018140:	bcb2002c 	bgei	r18, 44		// 9001816c
90018144:	e87dfffc 	lwi	r3, r29, -4
90018148:	be030018 	beqid	r3, 24		// 90018160
9001814c:	3084fffc 	addik	r4, r4, -4
90018150:	b800001c 	bri	28		// 9001816c
90018154:	e8640000 	lwi	r3, r4, 0
90018158:	be230014 	bneid	r3, 20		// 9001816c
9001815c:	3084fffc 	addik	r4, r4, -4
90018160:	1644b803 	cmpu	r18, r4, r23
90018164:	be52fff0 	bltid	r18, -16		// 90018154
90018168:	32d6ffff 	addik	r22, r22, -1
9001816c:	fadc0010 	swi	r22, r28, 16
90018170:	b810fe30 	brid	-464		// 90017fa0
90018174:	10da0000 	addk	r6, r26, r0

90018178 <_dtoa_r>:
90018178:	3021ff78 	addik	r1, r1, -136
9001817c:	fa61005c 	swi	r19, r1, 92
90018180:	fae10064 	swi	r23, r1, 100
90018184:	fb410070 	swi	r26, r1, 112
90018188:	fb610074 	swi	r27, r1, 116
9001818c:	fba1007c 	swi	r29, r1, 124
90018190:	f9e10000 	swi	r15, r1, 0
90018194:	fac10060 	swi	r22, r1, 96
90018198:	fb010068 	swi	r24, r1, 104
9001819c:	fb21006c 	swi	r25, r1, 108
900181a0:	fb810078 	swi	r28, r1, 120
900181a4:	fbc10080 	swi	r30, r1, 128
900181a8:	fbe10084 	swi	r31, r1, 132
900181ac:	eac50024 	lwi	r22, r5, 36
900181b0:	13a50000 	addk	r29, r5, r0
900181b4:	f9010098 	swi	r8, r1, 152
900181b8:	f921009c 	swi	r9, r1, 156
900181bc:	f94100a0 	swi	r10, r1, 160
900181c0:	13460000 	addk	r26, r6, r0
900181c4:	13670000 	addk	r27, r7, r0
900181c8:	eae100a4 	lwi	r23, r1, 164
900181cc:	be160a5c 	beqid	r22, 2652		// 90018c28
900181d0:	12760000 	addk	r19, r22, r0
900181d4:	e8f60000 	lwi	r7, r22, 0
900181d8:	be070030 	beqid	r7, 48		// 90018208
900181dc:	10c70000 	addk	r6, r7, r0
900181e0:	e8760004 	lwi	r3, r22, 4
900181e4:	f8670004 	swi	r3, r7, 4
900181e8:	e8960004 	lwi	r4, r22, 4
900181ec:	30600001 	addik	r3, r0, 1
900181f0:	44632400 	bsll	r3, r3, r4
900181f4:	f8670008 	swi	r3, r7, 8
900181f8:	b9f437d4 	brlid	r15, 14292	// 9001b9cc <_Bfree>
900181fc:	10bd0000 	addk	r5, r29, r0
90018200:	e87d0024 	lwi	r3, r29, 36
90018204:	f8030000 	swi	r0, r3, 0
90018208:	be5a04c8 	bltid	r26, 1224		// 900186d0
9001820c:	30600001 	addik	r3, r0, 1
90018210:	f8170000 	swi	r0, r23, 0
90018214:	b0007ff0 	imm	32752
90018218:	a47a0000 	andi	r3, r26, 0
9001821c:	b0007ff0 	imm	32752
90018220:	aa430000 	xori	r18, r3, 0
90018224:	be12046c 	beqid	r18, 1132		// 90018690
90018228:	10ba0000 	addk	r5, r26, r0
9001822c:	10db0000 	addk	r6, r27, r0
90018230:	13da0000 	addk	r30, r26, r0
90018234:	10e00000 	addk	r7, r0, r0
90018238:	11000000 	addk	r8, r0, r0
9001823c:	b9f475f4 	brlid	r15, 30196	// 9001f830 <__nedf2>
90018240:	13fb0000 	addk	r31, r27, r0
90018244:	be23006c 	bneid	r3, 108		// 900182b0
90018248:	30600001 	addik	r3, r0, 1
9001824c:	e88100a0 	lwi	r4, r1, 160
90018250:	e8a100a8 	lwi	r5, r1, 168
90018254:	f8640000 	swi	r3, r4, 0
90018258:	b0009002 	imm	-28670
9001825c:	30803488 	addik	r4, r0, 13448
90018260:	be050018 	beqid	r5, 24		// 90018278
90018264:	10640000 	addk	r3, r4, r0
90018268:	b0009002 	imm	-28670
9001826c:	30603489 	addik	r3, r0, 13449
90018270:	f8650000 	swi	r3, r5, 0
90018274:	10640000 	addk	r3, r4, r0
90018278:	e9e10000 	lwi	r15, r1, 0
9001827c:	ea61005c 	lwi	r19, r1, 92
90018280:	eac10060 	lwi	r22, r1, 96
90018284:	eae10064 	lwi	r23, r1, 100
90018288:	eb010068 	lwi	r24, r1, 104
9001828c:	eb21006c 	lwi	r25, r1, 108
90018290:	eb410070 	lwi	r26, r1, 112
90018294:	eb610074 	lwi	r27, r1, 116
90018298:	eb810078 	lwi	r28, r1, 120
9001829c:	eba1007c 	lwi	r29, r1, 124
900182a0:	ebc10080 	lwi	r30, r1, 128
900182a4:	ebe10084 	lwi	r31, r1, 132
900182a8:	b60f0008 	rtsd	r15, 8
900182ac:	30210088 	addik	r1, r1, 136
900182b0:	10da0000 	addk	r6, r26, r0
900182b4:	10bd0000 	addk	r5, r29, r0
900182b8:	10fb0000 	addk	r7, r27, r0
900182bc:	31010020 	addik	r8, r1, 32
900182c0:	b9f43d18 	brlid	r15, 15640	// 9001bfd8 <_d2b>
900182c4:	3121001c 	addik	r9, r1, 28
900182c8:	f8610030 	swi	r3, r1, 48
900182cc:	647a0014 	bsrli	r3, r26, 20
900182d0:	a4c307ff 	andi	r6, r3, 2047
900182d4:	be060438 	beqid	r6, 1080		// 9001870c
900182d8:	10bb0000 	addk	r5, r27, r0
900182dc:	b000000f 	imm	15
900182e0:	a47affff 	andi	r3, r26, -1
900182e4:	eb01001c 	lwi	r24, r1, 28
900182e8:	b0003ff0 	imm	16368
900182ec:	a0830000 	ori	r4, r3, 0
900182f0:	10600000 	addk	r3, r0, r0
900182f4:	3266fc01 	addik	r19, r6, -1023
900182f8:	f8610034 	swi	r3, r1, 52
900182fc:	b0003ff8 	imm	16376
90018300:	30e00000 	addik	r7, r0, 0
90018304:	31000000 	addik	r8, r0, 0
90018308:	10c50000 	addk	r6, r5, r0
9001830c:	b9f46cbc 	brlid	r15, 27836	// 9001efc8 <__subdf3>
90018310:	10a40000 	addk	r5, r4, r0
90018314:	11030000 	addk	r8, r3, r0
90018318:	10a80000 	addk	r5, r8, r0
9001831c:	b0003fd2 	imm	16338
90018320:	30e087a7 	addik	r7, r0, -30809
90018324:	b000636f 	imm	25455
90018328:	31004361 	addik	r8, r0, 17249
9001832c:	b9f46dc0 	brlid	r15, 28096	// 9001f0ec <__muldf3>
90018330:	10c40000 	addk	r6, r4, r0
90018334:	11030000 	addk	r8, r3, r0
90018338:	10a80000 	addk	r5, r8, r0
9001833c:	b0003fc6 	imm	16326
90018340:	30e08a28 	addik	r7, r0, -30168
90018344:	b0008b60 	imm	-29856
90018348:	3100c8b3 	addik	r8, r0, -14157
9001834c:	b9f46d14 	brlid	r15, 27924	// 9001f060 <__adddf3>
90018350:	10c40000 	addk	r6, r4, r0
90018354:	10b30000 	addk	r5, r19, r0
90018358:	12c30000 	addk	r22, r3, r0
9001835c:	b9f477a4 	brlid	r15, 30628	// 9001fb00 <__floatsidf>
90018360:	12e40000 	addk	r23, r4, r0
90018364:	11030000 	addk	r8, r3, r0
90018368:	10a80000 	addk	r5, r8, r0
9001836c:	b0003fd3 	imm	16339
90018370:	30e04413 	addik	r7, r0, 17427
90018374:	b000509f 	imm	20639
90018378:	310079fb 	addik	r8, r0, 31227
9001837c:	b9f46d70 	brlid	r15, 28016	// 9001f0ec <__muldf3>
90018380:	10c40000 	addk	r6, r4, r0
90018384:	11430000 	addk	r10, r3, r0
90018388:	10b60000 	addk	r5, r22, r0
9001838c:	10d70000 	addk	r6, r23, r0
90018390:	10ea0000 	addk	r7, r10, r0
90018394:	b9f46ccc 	brlid	r15, 27852	// 9001f060 <__adddf3>
90018398:	11040000 	addk	r8, r4, r0
9001839c:	12c30000 	addk	r22, r3, r0
900183a0:	12e40000 	addk	r23, r4, r0
900183a4:	10c40000 	addk	r6, r4, r0
900183a8:	b9f47874 	brlid	r15, 30836	// 9001fc1c <__fixdfsi>
900183ac:	10b60000 	addk	r5, r22, r0
900183b0:	10b60000 	addk	r5, r22, r0
900183b4:	f8610048 	swi	r3, r1, 72
900183b8:	10e00000 	addk	r7, r0, r0
900183bc:	11000000 	addk	r8, r0, r0
900183c0:	b9f4768c 	brlid	r15, 30348	// 9001fa4c <__ltdf2>
900183c4:	10d70000 	addk	r6, r23, r0
900183c8:	bc430c68 	blti	r3, 3176		// 90019030
900183cc:	e8610048 	lwi	r3, r1, 72
900183d0:	30a00001 	addik	r5, r0, 1
900183d4:	f8a10044 	swi	r5, r1, 68
900183d8:	22400016 	addi	r18, r0, 22
900183dc:	16439003 	cmpu	r18, r3, r18
900183e0:	be520048 	bltid	r18, 72		// 90018428
900183e4:	64630403 	bslli	r3, r3, 3
900183e8:	10be0000 	addk	r5, r30, r0
900183ec:	b0009002 	imm	-28670
900183f0:	e8e33550 	lwi	r7, r3, 13648
900183f4:	b0009002 	imm	-28670
900183f8:	e9033554 	lwi	r8, r3, 13652
900183fc:	10800000 	addk	r4, r0, r0
90018400:	f8810044 	swi	r4, r1, 68
90018404:	b9f47648 	brlid	r15, 30280	// 9001fa4c <__ltdf2>
90018408:	10df0000 	addk	r6, r31, r0
9001840c:	bea30020 	bgeid	r3, 32		// 9001842c
90018410:	1473c000 	rsubk	r3, r19, r24
90018414:	e8a10048 	lwi	r5, r1, 72
90018418:	10600000 	addk	r3, r0, r0
9001841c:	f8610044 	swi	r3, r1, 68
90018420:	30a5ffff 	addik	r5, r5, -1
90018424:	f8a10048 	swi	r5, r1, 72
90018428:	1473c000 	rsubk	r3, r19, r24
9001842c:	30e3ffff 	addik	r7, r3, -1
90018430:	be470bec 	bltid	r7, 3052		// 9001901c
90018434:	10800000 	addk	r4, r0, r0
90018438:	f8e1003c 	swi	r7, r1, 60
9001843c:	f8810058 	swi	r4, r1, 88
90018440:	e8610048 	lwi	r3, r1, 72
90018444:	be430bb4 	bltid	r3, 2996		// 90018ff8
90018448:	10a00000 	addk	r5, r0, r0
9001844c:	e881003c 	lwi	r4, r1, 60
90018450:	f8610038 	swi	r3, r1, 56
90018454:	10841800 	addk	r4, r4, r3
90018458:	f881003c 	swi	r4, r1, 60
9001845c:	f8a10054 	swi	r5, r1, 84
90018460:	e8810098 	lwi	r4, r1, 152
90018464:	22400009 	addi	r18, r0, 9
90018468:	16449003 	cmpu	r18, r4, r18
9001846c:	beb204e0 	bgeid	r18, 1248		// 9001894c
90018470:	10a00000 	addk	r5, r0, r0
90018474:	f8a10098 	swi	r5, r1, 152
90018478:	32600001 	addik	r19, r0, 1
9001847c:	10800000 	addk	r4, r0, r0
90018480:	12e40000 	addk	r23, r4, r0
90018484:	30a0ffff 	addik	r5, r0, -1
90018488:	30600001 	addik	r3, r0, 1
9001848c:	f881009c 	swi	r4, r1, 156
90018490:	f8a1004c 	swi	r5, r1, 76
90018494:	f8a10050 	swi	r5, r1, 80
90018498:	f8610040 	swi	r3, r1, 64
9001849c:	eadd0024 	lwi	r22, r29, 36
900184a0:	f8160004 	swi	r0, r22, 4
900184a4:	e8d60004 	lwi	r6, r22, 4
900184a8:	b9f435a4 	brlid	r15, 13732	// 9001ba4c <_Balloc>
900184ac:	10bd0000 	addk	r5, r29, r0
900184b0:	e89d0024 	lwi	r4, r29, 36
900184b4:	f8760000 	swi	r3, r22, 0
900184b8:	e8840000 	lwi	r4, r4, 0
900184bc:	f881002c 	swi	r4, r1, 44
900184c0:	bc1302b0 	beqi	r19, 688		// 90018770
900184c4:	bc1702ac 	beqi	r23, 684		// 90018770
900184c8:	e8610048 	lwi	r3, r1, 72
900184cc:	be6309bc 	bleid	r3, 2492		// 90018e88
900184d0:	10830000 	addk	r4, r3, r0
900184d4:	a463000f 	andi	r3, r3, 15
900184d8:	64630403 	bslli	r3, r3, 3
900184dc:	66640204 	bsrai	r19, r4, 4
900184e0:	a4930010 	andi	r4, r19, 16
900184e4:	b0009002 	imm	-28670
900184e8:	eb033550 	lwi	r24, r3, 13648
900184ec:	b0009002 	imm	-28670
900184f0:	eb233554 	lwi	r25, r3, 13652
900184f4:	be040038 	beqid	r4, 56		// 9001852c
900184f8:	33800002 	addik	r28, r0, 2
900184fc:	10df0000 	addk	r6, r31, r0
90018500:	b0009002 	imm	-28670
90018504:	e8e03638 	lwi	r7, r0, 13880
90018508:	b0009002 	imm	-28670
9001850c:	e900363c 	lwi	r8, r0, 13884
90018510:	10be0000 	addk	r5, r30, r0
90018514:	a673000f 	andi	r19, r19, 15
90018518:	b9f46ffc 	brlid	r15, 28668	// 9001f514 <__divdf3>
9001851c:	33800003 	addik	r28, r0, 3
90018520:	10c30000 	addk	r6, r3, r0
90018524:	13640000 	addk	r27, r4, r0
90018528:	13460000 	addk	r26, r6, r0
9001852c:	be13004c 	beqid	r19, 76		// 90018578
90018530:	10db0000 	addk	r6, r27, r0
90018534:	12c00000 	addk	r22, r0, r0
90018538:	a4730001 	andi	r3, r19, 1
9001853c:	be03002c 	beqid	r3, 44		// 90018568
90018540:	10b80000 	addk	r5, r24, r0
90018544:	10d90000 	addk	r6, r25, r0
90018548:	b0009002 	imm	-28670
9001854c:	e8f63618 	lwi	r7, r22, 13848
90018550:	b0009002 	imm	-28670
90018554:	e916361c 	lwi	r8, r22, 13852
90018558:	b9f46b94 	brlid	r15, 27540	// 9001f0ec <__muldf3>
9001855c:	339c0001 	addik	r28, r28, 1
90018560:	13030000 	addk	r24, r3, r0
90018564:	13240000 	addk	r25, r4, r0
90018568:	92730001 	sra	r19, r19
9001856c:	be33ffcc 	bneid	r19, -52		// 90018538
90018570:	32d60008 	addik	r22, r22, 8
90018574:	10db0000 	addk	r6, r27, r0
90018578:	10ba0000 	addk	r5, r26, r0
9001857c:	10f80000 	addk	r7, r24, r0
90018580:	b9f46f94 	brlid	r15, 28564	// 9001f514 <__divdf3>
90018584:	11190000 	addk	r8, r25, r0
90018588:	10c30000 	addk	r6, r3, r0
9001858c:	13640000 	addk	r27, r4, r0
90018590:	13460000 	addk	r26, r6, r0
90018594:	e8610044 	lwi	r3, r1, 68
90018598:	be030020 	beqid	r3, 32		// 900185b8
9001859c:	10ba0000 	addk	r5, r26, r0
900185a0:	b0003ff0 	imm	16368
900185a4:	30e00000 	addik	r7, r0, 0
900185a8:	31000000 	addik	r8, r0, 0
900185ac:	b9f474a0 	brlid	r15, 29856	// 9001fa4c <__ltdf2>
900185b0:	10db0000 	addk	r6, r27, r0
900185b4:	bc431144 	blti	r3, 4420		// 900196f8
900185b8:	b9f47548 	brlid	r15, 30024	// 9001fb00 <__floatsidf>
900185bc:	10bc0000 	addk	r5, r28, r0
900185c0:	11030000 	addk	r8, r3, r0
900185c4:	10c40000 	addk	r6, r4, r0
900185c8:	10fa0000 	addk	r7, r26, r0
900185cc:	10a80000 	addk	r5, r8, r0
900185d0:	b9f46b1c 	brlid	r15, 27420	// 9001f0ec <__muldf3>
900185d4:	111b0000 	addk	r8, r27, r0
900185d8:	11030000 	addk	r8, r3, r0
900185dc:	10a80000 	addk	r5, r8, r0
900185e0:	b000401c 	imm	16412
900185e4:	30e00000 	addik	r7, r0, 0
900185e8:	31000000 	addik	r8, r0, 0
900185ec:	b9f46a74 	brlid	r15, 27252	// 9001f060 <__adddf3>
900185f0:	10c40000 	addk	r6, r4, r0
900185f4:	10c30000 	addk	r6, r3, r0
900185f8:	e8a10050 	lwi	r5, r1, 80
900185fc:	b000fcc0 	imm	-832
90018600:	31460000 	addik	r10, r6, 0
90018604:	be250b08 	bneid	r5, 2824		// 9001910c
90018608:	11640000 	addk	r11, r4, r0
9001860c:	b0004014 	imm	16404
90018610:	30e00000 	addik	r7, r0, 0
90018614:	31000000 	addik	r8, r0, 0
90018618:	10ba0000 	addk	r5, r26, r0
9001861c:	10db0000 	addk	r6, r27, r0
90018620:	12ca0000 	addk	r22, r10, r0
90018624:	b9f469a4 	brlid	r15, 27044	// 9001efc8 <__subdf3>
90018628:	12e40000 	addk	r23, r4, r0
9001862c:	13030000 	addk	r24, r3, r0
90018630:	10f60000 	addk	r7, r22, r0
90018634:	11170000 	addk	r8, r23, r0
90018638:	10b80000 	addk	r5, r24, r0
9001863c:	10c40000 	addk	r6, r4, r0
90018640:	b9f472a4 	brlid	r15, 29348	// 9001f8e4 <__gtdf2>
90018644:	13240000 	addk	r25, r4, r0
90018648:	be830e38 	bgtid	r3, 3640		// 90019480
9001864c:	10d90000 	addk	r6, r25, r0
90018650:	b0008000 	imm	-32768
90018654:	31560000 	addik	r10, r22, 0
90018658:	10b80000 	addk	r5, r24, r0
9001865c:	10ea0000 	addk	r7, r10, r0
90018660:	b9f473ec 	brlid	r15, 29676	// 9001fa4c <__ltdf2>
90018664:	11170000 	addk	r8, r23, r0
90018668:	bea30104 	bgeid	r3, 260		// 9001876c
9001866c:	135e0000 	addk	r26, r30, r0
90018670:	13c00000 	addk	r30, r0, r0
90018674:	133e0000 	addk	r25, r30, r0
90018678:	e881009c 	lwi	r4, r1, 156
9001867c:	eb81002c 	lwi	r28, r1, 44
90018680:	a884ffff 	xori	r4, r4, -1
90018684:	f8810048 	swi	r4, r1, 72
90018688:	b8100768 	brid	1896		// 90018df0
9001868c:	13e00000 	addk	r31, r0, r0
90018690:	e88100a0 	lwi	r4, r1, 160
90018694:	3060270f 	addik	r3, r0, 9999
90018698:	f8640000 	swi	r3, r4, 0
9001869c:	bc1b0044 	beqi	r27, 68		// 900186e0
900186a0:	b0009002 	imm	-28670
900186a4:	30803484 	addik	r4, r0, 13444
900186a8:	e8a100a8 	lwi	r5, r1, 168
900186ac:	be05fbcc 	beqid	r5, -1076		// 90018278
900186b0:	10640000 	addk	r3, r4, r0
900186b4:	e0640003 	lbui	r3, r4, 3
900186b8:	be230040 	bneid	r3, 64		// 900186f8
900186bc:	30a40003 	addik	r5, r4, 3
900186c0:	e86100a8 	lwi	r3, r1, 168
900186c4:	f8a30000 	swi	r5, r3, 0
900186c8:	b810fbb0 	brid	-1104		// 90018278
900186cc:	10640000 	addk	r3, r4, r0
900186d0:	b0007fff 	imm	32767
900186d4:	a75affff 	andi	r26, r26, -1
900186d8:	f8770000 	swi	r3, r23, 0
900186dc:	b800fb38 	bri	-1224		// 90018214
900186e0:	b000000f 	imm	15
900186e4:	a47affff 	andi	r3, r26, -1
900186e8:	b0009002 	imm	-28670
900186ec:	30803478 	addik	r4, r0, 13432
900186f0:	bc03ffb8 	beqi	r3, -72		// 900186a8
900186f4:	b800ffac 	bri	-84		// 900186a0
900186f8:	e86100a8 	lwi	r3, r1, 168
900186fc:	30a40008 	addik	r5, r4, 8
90018700:	f8a30000 	swi	r5, r3, 0
90018704:	b810fb74 	brid	-1164		// 90018278
90018708:	10640000 	addk	r3, r4, r0
9001870c:	eb01001c 	lwi	r24, r1, 28
90018710:	e8610020 	lwi	r3, r1, 32
90018714:	30980432 	addik	r4, r24, 1074
90018718:	12c41800 	addk	r22, r4, r3
9001871c:	32400020 	addik	r18, r0, 32	// 20 <_vector_hw_exception>
90018720:	16569001 	cmp	r18, r22, r18
90018724:	beb2058c 	bgeid	r18, 1420		// 90018cb0
90018728:	34760020 	rsubik	r3, r22, 32
9001872c:	34760040 	rsubik	r3, r22, 64
90018730:	447a1c00 	bsll	r3, r26, r3
90018734:	449bb000 	bsrl	r4, r27, r22
90018738:	82632000 	or	r19, r3, r4
9001873c:	b9f473c4 	brlid	r15, 29636	// 9001fb00 <__floatsidf>
90018740:	10b30000 	addk	r5, r19, r0
90018744:	10a40000 	addk	r5, r4, r0
90018748:	be530be4 	bltid	r19, 3044		// 9001932c
9001874c:	10830000 	addk	r4, r3, r0
90018750:	30600001 	addik	r3, r0, 1
90018754:	b000fe10 	imm	-496
90018758:	30840000 	addik	r4, r4, 0
9001875c:	f8610034 	swi	r3, r1, 52
90018760:	b810fb9c 	brid	-1124		// 900182fc
90018764:	3276fbcd 	addik	r19, r22, -1075
90018768:	135e0000 	addk	r26, r30, r0
9001876c:	137f0000 	addk	r27, r31, r0
90018770:	e8610020 	lwi	r3, r1, 32
90018774:	bc430218 	blti	r3, 536		// 9001898c
90018778:	e8810048 	lwi	r4, r1, 72
9001877c:	3240000e 	addik	r18, r0, 14
90018780:	16449001 	cmp	r18, r4, r18
90018784:	bc520208 	blti	r18, 520		// 9001898c
90018788:	e8a1009c 	lwi	r5, r1, 156
9001878c:	64640403 	bslli	r3, r4, 3
90018790:	b0009002 	imm	-28670
90018794:	eb033550 	lwi	r24, r3, 13648
90018798:	b0009002 	imm	-28670
9001879c:	eb233554 	lwi	r25, r3, 13652
900187a0:	bc450ca0 	blti	r5, 3232		// 90019440
900187a4:	eb81002c 	lwi	r28, r1, 44
900187a8:	e8810050 	lwi	r4, r1, 80
900187ac:	12da0000 	addk	r22, r26, r0
900187b0:	12fb0000 	addk	r23, r27, r0
900187b4:	b810003c 	brid	60		// 900187f0
900187b8:	13dc2000 	addk	r30, r28, r4
900187bc:	b0004024 	imm	16420
900187c0:	30e00000 	addik	r7, r0, 0
900187c4:	31000000 	addik	r8, r0, 0
900187c8:	b9f46924 	brlid	r15, 26916	// 9001f0ec <__muldf3>
900187cc:	10a40000 	addk	r5, r4, r0
900187d0:	12c30000 	addk	r22, r3, r0
900187d4:	10c40000 	addk	r6, r4, r0
900187d8:	12e40000 	addk	r23, r4, r0
900187dc:	10e00000 	addk	r7, r0, r0
900187e0:	11000000 	addk	r8, r0, r0
900187e4:	b9f4704c 	brlid	r15, 28748	// 9001f830 <__nedf2>
900187e8:	10b60000 	addk	r5, r22, r0
900187ec:	bc030128 	beqi	r3, 296		// 90018914
900187f0:	10f80000 	addk	r7, r24, r0
900187f4:	11190000 	addk	r8, r25, r0
900187f8:	10b60000 	addk	r5, r22, r0
900187fc:	b9f46d18 	brlid	r15, 27928	// 9001f514 <__divdf3>
90018800:	10d70000 	addk	r6, r23, r0
90018804:	11030000 	addk	r8, r3, r0
90018808:	10c40000 	addk	r6, r4, r0
9001880c:	b9f47410 	brlid	r15, 29712	// 9001fc1c <__fixdfsi>
90018810:	10a80000 	addk	r5, r8, r0
90018814:	10a30000 	addk	r5, r3, r0
90018818:	b9f472e8 	brlid	r15, 29416	// 9001fb00 <__floatsidf>
9001881c:	12630000 	addk	r19, r3, r0
90018820:	11430000 	addk	r10, r3, r0
90018824:	10b80000 	addk	r5, r24, r0
90018828:	10d90000 	addk	r6, r25, r0
9001882c:	10ea0000 	addk	r7, r10, r0
90018830:	b9f468bc 	brlid	r15, 26812	// 9001f0ec <__muldf3>
90018834:	11040000 	addk	r8, r4, r0
90018838:	11430000 	addk	r10, r3, r0
9001883c:	10b60000 	addk	r5, r22, r0
90018840:	10d70000 	addk	r6, r23, r0
90018844:	10ea0000 	addk	r7, r10, r0
90018848:	b9f46780 	brlid	r15, 26496	// 9001efc8 <__subdf3>
9001884c:	11040000 	addk	r8, r4, r0
90018850:	10a40000 	addk	r5, r4, r0
90018854:	10830000 	addk	r4, r3, r0
90018858:	30730030 	addik	r3, r19, 48
9001885c:	f07c0000 	sbi	r3, r28, 0
90018860:	339c0001 	addik	r28, r28, 1
90018864:	165ee000 	rsubk	r18, r30, r28
90018868:	be32ff54 	bneid	r18, -172		// 900187bc
9001886c:	10c50000 	addk	r6, r5, r0
90018870:	10e40000 	addk	r7, r4, r0
90018874:	10a40000 	addk	r5, r4, r0
90018878:	b9f467e8 	brlid	r15, 26600	// 9001f060 <__adddf3>
9001887c:	11060000 	addk	r8, r6, r0
90018880:	12c30000 	addk	r22, r3, r0
90018884:	10b80000 	addk	r5, r24, r0
90018888:	10d90000 	addk	r6, r25, r0
9001888c:	10f60000 	addk	r7, r22, r0
90018890:	11040000 	addk	r8, r4, r0
90018894:	b9f471b8 	brlid	r15, 29112	// 9001fa4c <__ltdf2>
90018898:	12e40000 	addk	r23, r4, r0
9001889c:	be430024 	bltid	r3, 36		// 900188c0
900188a0:	10b80000 	addk	r5, r24, r0
900188a4:	10d90000 	addk	r6, r25, r0
900188a8:	10f60000 	addk	r7, r22, r0
900188ac:	b9f46ed0 	brlid	r15, 28368	// 9001f77c <__eqdf2>
900188b0:	11170000 	addk	r8, r23, r0
900188b4:	be230060 	bneid	r3, 96		// 90018914
900188b8:	a4730001 	andi	r3, r19, 1
900188bc:	bc030058 	beqi	r3, 88		// 90018914
900188c0:	e8610048 	lwi	r3, r1, 72
900188c4:	f8610024 	swi	r3, r1, 36
900188c8:	109c0000 	addk	r4, r28, r0
900188cc:	3084ffff 	addik	r4, r4, -1
900188d0:	e0640000 	lbui	r3, r4, 0
900188d4:	aa430039 	xori	r18, r3, 57
900188d8:	bc320028 	bnei	r18, 40		// 90018900
900188dc:	e8a1002c 	lwi	r5, r1, 44
900188e0:	16442800 	rsubk	r18, r4, r5
900188e4:	be32ffe8 	bneid	r18, -24		// 900188cc
900188e8:	30600030 	addik	r3, r0, 48
900188ec:	f0650000 	sbi	r3, r5, 0
900188f0:	e8a10024 	lwi	r5, r1, 36
900188f4:	e0640000 	lbui	r3, r4, 0
900188f8:	30a50001 	addik	r5, r5, 1
900188fc:	f8a10024 	swi	r5, r1, 36
90018900:	e8a10024 	lwi	r5, r1, 36
90018904:	30630001 	addik	r3, r3, 1
90018908:	33840001 	addik	r28, r4, 1
9001890c:	f8a10048 	swi	r5, r1, 72
90018910:	f0640000 	sbi	r3, r4, 0
90018914:	e8c10030 	lwi	r6, r1, 48
90018918:	b9f430b4 	brlid	r15, 12468	// 9001b9cc <_Bfree>
9001891c:	10bd0000 	addk	r5, r29, r0
90018920:	f01c0000 	sbi	r0, r28, 0
90018924:	e8a10048 	lwi	r5, r1, 72
90018928:	e88100a0 	lwi	r4, r1, 160
9001892c:	30650001 	addik	r3, r5, 1
90018930:	e8a100a8 	lwi	r5, r1, 168
90018934:	f8640000 	swi	r3, r4, 0
90018938:	e881002c 	lwi	r4, r1, 44
9001893c:	be05f938 	beqid	r5, -1736		// 90018274
90018940:	10640000 	addk	r3, r4, r0
90018944:	fb850000 	swi	r28, r5, 0
90018948:	b800f930 	bri	-1744		// 90018278
9001894c:	32400005 	addik	r18, r0, 5
90018950:	16449001 	cmp	r18, r4, r18
90018954:	beb20014 	bgeid	r18, 20		// 90018968
90018958:	30c00001 	addik	r6, r0, 1
9001895c:	3064fffc 	addik	r3, r4, -4
90018960:	f8610098 	swi	r3, r1, 152
90018964:	10c00000 	addk	r6, r0, r0
90018968:	e8810098 	lwi	r4, r1, 152
9001896c:	22400005 	addi	r18, r0, 5
90018970:	16449003 	cmpu	r18, r4, r18
90018974:	be5202d8 	bltid	r18, 728		// 90018c4c
90018978:	30a00001 	addik	r5, r0, 1
9001897c:	64640402 	bslli	r3, r4, 2
90018980:	b0009002 	imm	-28670
90018984:	e883348c 	lwi	r4, r3, 13452
90018988:	98082000 	bra	r4
9001898c:	e8810040 	lwi	r4, r1, 64
90018990:	be240328 	bneid	r4, 808		// 90018cb8
90018994:	13c40000 	addk	r30, r4, r0
90018998:	ea610058 	lwi	r19, r1, 88
9001899c:	eac10054 	lwi	r22, r1, 84
900189a0:	bc730034 	blei	r19, 52		// 900189d4
900189a4:	e8a1003c 	lwi	r5, r1, 60
900189a8:	bc65002c 	blei	r5, 44		// 900189d4
900189ac:	16532801 	cmp	r18, r19, r5
900189b0:	be520498 	bltid	r18, 1176		// 90018e48
900189b4:	10730000 	addk	r3, r19, r0
900189b8:	e881003c 	lwi	r4, r1, 60
900189bc:	e8a10058 	lwi	r5, r1, 88
900189c0:	16639800 	rsubk	r19, r3, r19
900189c4:	14832000 	rsubk	r4, r3, r4
900189c8:	14a32800 	rsubk	r5, r3, r5
900189cc:	f881003c 	swi	r4, r1, 60
900189d0:	f8a10058 	swi	r5, r1, 88
900189d4:	e8610054 	lwi	r3, r1, 84
900189d8:	be630058 	bleid	r3, 88		// 90018a30
900189dc:	10bd0000 	addk	r5, r29, r0
900189e0:	e8810040 	lwi	r4, r1, 64
900189e4:	bc04070c 	beqi	r4, 1804		// 900190f0
900189e8:	be760038 	bleid	r22, 56		// 90018a20
900189ec:	10de0000 	addk	r6, r30, r0
900189f0:	10bd0000 	addk	r5, r29, r0
900189f4:	b9f446dc 	brlid	r15, 18140	// 9001d0d0 <_pow5mult>
900189f8:	10f60000 	addk	r7, r22, r0
900189fc:	10c30000 	addk	r6, r3, r0
90018a00:	10bd0000 	addk	r5, r29, r0
90018a04:	e8e10030 	lwi	r7, r1, 48
90018a08:	b9f44110 	brlid	r15, 16656	// 9001cb18 <_multiply>
90018a0c:	13c30000 	addk	r30, r3, r0
90018a10:	e8c10030 	lwi	r6, r1, 48
90018a14:	f8610030 	swi	r3, r1, 48
90018a18:	b9f42fb4 	brlid	r15, 12212	// 9001b9cc <_Bfree>
90018a1c:	10bd0000 	addk	r5, r29, r0
90018a20:	e8a10054 	lwi	r5, r1, 84
90018a24:	14f62800 	rsubk	r7, r22, r5
90018a28:	bc270448 	bnei	r7, 1096		// 90018e70
90018a2c:	10bd0000 	addk	r5, r29, r0
90018a30:	b9f443b4 	brlid	r15, 17332	// 9001cde4 <_i2b>
90018a34:	30c00001 	addik	r6, r0, 1
90018a38:	13230000 	addk	r25, r3, r0
90018a3c:	e8610038 	lwi	r3, r1, 56
90018a40:	be630018 	bleid	r3, 24		// 90018a58
90018a44:	10d90000 	addk	r6, r25, r0
90018a48:	10bd0000 	addk	r5, r29, r0
90018a4c:	b9f44684 	brlid	r15, 18052	// 9001d0d0 <_pow5mult>
90018a50:	10e30000 	addk	r7, r3, r0
90018a54:	13230000 	addk	r25, r3, r0
90018a58:	e8810098 	lwi	r4, r1, 152
90018a5c:	32400001 	addik	r18, r0, 1
90018a60:	16449001 	cmp	r18, r4, r18
90018a64:	beb20950 	bgeid	r18, 2384		// 900193b4
90018a68:	12c00000 	addk	r22, r0, r0
90018a6c:	e8810038 	lwi	r4, r1, 56
90018a70:	be240660 	bneid	r4, 1632		// 900190d0
90018a74:	30600001 	addik	r3, r0, 1
90018a78:	e8a1003c 	lwi	r5, r1, 60
90018a7c:	10651800 	addk	r3, r5, r3
90018a80:	a463001f 	andi	r3, r3, 31
90018a84:	be030028 	beqid	r3, 40		// 90018aac
90018a88:	3080001c 	addik	r4, r0, 28
90018a8c:	34630020 	rsubik	r3, r3, 32
90018a90:	32400004 	addik	r18, r0, 4
90018a94:	16439001 	cmp	r18, r3, r18
90018a98:	bc5203b8 	blti	r18, 952		// 90018e50
90018a9c:	32400003 	addik	r18, r0, 3
90018aa0:	16439001 	cmp	r18, r3, r18
90018aa4:	be520020 	bltid	r18, 32		// 90018ac4
90018aa8:	3083001c 	addik	r4, r3, 28
90018aac:	e8610058 	lwi	r3, r1, 88
90018ab0:	10a52000 	addk	r5, r5, r4
90018ab4:	f8a1003c 	swi	r5, r1, 60
90018ab8:	10632000 	addk	r3, r3, r4
90018abc:	f8610058 	swi	r3, r1, 88
90018ac0:	12732000 	addk	r19, r19, r4
90018ac4:	e8810058 	lwi	r4, r1, 88
90018ac8:	be640018 	bleid	r4, 24		// 90018ae0
90018acc:	10e40000 	addk	r7, r4, r0
90018ad0:	e8c10030 	lwi	r6, r1, 48
90018ad4:	b9f43df8 	brlid	r15, 15864	// 9001c8cc <_lshift>
90018ad8:	10bd0000 	addk	r5, r29, r0
90018adc:	f8610030 	swi	r3, r1, 48
90018ae0:	e8a1003c 	lwi	r5, r1, 60
90018ae4:	be650018 	bleid	r5, 24		// 90018afc
90018ae8:	10d90000 	addk	r6, r25, r0
90018aec:	10e50000 	addk	r7, r5, r0
90018af0:	b9f43ddc 	brlid	r15, 15836	// 9001c8cc <_lshift>
90018af4:	10bd0000 	addk	r5, r29, r0
90018af8:	13230000 	addk	r25, r3, r0
90018afc:	e8610044 	lwi	r3, r1, 68
90018b00:	bc230568 	bnei	r3, 1384		// 90019068
90018b04:	e8a10050 	lwi	r5, r1, 80
90018b08:	bc650848 	blei	r5, 2120		// 90019350
90018b0c:	e8a10040 	lwi	r5, r1, 64
90018b10:	bc050224 	beqi	r5, 548		// 90018d34
90018b14:	be730018 	bleid	r19, 24		// 90018b2c
90018b18:	10de0000 	addk	r6, r30, r0
90018b1c:	10f30000 	addk	r7, r19, r0
90018b20:	b9f43dac 	brlid	r15, 15788	// 9001c8cc <_lshift>
90018b24:	10bd0000 	addk	r5, r29, r0
90018b28:	13c30000 	addk	r30, r3, r0
90018b2c:	be360960 	bneid	r22, 2400		// 9001948c
90018b30:	107e0000 	addk	r3, r30, r0
90018b34:	13fe0000 	addk	r31, r30, r0
90018b38:	eb01002c 	lwi	r24, r1, 44
90018b3c:	13c30000 	addk	r30, r3, r0
90018b40:	a77b0001 	andi	r27, r27, 1
90018b44:	e8a10030 	lwi	r5, r1, 48
90018b48:	10d90000 	addk	r6, r25, r0
90018b4c:	b9f4f3d4 	brlid	r15, -3116	// 90017f20 <quorem>
90018b50:	33400001 	addik	r26, r0, 1
90018b54:	e8a10030 	lwi	r5, r1, 48
90018b58:	10df0000 	addk	r6, r31, r0
90018b5c:	b9f42cf4 	brlid	r15, 11508	// 9001b850 <__mcmp>
90018b60:	32e30030 	addik	r23, r3, 48
90018b64:	10fe0000 	addk	r7, r30, r0
90018b68:	10bd0000 	addk	r5, r29, r0
90018b6c:	10d90000 	addk	r6, r25, r0
90018b70:	b9f43848 	brlid	r15, 14408	// 9001c3b8 <__mdiff>
90018b74:	12c30000 	addk	r22, r3, r0
90018b78:	12630000 	addk	r19, r3, r0
90018b7c:	e863000c 	lwi	r3, r3, 12
90018b80:	bc030448 	beqi	r3, 1096		// 90018fc8
90018b84:	10d30000 	addk	r6, r19, r0
90018b88:	b9f42e44 	brlid	r15, 11844	// 9001b9cc <_Bfree>
90018b8c:	10bd0000 	addk	r5, r29, r0
90018b90:	e8810098 	lwi	r4, r1, 152
90018b94:	807a2000 	or	r3, r26, r4
90018b98:	bc230008 	bnei	r3, 8		// 90018ba0
90018b9c:	bc1b0b38 	beqi	r27, 2872		// 900196d4
90018ba0:	bc56085c 	blti	r22, 2140		// 900193fc
90018ba4:	e8a10098 	lwi	r5, r1, 152
90018ba8:	80762800 	or	r3, r22, r5
90018bac:	bc230008 	bnei	r3, 8		// 90018bb4
90018bb0:	bc1b084c 	beqi	r27, 2124		// 900193fc
90018bb4:	bc9a0ae0 	bgti	r26, 2784		// 90019694
90018bb8:	f2f80000 	sbi	r23, r24, 0
90018bbc:	e881002c 	lwi	r4, r1, 44
90018bc0:	e8a10050 	lwi	r5, r1, 80
90018bc4:	33180001 	addik	r24, r24, 1
90018bc8:	10642800 	addk	r3, r4, r5
90018bcc:	1643c000 	rsubk	r18, r3, r24
90018bd0:	be1201b8 	beqid	r18, 440		// 90018d88
90018bd4:	10bd0000 	addk	r5, r29, r0
90018bd8:	e8c10030 	lwi	r6, r1, 48
90018bdc:	30e0000a 	addik	r7, r0, 10
90018be0:	b9f43af0 	brlid	r15, 15088	// 9001c6d0 <_multadd>
90018be4:	11000000 	addk	r8, r0, r0
90018be8:	f8610030 	swi	r3, r1, 48
90018bec:	165ef800 	rsubk	r18, r30, r31
90018bf0:	be1203ec 	beqid	r18, 1004		// 90018fdc
90018bf4:	10df0000 	addk	r6, r31, r0
90018bf8:	10bd0000 	addk	r5, r29, r0
90018bfc:	30e0000a 	addik	r7, r0, 10
90018c00:	b9f43ad0 	brlid	r15, 15056	// 9001c6d0 <_multadd>
90018c04:	11000000 	addk	r8, r0, r0
90018c08:	10de0000 	addk	r6, r30, r0
90018c0c:	10bd0000 	addk	r5, r29, r0
90018c10:	30e0000a 	addik	r7, r0, 10
90018c14:	11000000 	addk	r8, r0, r0
90018c18:	b9f43ab8 	brlid	r15, 15032	// 9001c6d0 <_multadd>
90018c1c:	13e30000 	addk	r31, r3, r0
90018c20:	b810ff24 	brid	-220		// 90018b44
90018c24:	13c30000 	addk	r30, r3, r0
90018c28:	b9f41ff4 	brlid	r15, 8180	// 9001ac1c <malloc>
90018c2c:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
90018c30:	fa63000c 	swi	r19, r3, 12
90018c34:	f87d0024 	swi	r3, r29, 36
90018c38:	fa630004 	swi	r19, r3, 4
90018c3c:	fa630008 	swi	r19, r3, 8
90018c40:	fa630000 	swi	r19, r3, 0
90018c44:	b810f590 	brid	-2672		// 900181d4
90018c48:	12c30000 	addk	r22, r3, r0
90018c4c:	3080ffff 	addik	r4, r0, -1
90018c50:	f881004c 	swi	r4, r1, 76
90018c54:	f8810050 	swi	r4, r1, 80
90018c58:	f8a10040 	swi	r5, r1, 64
90018c5c:	eadd0024 	lwi	r22, r29, 36
90018c60:	f8160004 	swi	r0, r22, 4
90018c64:	22400017 	addi	r18, r0, 23
90018c68:	16539003 	cmpu	r18, r19, r18
90018c6c:	beb201c0 	bgeid	r18, 448		// 90018e2c
90018c70:	30800004 	addik	r4, r0, 4
90018c74:	e8b60004 	lwi	r5, r22, 4
90018c78:	10842000 	addk	r4, r4, r4
90018c7c:	30640014 	addik	r3, r4, 20
90018c80:	16439803 	cmpu	r18, r3, r19
90018c84:	beb2fff4 	bgeid	r18, -12		// 90018c78
90018c88:	30a50001 	addik	r5, r5, 1
90018c8c:	f8b60004 	swi	r5, r22, 4
90018c90:	e8a10050 	lwi	r5, r1, 80
90018c94:	2240000e 	addi	r18, r0, 14
90018c98:	16459003 	cmpu	r18, r5, r18
90018c9c:	beb201a4 	bgeid	r18, 420		// 90018e40
90018ca0:	10600000 	addk	r3, r0, r0
90018ca4:	8e660400 	pcmpne	r19, r6, r0
90018ca8:	b810f7fc 	brid	-2052		// 900184a4
90018cac:	a6e300ff 	andi	r23, r3, 255
90018cb0:	b810fa8c 	brid	-1396		// 9001873c
90018cb4:	467b1c00 	bsll	r19, r27, r3
90018cb8:	e8a10098 	lwi	r5, r1, 152
90018cbc:	32400001 	addik	r18, r0, 1
90018cc0:	16459001 	cmp	r18, r5, r18
90018cc4:	bcb2025c 	bgei	r18, 604		// 90018f20
90018cc8:	e8a10050 	lwi	r5, r1, 80
90018ccc:	e8810054 	lwi	r4, r1, 84
90018cd0:	3065ffff 	addik	r3, r5, -1
90018cd4:	16432001 	cmp	r18, r3, r4
90018cd8:	beb20024 	bgeid	r18, 36		// 90018cfc
90018cdc:	16c32000 	rsubk	r22, r3, r4
90018ce0:	e8a10038 	lwi	r5, r1, 56
90018ce4:	14641800 	rsubk	r3, r4, r3
90018ce8:	10841800 	addk	r4, r4, r3
90018cec:	10a51800 	addk	r5, r5, r3
90018cf0:	f8810054 	swi	r4, r1, 84
90018cf4:	f8a10038 	swi	r5, r1, 56
90018cf8:	12c00000 	addk	r22, r0, r0
90018cfc:	e8610050 	lwi	r3, r1, 80
90018d00:	bc4309ac 	blti	r3, 2476		// 900196ac
90018d04:	ea610058 	lwi	r19, r1, 88
90018d08:	e881003c 	lwi	r4, r1, 60
90018d0c:	10bd0000 	addk	r5, r29, r0
90018d10:	10841800 	addk	r4, r4, r3
90018d14:	f881003c 	swi	r4, r1, 60
90018d18:	e8810058 	lwi	r4, r1, 88
90018d1c:	10841800 	addk	r4, r4, r3
90018d20:	f8810058 	swi	r4, r1, 88
90018d24:	b9f440c0 	brlid	r15, 16576	// 9001cde4 <_i2b>
90018d28:	30c00001 	addik	r6, r0, 1
90018d2c:	b810fc74 	brid	-908		// 900189a0
90018d30:	13c30000 	addk	r30, r3, r0
90018d34:	eb01002c 	lwi	r24, r1, 44
90018d38:	e8a10030 	lwi	r5, r1, 48
90018d3c:	b8100028 	brid	40		// 90018d64
90018d40:	32600001 	addik	r19, r0, 1
90018d44:	10bd0000 	addk	r5, r29, r0
90018d48:	e8c10030 	lwi	r6, r1, 48
90018d4c:	30e0000a 	addik	r7, r0, 10
90018d50:	b9f43980 	brlid	r15, 14720	// 9001c6d0 <_multadd>
90018d54:	11000000 	addk	r8, r0, r0
90018d58:	10a30000 	addk	r5, r3, r0
90018d5c:	f8610030 	swi	r3, r1, 48
90018d60:	32730001 	addik	r19, r19, 1
90018d64:	b9f4f1bc 	brlid	r15, -3652	// 90017f20 <quorem>
90018d68:	10d90000 	addk	r6, r25, r0
90018d6c:	32e30030 	addik	r23, r3, 48
90018d70:	f2f80000 	sbi	r23, r24, 0
90018d74:	e8610050 	lwi	r3, r1, 80
90018d78:	16439801 	cmp	r18, r3, r19
90018d7c:	be52ffc8 	bltid	r18, -56		// 90018d44
90018d80:	33180001 	addik	r24, r24, 1
90018d84:	13e00000 	addk	r31, r0, r0
90018d88:	e8c10030 	lwi	r6, r1, 48
90018d8c:	10bd0000 	addk	r5, r29, r0
90018d90:	b9f43b3c 	brlid	r15, 15164	// 9001c8cc <_lshift>
90018d94:	30e00001 	addik	r7, r0, 1
90018d98:	10a30000 	addk	r5, r3, r0
90018d9c:	f8610030 	swi	r3, r1, 48
90018da0:	b9f42ab0 	brlid	r15, 10928	// 9001b850 <__mcmp>
90018da4:	10d90000 	addk	r6, r25, r0
90018da8:	bc6308c0 	blei	r3, 2240		// 90019668
90018dac:	10980000 	addk	r4, r24, r0
90018db0:	3084ffff 	addik	r4, r4, -1
90018db4:	e0640000 	lbui	r3, r4, 0
90018db8:	90630060 	sext8	r3, r3
90018dbc:	aa430039 	xori	r18, r3, 57
90018dc0:	be320630 	bneid	r18, 1584		// 900193f0
90018dc4:	30630001 	addik	r3, r3, 1
90018dc8:	e8a1002c 	lwi	r5, r1, 44
90018dcc:	16452000 	rsubk	r18, r5, r4
90018dd0:	be32ffe4 	bneid	r18, -28		// 90018db4
90018dd4:	3084ffff 	addik	r4, r4, -1
90018dd8:	e8610048 	lwi	r3, r1, 72
90018ddc:	33850001 	addik	r28, r5, 1
90018de0:	30630001 	addik	r3, r3, 1
90018de4:	f8610048 	swi	r3, r1, 72
90018de8:	30600031 	addik	r3, r0, 49
90018dec:	f0650000 	sbi	r3, r5, 0
90018df0:	10d90000 	addk	r6, r25, r0
90018df4:	b9f42bd8 	brlid	r15, 11224	// 9001b9cc <_Bfree>
90018df8:	10bd0000 	addk	r5, r29, r0
90018dfc:	bc1efb18 	beqi	r30, -1256		// 90018914
90018e00:	be1f0020 	beqid	r31, 32		// 90018e20
90018e04:	10de0000 	addk	r6, r30, r0
90018e08:	165ef800 	rsubk	r18, r30, r31
90018e0c:	be120010 	beqid	r18, 16		// 90018e1c
90018e10:	10df0000 	addk	r6, r31, r0
90018e14:	b9f42bb8 	brlid	r15, 11192	// 9001b9cc <_Bfree>
90018e18:	10bd0000 	addk	r5, r29, r0
90018e1c:	10de0000 	addk	r6, r30, r0
90018e20:	b9f42bac 	brlid	r15, 11180	// 9001b9cc <_Bfree>
90018e24:	10bd0000 	addk	r5, r29, r0
90018e28:	b800faec 	bri	-1300		// 90018914
90018e2c:	e8810050 	lwi	r4, r1, 80
90018e30:	2240000e 	addi	r18, r0, 14
90018e34:	16449003 	cmpu	r18, r4, r18
90018e38:	be52fe6c 	bltid	r18, -404		// 90018ca4
90018e3c:	10600000 	addk	r3, r0, r0
90018e40:	b810fe64 	brid	-412		// 90018ca4
90018e44:	30600001 	addik	r3, r0, 1
90018e48:	b810fb70 	brid	-1168		// 900189b8
90018e4c:	10650000 	addk	r3, r5, r0
90018e50:	e8810058 	lwi	r4, r1, 88
90018e54:	3063fffc 	addik	r3, r3, -4
90018e58:	10a51800 	addk	r5, r5, r3
90018e5c:	10841800 	addk	r4, r4, r3
90018e60:	f8a1003c 	swi	r5, r1, 60
90018e64:	f8810058 	swi	r4, r1, 88
90018e68:	b810fc5c 	brid	-932		// 90018ac4
90018e6c:	12731800 	addk	r19, r19, r3
90018e70:	e8c10030 	lwi	r6, r1, 48
90018e74:	b9f4425c 	brlid	r15, 16988	// 9001d0d0 <_pow5mult>
90018e78:	10bd0000 	addk	r5, r29, r0
90018e7c:	f8610030 	swi	r3, r1, 48
90018e80:	b810fbb0 	brid	-1104		// 90018a30
90018e84:	10bd0000 	addk	r5, r29, r0
90018e88:	14830000 	rsubk	r4, r3, r0
90018e8c:	be04f708 	beqid	r4, -2296		// 90018594
90018e90:	33800002 	addik	r28, r0, 2
90018e94:	a464000f 	andi	r3, r4, 15
90018e98:	64630403 	bslli	r3, r3, 3
90018e9c:	66640204 	bsrai	r19, r4, 4
90018ea0:	10be0000 	addk	r5, r30, r0
90018ea4:	b0009002 	imm	-28670
90018ea8:	e8e33550 	lwi	r7, r3, 13648
90018eac:	b0009002 	imm	-28670
90018eb0:	e9033554 	lwi	r8, r3, 13652
90018eb4:	b9f46238 	brlid	r15, 25144	// 9001f0ec <__muldf3>
90018eb8:	10df0000 	addk	r6, r31, r0
90018ebc:	10a40000 	addk	r5, r4, r0
90018ec0:	13430000 	addk	r26, r3, r0
90018ec4:	10830000 	addk	r4, r3, r0
90018ec8:	be130804 	beqid	r19, 2052		// 900196cc
90018ecc:	13650000 	addk	r27, r5, r0
90018ed0:	33800002 	addik	r28, r0, 2
90018ed4:	12c00000 	addk	r22, r0, r0
90018ed8:	a4730001 	andi	r3, r19, 1
90018edc:	be03002c 	beqid	r3, 44		// 90018f08
90018ee0:	10c50000 	addk	r6, r5, r0
90018ee4:	b0009002 	imm	-28670
90018ee8:	e8f63618 	lwi	r7, r22, 13848
90018eec:	b0009002 	imm	-28670
90018ef0:	e916361c 	lwi	r8, r22, 13852
90018ef4:	10a40000 	addk	r5, r4, r0
90018ef8:	b9f461f4 	brlid	r15, 25076	// 9001f0ec <__muldf3>
90018efc:	339c0001 	addik	r28, r28, 1
90018f00:	10a40000 	addk	r5, r4, r0
90018f04:	10830000 	addk	r4, r3, r0
90018f08:	92730001 	sra	r19, r19
90018f0c:	be33ffcc 	bneid	r19, -52		// 90018ed8
90018f10:	32d60008 	addik	r22, r22, 8
90018f14:	13440000 	addk	r26, r4, r0
90018f18:	b810f67c 	brid	-2436		// 90018594
90018f1c:	13650000 	addk	r27, r5, r0
90018f20:	e8810034 	lwi	r4, r1, 52
90018f24:	bc040874 	beqi	r4, 2164		// 90019798
90018f28:	ea610058 	lwi	r19, r1, 88
90018f2c:	eac10054 	lwi	r22, r1, 84
90018f30:	b810fdd8 	brid	-552		// 90018d08
90018f34:	30630433 	addik	r3, r3, 1075
90018f38:	10800000 	addk	r4, r0, r0
90018f3c:	f8810040 	swi	r4, r1, 64
90018f40:	e8a1009c 	lwi	r5, r1, 156
90018f44:	be650868 	bleid	r5, 2152		// 900197ac
90018f48:	30600001 	addik	r3, r0, 1
90018f4c:	f8a1004c 	swi	r5, r1, 76
90018f50:	f8a10050 	swi	r5, r1, 80
90018f54:	b810fd08 	brid	-760		// 90018c5c
90018f58:	12650000 	addk	r19, r5, r0
90018f5c:	b810f520 	brid	-2784		// 9001847c
90018f60:	8e660400 	pcmpne	r19, r6, r0
90018f64:	30600001 	addik	r3, r0, 1
90018f68:	f8610040 	swi	r3, r1, 64
90018f6c:	b800ffd4 	bri	-44		// 90018f40
90018f70:	30a00001 	addik	r5, r0, 1
90018f74:	f8a10040 	swi	r5, r1, 64
90018f78:	e881009c 	lwi	r4, r1, 156
90018f7c:	e8a10048 	lwi	r5, r1, 72
90018f80:	30640001 	addik	r3, r4, 1
90018f84:	12651800 	addk	r19, r5, r3
90018f88:	3073ffff 	addik	r3, r19, -1
90018f8c:	f861004c 	swi	r3, r1, 76
90018f90:	fa610050 	swi	r19, r1, 80
90018f94:	bc93fcc8 	bgti	r19, -824		// 90018c5c
90018f98:	2240000e 	addi	r18, r0, 14
90018f9c:	16539003 	cmpu	r18, r19, r18
90018fa0:	be520010 	bltid	r18, 16		// 90018fb0
90018fa4:	10600000 	addk	r3, r0, r0
90018fa8:	30600001 	addik	r3, r0, 1
90018fac:	fa610050 	swi	r19, r1, 80
90018fb0:	a6e300ff 	andi	r23, r3, 255
90018fb4:	b810f4e8 	brid	-2840		// 9001849c
90018fb8:	8e660400 	pcmpne	r19, r6, r0
90018fbc:	10600000 	addk	r3, r0, r0
90018fc0:	f8610040 	swi	r3, r1, 64
90018fc4:	b800ffb4 	bri	-76		// 90018f78
90018fc8:	e8a10030 	lwi	r5, r1, 48
90018fcc:	b9f42884 	brlid	r15, 10372	// 9001b850 <__mcmp>
90018fd0:	10d30000 	addk	r6, r19, r0
90018fd4:	b810fbb0 	brid	-1104		// 90018b84
90018fd8:	13430000 	addk	r26, r3, r0
90018fdc:	10bd0000 	addk	r5, r29, r0
90018fe0:	30e0000a 	addik	r7, r0, 10
90018fe4:	b9f436ec 	brlid	r15, 14060	// 9001c6d0 <_multadd>
90018fe8:	11000000 	addk	r8, r0, r0
90018fec:	13c30000 	addk	r30, r3, r0
90018ff0:	b810fb54 	brid	-1196		// 90018b44
90018ff4:	13e30000 	addk	r31, r3, r0
90018ff8:	10830000 	addk	r4, r3, r0
90018ffc:	e8610058 	lwi	r3, r1, 88
90019000:	14a40000 	rsubk	r5, r4, r0
90019004:	14641800 	rsubk	r3, r4, r3
90019008:	f8610058 	swi	r3, r1, 88
9001900c:	10600000 	addk	r3, r0, r0
90019010:	f8a10054 	swi	r5, r1, 84
90019014:	f8610038 	swi	r3, r1, 56
90019018:	b800f448 	bri	-3000		// 90018460
9001901c:	14e70000 	rsubk	r7, r7, r0
90019020:	10a00000 	addk	r5, r0, r0
90019024:	f8e10058 	swi	r7, r1, 88
90019028:	f8a1003c 	swi	r5, r1, 60
9001902c:	b800f414 	bri	-3052		// 90018440
90019030:	e8a10048 	lwi	r5, r1, 72
90019034:	b9f46acc 	brlid	r15, 27340	// 9001fb00 <__floatsidf>
90019038:	80000000 	or	r0, r0, r0
9001903c:	11430000 	addk	r10, r3, r0
90019040:	11040000 	addk	r8, r4, r0
90019044:	10b60000 	addk	r5, r22, r0
90019048:	10d70000 	addk	r6, r23, r0
9001904c:	b9f467e4 	brlid	r15, 26596	// 9001f830 <__nedf2>
90019050:	10ea0000 	addk	r7, r10, r0
90019054:	e8810048 	lwi	r4, r1, 72
90019058:	8c630400 	pcmpne	r3, r3, r0
9001905c:	14832000 	rsubk	r4, r3, r4
90019060:	f8810048 	swi	r4, r1, 72
90019064:	b800f368 	bri	-3224		// 900183cc
90019068:	e8a10030 	lwi	r5, r1, 48
9001906c:	b9f427e4 	brlid	r15, 10212	// 9001b850 <__mcmp>
90019070:	10d90000 	addk	r6, r25, r0
90019074:	bea3fa90 	bgeid	r3, -1392		// 90018b04
90019078:	10bd0000 	addk	r5, r29, r0
9001907c:	e8c10030 	lwi	r6, r1, 48
90019080:	30e0000a 	addik	r7, r0, 10
90019084:	b9f4364c 	brlid	r15, 13900	// 9001c6d0 <_multadd>
90019088:	11000000 	addk	r8, r0, r0
9001908c:	e8810048 	lwi	r4, r1, 72
90019090:	f8610030 	swi	r3, r1, 48
90019094:	e8a1004c 	lwi	r5, r1, 76
90019098:	e8610040 	lwi	r3, r1, 64
9001909c:	3084ffff 	addik	r4, r4, -1
900190a0:	f8810048 	swi	r4, r1, 72
900190a4:	f8a10050 	swi	r5, r1, 80
900190a8:	be03fa5c 	beqid	r3, -1444		// 90018b04
900190ac:	10de0000 	addk	r6, r30, r0
900190b0:	10bd0000 	addk	r5, r29, r0
900190b4:	30e0000a 	addik	r7, r0, 10
900190b8:	b9f43618 	brlid	r15, 13848	// 9001c6d0 <_multadd>
900190bc:	11000000 	addk	r8, r0, r0
900190c0:	e881004c 	lwi	r4, r1, 76
900190c4:	f8810050 	swi	r4, r1, 80
900190c8:	b810fa3c 	brid	-1476		// 90018b04
900190cc:	13c30000 	addk	r30, r3, r0
900190d0:	e8790010 	lwi	r3, r25, 16
900190d4:	64630402 	bslli	r3, r3, 2
900190d8:	1063c800 	addk	r3, r3, r25
900190dc:	e8a30010 	lwi	r5, r3, 16
900190e0:	b9f42604 	brlid	r15, 9732	// 9001b6e4 <_hi0bits>
900190e4:	80000000 	or	r0, r0, r0
900190e8:	b810f990 	brid	-1648		// 90018a78
900190ec:	34630020 	rsubik	r3, r3, 32
900190f0:	e8c10030 	lwi	r6, r1, 48
900190f4:	e8e10054 	lwi	r7, r1, 84
900190f8:	b9f43fd8 	brlid	r15, 16344	// 9001d0d0 <_pow5mult>
900190fc:	10bd0000 	addk	r5, r29, r0
90019100:	f8610030 	swi	r3, r1, 48
90019104:	b810f92c 	brid	-1748		// 90018a30
90019108:	10bd0000 	addk	r5, r29, r0
9001910c:	e8810048 	lwi	r4, r1, 72
90019110:	f8a10028 	swi	r5, r1, 40
90019114:	f8810024 	swi	r4, r1, 36
90019118:	e8a10040 	lwi	r5, r1, 64
9001911c:	be0503b0 	beqid	r5, 944		// 900194cc
90019120:	10aa0000 	addk	r5, r10, r0
90019124:	e8810028 	lwi	r4, r1, 40
90019128:	b0003fe0 	imm	16352
9001912c:	30a00000 	addik	r5, r0, 0
90019130:	30c00000 	addik	r6, r0, 0
90019134:	12ca0000 	addk	r22, r10, r0
90019138:	64640403 	bslli	r3, r4, 3
9001913c:	b0009002 	imm	-28670
90019140:	30803550 	addik	r4, r0, 13648
90019144:	12eb0000 	addk	r23, r11, r0
90019148:	131a0000 	addk	r24, r26, r0
9001914c:	10632000 	addk	r3, r3, r4
90019150:	e8e3fff8 	lwi	r7, r3, -8
90019154:	e903fffc 	lwi	r8, r3, -4
90019158:	e861002c 	lwi	r3, r1, 44
9001915c:	133b0000 	addk	r25, r27, r0
90019160:	b9f463b4 	brlid	r15, 25524	// 9001f514 <__divdf3>
90019164:	33830001 	addik	r28, r3, 1
90019168:	11030000 	addk	r8, r3, r0
9001916c:	10f60000 	addk	r7, r22, r0
90019170:	10c40000 	addk	r6, r4, r0
90019174:	10a80000 	addk	r5, r8, r0
90019178:	b9f45e50 	brlid	r15, 24144	// 9001efc8 <__subdf3>
9001917c:	11170000 	addk	r8, r23, r0
90019180:	10d90000 	addk	r6, r25, r0
90019184:	10b80000 	addk	r5, r24, r0
90019188:	13640000 	addk	r27, r4, r0
9001918c:	b9f46a90 	brlid	r15, 27280	// 9001fc1c <__fixdfsi>
90019190:	13430000 	addk	r26, r3, r0
90019194:	10a30000 	addk	r5, r3, r0
90019198:	b9f46968 	brlid	r15, 26984	// 9001fb00 <__floatsidf>
9001919c:	12c30000 	addk	r22, r3, r0
900191a0:	11430000 	addk	r10, r3, r0
900191a4:	10b80000 	addk	r5, r24, r0
900191a8:	10d90000 	addk	r6, r25, r0
900191ac:	10ea0000 	addk	r7, r10, r0
900191b0:	11040000 	addk	r8, r4, r0
900191b4:	b9f45e14 	brlid	r15, 24084	// 9001efc8 <__subdf3>
900191b8:	32d60030 	addik	r22, r22, 48
900191bc:	13240000 	addk	r25, r4, r0
900191c0:	13030000 	addk	r24, r3, r0
900191c4:	e881002c 	lwi	r4, r1, 44
900191c8:	10ba0000 	addk	r5, r26, r0
900191cc:	10db0000 	addk	r6, r27, r0
900191d0:	10f80000 	addk	r7, r24, r0
900191d4:	f2c40000 	sbi	r22, r4, 0
900191d8:	b9f4670c 	brlid	r15, 26380	// 9001f8e4 <__gtdf2>
900191dc:	11190000 	addk	r8, r25, r0
900191e0:	be830140 	bgtid	r3, 320		// 90019320
900191e4:	10f80000 	addk	r7, r24, r0
900191e8:	b0003ff0 	imm	16368
900191ec:	30a00000 	addik	r5, r0, 0
900191f0:	30c00000 	addik	r6, r0, 0
900191f4:	b9f45dd4 	brlid	r15, 24020	// 9001efc8 <__subdf3>
900191f8:	11190000 	addk	r8, r25, r0
900191fc:	11430000 	addk	r10, r3, r0
90019200:	10ba0000 	addk	r5, r26, r0
90019204:	10db0000 	addk	r6, r27, r0
90019208:	10ea0000 	addk	r7, r10, r0
9001920c:	b9f466d8 	brlid	r15, 26328	// 9001f8e4 <__gtdf2>
90019210:	11040000 	addk	r8, r4, r0
90019214:	be83f6b8 	bgtid	r3, -2376		// 900188cc
90019218:	109c0000 	addk	r4, r28, r0
9001921c:	e8a10028 	lwi	r5, r1, 40
90019220:	32400001 	addik	r18, r0, 1
90019224:	16459001 	cmp	r18, r5, r18
90019228:	be52005c 	bltid	r18, 92		// 90019284
9001922c:	10ba0000 	addk	r5, r26, r0
90019230:	b810f53c 	brid	-2756		// 9001876c
90019234:	135e0000 	addk	r26, r30, r0
90019238:	b0003ff0 	imm	16368
9001923c:	30a00000 	addik	r5, r0, 0
90019240:	30c00000 	addik	r6, r0, 0
90019244:	b9f45d84 	brlid	r15, 23940	// 9001efc8 <__subdf3>
90019248:	11190000 	addk	r8, r25, r0
9001924c:	11030000 	addk	r8, r3, r0
90019250:	10c40000 	addk	r6, r4, r0
90019254:	10fa0000 	addk	r7, r26, r0
90019258:	10a80000 	addk	r5, r8, r0
9001925c:	b9f467f0 	brlid	r15, 26608	// 9001fa4c <__ltdf2>
90019260:	111b0000 	addk	r8, r27, r0
90019264:	be43f668 	bltid	r3, -2456		// 900188cc
90019268:	109c0000 	addk	r4, r28, r0
9001926c:	e881002c 	lwi	r4, r1, 44
90019270:	e8a10028 	lwi	r5, r1, 40
90019274:	10642800 	addk	r3, r4, r5
90019278:	1643e000 	rsubk	r18, r3, r28
9001927c:	be12f4ec 	beqid	r18, -2836		// 90018768
90019280:	10ba0000 	addk	r5, r26, r0
90019284:	b0004024 	imm	16420
90019288:	30e00000 	addik	r7, r0, 0
9001928c:	31000000 	addik	r8, r0, 0
90019290:	b9f45e5c 	brlid	r15, 24156	// 9001f0ec <__muldf3>
90019294:	10db0000 	addk	r6, r27, r0
90019298:	b0004024 	imm	16420
9001929c:	30e00000 	addik	r7, r0, 0
900192a0:	31000000 	addik	r8, r0, 0
900192a4:	10b80000 	addk	r5, r24, r0
900192a8:	10d90000 	addk	r6, r25, r0
900192ac:	13430000 	addk	r26, r3, r0
900192b0:	b9f45e3c 	brlid	r15, 24124	// 9001f0ec <__muldf3>
900192b4:	13640000 	addk	r27, r4, r0
900192b8:	13030000 	addk	r24, r3, r0
900192bc:	10c40000 	addk	r6, r4, r0
900192c0:	13240000 	addk	r25, r4, r0
900192c4:	b9f46958 	brlid	r15, 26968	// 9001fc1c <__fixdfsi>
900192c8:	10b80000 	addk	r5, r24, r0
900192cc:	10a30000 	addk	r5, r3, r0
900192d0:	b9f46830 	brlid	r15, 26672	// 9001fb00 <__floatsidf>
900192d4:	12c30000 	addk	r22, r3, r0
900192d8:	11430000 	addk	r10, r3, r0
900192dc:	10b80000 	addk	r5, r24, r0
900192e0:	10d90000 	addk	r6, r25, r0
900192e4:	10ea0000 	addk	r7, r10, r0
900192e8:	11040000 	addk	r8, r4, r0
900192ec:	b9f45cdc 	brlid	r15, 23772	// 9001efc8 <__subdf3>
900192f0:	32d60030 	addik	r22, r22, 48
900192f4:	13030000 	addk	r24, r3, r0
900192f8:	10c40000 	addk	r6, r4, r0
900192fc:	10fa0000 	addk	r7, r26, r0
90019300:	10b80000 	addk	r5, r24, r0
90019304:	111b0000 	addk	r8, r27, r0
90019308:	f2dc0000 	sbi	r22, r28, 0
9001930c:	13240000 	addk	r25, r4, r0
90019310:	b9f4673c 	brlid	r15, 26428	// 9001fa4c <__ltdf2>
90019314:	339c0001 	addik	r28, r28, 1
90019318:	bea3ff20 	bgeid	r3, -224		// 90019238
9001931c:	10f80000 	addk	r7, r24, r0
90019320:	e8810024 	lwi	r4, r1, 36
90019324:	f8810048 	swi	r4, r1, 72
90019328:	b800f5ec 	bri	-2580		// 90018914
9001932c:	10c50000 	addk	r6, r5, r0
90019330:	b00041f0 	imm	16880
90019334:	30e00000 	addik	r7, r0, 0
90019338:	31000000 	addik	r8, r0, 0
9001933c:	b9f45d24 	brlid	r15, 23844	// 9001f060 <__adddf3>
90019340:	10a30000 	addk	r5, r3, r0
90019344:	10a40000 	addk	r5, r4, r0
90019348:	b810f408 	brid	-3064		// 90018750
9001934c:	10830000 	addk	r4, r3, r0
90019350:	e8610098 	lwi	r3, r1, 152
90019354:	32400002 	addik	r18, r0, 2
90019358:	16439001 	cmp	r18, r3, r18
9001935c:	bcb2f7b0 	bgei	r18, -2128		// 90018b0c
90019360:	be45f318 	bltid	r5, -3304		// 90018678
90019364:	10d90000 	addk	r6, r25, r0
90019368:	10bd0000 	addk	r5, r29, r0
9001936c:	30e00005 	addik	r7, r0, 5
90019370:	b9f43360 	brlid	r15, 13152	// 9001c6d0 <_multadd>
90019374:	11000000 	addk	r8, r0, r0
90019378:	10c30000 	addk	r6, r3, r0
9001937c:	e8a10030 	lwi	r5, r1, 48
90019380:	b9f424d0 	brlid	r15, 9424	// 9001b850 <__mcmp>
90019384:	13230000 	addk	r25, r3, r0
90019388:	bc63f2f0 	blei	r3, -3344		// 90018678
9001938c:	e8a10048 	lwi	r5, r1, 72
90019390:	e861002c 	lwi	r3, r1, 44
90019394:	e881002c 	lwi	r4, r1, 44
90019398:	30a50001 	addik	r5, r5, 1
9001939c:	f8a10048 	swi	r5, r1, 72
900193a0:	33830001 	addik	r28, r3, 1
900193a4:	30600031 	addik	r3, r0, 49
900193a8:	f0640000 	sbi	r3, r4, 0
900193ac:	b810fa44 	brid	-1468		// 90018df0
900193b0:	13e00000 	addk	r31, r0, r0
900193b4:	bc3bf6b8 	bnei	r27, -2376		// 90018a6c
900193b8:	b000000f 	imm	15
900193bc:	a47affff 	andi	r3, r26, -1
900193c0:	bc23f6ac 	bnei	r3, -2388		// 90018a6c
900193c4:	b0007ff0 	imm	32752
900193c8:	a47a0000 	andi	r3, r26, 0
900193cc:	bc03f6a0 	beqi	r3, -2400		// 90018a6c
900193d0:	e8a10058 	lwi	r5, r1, 88
900193d4:	e861003c 	lwi	r3, r1, 60
900193d8:	30a50001 	addik	r5, r5, 1
900193dc:	30630001 	addik	r3, r3, 1
900193e0:	f8a10058 	swi	r5, r1, 88
900193e4:	f861003c 	swi	r3, r1, 60
900193e8:	b810f684 	brid	-2428		// 90018a6c
900193ec:	32c00001 	addik	r22, r0, 1
900193f0:	f0640000 	sbi	r3, r4, 0
900193f4:	b810f9fc 	brid	-1540		// 90018df0
900193f8:	33840001 	addik	r28, r4, 1
900193fc:	be7a0038 	bleid	r26, 56		// 90019434
90019400:	10bd0000 	addk	r5, r29, r0
90019404:	e8c10030 	lwi	r6, r1, 48
90019408:	b9f434c4 	brlid	r15, 13508	// 9001c8cc <_lshift>
9001940c:	30e00001 	addik	r7, r0, 1
90019410:	10a30000 	addk	r5, r3, r0
90019414:	f8610030 	swi	r3, r1, 48
90019418:	b9f42438 	brlid	r15, 9272	// 9001b850 <__mcmp>
9001941c:	10d90000 	addk	r6, r25, r0
90019420:	bc6303a4 	blei	r3, 932		// 900197c4
90019424:	32f70001 	addik	r23, r23, 1
90019428:	aa57003a 	xori	r18, r23, 58
9001942c:	be120294 	beqid	r18, 660		// 900196c0
90019430:	30600039 	addik	r3, r0, 57
90019434:	f2f80000 	sbi	r23, r24, 0
90019438:	b810f9b8 	brid	-1608		// 90018df0
9001943c:	33980001 	addik	r28, r24, 1
90019440:	e8610050 	lwi	r3, r1, 80
90019444:	bc83f360 	bgti	r3, -3232		// 900187a4
90019448:	be43f228 	bltid	r3, -3544		// 90018670
9001944c:	10b80000 	addk	r5, r24, r0
90019450:	b0004014 	imm	16404
90019454:	30e00000 	addik	r7, r0, 0
90019458:	31000000 	addik	r8, r0, 0
9001945c:	b9f45c90 	brlid	r15, 23696	// 9001f0ec <__muldf3>
90019460:	10d90000 	addk	r6, r25, r0
90019464:	11030000 	addk	r8, r3, r0
90019468:	10c40000 	addk	r6, r4, r0
9001946c:	10fa0000 	addk	r7, r26, r0
90019470:	10a80000 	addk	r5, r8, r0
90019474:	b9f46524 	brlid	r15, 25892	// 9001f998 <__gedf2>
90019478:	111b0000 	addk	r8, r27, r0
9001947c:	bca3f1f4 	bgei	r3, -3596		// 90018670
90019480:	13c00000 	addk	r30, r0, r0
90019484:	b810ff08 	brid	-248		// 9001938c
90019488:	133e0000 	addk	r25, r30, r0
9001948c:	e8de0004 	lwi	r6, r30, 4
90019490:	b9f425bc 	brlid	r15, 9660	// 9001ba4c <_Balloc>
90019494:	10bd0000 	addk	r5, r29, r0
90019498:	e8fe0010 	lwi	r7, r30, 16
9001949c:	12c30000 	addk	r22, r3, r0
900194a0:	30de000c 	addik	r6, r30, 12
900194a4:	64e70402 	bslli	r7, r7, 2
900194a8:	30a3000c 	addik	r5, r3, 12
900194ac:	b9f4aa64 	brlid	r15, -21916	// 90013f10 <memcpy>
900194b0:	30e70008 	addik	r7, r7, 8
900194b4:	10bd0000 	addk	r5, r29, r0
900194b8:	10d60000 	addk	r6, r22, r0
900194bc:	b9f43410 	brlid	r15, 13328	// 9001c8cc <_lshift>
900194c0:	30e00001 	addik	r7, r0, 1
900194c4:	b810f674 	brid	-2444		// 90018b38
900194c8:	13fe0000 	addk	r31, r30, r0
900194cc:	e8810028 	lwi	r4, r1, 40
900194d0:	10cb0000 	addk	r6, r11, r0
900194d4:	64640403 	bslli	r3, r4, 3
900194d8:	b0009002 	imm	-28670
900194dc:	30803550 	addik	r4, r0, 13648
900194e0:	131a0000 	addk	r24, r26, r0
900194e4:	133b0000 	addk	r25, r27, r0
900194e8:	10632000 	addk	r3, r3, r4
900194ec:	e8e3fff8 	lwi	r7, r3, -8
900194f0:	e903fffc 	lwi	r8, r3, -4
900194f4:	b9f45bf8 	brlid	r15, 23544	// 9001f0ec <__muldf3>
900194f8:	32600001 	addik	r19, r0, 1
900194fc:	10d90000 	addk	r6, r25, r0
90019500:	10b80000 	addk	r5, r24, r0
90019504:	13640000 	addk	r27, r4, r0
90019508:	b9f46714 	brlid	r15, 26388	// 9001fc1c <__fixdfsi>
9001950c:	13430000 	addk	r26, r3, r0
90019510:	10a30000 	addk	r5, r3, r0
90019514:	12c30000 	addk	r22, r3, r0
90019518:	e861002c 	lwi	r3, r1, 44
9001951c:	32d60030 	addik	r22, r22, 48
90019520:	b9f465e0 	brlid	r15, 26080	// 9001fb00 <__floatsidf>
90019524:	33830001 	addik	r28, r3, 1
90019528:	11430000 	addk	r10, r3, r0
9001952c:	10b80000 	addk	r5, r24, r0
90019530:	10d90000 	addk	r6, r25, r0
90019534:	10ea0000 	addk	r7, r10, r0
90019538:	b9f45a90 	brlid	r15, 23184	// 9001efc8 <__subdf3>
9001953c:	11040000 	addk	r8, r4, r0
90019540:	13240000 	addk	r25, r4, r0
90019544:	e881002c 	lwi	r4, r1, 44
90019548:	f2c40000 	sbi	r22, r4, 0
9001954c:	e8a10028 	lwi	r5, r1, 40
90019550:	aa450001 	xori	r18, r5, 1
90019554:	be120084 	beqid	r18, 132		// 900195d8
90019558:	13030000 	addk	r24, r3, r0
9001955c:	b0004024 	imm	16420
90019560:	30e00000 	addik	r7, r0, 0
90019564:	31000000 	addik	r8, r0, 0
90019568:	10b80000 	addk	r5, r24, r0
9001956c:	b9f45b80 	brlid	r15, 23424	// 9001f0ec <__muldf3>
90019570:	10d90000 	addk	r6, r25, r0
90019574:	13030000 	addk	r24, r3, r0
90019578:	10c40000 	addk	r6, r4, r0
9001957c:	13240000 	addk	r25, r4, r0
90019580:	b9f4669c 	brlid	r15, 26268	// 9001fc1c <__fixdfsi>
90019584:	10b80000 	addk	r5, r24, r0
90019588:	10a30000 	addk	r5, r3, r0
9001958c:	b9f46574 	brlid	r15, 25972	// 9001fb00 <__floatsidf>
90019590:	12c30000 	addk	r22, r3, r0
90019594:	11430000 	addk	r10, r3, r0
90019598:	10b80000 	addk	r5, r24, r0
9001959c:	10d90000 	addk	r6, r25, r0
900195a0:	10ea0000 	addk	r7, r10, r0
900195a4:	11040000 	addk	r8, r4, r0
900195a8:	b9f45a20 	brlid	r15, 23072	// 9001efc8 <__subdf3>
900195ac:	32d60030 	addik	r22, r22, 48
900195b0:	13240000 	addk	r25, r4, r0
900195b4:	e881002c 	lwi	r4, r1, 44
900195b8:	d2c49800 	sb	r22, r4, r19
900195bc:	e8a10028 	lwi	r5, r1, 40
900195c0:	32730001 	addik	r19, r19, 1
900195c4:	16459800 	rsubk	r18, r5, r19
900195c8:	be32ff94 	bneid	r18, -108		// 9001955c
900195cc:	13030000 	addk	r24, r3, r0
900195d0:	107c9800 	addk	r3, r28, r19
900195d4:	3383ffff 	addik	r28, r3, -1
900195d8:	b0003fe0 	imm	16352
900195dc:	30e00000 	addik	r7, r0, 0
900195e0:	31000000 	addik	r8, r0, 0
900195e4:	10ba0000 	addk	r5, r26, r0
900195e8:	b9f45a78 	brlid	r15, 23160	// 9001f060 <__adddf3>
900195ec:	10db0000 	addk	r6, r27, r0
900195f0:	11030000 	addk	r8, r3, r0
900195f4:	10c40000 	addk	r6, r4, r0
900195f8:	10f80000 	addk	r7, r24, r0
900195fc:	10a80000 	addk	r5, r8, r0
90019600:	b9f4644c 	brlid	r15, 25676	// 9001fa4c <__ltdf2>
90019604:	11190000 	addk	r8, r25, r0
90019608:	be43f2c4 	bltid	r3, -3388		// 900188cc
9001960c:	109c0000 	addk	r4, r28, r0
90019610:	b0003fe0 	imm	16352
90019614:	30a00000 	addik	r5, r0, 0
90019618:	30c00000 	addik	r6, r0, 0
9001961c:	10fa0000 	addk	r7, r26, r0
90019620:	b9f459a8 	brlid	r15, 22952	// 9001efc8 <__subdf3>
90019624:	111b0000 	addk	r8, r27, r0
90019628:	11030000 	addk	r8, r3, r0
9001962c:	10c40000 	addk	r6, r4, r0
90019630:	10f80000 	addk	r7, r24, r0
90019634:	10a80000 	addk	r5, r8, r0
90019638:	b9f462ac 	brlid	r15, 25260	// 9001f8e4 <__gtdf2>
9001963c:	11190000 	addk	r8, r25, r0
90019640:	be63f12c 	bleid	r3, -3796		// 9001876c
90019644:	135e0000 	addk	r26, r30, r0
90019648:	339cffff 	addik	r28, r28, -1
9001964c:	e07c0000 	lbui	r3, r28, 0
90019650:	aa430030 	xori	r18, r3, 48
90019654:	bc12fff4 	beqi	r18, -12		// 90019648
90019658:	e8610024 	lwi	r3, r1, 36
9001965c:	f8610048 	swi	r3, r1, 72
90019660:	b810f2b4 	brid	-3404		// 90018914
90019664:	339c0001 	addik	r28, r28, 1
90019668:	be230010 	bneid	r3, 16		// 90019678
9001966c:	a4770001 	andi	r3, r23, 1
90019670:	be23f740 	bneid	r3, -2240		// 90018db0
90019674:	10980000 	addk	r4, r24, r0
90019678:	3318ffff 	addik	r24, r24, -1
9001967c:	e0780000 	lbui	r3, r24, 0
90019680:	aa430030 	xori	r18, r3, 48
90019684:	be12fff4 	beqid	r18, -12		// 90019678
90019688:	33980001 	addik	r28, r24, 1
9001968c:	b810f768 	brid	-2200		// 90018df4
90019690:	10d90000 	addk	r6, r25, r0
90019694:	aa570039 	xori	r18, r23, 57
90019698:	be120024 	beqid	r18, 36		// 900196bc
9001969c:	30770001 	addik	r3, r23, 1
900196a0:	f0780000 	sbi	r3, r24, 0
900196a4:	b810f74c 	brid	-2228		// 90018df0
900196a8:	33980001 	addik	r28, r24, 1
900196ac:	e8810058 	lwi	r4, r1, 88
900196b0:	16632000 	rsubk	r19, r3, r4
900196b4:	b810f654 	brid	-2476		// 90018d08
900196b8:	10600000 	addk	r3, r0, r0
900196bc:	30600039 	addik	r3, r0, 57
900196c0:	f0780000 	sbi	r3, r24, 0
900196c4:	b810f6e8 	brid	-2328		// 90018dac
900196c8:	33180001 	addik	r24, r24, 1
900196cc:	b810eec8 	brid	-4408		// 90018594
900196d0:	33800002 	addik	r28, r0, 2
900196d4:	aa570039 	xori	r18, r23, 57
900196d8:	be12ffe4 	beqid	r18, -28		// 900196bc
900196dc:	6476021f 	bsrai	r3, r22, 31
900196e0:	14761800 	rsubk	r3, r22, r3
900196e4:	6463001f 	bsrli	r3, r3, 31
900196e8:	12f71800 	addk	r23, r23, r3
900196ec:	f2f80000 	sbi	r23, r24, 0
900196f0:	b810f700 	brid	-2304		// 90018df0
900196f4:	33980001 	addik	r28, r24, 1
900196f8:	e8810050 	lwi	r4, r1, 80
900196fc:	bc64eebc 	blei	r4, -4420		// 900185b8
90019700:	e8a1004c 	lwi	r5, r1, 76
90019704:	be65f064 	bleid	r5, -3996		// 90018768
90019708:	10db0000 	addk	r6, r27, r0
9001970c:	b0004024 	imm	16420
90019710:	30e00000 	addik	r7, r0, 0
90019714:	31000000 	addik	r8, r0, 0
90019718:	10650000 	addk	r3, r5, r0
9001971c:	f8610028 	swi	r3, r1, 40
90019720:	b9f459cc 	brlid	r15, 22988	// 9001f0ec <__muldf3>
90019724:	10ba0000 	addk	r5, r26, r0
90019728:	30bc0001 	addik	r5, r28, 1
9001972c:	12c30000 	addk	r22, r3, r0
90019730:	b9f463d0 	brlid	r15, 25552	// 9001fb00 <__floatsidf>
90019734:	12e40000 	addk	r23, r4, r0
90019738:	11430000 	addk	r10, r3, r0
9001973c:	10b60000 	addk	r5, r22, r0
90019740:	10d70000 	addk	r6, r23, r0
90019744:	10ea0000 	addk	r7, r10, r0
90019748:	11040000 	addk	r8, r4, r0
9001974c:	13560000 	addk	r26, r22, r0
90019750:	b9f4599c 	brlid	r15, 22940	// 9001f0ec <__muldf3>
90019754:	13770000 	addk	r27, r23, r0
90019758:	11030000 	addk	r8, r3, r0
9001975c:	10c40000 	addk	r6, r4, r0
90019760:	e8810048 	lwi	r4, r1, 72
90019764:	10a80000 	addk	r5, r8, r0
90019768:	b000401c 	imm	16412
9001976c:	30e00000 	addik	r7, r0, 0
90019770:	31000000 	addik	r8, r0, 0
90019774:	3084ffff 	addik	r4, r4, -1
90019778:	f8810024 	swi	r4, r1, 36
9001977c:	b9f458e4 	brlid	r15, 22756	// 9001f060 <__adddf3>
90019780:	80000000 	or	r0, r0, r0
90019784:	10c30000 	addk	r6, r3, r0
90019788:	b000fcc0 	imm	-832
9001978c:	31460000 	addik	r10, r6, 0
90019790:	b810f988 	brid	-1656		// 90019118
90019794:	11640000 	addk	r11, r4, r0
90019798:	e861001c 	lwi	r3, r1, 28
9001979c:	ea610058 	lwi	r19, r1, 88
900197a0:	eac10054 	lwi	r22, r1, 84
900197a4:	b810f564 	brid	-2716		// 90018d08
900197a8:	34630036 	rsubik	r3, r3, 54
900197ac:	12e30000 	addk	r23, r3, r0
900197b0:	f8610050 	swi	r3, r1, 80
900197b4:	f861009c 	swi	r3, r1, 156
900197b8:	f861004c 	swi	r3, r1, 76
900197bc:	b810ece0 	brid	-4896		// 9001849c
900197c0:	8e660400 	pcmpne	r19, r6, r0
900197c4:	be23fc70 	bneid	r3, -912		// 90019434
900197c8:	a4770001 	andi	r3, r23, 1
900197cc:	bc03fc68 	beqi	r3, -920		// 90019434
900197d0:	b810fc58 	brid	-936		// 90019428
900197d4:	32f70001 	addik	r23, r23, 1

900197d8 <fflush>:
900197d8:	3021ffd8 	addik	r1, r1, -40
900197dc:	fac10020 	swi	r22, r1, 32
900197e0:	f9e10000 	swi	r15, r1, 0
900197e4:	fa61001c 	swi	r19, r1, 28
900197e8:	fae10024 	swi	r23, r1, 36
900197ec:	be050120 	beqid	r5, 288		// 9001990c
900197f0:	12c50000 	addk	r22, r5, r0
900197f4:	b0009002 	imm	-28670
900197f8:	e8a03b60 	lwi	r5, r0, 15200
900197fc:	bc05000c 	beqi	r5, 12		// 90019808
90019800:	e8650018 	lwi	r3, r5, 24
90019804:	bc0300c4 	beqi	r3, 196		// 900198c8
90019808:	b0009002 	imm	-28670
9001980c:	aa5634a4 	xori	r18, r22, 13476
90019810:	bc1200cc 	beqi	r18, 204		// 900198dc
90019814:	b0009002 	imm	-28670
90019818:	aa5634c4 	xori	r18, r22, 13508
9001981c:	bc1200e0 	beqi	r18, 224		// 900198fc
90019820:	b0009002 	imm	-28670
90019824:	aa5634e4 	xori	r18, r22, 13540
90019828:	bc1200c4 	beqi	r18, 196		// 900198ec
9001982c:	e476000c 	lhui	r3, r22, 12
90019830:	90a30061 	sext16	r5, r3
90019834:	a4850008 	andi	r4, r5, 8
90019838:	be040058 	beqid	r4, 88		// 90019890
9001983c:	10800000 	addk	r4, r0, r0
90019840:	eaf60010 	lwi	r23, r22, 16
90019844:	be170048 	beqid	r23, 72		// 9001988c
90019848:	a4850003 	andi	r4, r5, 3
9001984c:	e8760000 	lwi	r3, r22, 0
90019850:	faf60000 	swi	r23, r22, 0
90019854:	16771800 	rsubk	r19, r23, r3
90019858:	be040054 	beqid	r4, 84		// 900198ac
9001985c:	10600000 	addk	r3, r0, r0
90019860:	f8760008 	swi	r3, r22, 8
90019864:	b8000020 	bri	32		// 90019884
90019868:	e8760028 	lwi	r3, r22, 40
9001986c:	e8b60020 	lwi	r5, r22, 32
90019870:	99fc1800 	brald	r15, r3
90019874:	10f30000 	addk	r7, r19, r0
90019878:	12f71800 	addk	r23, r23, r3
9001987c:	be630038 	bleid	r3, 56		// 900198b4
90019880:	16639800 	rsubk	r19, r3, r19
90019884:	be93ffe4 	bgtid	r19, -28		// 90019868
90019888:	10d70000 	addk	r6, r23, r0
9001988c:	10800000 	addk	r4, r0, r0
90019890:	10640000 	addk	r3, r4, r0
90019894:	e9e10000 	lwi	r15, r1, 0
90019898:	ea61001c 	lwi	r19, r1, 28
9001989c:	eac10020 	lwi	r22, r1, 32
900198a0:	eae10024 	lwi	r23, r1, 36
900198a4:	b60f0008 	rtsd	r15, 8
900198a8:	30210028 	addik	r1, r1, 40
900198ac:	e8760014 	lwi	r3, r22, 20
900198b0:	b800ffb0 	bri	-80		// 90019860
900198b4:	e476000c 	lhui	r3, r22, 12
900198b8:	a0630040 	ori	r3, r3, 64
900198bc:	f476000c 	shi	r3, r22, 12
900198c0:	b810ffd0 	brid	-48		// 90019890
900198c4:	3080ffff 	addik	r4, r0, -1
900198c8:	b9f4019c 	brlid	r15, 412	// 90019a64 <__sinit>
900198cc:	80000000 	or	r0, r0, r0
900198d0:	b0009002 	imm	-28670
900198d4:	aa5634a4 	xori	r18, r22, 13476
900198d8:	bc32ff3c 	bnei	r18, -196		// 90019814
900198dc:	b0009002 	imm	-28670
900198e0:	e8603b60 	lwi	r3, r0, 15200
900198e4:	eac30000 	lwi	r22, r3, 0
900198e8:	b800ff44 	bri	-188		// 9001982c
900198ec:	b0009002 	imm	-28670
900198f0:	e8603b60 	lwi	r3, r0, 15200
900198f4:	eac30008 	lwi	r22, r3, 8
900198f8:	b800ff34 	bri	-204		// 9001982c
900198fc:	b0009002 	imm	-28670
90019900:	e8603b60 	lwi	r3, r0, 15200
90019904:	eac30004 	lwi	r22, r3, 4
90019908:	b800ff24 	bri	-220		// 9001982c
9001990c:	b0009002 	imm	-28670
90019910:	e8a03268 	lwi	r5, r0, 12904
90019914:	b0009001 	imm	-28671
90019918:	30c097d8 	addik	r6, r0, -26664
9001991c:	b9f40f78 	brlid	r15, 3960	// 9001a894 <_fwalk>
90019920:	80000000 	or	r0, r0, r0
90019924:	b810ff6c 	brid	-148		// 90019890
90019928:	10830000 	addk	r4, r3, r0

9001992c <__sfp_lock_acquire>:
9001992c:	b60f0008 	rtsd	r15, 8
90019930:	80000000 	or	r0, r0, r0

90019934 <__sfp_lock_release>:
90019934:	b60f0008 	rtsd	r15, 8
90019938:	80000000 	or	r0, r0, r0

9001993c <__sinit_lock_acquire>:
9001993c:	b60f0008 	rtsd	r15, 8
90019940:	80000000 	or	r0, r0, r0

90019944 <__sinit_lock_release>:
90019944:	b60f0008 	rtsd	r15, 8
90019948:	80000000 	or	r0, r0, r0

9001994c <__fp_lock>:
9001994c:	b60f0008 	rtsd	r15, 8
90019950:	10600000 	addk	r3, r0, r0

90019954 <__fp_unlock>:
90019954:	b60f0008 	rtsd	r15, 8
90019958:	10600000 	addk	r3, r0, r0

9001995c <_cleanup_r>:
9001995c:	b0009001 	imm	-28671
90019960:	30c0df10 	addik	r6, r0, -8432
90019964:	3021ffe4 	addik	r1, r1, -28
90019968:	f9e10000 	swi	r15, r1, 0
9001996c:	b9f40f28 	brlid	r15, 3880	// 9001a894 <_fwalk>
90019970:	80000000 	or	r0, r0, r0
90019974:	e9e10000 	lwi	r15, r1, 0
90019978:	b60f0008 	rtsd	r15, 8
9001997c:	3021001c 	addik	r1, r1, 28

90019980 <__sfmoreglue>:
90019980:	3021ffdc 	addik	r1, r1, -36
90019984:	fac10020 	swi	r22, r1, 32
90019988:	62c6005c 	muli	r22, r6, 92
9001998c:	fa61001c 	swi	r19, r1, 28
90019990:	12660000 	addk	r19, r6, r0
90019994:	f9e10000 	swi	r15, r1, 0
90019998:	b9f412ac 	brlid	r15, 4780	// 9001ac44 <_malloc_r>
9001999c:	30d6000c 	addik	r6, r22, 12
900199a0:	10f60000 	addk	r7, r22, r0
900199a4:	10c00000 	addk	r6, r0, r0
900199a8:	be030020 	beqid	r3, 32		// 900199c8
900199ac:	12c30000 	addk	r22, r3, r0
900199b0:	3063000c 	addik	r3, r3, 12
900199b4:	fa760004 	swi	r19, r22, 4
900199b8:	f8d60000 	swi	r6, r22, 0
900199bc:	f8760008 	swi	r3, r22, 8
900199c0:	b9f4a610 	brlid	r15, -23024	// 90013fd0 <memset>
900199c4:	10a30000 	addk	r5, r3, r0
900199c8:	10760000 	addk	r3, r22, r0
900199cc:	e9e10000 	lwi	r15, r1, 0
900199d0:	ea61001c 	lwi	r19, r1, 28
900199d4:	eac10020 	lwi	r22, r1, 32
900199d8:	b60f0008 	rtsd	r15, 8
900199dc:	30210024 	addik	r1, r1, 36

900199e0 <__fp_unlock_all>:
900199e0:	b0009002 	imm	-28670
900199e4:	e8a03b60 	lwi	r5, r0, 15200
900199e8:	b0009001 	imm	-28671
900199ec:	30c09954 	addik	r6, r0, -26284
900199f0:	3021ffe4 	addik	r1, r1, -28
900199f4:	f9e10000 	swi	r15, r1, 0
900199f8:	b9f40e9c 	brlid	r15, 3740	// 9001a894 <_fwalk>
900199fc:	80000000 	or	r0, r0, r0
90019a00:	e9e10000 	lwi	r15, r1, 0
90019a04:	b60f0008 	rtsd	r15, 8
90019a08:	3021001c 	addik	r1, r1, 28

90019a0c <__fp_lock_all>:
90019a0c:	b0009002 	imm	-28670
90019a10:	e8a03b60 	lwi	r5, r0, 15200
90019a14:	b0009001 	imm	-28671
90019a18:	30c0994c 	addik	r6, r0, -26292
90019a1c:	3021ffe4 	addik	r1, r1, -28
90019a20:	f9e10000 	swi	r15, r1, 0
90019a24:	b9f40e70 	brlid	r15, 3696	// 9001a894 <_fwalk>
90019a28:	80000000 	or	r0, r0, r0
90019a2c:	e9e10000 	lwi	r15, r1, 0
90019a30:	b60f0008 	rtsd	r15, 8
90019a34:	3021001c 	addik	r1, r1, 28

90019a38 <_cleanup>:
90019a38:	b0009002 	imm	-28670
90019a3c:	e8a03268 	lwi	r5, r0, 12904
90019a40:	b0009001 	imm	-28671
90019a44:	30c0df10 	addik	r6, r0, -8432
90019a48:	3021ffe4 	addik	r1, r1, -28
90019a4c:	f9e10000 	swi	r15, r1, 0
90019a50:	b9f40e44 	brlid	r15, 3652	// 9001a894 <_fwalk>
90019a54:	80000000 	or	r0, r0, r0
90019a58:	e9e10000 	lwi	r15, r1, 0
90019a5c:	b60f0008 	rtsd	r15, 8
90019a60:	3021001c 	addik	r1, r1, 28

90019a64 <__sinit>:
90019a64:	3021ffd0 	addik	r1, r1, -48
90019a68:	fb010028 	swi	r24, r1, 40
90019a6c:	f9e10000 	swi	r15, r1, 0
90019a70:	fa61001c 	swi	r19, r1, 28
90019a74:	fac10020 	swi	r22, r1, 32
90019a78:	fae10024 	swi	r23, r1, 36
90019a7c:	fb21002c 	swi	r25, r1, 44
90019a80:	13050000 	addk	r24, r5, r0
90019a84:	e8a50018 	lwi	r5, r5, 24
90019a88:	be250260 	bneid	r5, 608		// 90019ce8
90019a8c:	30600001 	addik	r3, r0, 1
90019a90:	b0009002 	imm	-28670
90019a94:	eb203268 	lwi	r25, r0, 12904
90019a98:	f8780018 	swi	r3, r24, 24
90019a9c:	e8990018 	lwi	r4, r25, 24
90019aa0:	b0009001 	imm	-28671
90019aa4:	3060995c 	addik	r3, r0, -26276
90019aa8:	f8b800e0 	swi	r5, r24, 224
90019aac:	f8b800d8 	swi	r5, r24, 216
90019ab0:	f8780028 	swi	r3, r24, 40
90019ab4:	f8b800dc 	swi	r5, r24, 220
90019ab8:	bc0402a8 	beqi	r4, 680		// 90019d60
90019abc:	32f900d8 	addik	r23, r25, 216
90019ac0:	12d70000 	addk	r22, r23, r0
90019ac4:	e8760004 	lwi	r3, r22, 4
90019ac8:	e8b60008 	lwi	r5, r22, 8
90019acc:	3083ffff 	addik	r4, r3, -1
90019ad0:	bca40014 	bgei	r4, 20		// 90019ae4
90019ad4:	b8000234 	bri	564		// 90019d08
90019ad8:	aa44ffff 	xori	r18, r4, -1
90019adc:	be12022c 	beqid	r18, 556		// 90019d08
90019ae0:	30a5005c 	addik	r5, r5, 92
90019ae4:	e465000c 	lhui	r3, r5, 12
90019ae8:	be23fff0 	bneid	r3, -16		// 90019ad8
90019aec:	3084ffff 	addik	r4, r4, -1
90019af0:	3060ffff 	addik	r3, r0, -1
90019af4:	30800001 	addik	r4, r0, 1
90019af8:	f465000e 	shi	r3, r5, 14
90019afc:	f485000c 	shi	r4, r5, 12
90019b00:	f8050000 	swi	r0, r5, 0
90019b04:	f8050008 	swi	r0, r5, 8
90019b08:	f8050004 	swi	r0, r5, 4
90019b0c:	f8050010 	swi	r0, r5, 16
90019b10:	f8050014 	swi	r0, r5, 20
90019b14:	f8050018 	swi	r0, r5, 24
90019b18:	f8050034 	swi	r0, r5, 52
90019b1c:	f8050038 	swi	r0, r5, 56
90019b20:	f8050048 	swi	r0, r5, 72
90019b24:	f805004c 	swi	r0, r5, 76
90019b28:	e8790018 	lwi	r3, r25, 24
90019b2c:	f8b80000 	swi	r5, r24, 0
90019b30:	bc030220 	beqi	r3, 544		// 90019d50
90019b34:	12d70000 	addk	r22, r23, r0
90019b38:	e8760004 	lwi	r3, r22, 4
90019b3c:	e8b60008 	lwi	r5, r22, 8
90019b40:	3083ffff 	addik	r4, r3, -1
90019b44:	bca40014 	bgei	r4, 20		// 90019b58
90019b48:	b80001e8 	bri	488		// 90019d30
90019b4c:	aa44ffff 	xori	r18, r4, -1
90019b50:	be1201e0 	beqid	r18, 480		// 90019d30
90019b54:	30a5005c 	addik	r5, r5, 92
90019b58:	e465000c 	lhui	r3, r5, 12
90019b5c:	be23fff0 	bneid	r3, -16		// 90019b4c
90019b60:	3084ffff 	addik	r4, r4, -1
90019b64:	3060ffff 	addik	r3, r0, -1
90019b68:	30800001 	addik	r4, r0, 1
90019b6c:	f465000e 	shi	r3, r5, 14
90019b70:	f485000c 	shi	r4, r5, 12
90019b74:	f8050000 	swi	r0, r5, 0
90019b78:	f8050008 	swi	r0, r5, 8
90019b7c:	f8050004 	swi	r0, r5, 4
90019b80:	f8050010 	swi	r0, r5, 16
90019b84:	f8050014 	swi	r0, r5, 20
90019b88:	f8050018 	swi	r0, r5, 24
90019b8c:	f8050034 	swi	r0, r5, 52
90019b90:	f8050038 	swi	r0, r5, 56
90019b94:	f8050048 	swi	r0, r5, 72
90019b98:	f805004c 	swi	r0, r5, 76
90019b9c:	e8790018 	lwi	r3, r25, 24
90019ba0:	f8b80004 	swi	r5, r24, 4
90019ba4:	bc0301a0 	beqi	r3, 416		// 90019d44
90019ba8:	e8770004 	lwi	r3, r23, 4
90019bac:	e9570008 	lwi	r10, r23, 8
90019bb0:	3083ffff 	addik	r4, r3, -1
90019bb4:	bca40014 	bgei	r4, 20		// 90019bc8
90019bb8:	b8000164 	bri	356		// 90019d1c
90019bbc:	aa44ffff 	xori	r18, r4, -1
90019bc0:	be12015c 	beqid	r18, 348		// 90019d1c
90019bc4:	314a005c 	addik	r10, r10, 92
90019bc8:	e46a000c 	lhui	r3, r10, 12
90019bcc:	be23fff0 	bneid	r3, -16		// 90019bbc
90019bd0:	3084ffff 	addik	r4, r4, -1
90019bd4:	3060ffff 	addik	r3, r0, -1
90019bd8:	30800001 	addik	r4, r0, 1
90019bdc:	f46a000e 	shi	r3, r10, 14
90019be0:	f48a000c 	shi	r4, r10, 12
90019be4:	f80a0000 	swi	r0, r10, 0
90019be8:	f80a0008 	swi	r0, r10, 8
90019bec:	f80a0004 	swi	r0, r10, 4
90019bf0:	f80a0010 	swi	r0, r10, 16
90019bf4:	f80a0014 	swi	r0, r10, 20
90019bf8:	f80a0018 	swi	r0, r10, 24
90019bfc:	f80a0034 	swi	r0, r10, 52
90019c00:	f80a0038 	swi	r0, r10, 56
90019c04:	f80a0048 	swi	r0, r10, 72
90019c08:	f80a004c 	swi	r0, r10, 76
90019c0c:	e8780000 	lwi	r3, r24, 0
90019c10:	b0009001 	imm	-28671
90019c14:	30e0daa4 	addik	r7, r0, -9564
90019c18:	b0009001 	imm	-28671
90019c1c:	3100da1c 	addik	r8, r0, -9700
90019c20:	b0009001 	imm	-28671
90019c24:	3120d9ac 	addik	r9, r0, -9812
90019c28:	b0009001 	imm	-28671
90019c2c:	30c0d984 	addik	r6, r0, -9852
90019c30:	e8b80004 	lwi	r5, r24, 4
90019c34:	30800004 	addik	r4, r0, 4
90019c38:	f483000c 	shi	r4, r3, 12
90019c3c:	f8030000 	swi	r0, r3, 0
90019c40:	f8030004 	swi	r0, r3, 4
90019c44:	f8030008 	swi	r0, r3, 8
90019c48:	f8c30030 	swi	r6, r3, 48
90019c4c:	f403000e 	shi	r0, r3, 14
90019c50:	f8030010 	swi	r0, r3, 16
90019c54:	f8030014 	swi	r0, r3, 20
90019c58:	f8030018 	swi	r0, r3, 24
90019c5c:	f8630020 	swi	r3, r3, 32
90019c60:	f8e30024 	swi	r7, r3, 36
90019c64:	f9030028 	swi	r8, r3, 40
90019c68:	f923002c 	swi	r9, r3, 44
90019c6c:	30800009 	addik	r4, r0, 9
90019c70:	30600001 	addik	r3, r0, 1
90019c74:	f485000c 	shi	r4, r5, 12
90019c78:	f8050000 	swi	r0, r5, 0
90019c7c:	f8050004 	swi	r0, r5, 4
90019c80:	f8050008 	swi	r0, r5, 8
90019c84:	f465000e 	shi	r3, r5, 14
90019c88:	3060000a 	addik	r3, r0, 10
90019c8c:	f46a000c 	shi	r3, r10, 12
90019c90:	f8c50030 	swi	r6, r5, 48
90019c94:	f9580008 	swi	r10, r24, 8
90019c98:	f8050010 	swi	r0, r5, 16
90019c9c:	f8050014 	swi	r0, r5, 20
90019ca0:	f8050018 	swi	r0, r5, 24
90019ca4:	f8a50020 	swi	r5, r5, 32
90019ca8:	f8e50024 	swi	r7, r5, 36
90019cac:	f9050028 	swi	r8, r5, 40
90019cb0:	f925002c 	swi	r9, r5, 44
90019cb4:	f80a0000 	swi	r0, r10, 0
90019cb8:	f80a0004 	swi	r0, r10, 4
90019cbc:	f80a0008 	swi	r0, r10, 8
90019cc0:	30600002 	addik	r3, r0, 2
90019cc4:	f46a000e 	shi	r3, r10, 14
90019cc8:	f8ca0030 	swi	r6, r10, 48
90019ccc:	f8ea0024 	swi	r7, r10, 36
90019cd0:	f90a0028 	swi	r8, r10, 40
90019cd4:	f92a002c 	swi	r9, r10, 44
90019cd8:	f80a0010 	swi	r0, r10, 16
90019cdc:	f80a0014 	swi	r0, r10, 20
90019ce0:	f80a0018 	swi	r0, r10, 24
90019ce4:	f94a0020 	swi	r10, r10, 32
90019ce8:	e9e10000 	lwi	r15, r1, 0
90019cec:	ea61001c 	lwi	r19, r1, 28
90019cf0:	eac10020 	lwi	r22, r1, 32
90019cf4:	eae10024 	lwi	r23, r1, 36
90019cf8:	eb010028 	lwi	r24, r1, 40
90019cfc:	eb21002c 	lwi	r25, r1, 44
90019d00:	b60f0008 	rtsd	r15, 8
90019d04:	30210030 	addik	r1, r1, 48
90019d08:	ea760000 	lwi	r19, r22, 0
90019d0c:	be1300a8 	beqid	r19, 168		// 90019db4
90019d10:	10b80000 	addk	r5, r24, r0
90019d14:	b810fdb0 	brid	-592		// 90019ac4
90019d18:	12d30000 	addk	r22, r19, r0
90019d1c:	ea770000 	lwi	r19, r23, 0
90019d20:	be1300d8 	beqid	r19, 216		// 90019df8
90019d24:	10b80000 	addk	r5, r24, r0
90019d28:	b810fe80 	brid	-384		// 90019ba8
90019d2c:	12f30000 	addk	r23, r19, r0
90019d30:	ea760000 	lwi	r19, r22, 0
90019d34:	be13003c 	beqid	r19, 60		// 90019d70
90019d38:	10b80000 	addk	r5, r24, r0
90019d3c:	b810fdfc 	brid	-516		// 90019b38
90019d40:	12d30000 	addk	r22, r19, r0
90019d44:	b9f4fd20 	brlid	r15, -736	// 90019a64 <__sinit>
90019d48:	10b90000 	addk	r5, r25, r0
90019d4c:	b800fe5c 	bri	-420		// 90019ba8
90019d50:	b9f4fd14 	brlid	r15, -748	// 90019a64 <__sinit>
90019d54:	10b90000 	addk	r5, r25, r0
90019d58:	b810fde0 	brid	-544		// 90019b38
90019d5c:	12d70000 	addk	r22, r23, r0
90019d60:	b9f4fd04 	brlid	r15, -764	// 90019a64 <__sinit>
90019d64:	10b90000 	addk	r5, r25, r0
90019d68:	b810fd58 	brid	-680		// 90019ac0
90019d6c:	32f900d8 	addik	r23, r25, 216
90019d70:	b9f40ed4 	brlid	r15, 3796	// 9001ac44 <_malloc_r>
90019d74:	30c0017c 	addik	r6, r0, 380
90019d78:	be0300c4 	beqid	r3, 196		// 90019e3c
90019d7c:	10e30000 	addk	r7, r3, r0
90019d80:	3083000c 	addik	r4, r3, 12
90019d84:	10d30000 	addk	r6, r19, r0
90019d88:	10a40000 	addk	r5, r4, r0
90019d8c:	fa630000 	swi	r19, r3, 0
90019d90:	12630000 	addk	r19, r3, r0
90019d94:	30600004 	addik	r3, r0, 4
90019d98:	f8670004 	swi	r3, r7, 4
90019d9c:	f8870008 	swi	r4, r7, 8
90019da0:	b9f4a230 	brlid	r15, -24016	// 90013fd0 <memset>
90019da4:	30e00170 	addik	r7, r0, 368
90019da8:	fa760000 	swi	r19, r22, 0
90019dac:	b810fd8c 	brid	-628		// 90019b38
90019db0:	12d30000 	addk	r22, r19, r0
90019db4:	b9f40e90 	brlid	r15, 3728	// 9001ac44 <_malloc_r>
90019db8:	30c0017c 	addik	r6, r0, 380
90019dbc:	be0300a8 	beqid	r3, 168		// 90019e64
90019dc0:	10e30000 	addk	r7, r3, r0
90019dc4:	3083000c 	addik	r4, r3, 12
90019dc8:	10d30000 	addk	r6, r19, r0
90019dcc:	10a40000 	addk	r5, r4, r0
90019dd0:	fa630000 	swi	r19, r3, 0
90019dd4:	12630000 	addk	r19, r3, r0
90019dd8:	30600004 	addik	r3, r0, 4
90019ddc:	f8670004 	swi	r3, r7, 4
90019de0:	f8870008 	swi	r4, r7, 8
90019de4:	b9f4a1ec 	brlid	r15, -24084	// 90013fd0 <memset>
90019de8:	30e00170 	addik	r7, r0, 368
90019dec:	fa760000 	swi	r19, r22, 0
90019df0:	b810fcd4 	brid	-812		// 90019ac4
90019df4:	12d30000 	addk	r22, r19, r0
90019df8:	b9f40e4c 	brlid	r15, 3660	// 9001ac44 <_malloc_r>
90019dfc:	30c0017c 	addik	r6, r0, 380
90019e00:	be030050 	beqid	r3, 80		// 90019e50
90019e04:	10e30000 	addk	r7, r3, r0
90019e08:	3083000c 	addik	r4, r3, 12
90019e0c:	10d30000 	addk	r6, r19, r0
90019e10:	10a40000 	addk	r5, r4, r0
90019e14:	fa630000 	swi	r19, r3, 0
90019e18:	12630000 	addk	r19, r3, r0
90019e1c:	30600004 	addik	r3, r0, 4
90019e20:	f8670004 	swi	r3, r7, 4
90019e24:	f8870008 	swi	r4, r7, 8
90019e28:	b9f4a1a8 	brlid	r15, -24152	// 90013fd0 <memset>
90019e2c:	30e00170 	addik	r7, r0, 368
90019e30:	fa770000 	swi	r19, r23, 0
90019e34:	b810fd74 	brid	-652		// 90019ba8
90019e38:	12f30000 	addk	r23, r19, r0
90019e3c:	3060000c 	addik	r3, r0, 12
90019e40:	fa760000 	swi	r19, r22, 0
90019e44:	f878000c 	swi	r3, r24, 12
90019e48:	b810fd54 	brid	-684		// 90019b9c
90019e4c:	10b30000 	addk	r5, r19, r0
90019e50:	3060000c 	addik	r3, r0, 12
90019e54:	fa770000 	swi	r19, r23, 0
90019e58:	f878000c 	swi	r3, r24, 12
90019e5c:	b810fdb0 	brid	-592		// 90019c0c
90019e60:	11530000 	addk	r10, r19, r0
90019e64:	3060000c 	addik	r3, r0, 12
90019e68:	fa760000 	swi	r19, r22, 0
90019e6c:	f878000c 	swi	r3, r24, 12
90019e70:	b810fcb8 	brid	-840		// 90019b28
90019e74:	10b30000 	addk	r5, r19, r0

90019e78 <__sfp>:
90019e78:	3021ffd8 	addik	r1, r1, -40
90019e7c:	fa61001c 	swi	r19, r1, 28
90019e80:	b0009002 	imm	-28670
90019e84:	ea603268 	lwi	r19, r0, 12904
90019e88:	fae10024 	swi	r23, r1, 36
90019e8c:	f9e10000 	swi	r15, r1, 0
90019e90:	fac10020 	swi	r22, r1, 32
90019e94:	e8730018 	lwi	r3, r19, 24
90019e98:	be0300a0 	beqid	r3, 160		// 90019f38
90019e9c:	12e50000 	addk	r23, r5, r0
90019ea0:	32d300d8 	addik	r22, r19, 216
90019ea4:	e8760004 	lwi	r3, r22, 4
90019ea8:	e8b60008 	lwi	r5, r22, 8
90019eac:	3083ffff 	addik	r4, r3, -1
90019eb0:	bca40014 	bgei	r4, 20		// 90019ec4
90019eb4:	b8000070 	bri	112		// 90019f24
90019eb8:	aa44ffff 	xori	r18, r4, -1
90019ebc:	be120068 	beqid	r18, 104		// 90019f24
90019ec0:	30a5005c 	addik	r5, r5, 92
90019ec4:	e465000c 	lhui	r3, r5, 12
90019ec8:	be23fff0 	bneid	r3, -16		// 90019eb8
90019ecc:	3084ffff 	addik	r4, r4, -1
90019ed0:	3060ffff 	addik	r3, r0, -1
90019ed4:	30800001 	addik	r4, r0, 1
90019ed8:	f465000e 	shi	r3, r5, 14
90019edc:	f485000c 	shi	r4, r5, 12
90019ee0:	f8050000 	swi	r0, r5, 0
90019ee4:	f8050008 	swi	r0, r5, 8
90019ee8:	f8050004 	swi	r0, r5, 4
90019eec:	f8050010 	swi	r0, r5, 16
90019ef0:	f8050014 	swi	r0, r5, 20
90019ef4:	f8050018 	swi	r0, r5, 24
90019ef8:	f8050034 	swi	r0, r5, 52
90019efc:	f8050038 	swi	r0, r5, 56
90019f00:	f8050048 	swi	r0, r5, 72
90019f04:	f805004c 	swi	r0, r5, 76
90019f08:	10650000 	addk	r3, r5, r0
90019f0c:	e9e10000 	lwi	r15, r1, 0
90019f10:	ea61001c 	lwi	r19, r1, 28
90019f14:	eac10020 	lwi	r22, r1, 32
90019f18:	eae10024 	lwi	r23, r1, 36
90019f1c:	b60f0008 	rtsd	r15, 8
90019f20:	30210028 	addik	r1, r1, 40
90019f24:	ea760000 	lwi	r19, r22, 0
90019f28:	be130020 	beqid	r19, 32		// 90019f48
90019f2c:	10b70000 	addk	r5, r23, r0
90019f30:	b810ff74 	brid	-140		// 90019ea4
90019f34:	12d30000 	addk	r22, r19, r0
90019f38:	b9f4fb2c 	brlid	r15, -1236	// 90019a64 <__sinit>
90019f3c:	10b30000 	addk	r5, r19, r0
90019f40:	b810ff64 	brid	-156		// 90019ea4
90019f44:	32d300d8 	addik	r22, r19, 216
90019f48:	b9f40cfc 	brlid	r15, 3324	// 9001ac44 <_malloc_r>
90019f4c:	30c0017c 	addik	r6, r0, 380
90019f50:	be03003c 	beqid	r3, 60		// 90019f8c
90019f54:	10e30000 	addk	r7, r3, r0
90019f58:	3083000c 	addik	r4, r3, 12
90019f5c:	10d30000 	addk	r6, r19, r0
90019f60:	10a40000 	addk	r5, r4, r0
90019f64:	fa630000 	swi	r19, r3, 0
90019f68:	12630000 	addk	r19, r3, r0
90019f6c:	30600004 	addik	r3, r0, 4
90019f70:	f8670004 	swi	r3, r7, 4
90019f74:	f8870008 	swi	r4, r7, 8
90019f78:	b9f4a058 	brlid	r15, -24488	// 90013fd0 <memset>
90019f7c:	30e00170 	addik	r7, r0, 368
90019f80:	fa760000 	swi	r19, r22, 0
90019f84:	b810ff20 	brid	-224		// 90019ea4
90019f88:	12d30000 	addk	r22, r19, r0
90019f8c:	3060000c 	addik	r3, r0, 12
90019f90:	f877000c 	swi	r3, r23, 12
90019f94:	fa760000 	swi	r19, r22, 0
90019f98:	b810ff70 	brid	-144		// 90019f08
90019f9c:	10b30000 	addk	r5, r19, r0

90019fa0 <_malloc_trim_r>:
90019fa0:	3021ffd8 	addik	r1, r1, -40
90019fa4:	fa61001c 	swi	r19, r1, 28
90019fa8:	fac10020 	swi	r22, r1, 32
90019fac:	fae10024 	swi	r23, r1, 36
90019fb0:	12c60000 	addk	r22, r6, r0
90019fb4:	f9e10000 	swi	r15, r1, 0
90019fb8:	b9f4171c 	brlid	r15, 5916	// 9001b6d4 <__malloc_lock>
90019fbc:	12e50000 	addk	r23, r5, r0
90019fc0:	b0009002 	imm	-28670
90019fc4:	e8603c6c 	lwi	r3, r0, 15468
90019fc8:	10b70000 	addk	r5, r23, r0
90019fcc:	e8830004 	lwi	r4, r3, 4
90019fd0:	a664fffc 	andi	r19, r4, -4
90019fd4:	16d69800 	rsubk	r22, r22, r19
90019fd8:	32d6006f 	addik	r22, r22, 111
90019fdc:	a6d6ff80 	andi	r22, r22, -128
90019fe0:	32d6ff80 	addik	r22, r22, -128
90019fe4:	3240007f 	addik	r18, r0, 127
90019fe8:	16569001 	cmp	r18, r22, r18
90019fec:	beb2002c 	bgeid	r18, 44		// 9001a018
90019ff0:	10c00000 	addk	r6, r0, r0
90019ff4:	b9f43938 	brlid	r15, 14648	// 9001d92c <_sbrk_r>
90019ff8:	80000000 	or	r0, r0, r0
90019ffc:	b0009002 	imm	-28670
9001a000:	e8803c6c 	lwi	r4, r0, 15468
9001a004:	10b70000 	addk	r5, r23, r0
9001a008:	10932000 	addk	r4, r19, r4
9001a00c:	16441800 	rsubk	r18, r4, r3
9001a010:	be12002c 	beqid	r18, 44		// 9001a03c
9001a014:	14d60000 	rsubk	r6, r22, r0
9001a018:	b9f416c4 	brlid	r15, 5828	// 9001b6dc <__malloc_unlock>
9001a01c:	80000000 	or	r0, r0, r0
9001a020:	10600000 	addk	r3, r0, r0
9001a024:	e9e10000 	lwi	r15, r1, 0
9001a028:	ea61001c 	lwi	r19, r1, 28
9001a02c:	eac10020 	lwi	r22, r1, 32
9001a030:	eae10024 	lwi	r23, r1, 36
9001a034:	b60f0008 	rtsd	r15, 8
9001a038:	30210028 	addik	r1, r1, 40
9001a03c:	b9f438f0 	brlid	r15, 14576	// 9001d92c <_sbrk_r>
9001a040:	10b70000 	addk	r5, r23, r0
9001a044:	14969800 	rsubk	r4, r22, r19
9001a048:	10b70000 	addk	r5, r23, r0
9001a04c:	a0e40001 	ori	r7, r4, 1
9001a050:	aa43ffff 	xori	r18, r3, -1
9001a054:	be120038 	beqid	r18, 56		// 9001a08c
9001a058:	10c00000 	addk	r6, r0, r0
9001a05c:	b0009002 	imm	-28670
9001a060:	e860fdf0 	lwi	r3, r0, -528
9001a064:	b0009002 	imm	-28670
9001a068:	e8803c6c 	lwi	r4, r0, 15468
9001a06c:	14761800 	rsubk	r3, r22, r3
9001a070:	f8e40004 	swi	r7, r4, 4
9001a074:	b0009002 	imm	-28670
9001a078:	f860fdf0 	swi	r3, r0, -528
9001a07c:	b9f41660 	brlid	r15, 5728	// 9001b6dc <__malloc_unlock>
9001a080:	10b70000 	addk	r5, r23, r0
9001a084:	b810ffa0 	brid	-96		// 9001a024
9001a088:	30600001 	addik	r3, r0, 1
9001a08c:	b9f438a0 	brlid	r15, 14496	// 9001d92c <_sbrk_r>
9001a090:	80000000 	or	r0, r0, r0
9001a094:	b0009002 	imm	-28670
9001a098:	e8803c6c 	lwi	r4, r0, 15468
9001a09c:	10e30000 	addk	r7, r3, r0
9001a0a0:	14641800 	rsubk	r3, r4, r3
9001a0a4:	a0c30001 	ori	r6, r3, 1
9001a0a8:	3240000f 	addik	r18, r0, 15
9001a0ac:	16439001 	cmp	r18, r3, r18
9001a0b0:	beb2ff68 	bgeid	r18, -152		// 9001a018
9001a0b4:	10b70000 	addk	r5, r23, r0
9001a0b8:	b0009002 	imm	-28670
9001a0bc:	e8604070 	lwi	r3, r0, 16496
9001a0c0:	f8c40004 	swi	r6, r4, 4
9001a0c4:	14633800 	rsubk	r3, r3, r7
9001a0c8:	b0009002 	imm	-28670
9001a0cc:	f860fdf0 	swi	r3, r0, -528
9001a0d0:	b800ff48 	bri	-184		// 9001a018

9001a0d4 <_free_r>:
9001a0d4:	3021ffdc 	addik	r1, r1, -36
9001a0d8:	fa61001c 	swi	r19, r1, 28
9001a0dc:	fac10020 	swi	r22, r1, 32
9001a0e0:	f9e10000 	swi	r15, r1, 0
9001a0e4:	12660000 	addk	r19, r6, r0
9001a0e8:	be0600ac 	beqid	r6, 172		// 9001a194
9001a0ec:	12c50000 	addk	r22, r5, r0
9001a0f0:	b9f415e4 	brlid	r15, 5604	// 9001b6d4 <__malloc_lock>
9001a0f4:	80000000 	or	r0, r0, r0
9001a0f8:	3133fff8 	addik	r9, r19, -8
9001a0fc:	e8e90004 	lwi	r7, r9, 4
9001a100:	b0009002 	imm	-28670
9001a104:	31403c64 	addik	r10, r0, 15460
9001a108:	b0009002 	imm	-28670
9001a10c:	e8603c6c 	lwi	r3, r0, 15468
9001a110:	a4a7fffe 	andi	r5, r7, -2
9001a114:	10c92800 	addk	r6, r9, r5
9001a118:	e8860004 	lwi	r4, r6, 4
9001a11c:	116a0000 	addk	r11, r10, r0
9001a120:	16433000 	rsubk	r18, r3, r6
9001a124:	be120158 	beqid	r18, 344		// 9001a27c
9001a128:	a504fffc 	andi	r8, r4, -4
9001a12c:	a4670001 	andi	r3, r7, 1
9001a130:	f9060004 	swi	r8, r6, 4
9001a134:	be230038 	bneid	r3, 56		// 9001a16c
9001a138:	10e00000 	addk	r7, r0, r0
9001a13c:	e8690000 	lwi	r3, r9, 0
9001a140:	30e00001 	addik	r7, r0, 1
9001a144:	15234800 	rsubk	r9, r3, r9
9001a148:	e8890008 	lwi	r4, r9, 8
9001a14c:	b0009002 	imm	-28670
9001a150:	aa443c6c 	xori	r18, r4, 15468
9001a154:	be120018 	beqid	r18, 24		// 9001a16c
9001a158:	10a51800 	addk	r5, r5, r3
9001a15c:	e869000c 	lwi	r3, r9, 12
9001a160:	10e00000 	addk	r7, r0, r0
9001a164:	f8830008 	swi	r4, r3, 8
9001a168:	f864000c 	swi	r3, r4, 12
9001a16c:	10864000 	addk	r4, r6, r8
9001a170:	e8640004 	lwi	r3, r4, 4
9001a174:	a4630001 	andi	r3, r3, 1
9001a178:	bc030030 	beqi	r3, 48		// 9001a1a8
9001a17c:	a0650001 	ori	r3, r5, 1
9001a180:	f8690004 	swi	r3, r9, 4
9001a184:	be07004c 	beqid	r7, 76		// 9001a1d0
9001a188:	d8a92800 	sw	r5, r9, r5
9001a18c:	b9f41550 	brlid	r15, 5456	// 9001b6dc <__malloc_unlock>
9001a190:	10b60000 	addk	r5, r22, r0
9001a194:	e9e10000 	lwi	r15, r1, 0
9001a198:	ea61001c 	lwi	r19, r1, 28
9001a19c:	eac10020 	lwi	r22, r1, 32
9001a1a0:	b60f0008 	rtsd	r15, 8
9001a1a4:	30210024 	addik	r1, r1, 36
9001a1a8:	be270090 	bneid	r7, 144		// 9001a238
9001a1ac:	10a54000 	addk	r5, r5, r8
9001a1b0:	e8860008 	lwi	r4, r6, 8
9001a1b4:	b0009002 	imm	-28670
9001a1b8:	aa443c6c 	xori	r18, r4, 15468
9001a1bc:	bc120150 	beqi	r18, 336		// 9001a30c
9001a1c0:	e866000c 	lwi	r3, r6, 12
9001a1c4:	f8830008 	swi	r4, r3, 8
9001a1c8:	f864000c 	swi	r3, r4, 12
9001a1cc:	b800ffb0 	bri	-80		// 9001a17c
9001a1d0:	224001ff 	addi	r18, r0, 511
9001a1d4:	16459003 	cmpu	r18, r5, r18
9001a1d8:	beb20068 	bgeid	r18, 104		// 9001a240
9001a1dc:	30600001 	addik	r3, r0, 1
9001a1e0:	64650009 	bsrli	r3, r5, 9
9001a1e4:	bc2300f4 	bnei	r3, 244		// 9001a2d8
9001a1e8:	64650003 	bsrli	r3, r5, 3
9001a1ec:	64830403 	bslli	r4, r3, 3
9001a1f0:	10e45800 	addk	r7, r4, r11
9001a1f4:	e8c70008 	lwi	r6, r7, 8
9001a1f8:	16463800 	rsubk	r18, r6, r7
9001a1fc:	be120130 	beqid	r18, 304		// 9001a32c
9001a200:	64630002 	bsrli	r3, r3, 2
9001a204:	e8660004 	lwi	r3, r6, 4
9001a208:	a463fffc 	andi	r3, r3, -4
9001a20c:	16432803 	cmpu	r18, r3, r5
9001a210:	bcb20010 	bgei	r18, 16		// 9001a220
9001a214:	e8c60008 	lwi	r6, r6, 8
9001a218:	16463800 	rsubk	r18, r6, r7
9001a21c:	bc32ffe8 	bnei	r18, -24		// 9001a204
9001a220:	e8e6000c 	lwi	r7, r6, 12
9001a224:	f8e9000c 	swi	r7, r9, 12
9001a228:	f8c90008 	swi	r6, r9, 8
9001a22c:	f926000c 	swi	r9, r6, 12
9001a230:	f9270008 	swi	r9, r7, 8
9001a234:	b800ff58 	bri	-168		// 9001a18c
9001a238:	e8860008 	lwi	r4, r6, 8
9001a23c:	b800ff84 	bri	-124		// 9001a1c0
9001a240:	64a50003 	bsrli	r5, r5, 3
9001a244:	64c50403 	bslli	r6, r5, 3
9001a248:	64a50002 	bsrli	r5, r5, 2
9001a24c:	10c65800 	addk	r6, r6, r11
9001a250:	e8e60008 	lwi	r7, r6, 8
9001a254:	b0009002 	imm	-28670
9001a258:	e8803c68 	lwi	r4, r0, 15464
9001a25c:	44632c00 	bsll	r3, r3, r5
9001a260:	f8c9000c 	swi	r6, r9, 12
9001a264:	80841800 	or	r4, r4, r3
9001a268:	f8e90008 	swi	r7, r9, 8
9001a26c:	f88a0004 	swi	r4, r10, 4
9001a270:	f927000c 	swi	r9, r7, 12
9001a274:	f9260008 	swi	r9, r6, 8
9001a278:	b800ff14 	bri	-236		// 9001a18c
9001a27c:	a4670001 	andi	r3, r7, 1
9001a280:	be230024 	bneid	r3, 36		// 9001a2a4
9001a284:	10e54000 	addk	r7, r5, r8
9001a288:	e873fff8 	lwi	r3, r19, -8
9001a28c:	15234800 	rsubk	r9, r3, r9
9001a290:	e8a9000c 	lwi	r5, r9, 12
9001a294:	e8890008 	lwi	r4, r9, 8
9001a298:	10e71800 	addk	r7, r7, r3
9001a29c:	f8850008 	swi	r4, r5, 8
9001a2a0:	f8a4000c 	swi	r5, r4, 12
9001a2a4:	a0670001 	ori	r3, r7, 1
9001a2a8:	f8690004 	swi	r3, r9, 4
9001a2ac:	b0009002 	imm	-28670
9001a2b0:	e860406c 	lwi	r3, r0, 16492
9001a2b4:	b0009002 	imm	-28670
9001a2b8:	f9203c6c 	swi	r9, r0, 15468
9001a2bc:	16433803 	cmpu	r18, r3, r7
9001a2c0:	bc52fecc 	blti	r18, -308		// 9001a18c
9001a2c4:	b0009002 	imm	-28670
9001a2c8:	e8c0fde4 	lwi	r6, r0, -540
9001a2cc:	b9f4fcd4 	brlid	r15, -812	// 90019fa0 <_malloc_trim_r>
9001a2d0:	10b60000 	addk	r5, r22, r0
9001a2d4:	b800feb8 	bri	-328		// 9001a18c
9001a2d8:	22400004 	addi	r18, r0, 4
9001a2dc:	16439003 	cmpu	r18, r3, r18
9001a2e0:	bcb2001c 	bgei	r18, 28		// 9001a2fc
9001a2e4:	22400014 	addi	r18, r0, 20
9001a2e8:	16439003 	cmpu	r18, r3, r18
9001a2ec:	bc520060 	blti	r18, 96		// 9001a34c
9001a2f0:	3063005b 	addik	r3, r3, 91
9001a2f4:	b810fefc 	brid	-260		// 9001a1f0
9001a2f8:	64830403 	bslli	r4, r3, 3
9001a2fc:	64650006 	bsrli	r3, r5, 6
9001a300:	30630038 	addik	r3, r3, 56
9001a304:	b810feec 	brid	-276		// 9001a1f0
9001a308:	64830403 	bslli	r4, r3, 3
9001a30c:	f924000c 	swi	r9, r4, 12
9001a310:	f9240008 	swi	r9, r4, 8
9001a314:	a0650001 	ori	r3, r5, 1
9001a318:	d8a92800 	sw	r5, r9, r5
9001a31c:	f8890008 	swi	r4, r9, 8
9001a320:	f8690004 	swi	r3, r9, 4
9001a324:	f889000c 	swi	r4, r9, 12
9001a328:	b800fe64 	bri	-412		// 9001a18c
9001a32c:	30800001 	addik	r4, r0, 1
9001a330:	44841c00 	bsll	r4, r4, r3
9001a334:	b0009002 	imm	-28670
9001a338:	e8603c68 	lwi	r3, r0, 15464
9001a33c:	80632000 	or	r3, r3, r4
9001a340:	f86a0004 	swi	r3, r10, 4
9001a344:	b810fee0 	brid	-288		// 9001a224
9001a348:	10c70000 	addk	r6, r7, r0
9001a34c:	22400054 	addi	r18, r0, 84
9001a350:	16439003 	cmpu	r18, r3, r18
9001a354:	bc520014 	blti	r18, 20		// 9001a368
9001a358:	6465000c 	bsrli	r3, r5, 12
9001a35c:	3063006e 	addik	r3, r3, 110
9001a360:	b810fe90 	brid	-368		// 9001a1f0
9001a364:	64830403 	bslli	r4, r3, 3
9001a368:	22400154 	addi	r18, r0, 340
9001a36c:	16439003 	cmpu	r18, r3, r18
9001a370:	bc520014 	blti	r18, 20		// 9001a384
9001a374:	6465000f 	bsrli	r3, r5, 15
9001a378:	30630077 	addik	r3, r3, 119
9001a37c:	b810fe74 	brid	-396		// 9001a1f0
9001a380:	64830403 	bslli	r4, r3, 3
9001a384:	22400554 	addi	r18, r0, 1364
9001a388:	16439003 	cmpu	r18, r3, r18
9001a38c:	bcb20010 	bgei	r18, 16		// 9001a39c
9001a390:	3060007e 	addik	r3, r0, 126
9001a394:	b810fe5c 	brid	-420		// 9001a1f0
9001a398:	308003f0 	addik	r4, r0, 1008
9001a39c:	64650012 	bsrli	r3, r5, 18
9001a3a0:	3063007c 	addik	r3, r3, 124
9001a3a4:	b810fe4c 	brid	-436		// 9001a1f0
9001a3a8:	64830403 	bslli	r4, r3, 3

9001a3ac <__sfvwrite>:
9001a3ac:	3021ffc0 	addik	r1, r1, -64
9001a3b0:	fb010028 	swi	r24, r1, 40
9001a3b4:	fb810038 	swi	r28, r1, 56
9001a3b8:	f9e10000 	swi	r15, r1, 0
9001a3bc:	fa61001c 	swi	r19, r1, 28
9001a3c0:	fac10020 	swi	r22, r1, 32
9001a3c4:	fae10024 	swi	r23, r1, 36
9001a3c8:	fb21002c 	swi	r25, r1, 44
9001a3cc:	fb410030 	swi	r26, r1, 48
9001a3d0:	fb610034 	swi	r27, r1, 52
9001a3d4:	fba1003c 	swi	r29, r1, 60
9001a3d8:	e8660008 	lwi	r3, r6, 8
9001a3dc:	13860000 	addk	r28, r6, r0
9001a3e0:	be030080 	beqid	r3, 128		// 9001a460
9001a3e4:	13050000 	addk	r24, r5, r0
9001a3e8:	e485000c 	lhui	r4, r5, 12
9001a3ec:	a4640008 	andi	r3, r4, 8
9001a3f0:	bc0303bc 	beqi	r3, 956		// 9001a7ac
9001a3f4:	e8650010 	lwi	r3, r5, 16
9001a3f8:	be0303b4 	beqid	r3, 948		// 9001a7ac
9001a3fc:	a4640002 	andi	r3, r4, 2
9001a400:	eb3c0000 	lwi	r25, r28, 0
9001a404:	be030094 	beqid	r3, 148		// 9001a498
9001a408:	a4e40001 	andi	r7, r4, 1
9001a40c:	12600000 	addk	r19, r0, r0
9001a410:	12d30000 	addk	r22, r19, r0
9001a414:	be130138 	beqid	r19, 312		// 9001a54c
9001a418:	10d60000 	addk	r6, r22, r0
9001a41c:	e8b80020 	lwi	r5, r24, 32
9001a420:	22400400 	addi	r18, r0, 1024
9001a424:	16539003 	cmpu	r18, r19, r18
9001a428:	beb2000c 	bgeid	r18, 12		// 9001a434
9001a42c:	10f30000 	addk	r7, r19, r0
9001a430:	30e00400 	addik	r7, r0, 1024
9001a434:	e8780028 	lwi	r3, r24, 40
9001a438:	99fc1800 	brald	r15, r3
9001a43c:	80000000 	or	r0, r0, r0
9001a440:	10830000 	addk	r4, r3, r0
9001a444:	16639800 	rsubk	r19, r3, r19
9001a448:	be630128 	bleid	r3, 296		// 9001a570
9001a44c:	12d61800 	addk	r22, r22, r3
9001a450:	e87c0008 	lwi	r3, r28, 8
9001a454:	14641800 	rsubk	r3, r4, r3
9001a458:	f87c0008 	swi	r3, r28, 8
9001a45c:	bc23ffb8 	bnei	r3, -72		// 9001a414
9001a460:	10800000 	addk	r4, r0, r0
9001a464:	10640000 	addk	r3, r4, r0
9001a468:	e9e10000 	lwi	r15, r1, 0
9001a46c:	ea61001c 	lwi	r19, r1, 28
9001a470:	eac10020 	lwi	r22, r1, 32
9001a474:	eae10024 	lwi	r23, r1, 36
9001a478:	eb010028 	lwi	r24, r1, 40
9001a47c:	eb21002c 	lwi	r25, r1, 44
9001a480:	eb410030 	lwi	r26, r1, 48
9001a484:	eb610034 	lwi	r27, r1, 52
9001a488:	eb810038 	lwi	r28, r1, 56
9001a48c:	eba1003c 	lwi	r29, r1, 60
9001a490:	b60f0008 	rtsd	r15, 8
9001a494:	30210040 	addik	r1, r1, 64
9001a498:	be0700ec 	beqid	r7, 236		// 9001a584
9001a49c:	12e70000 	addk	r23, r7, r0
9001a4a0:	12e00000 	addk	r23, r0, r0
9001a4a4:	13770000 	addk	r27, r23, r0
9001a4a8:	13b70000 	addk	r29, r23, r0
9001a4ac:	13570000 	addk	r26, r23, r0
9001a4b0:	bc170088 	beqi	r23, 136		// 9001a538
9001a4b4:	be1d0250 	beqid	r29, 592		// 9001a704
9001a4b8:	10bb0000 	addk	r5, r27, r0
9001a4bc:	1657d003 	cmpu	r18, r23, r26
9001a4c0:	beb2000c 	bgeid	r18, 12		// 9001a4cc
9001a4c4:	12770000 	addk	r19, r23, r0
9001a4c8:	127a0000 	addk	r19, r26, r0
9001a4cc:	e8f80014 	lwi	r7, r24, 20
9001a4d0:	e8980008 	lwi	r4, r24, 8
9001a4d4:	e8b80000 	lwi	r5, r24, 0
9001a4d8:	e8780010 	lwi	r3, r24, 16
9001a4dc:	16451803 	cmpu	r18, r5, r3
9001a4e0:	beb2013c 	bgeid	r18, 316		// 9001a61c
9001a4e4:	12c72000 	addk	r22, r7, r4
9001a4e8:	1653b001 	cmp	r18, r19, r22
9001a4ec:	beb20130 	bgeid	r18, 304		// 9001a61c
9001a4f0:	10db0000 	addk	r6, r27, r0
9001a4f4:	b9f410d0 	brlid	r15, 4304	// 9001b5c4 <memmove>
9001a4f8:	10f60000 	addk	r7, r22, r0
9001a4fc:	e8980000 	lwi	r4, r24, 0
9001a500:	1084b000 	addk	r4, r4, r22
9001a504:	f8980000 	swi	r4, r24, 0
9001a508:	b9f4f2d0 	brlid	r15, -3376	// 900197d8 <fflush>
9001a50c:	10b80000 	addk	r5, r24, r0
9001a510:	be230060 	bneid	r3, 96		// 9001a570
9001a514:	1756d000 	rsubk	r26, r22, r26
9001a518:	bc1a0130 	beqi	r26, 304		// 9001a648
9001a51c:	e87c0008 	lwi	r3, r28, 8
9001a520:	14761800 	rsubk	r3, r22, r3
9001a524:	f87c0008 	swi	r3, r28, 8
9001a528:	be03ff38 	beqid	r3, -200		// 9001a460
9001a52c:	16f6b800 	rsubk	r23, r22, r23
9001a530:	be37ff84 	bneid	r23, -124		// 9001a4b4
9001a534:	137bb000 	addk	r27, r27, r22
9001a538:	eb790000 	lwi	r27, r25, 0
9001a53c:	eaf90004 	lwi	r23, r25, 4
9001a540:	13a00000 	addk	r29, r0, r0
9001a544:	b810ff6c 	brid	-148		// 9001a4b0
9001a548:	33390008 	addik	r25, r25, 8
9001a54c:	ead90000 	lwi	r22, r25, 0
9001a550:	ea790004 	lwi	r19, r25, 4
9001a554:	b810fec0 	brid	-320		// 9001a414
9001a558:	33390008 	addik	r25, r25, 8
9001a55c:	b0009002 	imm	-28670
9001a560:	e8a03b60 	lwi	r5, r0, 15200
9001a564:	e8d80010 	lwi	r6, r24, 16
9001a568:	b9f4fb6c 	brlid	r15, -1172	// 9001a0d4 <_free_r>
9001a56c:	80000000 	or	r0, r0, r0
9001a570:	e478000c 	lhui	r3, r24, 12
9001a574:	a0630040 	ori	r3, r3, 64
9001a578:	f478000c 	shi	r3, r24, 12
9001a57c:	b810fee8 	brid	-280		// 9001a464
9001a580:	3080ffff 	addik	r4, r0, -1
9001a584:	13670000 	addk	r27, r7, r0
9001a588:	bc170084 	beqi	r23, 132		// 9001a60c
9001a58c:	a4640200 	andi	r3, r4, 512
9001a590:	ea780008 	lwi	r19, r24, 8
9001a594:	bc0300c8 	beqi	r3, 200		// 9001a65c
9001a598:	16579803 	cmpu	r18, r23, r19
9001a59c:	beb20010 	bgeid	r18, 16		// 9001a5ac
9001a5a0:	10f30000 	addk	r7, r19, r0
9001a5a4:	a4640080 	andi	r3, r4, 128
9001a5a8:	bc2301ac 	bnei	r3, 428		// 9001a754
9001a5ac:	1647b803 	cmpu	r18, r7, r23
9001a5b0:	bcb2000c 	bgei	r18, 12		// 9001a5bc
9001a5b4:	10f70000 	addk	r7, r23, r0
9001a5b8:	12770000 	addk	r19, r23, r0
9001a5bc:	e8b80000 	lwi	r5, r24, 0
9001a5c0:	10db0000 	addk	r6, r27, r0
9001a5c4:	12d70000 	addk	r22, r23, r0
9001a5c8:	b9f40ffc 	brlid	r15, 4092	// 9001b5c4 <memmove>
9001a5cc:	13570000 	addk	r26, r23, r0
9001a5d0:	e8980008 	lwi	r4, r24, 8
9001a5d4:	e8780000 	lwi	r3, r24, 0
9001a5d8:	14932000 	rsubk	r4, r19, r4
9001a5dc:	10639800 	addk	r3, r3, r19
9001a5e0:	12770000 	addk	r19, r23, r0
9001a5e4:	f8980008 	swi	r4, r24, 8
9001a5e8:	f8780000 	swi	r3, r24, 0
9001a5ec:	e87c0008 	lwi	r3, r28, 8
9001a5f0:	14731800 	rsubk	r3, r19, r3
9001a5f4:	f87c0008 	swi	r3, r28, 8
9001a5f8:	be03fe68 	beqid	r3, -408		// 9001a460
9001a5fc:	16f6b800 	rsubk	r23, r22, r23
9001a600:	e498000c 	lhui	r4, r24, 12
9001a604:	be37ff88 	bneid	r23, -120		// 9001a58c
9001a608:	137bd000 	addk	r27, r27, r26
9001a60c:	eb790000 	lwi	r27, r25, 0
9001a610:	eaf90004 	lwi	r23, r25, 4
9001a614:	b810ff74 	brid	-140		// 9001a588
9001a618:	33390008 	addik	r25, r25, 8
9001a61c:	16479801 	cmp	r18, r7, r19
9001a620:	be5200b8 	bltid	r18, 184		// 9001a6d8
9001a624:	10db0000 	addk	r6, r27, r0
9001a628:	e8780028 	lwi	r3, r24, 40
9001a62c:	e8b80020 	lwi	r5, r24, 32
9001a630:	99fc1800 	brald	r15, r3
9001a634:	10db0000 	addk	r6, r27, r0
9001a638:	be63ff38 	bleid	r3, -200		// 9001a570
9001a63c:	12c30000 	addk	r22, r3, r0
9001a640:	1756d000 	rsubk	r26, r22, r26
9001a644:	bc3afed8 	bnei	r26, -296		// 9001a51c
9001a648:	b9f4f190 	brlid	r15, -3696	// 900197d8 <fflush>
9001a64c:	10b80000 	addk	r5, r24, r0
9001a650:	be23ff20 	bneid	r3, -224		// 9001a570
9001a654:	13a30000 	addk	r29, r3, r0
9001a658:	b800fec4 	bri	-316		// 9001a51c
9001a65c:	e8b80000 	lwi	r5, r24, 0
9001a660:	e8780010 	lwi	r3, r24, 16
9001a664:	16451803 	cmpu	r18, r5, r3
9001a668:	beb2003c 	bgeid	r18, 60		// 9001a6a4
9001a66c:	12d30000 	addk	r22, r19, r0
9001a670:	16579803 	cmpu	r18, r23, r19
9001a674:	beb20030 	bgeid	r18, 48		// 9001a6a4
9001a678:	10db0000 	addk	r6, r27, r0
9001a67c:	10f30000 	addk	r7, r19, r0
9001a680:	b9f40f44 	brlid	r15, 3908	// 9001b5c4 <memmove>
9001a684:	13530000 	addk	r26, r19, r0
9001a688:	e8980000 	lwi	r4, r24, 0
9001a68c:	10849800 	addk	r4, r4, r19
9001a690:	f8980000 	swi	r4, r24, 0
9001a694:	b9f4f144 	brlid	r15, -3772	// 900197d8 <fflush>
9001a698:	10b80000 	addk	r5, r24, r0
9001a69c:	bc03ff50 	beqi	r3, -176		// 9001a5ec
9001a6a0:	b800fed0 	bri	-304		// 9001a570
9001a6a4:	e8f80014 	lwi	r7, r24, 20
9001a6a8:	1647b803 	cmpu	r18, r7, r23
9001a6ac:	be520078 	bltid	r18, 120		// 9001a724
9001a6b0:	10db0000 	addk	r6, r27, r0
9001a6b4:	e8780028 	lwi	r3, r24, 40
9001a6b8:	e8b80020 	lwi	r5, r24, 32
9001a6bc:	99fc1800 	brald	r15, r3
9001a6c0:	10db0000 	addk	r6, r27, r0
9001a6c4:	be63feac 	bleid	r3, -340		// 9001a570
9001a6c8:	12630000 	addk	r19, r3, r0
9001a6cc:	12c30000 	addk	r22, r3, r0
9001a6d0:	b810ff1c 	brid	-228		// 9001a5ec
9001a6d4:	13430000 	addk	r26, r3, r0
9001a6d8:	10f30000 	addk	r7, r19, r0
9001a6dc:	b9f40ee8 	brlid	r15, 3816	// 9001b5c4 <memmove>
9001a6e0:	12d30000 	addk	r22, r19, r0
9001a6e4:	e8980008 	lwi	r4, r24, 8
9001a6e8:	e8780000 	lwi	r3, r24, 0
9001a6ec:	14932000 	rsubk	r4, r19, r4
9001a6f0:	10639800 	addk	r3, r3, r19
9001a6f4:	f8980008 	swi	r4, r24, 8
9001a6f8:	f8780000 	swi	r3, r24, 0
9001a6fc:	b810fe1c 	brid	-484		// 9001a518
9001a700:	1756d000 	rsubk	r26, r22, r26
9001a704:	10f70000 	addk	r7, r23, r0
9001a708:	b9f40dd8 	brlid	r15, 3544	// 9001b4e0 <memchr>
9001a70c:	30c0000a 	addik	r6, r0, 10
9001a710:	be030090 	beqid	r3, 144		// 9001a7a0
9001a714:	147b1800 	rsubk	r3, r27, r3
9001a718:	33430001 	addik	r26, r3, 1
9001a71c:	b810fda0 	brid	-608		// 9001a4bc
9001a720:	33a00001 	addik	r29, r0, 1
9001a724:	10f70000 	addk	r7, r23, r0
9001a728:	12770000 	addk	r19, r23, r0
9001a72c:	b9f40e98 	brlid	r15, 3736	// 9001b5c4 <memmove>
9001a730:	12d70000 	addk	r22, r23, r0
9001a734:	e8980008 	lwi	r4, r24, 8
9001a738:	e8780000 	lwi	r3, r24, 0
9001a73c:	14972000 	rsubk	r4, r23, r4
9001a740:	1063b800 	addk	r3, r3, r23
9001a744:	f8980008 	swi	r4, r24, 8
9001a748:	f8780000 	swi	r3, r24, 0
9001a74c:	b810fea0 	brid	-352		// 9001a5ec
9001a750:	13570000 	addk	r26, r23, r0
9001a754:	e8780010 	lwi	r3, r24, 16
9001a758:	e8980000 	lwi	r4, r24, 0
9001a75c:	b0009002 	imm	-28670
9001a760:	e8a03b60 	lwi	r5, r0, 15200
9001a764:	10c30000 	addk	r6, r3, r0
9001a768:	16c32000 	rsubk	r22, r3, r4
9001a76c:	1357b000 	addk	r26, r23, r22
9001a770:	b9f42b60 	brlid	r15, 11104	// 9001d2d0 <_realloc_r>
9001a774:	10fa0000 	addk	r7, r26, r0
9001a778:	be03fde4 	beqid	r3, -540		// 9001a55c
9001a77c:	10a30000 	addk	r5, r3, r0
9001a780:	12770000 	addk	r19, r23, r0
9001a784:	1063b000 	addk	r3, r3, r22
9001a788:	f8780000 	swi	r3, r24, 0
9001a78c:	fb580014 	swi	r26, r24, 20
9001a790:	f8b80010 	swi	r5, r24, 16
9001a794:	faf80008 	swi	r23, r24, 8
9001a798:	b810fe14 	brid	-492		// 9001a5ac
9001a79c:	10f70000 	addk	r7, r23, r0
9001a7a0:	33570001 	addik	r26, r23, 1
9001a7a4:	b810fd18 	brid	-744		// 9001a4bc
9001a7a8:	33a00001 	addik	r29, r0, 1
9001a7ac:	b9f4d438 	brlid	r15, -11208	// 90017be4 <__swsetup>
9001a7b0:	80000000 	or	r0, r0, r0
9001a7b4:	be23fcb0 	bneid	r3, -848		// 9001a464
9001a7b8:	3080ffff 	addik	r4, r0, -1
9001a7bc:	e498000c 	lhui	r4, r24, 12
9001a7c0:	b810fc40 	brid	-960		// 9001a400
9001a7c4:	a4640002 	andi	r3, r4, 2

9001a7c8 <_fwalk_reent>:
9001a7c8:	3021ffc8 	addik	r1, r1, -56
9001a7cc:	fb410030 	swi	r26, r1, 48
9001a7d0:	13450000 	addk	r26, r5, r0
9001a7d4:	fae10024 	swi	r23, r1, 36
9001a7d8:	fb21002c 	swi	r25, r1, 44
9001a7dc:	32fa00d8 	addik	r23, r26, 216
9001a7e0:	fb610034 	swi	r27, r1, 52
9001a7e4:	f9e10000 	swi	r15, r1, 0
9001a7e8:	fa61001c 	swi	r19, r1, 28
9001a7ec:	fac10020 	swi	r22, r1, 32
9001a7f0:	fb010028 	swi	r24, r1, 40
9001a7f4:	13660000 	addk	r27, r6, r0
9001a7f8:	b9f4f134 	brlid	r15, -3788	// 9001992c <__sfp_lock_acquire>
9001a7fc:	13370000 	addk	r25, r23, r0
9001a800:	bc170060 	beqi	r23, 96		// 9001a860
9001a804:	13200000 	addk	r25, r0, r0
9001a808:	eb170004 	lwi	r24, r23, 4
9001a80c:	ea770008 	lwi	r19, r23, 8
9001a810:	3078ffff 	addik	r3, r24, -1
9001a814:	bc430044 	blti	r3, 68		// 9001a858
9001a818:	12c00000 	addk	r22, r0, r0
9001a81c:	e473000c 	lhui	r3, r19, 12
9001a820:	be03002c 	beqid	r3, 44		// 9001a84c
9001a824:	32d60001 	addik	r22, r22, 1
9001a828:	e473000e 	lhui	r3, r19, 14
9001a82c:	10d30000 	addk	r6, r19, r0
9001a830:	b0000000 	imm	0
9001a834:	aa43ffff 	xori	r18, r3, -1
9001a838:	be120014 	beqid	r18, 20		// 9001a84c
9001a83c:	10ba0000 	addk	r5, r26, r0
9001a840:	99fcd800 	brald	r15, r27
9001a844:	80000000 	or	r0, r0, r0
9001a848:	83391800 	or	r25, r25, r3
9001a84c:	1656c000 	rsubk	r18, r22, r24
9001a850:	be32ffcc 	bneid	r18, -52		// 9001a81c
9001a854:	3273005c 	addik	r19, r19, 92
9001a858:	eaf70000 	lwi	r23, r23, 0
9001a85c:	bc37ffac 	bnei	r23, -84		// 9001a808
9001a860:	b9f4f0d4 	brlid	r15, -3884	// 90019934 <__sfp_lock_release>
9001a864:	80000000 	or	r0, r0, r0
9001a868:	10790000 	addk	r3, r25, r0
9001a86c:	e9e10000 	lwi	r15, r1, 0
9001a870:	ea61001c 	lwi	r19, r1, 28
9001a874:	eac10020 	lwi	r22, r1, 32
9001a878:	eae10024 	lwi	r23, r1, 36
9001a87c:	eb010028 	lwi	r24, r1, 40
9001a880:	eb21002c 	lwi	r25, r1, 44
9001a884:	eb410030 	lwi	r26, r1, 48
9001a888:	eb610034 	lwi	r27, r1, 52
9001a88c:	b60f0008 	rtsd	r15, 8
9001a890:	30210038 	addik	r1, r1, 56

9001a894 <_fwalk>:
9001a894:	3021ffcc 	addik	r1, r1, -52
9001a898:	fac10020 	swi	r22, r1, 32
9001a89c:	12c50000 	addk	r22, r5, r0
9001a8a0:	fae10024 	swi	r23, r1, 36
9001a8a4:	fb21002c 	swi	r25, r1, 44
9001a8a8:	32f600d8 	addik	r23, r22, 216
9001a8ac:	fb410030 	swi	r26, r1, 48
9001a8b0:	f9e10000 	swi	r15, r1, 0
9001a8b4:	fa61001c 	swi	r19, r1, 28
9001a8b8:	fb010028 	swi	r24, r1, 40
9001a8bc:	13460000 	addk	r26, r6, r0
9001a8c0:	b9f4f06c 	brlid	r15, -3988	// 9001992c <__sfp_lock_acquire>
9001a8c4:	13370000 	addk	r25, r23, r0
9001a8c8:	bc17005c 	beqi	r23, 92		// 9001a924
9001a8cc:	13200000 	addk	r25, r0, r0
9001a8d0:	eb170004 	lwi	r24, r23, 4
9001a8d4:	ea770008 	lwi	r19, r23, 8
9001a8d8:	3078ffff 	addik	r3, r24, -1
9001a8dc:	bc430040 	blti	r3, 64		// 9001a91c
9001a8e0:	12c00000 	addk	r22, r0, r0
9001a8e4:	e473000c 	lhui	r3, r19, 12
9001a8e8:	be030028 	beqid	r3, 40		// 9001a910
9001a8ec:	32d60001 	addik	r22, r22, 1
9001a8f0:	e473000e 	lhui	r3, r19, 14
9001a8f4:	b0000000 	imm	0
9001a8f8:	aa43ffff 	xori	r18, r3, -1
9001a8fc:	be120014 	beqid	r18, 20		// 9001a910
9001a900:	10b30000 	addk	r5, r19, r0
9001a904:	99fcd000 	brald	r15, r26
9001a908:	80000000 	or	r0, r0, r0
9001a90c:	83391800 	or	r25, r25, r3
9001a910:	1656c000 	rsubk	r18, r22, r24
9001a914:	be32ffd0 	bneid	r18, -48		// 9001a8e4
9001a918:	3273005c 	addik	r19, r19, 92
9001a91c:	eaf70000 	lwi	r23, r23, 0
9001a920:	bc37ffb0 	bnei	r23, -80		// 9001a8d0
9001a924:	b9f4f010 	brlid	r15, -4080	// 90019934 <__sfp_lock_release>
9001a928:	80000000 	or	r0, r0, r0
9001a92c:	10790000 	addk	r3, r25, r0
9001a930:	e9e10000 	lwi	r15, r1, 0
9001a934:	ea61001c 	lwi	r19, r1, 28
9001a938:	eac10020 	lwi	r22, r1, 32
9001a93c:	eae10024 	lwi	r23, r1, 36
9001a940:	eb010028 	lwi	r24, r1, 40
9001a944:	eb21002c 	lwi	r25, r1, 44
9001a948:	eb410030 	lwi	r26, r1, 48
9001a94c:	b60f0008 	rtsd	r15, 8
9001a950:	30210034 	addik	r1, r1, 52

9001a954 <__locale_charset>:
9001a954:	b0009002 	imm	-28670
9001a958:	e860354c 	lwi	r3, r0, 13644
9001a95c:	b60f0008 	rtsd	r15, 8
9001a960:	80000000 	or	r0, r0, r0

9001a964 <_localeconv_r>:
9001a964:	b0009002 	imm	-28670
9001a968:	30603510 	addik	r3, r0, 13584
9001a96c:	b60f0008 	rtsd	r15, 8
9001a970:	80000000 	or	r0, r0, r0

9001a974 <_setlocale_r>:
9001a974:	3021ffd8 	addik	r1, r1, -40
9001a978:	fae10024 	swi	r23, r1, 36
9001a97c:	12e60000 	addk	r23, r6, r0
9001a980:	b0009002 	imm	-28670
9001a984:	30c03504 	addik	r6, r0, 13572
9001a988:	fa61001c 	swi	r19, r1, 28
9001a98c:	fac10020 	swi	r22, r1, 32
9001a990:	f9e10000 	swi	r15, r1, 0
9001a994:	12c50000 	addk	r22, r5, r0
9001a998:	12670000 	addk	r19, r7, r0
9001a99c:	10a70000 	addk	r5, r7, r0
9001a9a0:	be070030 	beqid	r7, 48		// 9001a9d0
9001a9a4:	10860000 	addk	r4, r6, r0
9001a9a8:	b9f499e8 	brlid	r15, -26136	// 90014390 <strcmp>
9001a9ac:	80000000 	or	r0, r0, r0
9001a9b0:	b0009002 	imm	-28670
9001a9b4:	30c03508 	addik	r6, r0, 13576
9001a9b8:	be230034 	bneid	r3, 52		// 9001a9ec
9001a9bc:	10b30000 	addk	r5, r19, r0
9001a9c0:	b0009002 	imm	-28670
9001a9c4:	30803504 	addik	r4, r0, 13572
9001a9c8:	fa760020 	swi	r19, r22, 32
9001a9cc:	faf6001c 	swi	r23, r22, 28
9001a9d0:	10640000 	addk	r3, r4, r0
9001a9d4:	e9e10000 	lwi	r15, r1, 0
9001a9d8:	ea61001c 	lwi	r19, r1, 28
9001a9dc:	eac10020 	lwi	r22, r1, 32
9001a9e0:	eae10024 	lwi	r23, r1, 36
9001a9e4:	b60f0008 	rtsd	r15, 8
9001a9e8:	30210028 	addik	r1, r1, 40
9001a9ec:	b9f499a4 	brlid	r15, -26204	// 90014390 <strcmp>
9001a9f0:	80000000 	or	r0, r0, r0
9001a9f4:	be03ffcc 	beqid	r3, -52		// 9001a9c0
9001a9f8:	10800000 	addk	r4, r0, r0
9001a9fc:	b810ffd8 	brid	-40		// 9001a9d4
9001aa00:	10640000 	addk	r3, r4, r0

9001aa04 <localeconv>:
9001aa04:	b0009002 	imm	-28670
9001aa08:	30603510 	addik	r3, r0, 13584
9001aa0c:	b60f0008 	rtsd	r15, 8
9001aa10:	80000000 	or	r0, r0, r0

9001aa14 <setlocale>:
9001aa14:	3021ffd8 	addik	r1, r1, -40
9001aa18:	fa61001c 	swi	r19, r1, 28
9001aa1c:	12660000 	addk	r19, r6, r0
9001aa20:	b0009002 	imm	-28670
9001aa24:	30c03504 	addik	r6, r0, 13572
9001aa28:	fac10020 	swi	r22, r1, 32
9001aa2c:	fae10024 	swi	r23, r1, 36
9001aa30:	f9e10000 	swi	r15, r1, 0
9001aa34:	12e50000 	addk	r23, r5, r0
9001aa38:	b0009002 	imm	-28670
9001aa3c:	eac03b60 	lwi	r22, r0, 15200
9001aa40:	10b30000 	addk	r5, r19, r0
9001aa44:	be130030 	beqid	r19, 48		// 9001aa74
9001aa48:	10860000 	addk	r4, r6, r0
9001aa4c:	b9f49944 	brlid	r15, -26300	// 90014390 <strcmp>
9001aa50:	80000000 	or	r0, r0, r0
9001aa54:	b0009002 	imm	-28670
9001aa58:	30c03508 	addik	r6, r0, 13576
9001aa5c:	be230034 	bneid	r3, 52		// 9001aa90
9001aa60:	10b30000 	addk	r5, r19, r0
9001aa64:	b0009002 	imm	-28670
9001aa68:	30803504 	addik	r4, r0, 13572
9001aa6c:	fa760020 	swi	r19, r22, 32
9001aa70:	faf6001c 	swi	r23, r22, 28
9001aa74:	10640000 	addk	r3, r4, r0
9001aa78:	e9e10000 	lwi	r15, r1, 0
9001aa7c:	ea61001c 	lwi	r19, r1, 28
9001aa80:	eac10020 	lwi	r22, r1, 32
9001aa84:	eae10024 	lwi	r23, r1, 36
9001aa88:	b60f0008 	rtsd	r15, 8
9001aa8c:	30210028 	addik	r1, r1, 40
9001aa90:	b9f49900 	brlid	r15, -26368	// 90014390 <strcmp>
9001aa94:	80000000 	or	r0, r0, r0
9001aa98:	be03ffcc 	beqid	r3, -52		// 9001aa64
9001aa9c:	10800000 	addk	r4, r0, r0
9001aaa0:	b810ffd8 	brid	-40		// 9001aa78
9001aaa4:	10640000 	addk	r3, r4, r0

9001aaa8 <__smakebuf>:
9001aaa8:	3021ffa0 	addik	r1, r1, -96
9001aaac:	fa610058 	swi	r19, r1, 88
9001aab0:	fac1005c 	swi	r22, r1, 92
9001aab4:	f9e10000 	swi	r15, r1, 0
9001aab8:	e465000c 	lhui	r3, r5, 12
9001aabc:	a6c30002 	andi	r22, r3, 2
9001aac0:	be160030 	beqid	r22, 48		// 9001aaf0
9001aac4:	12650000 	addk	r19, r5, r0
9001aac8:	30850047 	addik	r4, r5, 71
9001aacc:	30600001 	addik	r3, r0, 1
9001aad0:	f8650014 	swi	r3, r5, 20
9001aad4:	f8850010 	swi	r4, r5, 16
9001aad8:	f8850000 	swi	r4, r5, 0
9001aadc:	e9e10000 	lwi	r15, r1, 0
9001aae0:	ea610058 	lwi	r19, r1, 88
9001aae4:	eac1005c 	lwi	r22, r1, 92
9001aae8:	b60f0008 	rtsd	r15, 8
9001aaec:	30210060 	addik	r1, r1, 96
9001aaf0:	e465000e 	lhui	r3, r5, 14
9001aaf4:	90c30061 	sext16	r6, r3
9001aaf8:	bc460038 	blti	r6, 56		// 9001ab30
9001aafc:	b0009002 	imm	-28670
9001ab00:	e8a03b60 	lwi	r5, r0, 15200
9001ab04:	b9f43434 	brlid	r15, 13364	// 9001df38 <_fstat_r>
9001ab08:	30e1001c 	addik	r7, r1, 28
9001ab0c:	be430024 	bltid	r3, 36		// 9001ab30
9001ab10:	30802000 	addik	r4, r0, 8192
9001ab14:	e8610020 	lwi	r3, r1, 32
9001ab18:	b0000000 	imm	0
9001ab1c:	a463f000 	andi	r3, r3, -4096
9001ab20:	b0000000 	imm	0
9001ab24:	aa438000 	xori	r18, r3, -32768
9001ab28:	be120080 	beqid	r18, 128		// 9001aba8
9001ab2c:	8ac32400 	pcmpeq	r22, r3, r4
9001ab30:	e473000c 	lhui	r3, r19, 12
9001ab34:	a0630800 	ori	r3, r3, 2048
9001ab38:	f473000c 	shi	r3, r19, 12
9001ab3c:	b0009002 	imm	-28670
9001ab40:	e8a03b60 	lwi	r5, r0, 15200
9001ab44:	b9f40100 	brlid	r15, 256	// 9001ac44 <_malloc_r>
9001ab48:	30c00400 	addik	r6, r0, 1024
9001ab4c:	be030084 	beqid	r3, 132		// 9001abd0
9001ab50:	10c30000 	addk	r6, r3, r0
9001ab54:	e493000c 	lhui	r4, r19, 12
9001ab58:	b0009002 	imm	-28670
9001ab5c:	e8603b60 	lwi	r3, r0, 15200
9001ab60:	b0009001 	imm	-28671
9001ab64:	30a0995c 	addik	r5, r0, -26276
9001ab68:	a0840080 	ori	r4, r4, 128
9001ab6c:	f493000c 	shi	r4, r19, 12
9001ab70:	f8a30028 	swi	r5, r3, 40
9001ab74:	30600400 	addik	r3, r0, 1024
9001ab78:	f8d30010 	swi	r6, r19, 16
9001ab7c:	f8730014 	swi	r3, r19, 20
9001ab80:	f8d30000 	swi	r6, r19, 0
9001ab84:	bc16ff58 	beqi	r22, -168		// 9001aadc
9001ab88:	e4b3000e 	lhui	r5, r19, 14
9001ab8c:	b9f43848 	brlid	r15, 14408	// 9001e3d4 <isatty>
9001ab90:	90a50061 	sext16	r5, r5
9001ab94:	bc03ff48 	beqi	r3, -184		// 9001aadc
9001ab98:	e473000c 	lhui	r3, r19, 12
9001ab9c:	a0630001 	ori	r3, r3, 1
9001aba0:	f473000c 	shi	r3, r19, 12
9001aba4:	b800ff38 	bri	-200		// 9001aadc
9001aba8:	e873002c 	lwi	r3, r19, 44
9001abac:	b0009001 	imm	-28671
9001abb0:	aa43d9ac 	xori	r18, r3, -9812
9001abb4:	be32ff7c 	bneid	r18, -132		// 9001ab30
9001abb8:	30800400 	addik	r4, r0, 1024
9001abbc:	e473000c 	lhui	r3, r19, 12
9001abc0:	f8930050 	swi	r4, r19, 80
9001abc4:	80632000 	or	r3, r3, r4
9001abc8:	f473000c 	shi	r3, r19, 12
9001abcc:	b800ff70 	bri	-144		// 9001ab3c
9001abd0:	e473000c 	lhui	r3, r19, 12
9001abd4:	30b30047 	addik	r5, r19, 71
9001abd8:	30800001 	addik	r4, r0, 1
9001abdc:	a0630002 	ori	r3, r3, 2
9001abe0:	f8930014 	swi	r4, r19, 20
9001abe4:	f473000c 	shi	r3, r19, 12
9001abe8:	f8b30010 	swi	r5, r19, 16
9001abec:	f8b30000 	swi	r5, r19, 0
9001abf0:	b800feec 	bri	-276		// 9001aadc

9001abf4 <free>:
9001abf4:	10c50000 	addk	r6, r5, r0
9001abf8:	b0009002 	imm	-28670
9001abfc:	e8a03b60 	lwi	r5, r0, 15200
9001ac00:	3021ffe4 	addik	r1, r1, -28
9001ac04:	f9e10000 	swi	r15, r1, 0
9001ac08:	b9f4f4cc 	brlid	r15, -2868	// 9001a0d4 <_free_r>
9001ac0c:	80000000 	or	r0, r0, r0
9001ac10:	e9e10000 	lwi	r15, r1, 0
9001ac14:	b60f0008 	rtsd	r15, 8
9001ac18:	3021001c 	addik	r1, r1, 28

9001ac1c <malloc>:
9001ac1c:	10c50000 	addk	r6, r5, r0
9001ac20:	b0009002 	imm	-28670
9001ac24:	e8a03b60 	lwi	r5, r0, 15200
9001ac28:	3021ffe4 	addik	r1, r1, -28
9001ac2c:	f9e10000 	swi	r15, r1, 0
9001ac30:	b9f40014 	brlid	r15, 20	// 9001ac44 <_malloc_r>
9001ac34:	80000000 	or	r0, r0, r0
9001ac38:	e9e10000 	lwi	r15, r1, 0
9001ac3c:	b60f0008 	rtsd	r15, 8
9001ac40:	3021001c 	addik	r1, r1, 28

9001ac44 <_malloc_r>:
9001ac44:	3021ffc8 	addik	r1, r1, -56
9001ac48:	3066000b 	addik	r3, r6, 11
9001ac4c:	fae10024 	swi	r23, r1, 36
9001ac50:	f9e10000 	swi	r15, r1, 0
9001ac54:	fa61001c 	swi	r19, r1, 28
9001ac58:	fac10020 	swi	r22, r1, 32
9001ac5c:	fb010028 	swi	r24, r1, 40
9001ac60:	fb21002c 	swi	r25, r1, 44
9001ac64:	fb410030 	swi	r26, r1, 48
9001ac68:	fb610034 	swi	r27, r1, 52
9001ac6c:	22400016 	addi	r18, r0, 22
9001ac70:	16439003 	cmpu	r18, r3, r18
9001ac74:	be520054 	bltid	r18, 84		// 9001acc8
9001ac78:	12e50000 	addk	r23, r5, r0
9001ac7c:	32c00010 	addik	r22, r0, 16	// 10 <_vector_interrupt>
9001ac80:	10600000 	addk	r3, r0, r0
9001ac84:	1646b003 	cmpu	r18, r6, r22
9001ac88:	bc520008 	blti	r18, 8		// 9001ac90
9001ac8c:	bc030048 	beqi	r3, 72		// 9001acd4
9001ac90:	3060000c 	addik	r3, r0, 12
9001ac94:	10800000 	addk	r4, r0, r0
9001ac98:	f877000c 	swi	r3, r23, 12
9001ac9c:	10640000 	addk	r3, r4, r0
9001aca0:	e9e10000 	lwi	r15, r1, 0
9001aca4:	ea61001c 	lwi	r19, r1, 28
9001aca8:	eac10020 	lwi	r22, r1, 32
9001acac:	eae10024 	lwi	r23, r1, 36
9001acb0:	eb010028 	lwi	r24, r1, 40
9001acb4:	eb21002c 	lwi	r25, r1, 44
9001acb8:	eb410030 	lwi	r26, r1, 48
9001acbc:	eb610034 	lwi	r27, r1, 52
9001acc0:	b60f0008 	rtsd	r15, 8
9001acc4:	30210038 	addik	r1, r1, 56
9001acc8:	a6c3fff8 	andi	r22, r3, -8
9001accc:	b810ffb8 	brid	-72		// 9001ac84
9001acd0:	6476001f 	bsrli	r3, r22, 31
9001acd4:	b9f40a00 	brlid	r15, 2560	// 9001b6d4 <__malloc_lock>
9001acd8:	10b70000 	addk	r5, r23, r0
9001acdc:	224001f7 	addi	r18, r0, 503
9001ace0:	16569003 	cmpu	r18, r22, r18
9001ace4:	beb200d0 	bgeid	r18, 208		// 9001adb4
9001ace8:	64760009 	bsrli	r3, r22, 9
9001acec:	be23011c 	bneid	r3, 284		// 9001ae08
9001acf0:	64d60003 	bsrli	r6, r22, 3
9001acf4:	64660403 	bslli	r3, r6, 3
9001acf8:	b0009002 	imm	-28670
9001acfc:	33003c64 	addik	r24, r0, 15460
9001ad00:	10a3c000 	addk	r5, r3, r24
9001ad04:	ea65000c 	lwi	r19, r5, 12
9001ad08:	16532800 	rsubk	r18, r19, r5
9001ad0c:	be320024 	bneid	r18, 36		// 9001ad30
9001ad10:	31260001 	addik	r9, r6, 1
9001ad14:	b800003c 	bri	60		// 9001ad50
9001ad18:	bea40264 	bgeid	r4, 612		// 9001af7c
9001ad1c:	10f31800 	addk	r7, r19, r3
9001ad20:	ea73000c 	lwi	r19, r19, 12
9001ad24:	16532800 	rsubk	r18, r19, r5
9001ad28:	be120028 	beqid	r18, 40		// 9001ad50
9001ad2c:	31260001 	addik	r9, r6, 1
9001ad30:	e8730004 	lwi	r3, r19, 4
9001ad34:	a463fffc 	andi	r3, r3, -4
9001ad38:	14961800 	rsubk	r4, r22, r3
9001ad3c:	3240000f 	addik	r18, r0, 15
9001ad40:	16449001 	cmp	r18, r4, r18
9001ad44:	bcb2ffd4 	bgei	r18, -44		// 9001ad18
9001ad48:	30c6ffff 	addik	r6, r6, -1
9001ad4c:	31260001 	addik	r9, r6, 1
9001ad50:	b0009002 	imm	-28670
9001ad54:	ea603c74 	lwi	r19, r0, 15476
9001ad58:	b0009002 	imm	-28670
9001ad5c:	31403c6c 	addik	r10, r0, 15468
9001ad60:	b0009002 	imm	-28670
9001ad64:	aa533c6c 	xori	r18, r19, 15468
9001ad68:	bc1202e0 	beqi	r18, 736		// 9001b048
9001ad6c:	e8730004 	lwi	r3, r19, 4
9001ad70:	a483fffc 	andi	r4, r3, -4
9001ad74:	14d62000 	rsubk	r6, r22, r4
9001ad78:	3240000f 	addik	r18, r0, 15
9001ad7c:	16469001 	cmp	r18, r6, r18
9001ad80:	bc520240 	blti	r18, 576		// 9001afc0
9001ad84:	f94a000c 	swi	r10, r10, 12
9001ad88:	b0009002 	imm	-28670
9001ad8c:	f9403c74 	swi	r10, r0, 15476
9001ad90:	bc4600ac 	blti	r6, 172		// 9001ae3c
9001ad94:	10932000 	addk	r4, r19, r4
9001ad98:	e8640004 	lwi	r3, r4, 4
9001ad9c:	a0630001 	ori	r3, r3, 1
9001ada0:	f8640004 	swi	r3, r4, 4
9001ada4:	b9f40938 	brlid	r15, 2360	// 9001b6dc <__malloc_unlock>
9001ada8:	10b70000 	addk	r5, r23, r0
9001adac:	b810fef0 	brid	-272		// 9001ac9c
9001adb0:	30930008 	addik	r4, r19, 8
9001adb4:	b0009002 	imm	-28670
9001adb8:	33003c64 	addik	r24, r0, 15460
9001adbc:	1076c000 	addk	r3, r22, r24
9001adc0:	ea63000c 	lwi	r19, r3, 12
9001adc4:	16531800 	rsubk	r18, r19, r3
9001adc8:	be1201e0 	beqid	r18, 480		// 9001afa8
9001adcc:	64960003 	bsrli	r4, r22, 3
9001add0:	e8930004 	lwi	r4, r19, 4
9001add4:	e8f3000c 	lwi	r7, r19, 12
9001add8:	e8d30008 	lwi	r6, r19, 8
9001addc:	a484fffc 	andi	r4, r4, -4
9001ade0:	10932000 	addk	r4, r19, r4
9001ade4:	e8640004 	lwi	r3, r4, 4
9001ade8:	f8c70008 	swi	r6, r7, 8
9001adec:	a0630001 	ori	r3, r3, 1
9001adf0:	f8640004 	swi	r3, r4, 4
9001adf4:	f8e6000c 	swi	r7, r6, 12
9001adf8:	b9f408e4 	brlid	r15, 2276	// 9001b6dc <__malloc_unlock>
9001adfc:	10b70000 	addk	r5, r23, r0
9001ae00:	b810fe9c 	brid	-356		// 9001ac9c
9001ae04:	30930008 	addik	r4, r19, 8
9001ae08:	22400004 	addi	r18, r0, 4
9001ae0c:	16439003 	cmpu	r18, r3, r18
9001ae10:	bcb2001c 	bgei	r18, 28		// 9001ae2c
9001ae14:	22400014 	addi	r18, r0, 20
9001ae18:	16439003 	cmpu	r18, r3, r18
9001ae1c:	be520244 	bltid	r18, 580		// 9001b060
9001ae20:	30c3005b 	addik	r6, r3, 91
9001ae24:	b810fed4 	brid	-300		// 9001acf8
9001ae28:	64660403 	bslli	r3, r6, 3
9001ae2c:	64760006 	bsrli	r3, r22, 6
9001ae30:	30c30038 	addik	r6, r3, 56
9001ae34:	b810fec4 	brid	-316		// 9001acf8
9001ae38:	64660403 	bslli	r3, r6, 3
9001ae3c:	224001ff 	addi	r18, r0, 511
9001ae40:	16449003 	cmpu	r18, r4, r18
9001ae44:	be5202cc 	bltid	r18, 716		// 9001b110
9001ae48:	64640009 	bsrli	r3, r4, 9
9001ae4c:	64840003 	bsrli	r4, r4, 3
9001ae50:	64a40403 	bslli	r5, r4, 3
9001ae54:	64840002 	bsrli	r4, r4, 2
9001ae58:	10b82800 	addk	r5, r24, r5
9001ae5c:	e8c50008 	lwi	r6, r5, 8
9001ae60:	b0009002 	imm	-28670
9001ae64:	e8e03c68 	lwi	r7, r0, 15464
9001ae68:	30600001 	addik	r3, r0, 1
9001ae6c:	44632400 	bsll	r3, r3, r4
9001ae70:	b0009002 	imm	-28670
9001ae74:	33603c64 	addik	r27, r0, 15460
9001ae78:	80e71800 	or	r7, r7, r3
9001ae7c:	f8b3000c 	swi	r5, r19, 12
9001ae80:	f8d30008 	swi	r6, r19, 8
9001ae84:	fa66000c 	swi	r19, r6, 12
9001ae88:	fa650008 	swi	r19, r5, 8
9001ae8c:	b0009002 	imm	-28670
9001ae90:	f8e03c68 	swi	r7, r0, 15464
9001ae94:	6469021f 	bsrai	r3, r9, 31
9001ae98:	a4630003 	andi	r3, r3, 3
9001ae9c:	10634800 	addk	r3, r3, r9
9001aea0:	64630202 	bsrai	r3, r3, 2
9001aea4:	30800001 	addik	r4, r0, 1
9001aea8:	44a41c00 	bsll	r5, r4, r3
9001aeac:	16453803 	cmpu	r18, r5, r7
9001aeb0:	be520148 	bltid	r18, 328		// 9001aff8
9001aeb4:	84653800 	and	r3, r5, r7
9001aeb8:	be230030 	bneid	r3, 48		// 9001aee8
9001aebc:	64690403 	bslli	r3, r9, 3
9001aec0:	10a52800 	addk	r5, r5, r5
9001aec4:	a469fffc 	andi	r3, r9, -4
9001aec8:	84872800 	and	r4, r7, r5
9001aecc:	be240018 	bneid	r4, 24		// 9001aee4
9001aed0:	31230004 	addik	r9, r3, 4
9001aed4:	10a52800 	addk	r5, r5, r5
9001aed8:	84672800 	and	r3, r7, r5
9001aedc:	be03fff8 	beqid	r3, -8		// 9001aed4
9001aee0:	31290004 	addik	r9, r9, 4
9001aee4:	64690403 	bslli	r3, r9, 3
9001aee8:	1183c000 	addk	r12, r3, r24
9001aeec:	11690000 	addk	r11, r9, r0
9001aef0:	108c0000 	addk	r4, r12, r0
9001aef4:	ea64000c 	lwi	r19, r4, 12
9001aef8:	16532000 	rsubk	r18, r19, r4
9001aefc:	bc320020 	bnei	r18, 32		// 9001af1c
9001af00:	b8100278 	brid	632		// 9001b178
9001af04:	316b0001 	addik	r11, r11, 1
9001af08:	bea80280 	bgeid	r8, 640		// 9001b188
9001af0c:	10d31800 	addk	r6, r19, r3
9001af10:	ea73000c 	lwi	r19, r19, 12
9001af14:	16532000 	rsubk	r18, r19, r4
9001af18:	bc12025c 	beqi	r18, 604		// 9001b174
9001af1c:	e8730004 	lwi	r3, r19, 4
9001af20:	a463fffc 	andi	r3, r3, -4
9001af24:	15161800 	rsubk	r8, r22, r3
9001af28:	3240000f 	addik	r18, r0, 15
9001af2c:	16489001 	cmp	r18, r8, r18
9001af30:	bcb2ffd8 	bgei	r18, -40		// 9001af08
9001af34:	e8930008 	lwi	r4, r19, 8
9001af38:	e8d3000c 	lwi	r6, r19, 12
9001af3c:	1073b000 	addk	r3, r19, r22
9001af40:	a0f60001 	ori	r7, r22, 1
9001af44:	f8860008 	swi	r4, r6, 8
9001af48:	f8c4000c 	swi	r6, r4, 12
9001af4c:	a0880001 	ori	r4, r8, 1
9001af50:	f8f30004 	swi	r7, r19, 4
9001af54:	f86a000c 	swi	r3, r10, 12
9001af58:	f86a0008 	swi	r3, r10, 8
9001af5c:	f8830004 	swi	r4, r3, 4
9001af60:	d9081800 	sw	r8, r8, r3
9001af64:	f9430008 	swi	r10, r3, 8
9001af68:	f943000c 	swi	r10, r3, 12
9001af6c:	b9f40770 	brlid	r15, 1904	// 9001b6dc <__malloc_unlock>
9001af70:	10b70000 	addk	r5, r23, r0
9001af74:	b810fd28 	brid	-728		// 9001ac9c
9001af78:	30930008 	addik	r4, r19, 8
9001af7c:	e8670004 	lwi	r3, r7, 4
9001af80:	e8930008 	lwi	r4, r19, 8
9001af84:	e8d3000c 	lwi	r6, r19, 12
9001af88:	a0630001 	ori	r3, r3, 1
9001af8c:	f8860008 	swi	r4, r6, 8
9001af90:	f8c4000c 	swi	r6, r4, 12
9001af94:	f8670004 	swi	r3, r7, 4
9001af98:	b9f40744 	brlid	r15, 1860	// 9001b6dc <__malloc_unlock>
9001af9c:	10b70000 	addk	r5, r23, r0
9001afa0:	b810fcfc 	brid	-772		// 9001ac9c
9001afa4:	30930008 	addik	r4, r19, 8
9001afa8:	30630008 	addik	r3, r3, 8
9001afac:	ea63000c 	lwi	r19, r3, 12
9001afb0:	16531800 	rsubk	r18, r19, r3
9001afb4:	be32fe1c 	bneid	r18, -484		// 9001add0
9001afb8:	31240002 	addik	r9, r4, 2
9001afbc:	b800fd94 	bri	-620		// 9001ad50
9001afc0:	1093b000 	addk	r4, r19, r22
9001afc4:	a0760001 	ori	r3, r22, 1
9001afc8:	f8730004 	swi	r3, r19, 4
9001afcc:	f88a000c 	swi	r4, r10, 12
9001afd0:	f88a0008 	swi	r4, r10, 8
9001afd4:	a0660001 	ori	r3, r6, 1
9001afd8:	d8c62000 	sw	r6, r6, r4
9001afdc:	f9440008 	swi	r10, r4, 8
9001afe0:	f8640004 	swi	r3, r4, 4
9001afe4:	f944000c 	swi	r10, r4, 12
9001afe8:	b9f406f4 	brlid	r15, 1780	// 9001b6dc <__malloc_unlock>
9001afec:	10b70000 	addk	r5, r23, r0
9001aff0:	b810fcac 	brid	-852		// 9001ac9c
9001aff4:	30930008 	addik	r4, r19, 8
9001aff8:	b0009002 	imm	-28670
9001affc:	eb003c6c 	lwi	r24, r0, 15468
9001b000:	e8780004 	lwi	r3, r24, 4
9001b004:	a743fffc 	andi	r26, r3, -4
9001b008:	1656d003 	cmpu	r18, r22, r26
9001b00c:	be520070 	bltid	r18, 112		// 9001b07c
9001b010:	14d6d000 	rsubk	r6, r22, r26
9001b014:	3240000f 	addik	r18, r0, 15
9001b018:	16469001 	cmp	r18, r6, r18
9001b01c:	bcb20060 	bgei	r18, 96		// 9001b07c
9001b020:	a0760001 	ori	r3, r22, 1
9001b024:	1098b000 	addk	r4, r24, r22
9001b028:	f8780004 	swi	r3, r24, 4
9001b02c:	a0660001 	ori	r3, r6, 1
9001b030:	f8640004 	swi	r3, r4, 4
9001b034:	f89b0008 	swi	r4, r27, 8
9001b038:	b9f406a4 	brlid	r15, 1700	// 9001b6dc <__malloc_unlock>
9001b03c:	10b70000 	addk	r5, r23, r0
9001b040:	b810fc5c 	brid	-932		// 9001ac9c
9001b044:	30980008 	addik	r4, r24, 8
9001b048:	b0009002 	imm	-28670
9001b04c:	33603c64 	addik	r27, r0, 15460
9001b050:	b0009002 	imm	-28670
9001b054:	e8e03c68 	lwi	r7, r0, 15464
9001b058:	b810fe40 	brid	-448		// 9001ae98
9001b05c:	6469021f 	bsrai	r3, r9, 31
9001b060:	22400054 	addi	r18, r0, 84
9001b064:	16439003 	cmpu	r18, r3, r18
9001b068:	bc52014c 	blti	r18, 332		// 9001b1b4
9001b06c:	6476000c 	bsrli	r3, r22, 12
9001b070:	30c3006e 	addik	r6, r3, 110
9001b074:	b810fc84 	brid	-892		// 9001acf8
9001b078:	64660403 	bslli	r3, r6, 3
9001b07c:	b0009002 	imm	-28670
9001b080:	e860fde4 	lwi	r3, r0, -540
9001b084:	b0009002 	imm	-28670
9001b088:	e8804070 	lwi	r4, r0, 16496
9001b08c:	30630010 	addik	r3, r3, 16
9001b090:	aa44ffff 	xori	r18, r4, -1
9001b094:	be120010 	beqid	r18, 16		// 9001b0a4
9001b098:	12761800 	addk	r19, r22, r3
9001b09c:	3073007f 	addik	r3, r19, 127
9001b0a0:	a663ff80 	andi	r19, r3, -128
9001b0a4:	10b70000 	addk	r5, r23, r0
9001b0a8:	b9f42884 	brlid	r15, 10372	// 9001d92c <_sbrk_r>
9001b0ac:	10d30000 	addk	r6, r19, r0
9001b0b0:	aa43ffff 	xori	r18, r3, -1
9001b0b4:	be120024 	beqid	r18, 36		// 9001b0d8
9001b0b8:	10830000 	addk	r4, r3, r0
9001b0bc:	10b8d000 	addk	r5, r24, r26
9001b0c0:	16451803 	cmpu	r18, r5, r3
9001b0c4:	beb2010c 	bgeid	r18, 268		// 9001b1d0
9001b0c8:	13230000 	addk	r25, r3, r0
9001b0cc:	b0009002 	imm	-28670
9001b0d0:	aa583c64 	xori	r18, r24, 15460
9001b0d4:	bc12035c 	beqi	r18, 860		// 9001b430
9001b0d8:	b0009002 	imm	-28670
9001b0dc:	eb003c6c 	lwi	r24, r0, 15468
9001b0e0:	e8780004 	lwi	r3, r24, 4
9001b0e4:	a463fffc 	andi	r3, r3, -4
9001b0e8:	16561803 	cmpu	r18, r22, r3
9001b0ec:	be520014 	bltid	r18, 20		// 9001b100
9001b0f0:	14d61800 	rsubk	r6, r22, r3
9001b0f4:	3240000f 	addik	r18, r0, 15
9001b0f8:	16469001 	cmp	r18, r6, r18
9001b0fc:	bc52ff24 	blti	r18, -220		// 9001b020
9001b100:	b9f405dc 	brlid	r15, 1500	// 9001b6dc <__malloc_unlock>
9001b104:	10b70000 	addk	r5, r23, r0
9001b108:	b810fb94 	brid	-1132		// 9001ac9c
9001b10c:	10800000 	addk	r4, r0, r0
9001b110:	bc23018c 	bnei	r3, 396		// 9001b29c
9001b114:	64640003 	bsrli	r3, r4, 3
9001b118:	64a30403 	bslli	r5, r3, 3
9001b11c:	10d82800 	addk	r6, r24, r5
9001b120:	e8a60008 	lwi	r5, r6, 8
9001b124:	16453000 	rsubk	r18, r5, r6
9001b128:	bc120260 	beqi	r18, 608		// 9001b388
9001b12c:	e8650004 	lwi	r3, r5, 4
9001b130:	a463fffc 	andi	r3, r3, -4
9001b134:	16432003 	cmpu	r18, r3, r4
9001b138:	bcb20010 	bgei	r18, 16		// 9001b148
9001b13c:	e8a50008 	lwi	r5, r5, 8
9001b140:	16453000 	rsubk	r18, r5, r6
9001b144:	bc32ffe8 	bnei	r18, -24		// 9001b12c
9001b148:	e8c5000c 	lwi	r6, r5, 12
9001b14c:	b0009002 	imm	-28670
9001b150:	e8e03c68 	lwi	r7, r0, 15464
9001b154:	b0009002 	imm	-28670
9001b158:	33603c64 	addik	r27, r0, 15460
9001b15c:	f8d3000c 	swi	r6, r19, 12
9001b160:	f8b30008 	swi	r5, r19, 8
9001b164:	fa65000c 	swi	r19, r5, 12
9001b168:	fa660008 	swi	r19, r6, 8
9001b16c:	b810fd2c 	brid	-724		// 9001ae98
9001b170:	6469021f 	bsrai	r3, r9, 31
9001b174:	316b0001 	addik	r11, r11, 1
9001b178:	a46b0003 	andi	r3, r11, 3
9001b17c:	be03026c 	beqid	r3, 620		// 9001b3e8
9001b180:	30840008 	addik	r4, r4, 8
9001b184:	b800fd70 	bri	-656		// 9001aef4
9001b188:	e8660004 	lwi	r3, r6, 4
9001b18c:	e8930008 	lwi	r4, r19, 8
9001b190:	e8f3000c 	lwi	r7, r19, 12
9001b194:	a0630001 	ori	r3, r3, 1
9001b198:	f8870008 	swi	r4, r7, 8
9001b19c:	f8e4000c 	swi	r7, r4, 12
9001b1a0:	f8660004 	swi	r3, r6, 4
9001b1a4:	b9f40538 	brlid	r15, 1336	// 9001b6dc <__malloc_unlock>
9001b1a8:	10b70000 	addk	r5, r23, r0
9001b1ac:	b810faf0 	brid	-1296		// 9001ac9c
9001b1b0:	30930008 	addik	r4, r19, 8
9001b1b4:	22400154 	addi	r18, r0, 340
9001b1b8:	16439003 	cmpu	r18, r3, r18
9001b1bc:	bc5200fc 	blti	r18, 252		// 9001b2b8
9001b1c0:	6476000f 	bsrli	r3, r22, 15
9001b1c4:	30c30077 	addik	r6, r3, 119
9001b1c8:	b810fb30 	brid	-1232		// 9001acf8
9001b1cc:	64660403 	bslli	r3, r6, 3
9001b1d0:	b0009002 	imm	-28670
9001b1d4:	e8e0fdf0 	lwi	r7, r0, -528
9001b1d8:	10d33800 	addk	r6, r19, r7
9001b1dc:	b0009002 	imm	-28670
9001b1e0:	f8c0fdf0 	swi	r6, r0, -528
9001b1e4:	16432800 	rsubk	r18, r3, r5
9001b1e8:	be120260 	beqid	r18, 608		// 9001b448
9001b1ec:	10e60000 	addk	r7, r6, r0
9001b1f0:	b0009002 	imm	-28670
9001b1f4:	e8604070 	lwi	r3, r0, 16496
9001b1f8:	aa43ffff 	xori	r18, r3, -1
9001b1fc:	bc1201dc 	beqi	r18, 476		// 9001b3d8
9001b200:	14652000 	rsubk	r3, r5, r4
9001b204:	10e61800 	addk	r7, r6, r3
9001b208:	b0009002 	imm	-28670
9001b20c:	f8e0fdf0 	swi	r7, r0, -528
9001b210:	a4640007 	andi	r3, r4, 7
9001b214:	be030010 	beqid	r3, 16		// 9001b224
9001b218:	10c30000 	addk	r6, r3, r0
9001b21c:	34c30008 	rsubik	r6, r3, 8
9001b220:	13243000 	addk	r25, r4, r6
9001b224:	10799800 	addk	r3, r25, r19
9001b228:	a463007f 	andi	r3, r3, 127
9001b22c:	34630080 	rsubik	r3, r3, 128
9001b230:	12661800 	addk	r19, r6, r3
9001b234:	10b70000 	addk	r5, r23, r0
9001b238:	b9f426f4 	brlid	r15, 9972	// 9001d92c <_sbrk_r>
9001b23c:	10d30000 	addk	r6, r19, r0
9001b240:	aa43ffff 	xori	r18, r3, -1
9001b244:	bc120188 	beqi	r18, 392		// 9001b3cc
9001b248:	14791800 	rsubk	r3, r25, r3
9001b24c:	10639800 	addk	r3, r3, r19
9001b250:	a0630001 	ori	r3, r3, 1
9001b254:	b0009002 	imm	-28670
9001b258:	e8e0fdf0 	lwi	r7, r0, -528
9001b25c:	f8790004 	swi	r3, r25, 4
9001b260:	fb3b0008 	swi	r25, r27, 8
9001b264:	10f33800 	addk	r7, r19, r7
9001b268:	b0009002 	imm	-28670
9001b26c:	f8e0fdf0 	swi	r7, r0, -528
9001b270:	b0009002 	imm	-28670
9001b274:	aa583c64 	xori	r18, r24, 15460
9001b278:	bc120058 	beqi	r18, 88		// 9001b2d0
9001b27c:	2240000f 	addi	r18, r0, 15
9001b280:	165a9003 	cmpu	r18, r26, r18
9001b284:	be5200a0 	bltid	r18, 160		// 9001b324
9001b288:	30600001 	addik	r3, r0, 1
9001b28c:	b0009002 	imm	-28670
9001b290:	eb003c6c 	lwi	r24, r0, 15468
9001b294:	f8790004 	swi	r3, r25, 4
9001b298:	b800fe48 	bri	-440		// 9001b0e0
9001b29c:	22400004 	addi	r18, r0, 4
9001b2a0:	16439003 	cmpu	r18, r3, r18
9001b2a4:	bc520068 	blti	r18, 104		// 9001b30c
9001b2a8:	64640006 	bsrli	r3, r4, 6
9001b2ac:	30630038 	addik	r3, r3, 56
9001b2b0:	b810fe6c 	brid	-404		// 9001b11c
9001b2b4:	64a30403 	bslli	r5, r3, 3
9001b2b8:	22400554 	addi	r18, r0, 1364
9001b2bc:	16439003 	cmpu	r18, r3, r18
9001b2c0:	bcb200b8 	bgei	r18, 184		// 9001b378
9001b2c4:	30c0007e 	addik	r6, r0, 126
9001b2c8:	b810fa30 	brid	-1488		// 9001acf8
9001b2cc:	306003f0 	addik	r3, r0, 1008
9001b2d0:	b0009002 	imm	-28670
9001b2d4:	eb003c6c 	lwi	r24, r0, 15468
9001b2d8:	b0009002 	imm	-28670
9001b2dc:	e860fde8 	lwi	r3, r0, -536
9001b2e0:	16471803 	cmpu	r18, r7, r3
9001b2e4:	bcb2000c 	bgei	r18, 12		// 9001b2f0
9001b2e8:	b0009002 	imm	-28670
9001b2ec:	f8e0fde8 	swi	r7, r0, -536
9001b2f0:	b0009002 	imm	-28670
9001b2f4:	e860fdec 	lwi	r3, r0, -532
9001b2f8:	16471803 	cmpu	r18, r7, r3
9001b2fc:	bcb2fde4 	bgei	r18, -540		// 9001b0e0
9001b300:	b0009002 	imm	-28670
9001b304:	f8e0fdec 	swi	r7, r0, -532
9001b308:	b800fdd8 	bri	-552		// 9001b0e0
9001b30c:	22400014 	addi	r18, r0, 20
9001b310:	16439003 	cmpu	r18, r3, r18
9001b314:	bc52009c 	blti	r18, 156		// 9001b3b0
9001b318:	3063005b 	addik	r3, r3, 91
9001b31c:	b810fe00 	brid	-512		// 9001b11c
9001b320:	64a30403 	bslli	r5, r3, 3
9001b324:	e8780004 	lwi	r3, r24, 4
9001b328:	309afff4 	addik	r4, r26, -12
9001b32c:	a484fff8 	andi	r4, r4, -8
9001b330:	a4630001 	andi	r3, r3, 1
9001b334:	80641800 	or	r3, r4, r3
9001b338:	f8780004 	swi	r3, r24, 4
9001b33c:	10b82000 	addk	r5, r24, r4
9001b340:	30600005 	addik	r3, r0, 5
9001b344:	f8650008 	swi	r3, r5, 8
9001b348:	f8650004 	swi	r3, r5, 4
9001b34c:	2240000f 	addi	r18, r0, 15
9001b350:	16449003 	cmpu	r18, r4, r18
9001b354:	beb2ff7c 	bgeid	r18, -132		// 9001b2d0
9001b358:	10b70000 	addk	r5, r23, r0
9001b35c:	b9f4ed78 	brlid	r15, -4744	// 9001a0d4 <_free_r>
9001b360:	30d80008 	addik	r6, r24, 8
9001b364:	b0009002 	imm	-28670
9001b368:	eb003c6c 	lwi	r24, r0, 15468
9001b36c:	b0009002 	imm	-28670
9001b370:	e8e0fdf0 	lwi	r7, r0, -528
9001b374:	b800ff64 	bri	-156		// 9001b2d8
9001b378:	64760012 	bsrli	r3, r22, 18
9001b37c:	30c3007c 	addik	r6, r3, 124
9001b380:	b810f978 	brid	-1672		// 9001acf8
9001b384:	64660403 	bslli	r3, r6, 3
9001b388:	64830002 	bsrli	r4, r3, 2
9001b38c:	b0009002 	imm	-28670
9001b390:	e8e03c68 	lwi	r7, r0, 15464
9001b394:	30600001 	addik	r3, r0, 1
9001b398:	44632400 	bsll	r3, r3, r4
9001b39c:	80e71800 	or	r7, r7, r3
9001b3a0:	b0009002 	imm	-28670
9001b3a4:	f8e03c68 	swi	r7, r0, 15464
9001b3a8:	b810fdac 	brid	-596		// 9001b154
9001b3ac:	10a60000 	addk	r5, r6, r0
9001b3b0:	22400054 	addi	r18, r0, 84
9001b3b4:	16439003 	cmpu	r18, r3, r18
9001b3b8:	bc5200b0 	blti	r18, 176		// 9001b468
9001b3bc:	6464000c 	bsrli	r3, r4, 12
9001b3c0:	3063006e 	addik	r3, r3, 110
9001b3c4:	b810fd58 	brid	-680		// 9001b11c
9001b3c8:	64a30403 	bslli	r5, r3, 3
9001b3cc:	12600000 	addk	r19, r0, r0
9001b3d0:	b810fe84 	brid	-380		// 9001b254
9001b3d4:	30600001 	addik	r3, r0, 1
9001b3d8:	b0009002 	imm	-28670
9001b3dc:	f8804070 	swi	r4, r0, 16496
9001b3e0:	b810fe34 	brid	-460		// 9001b214
9001b3e4:	a4640007 	andi	r3, r4, 7
9001b3e8:	10c90000 	addk	r6, r9, r0
9001b3ec:	108c0000 	addk	r4, r12, r0
9001b3f0:	a4660003 	andi	r3, r6, 3
9001b3f4:	3084fff8 	addik	r4, r4, -8
9001b3f8:	be03008c 	beqid	r3, 140		// 9001b484
9001b3fc:	30c6ffff 	addik	r6, r6, -1
9001b400:	e8640008 	lwi	r3, r4, 8
9001b404:	16441800 	rsubk	r18, r4, r3
9001b408:	be12ffec 	beqid	r18, -20		// 9001b3f4
9001b40c:	a4660003 	andi	r3, r6, 3
9001b410:	10a52800 	addk	r5, r5, r5
9001b414:	16453803 	cmpu	r18, r5, r7
9001b418:	bc52fbe0 	blti	r18, -1056		// 9001aff8
9001b41c:	be05fbdc 	beqid	r5, -1060		// 9001aff8
9001b420:	84653800 	and	r3, r5, r7
9001b424:	bc030094 	beqi	r3, 148		// 9001b4b8
9001b428:	b810fabc 	brid	-1348		// 9001aee4
9001b42c:	112b0000 	addk	r9, r11, r0
9001b430:	b0009002 	imm	-28670
9001b434:	e860fdf0 	lwi	r3, r0, -528
9001b438:	10d31800 	addk	r6, r19, r3
9001b43c:	b0009002 	imm	-28670
9001b440:	f8c0fdf0 	swi	r6, r0, -528
9001b444:	b800fdac 	bri	-596		// 9001b1f0
9001b448:	a465007f 	andi	r3, r5, 127
9001b44c:	be23fda4 	bneid	r3, -604		// 9001b1f0
9001b450:	1073d000 	addk	r3, r19, r26
9001b454:	b0009002 	imm	-28670
9001b458:	eb003c6c 	lwi	r24, r0, 15468
9001b45c:	a0630001 	ori	r3, r3, 1
9001b460:	f8780004 	swi	r3, r24, 4
9001b464:	b800fe74 	bri	-396		// 9001b2d8
9001b468:	22400154 	addi	r18, r0, 340
9001b46c:	16439003 	cmpu	r18, r3, r18
9001b470:	bc520030 	blti	r18, 48		// 9001b4a0
9001b474:	6464000f 	bsrli	r3, r4, 15
9001b478:	30630077 	addik	r3, r3, 119
9001b47c:	b810fca0 	brid	-864		// 9001b11c
9001b480:	64a30403 	bslli	r5, r3, 3
9001b484:	a865ffff 	xori	r3, r5, -1
9001b488:	84671800 	and	r3, r7, r3
9001b48c:	f87b0004 	swi	r3, r27, 4
9001b490:	b0009002 	imm	-28670
9001b494:	e8e03c68 	lwi	r7, r0, 15464
9001b498:	b810ff7c 	brid	-132		// 9001b414
9001b49c:	10a52800 	addk	r5, r5, r5
9001b4a0:	22400554 	addi	r18, r0, 1364
9001b4a4:	16439003 	cmpu	r18, r3, r18
9001b4a8:	bcb20028 	bgei	r18, 40		// 9001b4d0
9001b4ac:	3060007e 	addik	r3, r0, 126
9001b4b0:	b810fc6c 	brid	-916		// 9001b11c
9001b4b4:	30a003f0 	addik	r5, r0, 1008
9001b4b8:	10a52800 	addk	r5, r5, r5
9001b4bc:	84672800 	and	r3, r7, r5
9001b4c0:	be23ff68 	bneid	r3, -152		// 9001b428
9001b4c4:	316b0004 	addik	r11, r11, 4
9001b4c8:	b810fff4 	brid	-12		// 9001b4bc
9001b4cc:	10a52800 	addk	r5, r5, r5
9001b4d0:	64640012 	bsrli	r3, r4, 18
9001b4d4:	3063007c 	addik	r3, r3, 124
9001b4d8:	b810fc44 	brid	-956		// 9001b11c
9001b4dc:	64a30403 	bslli	r5, r3, 3

9001b4e0 <memchr>:
9001b4e0:	22400003 	addi	r18, r0, 3
9001b4e4:	16479003 	cmpu	r18, r7, r18
9001b4e8:	beb200bc 	bgeid	r18, 188		// 9001b5a4
9001b4ec:	a4c600ff 	andi	r6, r6, 255
9001b4f0:	a4650003 	andi	r3, r5, 3
9001b4f4:	be2300b0 	bneid	r3, 176		// 9001b5a4
9001b4f8:	64660408 	bslli	r3, r6, 8
9001b4fc:	10633000 	addk	r3, r3, r6
9001b500:	64630408 	bslli	r3, r3, 8
9001b504:	10633000 	addk	r3, r3, r6
9001b508:	64630408 	bslli	r3, r3, 8
9001b50c:	b8100048 	brid	72		// 9001b554
9001b510:	11233000 	addk	r9, r3, r6
9001b514:	e0650001 	lbui	r3, r5, 1
9001b518:	16433000 	rsubk	r18, r3, r6
9001b51c:	be120070 	beqid	r18, 112		// 9001b58c
9001b520:	31050001 	addik	r8, r5, 1
9001b524:	e0650002 	lbui	r3, r5, 2
9001b528:	16433000 	rsubk	r18, r3, r6
9001b52c:	be120060 	beqid	r18, 96		// 9001b58c
9001b530:	31050002 	addik	r8, r5, 2
9001b534:	e0650003 	lbui	r3, r5, 3
9001b538:	16433000 	rsubk	r18, r3, r6
9001b53c:	be120050 	beqid	r18, 80		// 9001b58c
9001b540:	31050003 	addik	r8, r5, 3
9001b544:	22400003 	addi	r18, r0, 3
9001b548:	16479003 	cmpu	r18, r7, r18
9001b54c:	beb20058 	bgeid	r18, 88		// 9001b5a4
9001b550:	30a50004 	addik	r5, r5, 4
9001b554:	e8650000 	lwi	r3, r5, 0
9001b558:	30e7fffc 	addik	r7, r7, -4
9001b55c:	88634800 	xor	r3, r3, r9
9001b560:	b000fefe 	imm	-258
9001b564:	3083feff 	addik	r4, r3, -257
9001b568:	b0008080 	imm	-32640
9001b56c:	a4848080 	andi	r4, r4, -32640
9001b570:	a863ffff 	xori	r3, r3, -1
9001b574:	84632000 	and	r3, r3, r4
9001b578:	be03ffcc 	beqid	r3, -52		// 9001b544
9001b57c:	11050000 	addk	r8, r5, r0
9001b580:	e0650000 	lbui	r3, r5, 0
9001b584:	16433000 	rsubk	r18, r3, r6
9001b588:	bc32ff8c 	bnei	r18, -116		// 9001b514
9001b58c:	b60f0008 	rtsd	r15, 8
9001b590:	10680000 	addk	r3, r8, r0
9001b594:	e0650000 	lbui	r3, r5, 0
9001b598:	16433000 	rsubk	r18, r3, r6
9001b59c:	bc120020 	beqi	r18, 32		// 9001b5bc
9001b5a0:	30a50001 	addik	r5, r5, 1
9001b5a4:	30e7ffff 	addik	r7, r7, -1
9001b5a8:	aa47ffff 	xori	r18, r7, -1
9001b5ac:	be32ffe8 	bneid	r18, -24		// 9001b594
9001b5b0:	10600000 	addk	r3, r0, r0
9001b5b4:	b60f0008 	rtsd	r15, 8
9001b5b8:	80000000 	or	r0, r0, r0
9001b5bc:	b60f0008 	rtsd	r15, 8
9001b5c0:	10650000 	addk	r3, r5, r0

9001b5c4 <memmove>:
9001b5c4:	10860000 	addk	r4, r6, r0
9001b5c8:	16453003 	cmpu	r18, r5, r6
9001b5cc:	beb20048 	bgeid	r18, 72		// 9001b614
9001b5d0:	11250000 	addk	r9, r5, r0
9001b5d4:	11063800 	addk	r8, r6, r7
9001b5d8:	16482803 	cmpu	r18, r8, r5
9001b5dc:	bcb20038 	bgei	r18, 56		// 9001b614
9001b5e0:	bc07002c 	beqi	r7, 44		// 9001b60c
9001b5e4:	10853800 	addk	r4, r5, r7
9001b5e8:	14e72000 	rsubk	r7, r7, r4
9001b5ec:	3108ffff 	addik	r8, r8, -1
9001b5f0:	e0680000 	lbui	r3, r8, 0
9001b5f4:	3084ffff 	addik	r4, r4, -1
9001b5f8:	f0640000 	sbi	r3, r4, 0
9001b5fc:	16472000 	rsubk	r18, r7, r4
9001b600:	be32fff0 	bneid	r18, -16		// 9001b5f0
9001b604:	3108ffff 	addik	r8, r8, -1
9001b608:	31080001 	addik	r8, r8, 1
9001b60c:	b60f0008 	rtsd	r15, 8
9001b610:	10650000 	addk	r3, r5, r0
9001b614:	2240000f 	addi	r18, r0, 15
9001b618:	16479003 	cmpu	r18, r7, r18
9001b61c:	be520034 	bltid	r18, 52		// 9001b650
9001b620:	80642800 	or	r3, r4, r5
9001b624:	bc07ffe8 	beqi	r7, -24		// 9001b60c
9001b628:	11090000 	addk	r8, r9, r0
9001b62c:	10e74800 	addk	r7, r7, r9
9001b630:	e0660000 	lbui	r3, r6, 0
9001b634:	f0680000 	sbi	r3, r8, 0
9001b638:	31080001 	addik	r8, r8, 1
9001b63c:	16474000 	rsubk	r18, r7, r8
9001b640:	be32fff0 	bneid	r18, -16		// 9001b630
9001b644:	30c60001 	addik	r6, r6, 1
9001b648:	b60f0008 	rtsd	r15, 8
9001b64c:	10650000 	addk	r3, r5, r0
9001b650:	a4630003 	andi	r3, r3, 3
9001b654:	be23ffd0 	bneid	r3, -48		// 9001b624
9001b658:	11050000 	addk	r8, r5, r0
9001b65c:	10c40000 	addk	r6, r4, r0
9001b660:	e8860000 	lwi	r4, r6, 0
9001b664:	30e7fff0 	addik	r7, r7, -16
9001b668:	f8880000 	swi	r4, r8, 0
9001b66c:	e8660004 	lwi	r3, r6, 4
9001b670:	f8680004 	swi	r3, r8, 4
9001b674:	e8860008 	lwi	r4, r6, 8
9001b678:	f8880008 	swi	r4, r8, 8
9001b67c:	e866000c 	lwi	r3, r6, 12
9001b680:	30c60010 	addik	r6, r6, 16
9001b684:	f868000c 	swi	r3, r8, 12
9001b688:	2240000f 	addi	r18, r0, 15
9001b68c:	16479003 	cmpu	r18, r7, r18
9001b690:	be52ffd0 	bltid	r18, -48		// 9001b660
9001b694:	31080010 	addik	r8, r8, 16
9001b698:	22400003 	addi	r18, r0, 3
9001b69c:	16479003 	cmpu	r18, r7, r18
9001b6a0:	bcb2002c 	bgei	r18, 44		// 9001b6cc
9001b6a4:	10800000 	addk	r4, r0, r0
9001b6a8:	c8662000 	lw	r3, r6, r4
9001b6ac:	30e7fffc 	addik	r7, r7, -4
9001b6b0:	d8682000 	sw	r3, r8, r4
9001b6b4:	22400003 	addi	r18, r0, 3
9001b6b8:	16479003 	cmpu	r18, r7, r18
9001b6bc:	be52ffec 	bltid	r18, -20		// 9001b6a8
9001b6c0:	30840004 	addik	r4, r4, 4
9001b6c4:	10c62000 	addk	r6, r6, r4
9001b6c8:	11044000 	addk	r8, r4, r8
9001b6cc:	b810ff58 	brid	-168		// 9001b624
9001b6d0:	11280000 	addk	r9, r8, r0

9001b6d4 <__malloc_lock>:
9001b6d4:	b60f0008 	rtsd	r15, 8
9001b6d8:	80000000 	or	r0, r0, r0

9001b6dc <__malloc_unlock>:
9001b6dc:	b60f0008 	rtsd	r15, 8
9001b6e0:	80000000 	or	r0, r0, r0

9001b6e4 <_hi0bits>:
9001b6e4:	b000ffff 	imm	-1
9001b6e8:	a4650000 	andi	r3, r5, 0
9001b6ec:	be230010 	bneid	r3, 16		// 9001b6fc
9001b6f0:	10800000 	addk	r4, r0, r0
9001b6f4:	64a50410 	bslli	r5, r5, 16
9001b6f8:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
9001b6fc:	b000ff00 	imm	-256
9001b700:	a4650000 	andi	r3, r5, 0
9001b704:	bc23000c 	bnei	r3, 12		// 9001b710
9001b708:	64a50408 	bslli	r5, r5, 8
9001b70c:	30840008 	addik	r4, r4, 8
9001b710:	b000f000 	imm	-4096
9001b714:	a4650000 	andi	r3, r5, 0
9001b718:	bc23000c 	bnei	r3, 12		// 9001b724
9001b71c:	64a50404 	bslli	r5, r5, 4
9001b720:	30840004 	addik	r4, r4, 4
9001b724:	b000c000 	imm	-16384
9001b728:	a4650000 	andi	r3, r5, 0
9001b72c:	bc23000c 	bnei	r3, 12		// 9001b738
9001b730:	64a50402 	bslli	r5, r5, 2
9001b734:	30840002 	addik	r4, r4, 2
9001b738:	bc450014 	blti	r5, 20		// 9001b74c
9001b73c:	b0004000 	imm	16384
9001b740:	a4650000 	andi	r3, r5, 0
9001b744:	be030010 	beqid	r3, 16		// 9001b754
9001b748:	30840001 	addik	r4, r4, 1
9001b74c:	b60f0008 	rtsd	r15, 8
9001b750:	10640000 	addk	r3, r4, r0
9001b754:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
9001b758:	b60f0008 	rtsd	r15, 8
9001b75c:	10640000 	addk	r3, r4, r0

9001b760 <_lo0bits>:
9001b760:	e8850000 	lwi	r4, r5, 0
9001b764:	a4c40007 	andi	r6, r4, 7
9001b768:	be06002c 	beqid	r6, 44		// 9001b794
9001b76c:	a4640001 	andi	r3, r4, 1
9001b770:	be23001c 	bneid	r3, 28		// 9001b78c
9001b774:	10c00000 	addk	r6, r0, r0
9001b778:	a4640002 	andi	r3, r4, 2
9001b77c:	bc2300c4 	bnei	r3, 196		// 9001b840
9001b780:	64640002 	bsrli	r3, r4, 2
9001b784:	30c00002 	addik	r6, r0, 2
9001b788:	f8650000 	swi	r3, r5, 0
9001b78c:	b60f0008 	rtsd	r15, 8
9001b790:	10660000 	addk	r3, r6, r0
9001b794:	b0000000 	imm	0
9001b798:	a464ffff 	andi	r3, r4, -1
9001b79c:	be030050 	beqid	r3, 80		// 9001b7ec
9001b7a0:	a46400ff 	andi	r3, r4, 255
9001b7a4:	bc030078 	beqi	r3, 120		// 9001b81c
9001b7a8:	a464000f 	andi	r3, r4, 15
9001b7ac:	bc030058 	beqi	r3, 88		// 9001b804
9001b7b0:	a4640003 	andi	r3, r4, 3
9001b7b4:	bc030024 	beqi	r3, 36		// 9001b7d8
9001b7b8:	a4640001 	andi	r3, r4, 1
9001b7bc:	bc230010 	bnei	r3, 16		// 9001b7cc
9001b7c0:	90840041 	srl	r4, r4
9001b7c4:	be040070 	beqid	r4, 112		// 9001b834
9001b7c8:	30c60001 	addik	r6, r6, 1
9001b7cc:	f8850000 	swi	r4, r5, 0
9001b7d0:	b60f0008 	rtsd	r15, 8
9001b7d4:	10660000 	addk	r3, r6, r0
9001b7d8:	64840002 	bsrli	r4, r4, 2
9001b7dc:	a4640001 	andi	r3, r4, 1
9001b7e0:	be03ffe0 	beqid	r3, -32		// 9001b7c0
9001b7e4:	30c60002 	addik	r6, r6, 2
9001b7e8:	b800ffe4 	bri	-28		// 9001b7cc
9001b7ec:	64840010 	bsrli	r4, r4, 16
9001b7f0:	a46400ff 	andi	r3, r4, 255
9001b7f4:	be23ffb4 	bneid	r3, -76		// 9001b7a8
9001b7f8:	30c00010 	addik	r6, r0, 16	// 10 <_vector_interrupt>
9001b7fc:	b8100024 	brid	36		// 9001b820
9001b800:	64840008 	bsrli	r4, r4, 8
9001b804:	64840004 	bsrli	r4, r4, 4
9001b808:	a4640003 	andi	r3, r4, 3
9001b80c:	be23ffac 	bneid	r3, -84		// 9001b7b8
9001b810:	30c60004 	addik	r6, r6, 4
9001b814:	b810ffc8 	brid	-56		// 9001b7dc
9001b818:	64840002 	bsrli	r4, r4, 2
9001b81c:	64840008 	bsrli	r4, r4, 8
9001b820:	a464000f 	andi	r3, r4, 15
9001b824:	be23ff8c 	bneid	r3, -116		// 9001b7b0
9001b828:	30c60008 	addik	r6, r6, 8
9001b82c:	b810ffdc 	brid	-36		// 9001b808
9001b830:	64840004 	bsrli	r4, r4, 4
9001b834:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
9001b838:	b60f0008 	rtsd	r15, 8
9001b83c:	10660000 	addk	r3, r6, r0
9001b840:	90640041 	srl	r3, r4
9001b844:	f8650000 	swi	r3, r5, 0
9001b848:	b810ff44 	brid	-188		// 9001b78c
9001b84c:	30c00001 	addik	r6, r0, 1

9001b850 <__mcmp>:
9001b850:	e8650010 	lwi	r3, r5, 16
9001b854:	e8860010 	lwi	r4, r6, 16
9001b858:	15041800 	rsubk	r8, r4, r3
9001b85c:	bc280038 	bnei	r8, 56		// 9001b894
9001b860:	64840402 	bslli	r4, r4, 2
9001b864:	30a50014 	addik	r5, r5, 20
9001b868:	30640014 	addik	r3, r4, 20
9001b86c:	10c61800 	addk	r6, r6, r3
9001b870:	10852000 	addk	r4, r5, r4
9001b874:	3084fffc 	addik	r4, r4, -4
9001b878:	30c6fffc 	addik	r6, r6, -4
9001b87c:	e8e40000 	lwi	r7, r4, 0
9001b880:	e8660000 	lwi	r3, r6, 0
9001b884:	16433800 	rsubk	r18, r3, r7
9001b888:	bc320014 	bnei	r18, 20		// 9001b89c
9001b88c:	16442803 	cmpu	r18, r4, r5
9001b890:	bc52ffe4 	blti	r18, -28		// 9001b874
9001b894:	b60f0008 	rtsd	r15, 8
9001b898:	10680000 	addk	r3, r8, r0
9001b89c:	16433803 	cmpu	r18, r3, r7
9001b8a0:	be52fff4 	bltid	r18, -12		// 9001b894
9001b8a4:	3100ffff 	addik	r8, r0, -1
9001b8a8:	31000001 	addik	r8, r0, 1
9001b8ac:	b60f0008 	rtsd	r15, 8
9001b8b0:	10680000 	addk	r3, r8, r0

9001b8b4 <_ulp>:
9001b8b4:	b0007ff0 	imm	32752
9001b8b8:	a4850000 	andi	r4, r5, 0
9001b8bc:	b000fcc0 	imm	-832
9001b8c0:	30840000 	addik	r4, r4, 0
9001b8c4:	14640000 	rsubk	r3, r4, r0
9001b8c8:	be64001c 	bleid	r4, 28		// 9001b8e4
9001b8cc:	64a30214 	bsrai	r5, r3, 20
9001b8d0:	10c40000 	addk	r6, r4, r0
9001b8d4:	10e00000 	addk	r7, r0, r0
9001b8d8:	10870000 	addk	r4, r7, r0
9001b8dc:	b60f0008 	rtsd	r15, 8
9001b8e0:	10660000 	addk	r3, r6, r0
9001b8e4:	3085ffec 	addik	r4, r5, -20
9001b8e8:	32400013 	addik	r18, r0, 19
9001b8ec:	16459001 	cmp	r18, r5, r18
9001b8f0:	beb20038 	bgeid	r18, 56		// 9001b928
9001b8f4:	30600001 	addik	r3, r0, 1
9001b8f8:	3240001e 	addik	r18, r0, 30
9001b8fc:	16449001 	cmp	r18, r4, r18
9001b900:	be520018 	bltid	r18, 24		// 9001b918
9001b904:	10e30000 	addk	r7, r3, r0
9001b908:	3484001f 	rsubik	r4, r4, 31
9001b90c:	30600001 	addik	r3, r0, 1
9001b910:	44632400 	bsll	r3, r3, r4
9001b914:	10e30000 	addk	r7, r3, r0
9001b918:	10c00000 	addk	r6, r0, r0
9001b91c:	10660000 	addk	r3, r6, r0
9001b920:	b60f0008 	rtsd	r15, 8
9001b924:	10870000 	addk	r4, r7, r0
9001b928:	b0000008 	imm	8
9001b92c:	30600000 	addik	r3, r0, 0
9001b930:	10e00000 	addk	r7, r0, r0
9001b934:	10870000 	addk	r4, r7, r0
9001b938:	44c32a00 	bsra	r6, r3, r5
9001b93c:	b60f0008 	rtsd	r15, 8
9001b940:	10660000 	addk	r3, r6, r0

9001b944 <_mprec_log10>:
9001b944:	3021ffe0 	addik	r1, r1, -32
9001b948:	fa61001c 	swi	r19, r1, 28
9001b94c:	12650000 	addk	r19, r5, r0
9001b950:	f9e10000 	swi	r15, r1, 0
9001b954:	b0003ff0 	imm	16368
9001b958:	30800000 	addik	r4, r0, 0
9001b95c:	30a00000 	addik	r5, r0, 0
9001b960:	32400017 	addik	r18, r0, 23
9001b964:	16539001 	cmp	r18, r19, r18
9001b968:	be520038 	bltid	r18, 56		// 9001b9a0
9001b96c:	10c50000 	addk	r6, r5, r0
9001b970:	64730403 	bslli	r3, r19, 3
9001b974:	b0009002 	imm	-28670
9001b978:	e8833550 	lwi	r4, r3, 13648
9001b97c:	b0009002 	imm	-28670
9001b980:	e8a33554 	lwi	r5, r3, 13652
9001b984:	10640000 	addk	r3, r4, r0
9001b988:	e9e10000 	lwi	r15, r1, 0
9001b98c:	10850000 	addk	r4, r5, r0
9001b990:	ea61001c 	lwi	r19, r1, 28
9001b994:	b60f0008 	rtsd	r15, 8
9001b998:	30210020 	addik	r1, r1, 32
9001b99c:	10c50000 	addk	r6, r5, r0
9001b9a0:	b0004024 	imm	16420
9001b9a4:	30e00000 	addik	r7, r0, 0
9001b9a8:	31000000 	addik	r8, r0, 0
9001b9ac:	10a40000 	addk	r5, r4, r0
9001b9b0:	b9f4373c 	brlid	r15, 14140	// 9001f0ec <__muldf3>
9001b9b4:	3273ffff 	addik	r19, r19, -1
9001b9b8:	10a40000 	addk	r5, r4, r0
9001b9bc:	be33ffe0 	bneid	r19, -32		// 9001b99c
9001b9c0:	10830000 	addk	r4, r3, r0
9001b9c4:	b810ffc4 	brid	-60		// 9001b988
9001b9c8:	10640000 	addk	r3, r4, r0

9001b9cc <_Bfree>:
9001b9cc:	3021ffd8 	addik	r1, r1, -40
9001b9d0:	fae10024 	swi	r23, r1, 36
9001b9d4:	12e50000 	addk	r23, r5, r0
9001b9d8:	fac10020 	swi	r22, r1, 32
9001b9dc:	f9e10000 	swi	r15, r1, 0
9001b9e0:	fa61001c 	swi	r19, r1, 28
9001b9e4:	ea770024 	lwi	r19, r23, 36
9001b9e8:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001b9ec:	be130040 	beqid	r19, 64		// 9001ba2c
9001b9f0:	12c60000 	addk	r22, r6, r0
9001b9f4:	bc160020 	beqi	r22, 32		// 9001ba14
9001b9f8:	e8970024 	lwi	r4, r23, 36
9001b9fc:	e8760004 	lwi	r3, r22, 4
9001ba00:	e8a4000c 	lwi	r5, r4, 12
9001ba04:	64630402 	bslli	r3, r3, 2
9001ba08:	c8851800 	lw	r4, r5, r3
9001ba0c:	f8960000 	swi	r4, r22, 0
9001ba10:	dac51800 	sw	r22, r5, r3
9001ba14:	e9e10000 	lwi	r15, r1, 0
9001ba18:	ea61001c 	lwi	r19, r1, 28
9001ba1c:	eac10020 	lwi	r22, r1, 32
9001ba20:	eae10024 	lwi	r23, r1, 36
9001ba24:	b60f0008 	rtsd	r15, 8
9001ba28:	30210028 	addik	r1, r1, 40
9001ba2c:	b9f4f1f0 	brlid	r15, -3600	// 9001ac1c <malloc>
9001ba30:	80000000 	or	r0, r0, r0
9001ba34:	fa63000c 	swi	r19, r3, 12
9001ba38:	fa630008 	swi	r19, r3, 8
9001ba3c:	fa630000 	swi	r19, r3, 0
9001ba40:	f8770024 	swi	r3, r23, 36
9001ba44:	fa630004 	swi	r19, r3, 4
9001ba48:	b800ffac 	bri	-84		// 9001b9f4

9001ba4c <_Balloc>:
9001ba4c:	3021ffd4 	addik	r1, r1, -44
9001ba50:	fae10024 	swi	r23, r1, 36
9001ba54:	12e50000 	addk	r23, r5, r0
9001ba58:	fb010028 	swi	r24, r1, 40
9001ba5c:	f9e10000 	swi	r15, r1, 0
9001ba60:	fa61001c 	swi	r19, r1, 28
9001ba64:	fac10020 	swi	r22, r1, 32
9001ba68:	ead70024 	lwi	r22, r23, 36
9001ba6c:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001ba70:	be160060 	beqid	r22, 96		// 9001bad0
9001ba74:	13060000 	addk	r24, r6, r0
9001ba78:	e876000c 	lwi	r3, r22, 12
9001ba7c:	be030078 	beqid	r3, 120		// 9001baf4
9001ba80:	10b70000 	addk	r5, r23, r0
9001ba84:	e916000c 	lwi	r8, r22, 12
9001ba88:	64980402 	bslli	r4, r24, 2
9001ba8c:	ca682000 	lw	r19, r8, r4
9001ba90:	30e00001 	addik	r7, r0, 1
9001ba94:	10b70000 	addk	r5, r23, r0
9001ba98:	be130084 	beqid	r19, 132		// 9001bb1c
9001ba9c:	10c70000 	addk	r6, r7, r0
9001baa0:	e8730000 	lwi	r3, r19, 0
9001baa4:	d8682000 	sw	r3, r8, r4
9001baa8:	f8130010 	swi	r0, r19, 16
9001baac:	f813000c 	swi	r0, r19, 12
9001bab0:	10730000 	addk	r3, r19, r0
9001bab4:	e9e10000 	lwi	r15, r1, 0
9001bab8:	ea61001c 	lwi	r19, r1, 28
9001babc:	eac10020 	lwi	r22, r1, 32
9001bac0:	eae10024 	lwi	r23, r1, 36
9001bac4:	eb010028 	lwi	r24, r1, 40
9001bac8:	b60f0008 	rtsd	r15, 8
9001bacc:	3021002c 	addik	r1, r1, 44
9001bad0:	b9f4f14c 	brlid	r15, -3764	// 9001ac1c <malloc>
9001bad4:	80000000 	or	r0, r0, r0
9001bad8:	12c30000 	addk	r22, r3, r0
9001badc:	f8770024 	swi	r3, r23, 36
9001bae0:	f8030004 	swi	r0, r3, 4
9001bae4:	f8030008 	swi	r0, r3, 8
9001bae8:	f8030000 	swi	r0, r3, 0
9001baec:	f803000c 	swi	r0, r3, 12
9001baf0:	10b70000 	addk	r5, r23, r0
9001baf4:	30c00004 	addik	r6, r0, 4
9001baf8:	b9f4216c 	brlid	r15, 8556	// 9001dc64 <_calloc_r>
9001bafc:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001bb00:	f876000c 	swi	r3, r22, 12
9001bb04:	ead70024 	lwi	r22, r23, 36
9001bb08:	e876000c 	lwi	r3, r22, 12
9001bb0c:	be23ff78 	bneid	r3, -136		// 9001ba84
9001bb10:	12630000 	addk	r19, r3, r0
9001bb14:	b810ffa0 	brid	-96		// 9001bab4
9001bb18:	10730000 	addk	r3, r19, r0
9001bb1c:	46c7c400 	bsll	r22, r7, r24
9001bb20:	64f60402 	bslli	r7, r22, 2
9001bb24:	b9f42140 	brlid	r15, 8512	// 9001dc64 <_calloc_r>
9001bb28:	30e70014 	addik	r7, r7, 20
9001bb2c:	bc03ff84 	beqi	r3, -124		// 9001bab0
9001bb30:	fb030004 	swi	r24, r3, 4
9001bb34:	fac30008 	swi	r22, r3, 8
9001bb38:	b810ff70 	brid	-144		// 9001baa8
9001bb3c:	12630000 	addk	r19, r3, r0

9001bb40 <_b2d>:
9001bb40:	e8650010 	lwi	r3, r5, 16
9001bb44:	31650014 	addik	r11, r5, 20
9001bb48:	11860000 	addk	r12, r6, r0
9001bb4c:	64630402 	bslli	r3, r3, 2
9001bb50:	106b1800 	addk	r3, r11, r3
9001bb54:	e923fffc 	lwi	r9, r3, -4
9001bb58:	b000ffff 	imm	-1
9001bb5c:	a4890000 	andi	r4, r9, 0
9001bb60:	be0400e0 	beqid	r4, 224		// 9001bc40
9001bb64:	3143fffc 	addik	r10, r3, -4
9001bb68:	10890000 	addk	r4, r9, r0
9001bb6c:	11000000 	addk	r8, r0, r0
9001bb70:	b000ff00 	imm	-256
9001bb74:	a4640000 	andi	r3, r4, 0
9001bb78:	bc23000c 	bnei	r3, 12		// 9001bb84
9001bb7c:	64840408 	bslli	r4, r4, 8
9001bb80:	31080008 	addik	r8, r8, 8
9001bb84:	b000f000 	imm	-4096
9001bb88:	a4640000 	andi	r3, r4, 0
9001bb8c:	bc23000c 	bnei	r3, 12		// 9001bb98
9001bb90:	64840404 	bslli	r4, r4, 4
9001bb94:	31080004 	addik	r8, r8, 4
9001bb98:	b000c000 	imm	-16384
9001bb9c:	a4640000 	andi	r3, r4, 0
9001bba0:	bc23000c 	bnei	r3, 12		// 9001bbac
9001bba4:	64840402 	bslli	r4, r4, 2
9001bba8:	31080002 	addik	r8, r8, 2
9001bbac:	be44004c 	bltid	r4, 76		// 9001bbf8
9001bbb0:	34680020 	rsubik	r3, r8, 32
9001bbb4:	b0004000 	imm	16384
9001bbb8:	a4640000 	andi	r3, r4, 0
9001bbbc:	be230038 	bneid	r3, 56		// 9001bbf4
9001bbc0:	31080001 	addik	r8, r8, 1
9001bbc4:	30a00015 	addik	r5, r0, 21
9001bbc8:	f86c0000 	swi	r3, r12, 0
9001bbcc:	164a5803 	cmpu	r18, r10, r11
9001bbd0:	be5200b4 	bltid	r18, 180		// 9001bc84
9001bbd4:	11000000 	addk	r8, r0, r0
9001bbd8:	be250074 	bneid	r5, 116		// 9001bc4c
9001bbdc:	10e80000 	addk	r7, r8, r0
9001bbe0:	b0003ff0 	imm	16368
9001bbe4:	a0c90000 	ori	r6, r9, 0
9001bbe8:	10660000 	addk	r3, r6, r0
9001bbec:	b60f0008 	rtsd	r15, 8
9001bbf0:	10870000 	addk	r4, r7, r0
9001bbf4:	34680020 	rsubik	r3, r8, 32
9001bbf8:	f86c0000 	swi	r3, r12, 0
9001bbfc:	3240000a 	addik	r18, r0, 10
9001bc00:	16489001 	cmp	r18, r8, r18
9001bc04:	be52ffc8 	bltid	r18, -56		// 9001bbcc
9001bc08:	30a8fff5 	addik	r5, r8, -11
9001bc0c:	3488000b 	rsubik	r4, r8, 11
9001bc10:	164a5803 	cmpu	r18, r10, r11
9001bc14:	be520094 	bltid	r18, 148		// 9001bca8
9001bc18:	10a00000 	addk	r5, r0, r0
9001bc1c:	30680015 	addik	r3, r8, 21
9001bc20:	44892000 	bsrl	r4, r9, r4
9001bc24:	44691c00 	bsll	r3, r9, r3
9001bc28:	b0003ff0 	imm	16368
9001bc2c:	a0c40000 	ori	r6, r4, 0
9001bc30:	80e51800 	or	r7, r5, r3
9001bc34:	10870000 	addk	r4, r7, r0
9001bc38:	b60f0008 	rtsd	r15, 8
9001bc3c:	10660000 	addk	r3, r6, r0
9001bc40:	64890410 	bslli	r4, r9, 16
9001bc44:	b810ff2c 	brid	-212		// 9001bb70
9001bc48:	31000010 	addik	r8, r0, 16	// 10 <_vector_interrupt>
9001bc4c:	34850020 	rsubik	r4, r5, 32
9001bc50:	164a5803 	cmpu	r18, r10, r11
9001bc54:	be520048 	bltid	r18, 72		// 9001bc9c
9001bc58:	11800000 	addk	r12, r0, r0
9001bc5c:	44692c00 	bsll	r3, r9, r5
9001bc60:	44882000 	bsrl	r4, r8, r4
9001bc64:	44a82c00 	bsll	r5, r8, r5
9001bc68:	b0003ff0 	imm	16368
9001bc6c:	a0630000 	ori	r3, r3, 0
9001bc70:	80c41800 	or	r6, r4, r3
9001bc74:	80e56000 	or	r7, r5, r12
9001bc78:	10660000 	addk	r3, r6, r0
9001bc7c:	b60f0008 	rtsd	r15, 8
9001bc80:	10870000 	addk	r4, r7, r0
9001bc84:	314afffc 	addik	r10, r10, -4
9001bc88:	e90a0000 	lwi	r8, r10, 0
9001bc8c:	be05ff54 	beqid	r5, -172		// 9001bbe0
9001bc90:	10e80000 	addk	r7, r8, r0
9001bc94:	b810ffbc 	brid	-68		// 9001bc50
9001bc98:	34850020 	rsubik	r4, r5, 32
9001bc9c:	e86afffc 	lwi	r3, r10, -4
9001bca0:	b810ffbc 	brid	-68		// 9001bc5c
9001bca4:	45832000 	bsrl	r12, r3, r4
9001bca8:	e86afffc 	lwi	r3, r10, -4
9001bcac:	b810ff70 	brid	-144		// 9001bc1c
9001bcb0:	44a32000 	bsrl	r5, r3, r4

9001bcb4 <_ratio>:
9001bcb4:	3021ffcc 	addik	r1, r1, -52
9001bcb8:	fa61001c 	swi	r19, r1, 28
9001bcbc:	f9e10000 	swi	r15, r1, 0
9001bcc0:	fac10020 	swi	r22, r1, 32
9001bcc4:	fae10024 	swi	r23, r1, 36
9001bcc8:	fb010028 	swi	r24, r1, 40
9001bccc:	fb21002c 	swi	r25, r1, 44
9001bcd0:	fb410030 	swi	r26, r1, 48
9001bcd4:	eb250010 	lwi	r25, r5, 16
9001bcd8:	31850014 	addik	r12, r5, 20
9001bcdc:	12660000 	addk	r19, r6, r0
9001bce0:	64790402 	bslli	r3, r25, 2
9001bce4:	106c1800 	addk	r3, r12, r3
9001bce8:	e923fffc 	lwi	r9, r3, -4
9001bcec:	b000ffff 	imm	-1
9001bcf0:	a4890000 	andi	r4, r9, 0
9001bcf4:	be0401f0 	beqid	r4, 496		// 9001bee4
9001bcf8:	3103fffc 	addik	r8, r3, -4
9001bcfc:	10890000 	addk	r4, r9, r0
9001bd00:	10e00000 	addk	r7, r0, r0
9001bd04:	b000ff00 	imm	-256
9001bd08:	a4640000 	andi	r3, r4, 0
9001bd0c:	bc23000c 	bnei	r3, 12		// 9001bd18
9001bd10:	64840408 	bslli	r4, r4, 8
9001bd14:	30e70008 	addik	r7, r7, 8
9001bd18:	b000f000 	imm	-4096
9001bd1c:	a4640000 	andi	r3, r4, 0
9001bd20:	bc23000c 	bnei	r3, 12		// 9001bd2c
9001bd24:	64840404 	bslli	r4, r4, 4
9001bd28:	30e70004 	addik	r7, r7, 4
9001bd2c:	b000c000 	imm	-16384
9001bd30:	a4640000 	andi	r3, r4, 0
9001bd34:	bc23000c 	bnei	r3, 12		// 9001bd40
9001bd38:	64840402 	bslli	r4, r4, 2
9001bd3c:	30e70002 	addik	r7, r7, 2
9001bd40:	be440168 	bltid	r4, 360		// 9001bea8
9001bd44:	37470020 	rsubik	r26, r7, 32
9001bd48:	b0004000 	imm	16384
9001bd4c:	a4640000 	andi	r3, r4, 0
9001bd50:	be230154 	bneid	r3, 340		// 9001bea4
9001bd54:	30e70001 	addik	r7, r7, 1
9001bd58:	13430000 	addk	r26, r3, r0
9001bd5c:	30a00015 	addik	r5, r0, 21
9001bd60:	16486003 	cmpu	r18, r8, r12
9001bd64:	be5201b8 	bltid	r18, 440		// 9001bf1c
9001bd68:	10e00000 	addk	r7, r0, r0
9001bd6c:	be250184 	bneid	r5, 388		// 9001bef0
9001bd70:	34850020 	rsubik	r4, r5, 32
9001bd74:	11670000 	addk	r11, r7, r0
9001bd78:	b0003ff0 	imm	16368
9001bd7c:	a1490000 	ori	r10, r9, 0
9001bd80:	eb130010 	lwi	r24, r19, 16
9001bd84:	30d30014 	addik	r6, r19, 20
9001bd88:	64780402 	bslli	r3, r24, 2
9001bd8c:	10661800 	addk	r3, r6, r3
9001bd90:	e923fffc 	lwi	r9, r3, -4
9001bd94:	b000ffff 	imm	-1
9001bd98:	a4890000 	andi	r4, r9, 0
9001bd9c:	be0401e4 	beqid	r4, 484		// 9001bf80
9001bda0:	3103fffc 	addik	r8, r3, -4
9001bda4:	10890000 	addk	r4, r9, r0
9001bda8:	10e00000 	addk	r7, r0, r0
9001bdac:	b000ff00 	imm	-256
9001bdb0:	a4640000 	andi	r3, r4, 0
9001bdb4:	bc23000c 	bnei	r3, 12		// 9001bdc0
9001bdb8:	64840408 	bslli	r4, r4, 8
9001bdbc:	30e70008 	addik	r7, r7, 8
9001bdc0:	b000f000 	imm	-4096
9001bdc4:	a4640000 	andi	r3, r4, 0
9001bdc8:	bc23000c 	bnei	r3, 12		// 9001bdd4
9001bdcc:	64840404 	bslli	r4, r4, 4
9001bdd0:	30e70004 	addik	r7, r7, 4
9001bdd4:	b000c000 	imm	-16384
9001bdd8:	a4640000 	andi	r3, r4, 0
9001bddc:	bc23000c 	bnei	r3, 12		// 9001bde8
9001bde0:	64840402 	bslli	r4, r4, 2
9001bde4:	30e70002 	addik	r7, r7, 2
9001bde8:	be440020 	bltid	r4, 32		// 9001be08
9001bdec:	35870020 	rsubik	r12, r7, 32
9001bdf0:	b0004000 	imm	16384
9001bdf4:	a4640000 	andi	r3, r4, 0
9001bdf8:	be03013c 	beqid	r3, 316		// 9001bf34
9001bdfc:	11830000 	addk	r12, r3, r0
9001be00:	30e70001 	addik	r7, r7, 1
9001be04:	35870020 	rsubik	r12, r7, 32
9001be08:	3240000a 	addik	r18, r0, 10
9001be0c:	16479001 	cmp	r18, r7, r18
9001be10:	be520128 	bltid	r18, 296		// 9001bf38
9001be14:	30a7fff5 	addik	r5, r7, -11
9001be18:	3487000b 	rsubik	r4, r7, 11
9001be1c:	16483003 	cmpu	r18, r8, r6
9001be20:	be5201ac 	bltid	r18, 428		// 9001bfcc
9001be24:	10a00000 	addk	r5, r0, r0
9001be28:	30670015 	addik	r3, r7, 21
9001be2c:	44892000 	bsrl	r4, r9, r4
9001be30:	44691c00 	bsll	r3, r9, r3
9001be34:	b0003ff0 	imm	16368
9001be38:	a2c40000 	ori	r22, r4, 0
9001be3c:	82e51800 	or	r23, r5, r3
9001be40:	1478c800 	rsubk	r3, r24, r25
9001be44:	64630405 	bslli	r3, r3, 5
9001be48:	148cd000 	rsubk	r4, r12, r26
9001be4c:	10641800 	addk	r3, r4, r3
9001be50:	11160000 	addk	r8, r22, r0
9001be54:	be630148 	bleid	r3, 328		// 9001bf9c
9001be58:	11370000 	addk	r9, r23, r0
9001be5c:	64630414 	bslli	r3, r3, 20
9001be60:	11435000 	addk	r10, r3, r10
9001be64:	10cb0000 	addk	r6, r11, r0
9001be68:	10e80000 	addk	r7, r8, r0
9001be6c:	10aa0000 	addk	r5, r10, r0
9001be70:	b9f436a4 	brlid	r15, 13988	// 9001f514 <__divdf3>
9001be74:	11090000 	addk	r8, r9, r0
9001be78:	10c30000 	addk	r6, r3, r0
9001be7c:	e9e10000 	lwi	r15, r1, 0
9001be80:	ea61001c 	lwi	r19, r1, 28
9001be84:	10660000 	addk	r3, r6, r0
9001be88:	eac10020 	lwi	r22, r1, 32
9001be8c:	eae10024 	lwi	r23, r1, 36
9001be90:	eb010028 	lwi	r24, r1, 40
9001be94:	eb21002c 	lwi	r25, r1, 44
9001be98:	eb410030 	lwi	r26, r1, 48
9001be9c:	b60f0008 	rtsd	r15, 8
9001bea0:	30210034 	addik	r1, r1, 52
9001bea4:	37470020 	rsubik	r26, r7, 32
9001bea8:	3240000a 	addik	r18, r0, 10
9001beac:	16479001 	cmp	r18, r7, r18
9001beb0:	be52feb0 	bltid	r18, -336		// 9001bd60
9001beb4:	30a7fff5 	addik	r5, r7, -11
9001beb8:	3487000b 	rsubik	r4, r7, 11
9001bebc:	16486003 	cmpu	r18, r8, r12
9001bec0:	be520100 	bltid	r18, 256		// 9001bfc0
9001bec4:	10a00000 	addk	r5, r0, r0
9001bec8:	30670015 	addik	r3, r7, 21
9001becc:	44892000 	bsrl	r4, r9, r4
9001bed0:	44691c00 	bsll	r3, r9, r3
9001bed4:	b0003ff0 	imm	16368
9001bed8:	a1440000 	ori	r10, r4, 0
9001bedc:	b810fea4 	brid	-348		// 9001bd80
9001bee0:	81651800 	or	r11, r5, r3
9001bee4:	64890410 	bslli	r4, r9, 16
9001bee8:	b810fe1c 	brid	-484		// 9001bd04
9001beec:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001bef0:	16486003 	cmpu	r18, r8, r12
9001bef4:	be5200c0 	bltid	r18, 192		// 9001bfb4
9001bef8:	10c00000 	addk	r6, r0, r0
9001befc:	44692c00 	bsll	r3, r9, r5
9001bf00:	44872000 	bsrl	r4, r7, r4
9001bf04:	44a72c00 	bsll	r5, r7, r5
9001bf08:	b0003ff0 	imm	16368
9001bf0c:	a0630000 	ori	r3, r3, 0
9001bf10:	81441800 	or	r10, r4, r3
9001bf14:	b810fe6c 	brid	-404		// 9001bd80
9001bf18:	81662800 	or	r11, r6, r5
9001bf1c:	3108fffc 	addik	r8, r8, -4
9001bf20:	e8e80000 	lwi	r7, r8, 0
9001bf24:	be05fe54 	beqid	r5, -428		// 9001bd78
9001bf28:	11670000 	addk	r11, r7, r0
9001bf2c:	b810ffc4 	brid	-60		// 9001bef0
9001bf30:	34850020 	rsubik	r4, r5, 32
9001bf34:	30a00015 	addik	r5, r0, 21
9001bf38:	16483003 	cmpu	r18, r8, r6
9001bf3c:	beb20010 	bgeid	r18, 16		// 9001bf4c
9001bf40:	10e00000 	addk	r7, r0, r0
9001bf44:	3108fffc 	addik	r8, r8, -4
9001bf48:	e8e80000 	lwi	r7, r8, 0
9001bf4c:	be050040 	beqid	r5, 64		// 9001bf8c
9001bf50:	34850020 	rsubik	r4, r5, 32
9001bf54:	16483003 	cmpu	r18, r8, r6
9001bf58:	be520050 	bltid	r18, 80		// 9001bfa8
9001bf5c:	12600000 	addk	r19, r0, r0
9001bf60:	44692c00 	bsll	r3, r9, r5
9001bf64:	44872000 	bsrl	r4, r7, r4
9001bf68:	44a72c00 	bsll	r5, r7, r5
9001bf6c:	b0003ff0 	imm	16368
9001bf70:	a0630000 	ori	r3, r3, 0
9001bf74:	82c41800 	or	r22, r4, r3
9001bf78:	b810fec8 	brid	-312		// 9001be40
9001bf7c:	82f32800 	or	r23, r19, r5
9001bf80:	64890410 	bslli	r4, r9, 16
9001bf84:	b810fe28 	brid	-472		// 9001bdac
9001bf88:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001bf8c:	b0003ff0 	imm	16368
9001bf90:	a2c90000 	ori	r22, r9, 0
9001bf94:	b810feac 	brid	-340		// 9001be40
9001bf98:	12e70000 	addk	r23, r7, r0
9001bf9c:	64630414 	bslli	r3, r3, 20
9001bfa0:	b810fec4 	brid	-316		// 9001be64
9001bfa4:	1503b000 	rsubk	r8, r3, r22
9001bfa8:	e868fffc 	lwi	r3, r8, -4
9001bfac:	b810ffb4 	brid	-76		// 9001bf60
9001bfb0:	46632000 	bsrl	r19, r3, r4
9001bfb4:	e868fffc 	lwi	r3, r8, -4
9001bfb8:	b810ff44 	brid	-188		// 9001befc
9001bfbc:	44c32000 	bsrl	r6, r3, r4
9001bfc0:	e868fffc 	lwi	r3, r8, -4
9001bfc4:	b810ff04 	brid	-252		// 9001bec8
9001bfc8:	44a32000 	bsrl	r5, r3, r4
9001bfcc:	e868fffc 	lwi	r3, r8, -4
9001bfd0:	b810fe58 	brid	-424		// 9001be28
9001bfd4:	44a32000 	bsrl	r5, r3, r4

9001bfd8 <_d2b>:
9001bfd8:	3021ffc8 	addik	r1, r1, -56
9001bfdc:	fac10020 	swi	r22, r1, 32
9001bfe0:	fae10024 	swi	r23, r1, 36
9001bfe4:	fb21002c 	swi	r25, r1, 44
9001bfe8:	fb410030 	swi	r26, r1, 48
9001bfec:	fb610034 	swi	r27, r1, 52
9001bff0:	f9e10000 	swi	r15, r1, 0
9001bff4:	fa61001c 	swi	r19, r1, 28
9001bff8:	fb010028 	swi	r24, r1, 40
9001bffc:	ea650024 	lwi	r19, r5, 36
9001c000:	13250000 	addk	r25, r5, r0
9001c004:	13480000 	addk	r26, r8, r0
9001c008:	13690000 	addk	r27, r9, r0
9001c00c:	12c60000 	addk	r22, r6, r0
9001c010:	be130310 	beqid	r19, 784		// 9001c320
9001c014:	12e70000 	addk	r23, r7, r0
9001c018:	e873000c 	lwi	r3, r19, 12
9001c01c:	be030328 	beqid	r3, 808		// 9001c344
9001c020:	10b90000 	addk	r5, r25, r0
9001c024:	e893000c 	lwi	r4, r19, 12
9001c028:	eb040004 	lwi	r24, r4, 4
9001c02c:	be180364 	beqid	r24, 868		// 9001c390
9001c030:	10b90000 	addk	r5, r25, r0
9001c034:	e8780000 	lwi	r3, r24, 0
9001c038:	f8640004 	swi	r3, r4, 4
9001c03c:	f8180010 	swi	r0, r24, 16
9001c040:	f818000c 	swi	r0, r24, 12
9001c044:	b0007fff 	imm	32767
9001c048:	a496ffff 	andi	r4, r22, -1
9001c04c:	65040014 	bsrli	r8, r4, 20
9001c050:	b000000f 	imm	15
9001c054:	a4f6ffff 	andi	r7, r22, -1
9001c058:	be080010 	beqid	r8, 16		// 9001c068
9001c05c:	31380014 	addik	r9, r24, 20
9001c060:	b0000010 	imm	16
9001c064:	a0e70000 	ori	r7, r7, 0
9001c068:	be170108 	beqid	r23, 264		// 9001c170
9001c06c:	10b70000 	addk	r5, r23, r0
9001c070:	a4970007 	andi	r4, r23, 7
9001c074:	be2401ec 	bneid	r4, 492		// 9001c260
9001c078:	a4770001 	andi	r3, r23, 1
9001c07c:	b0000000 	imm	0
9001c080:	a477ffff 	andi	r3, r23, -1
9001c084:	be03024c 	beqid	r3, 588		// 9001c2d0
9001c088:	10d70000 	addk	r6, r23, r0
9001c08c:	a46600ff 	andi	r3, r6, 255
9001c090:	bc030228 	beqi	r3, 552		// 9001c2b8
9001c094:	a466000f 	andi	r3, r6, 15
9001c098:	bc030250 	beqi	r3, 592		// 9001c2e8
9001c09c:	a4660003 	andi	r3, r6, 3
9001c0a0:	bc030200 	beqi	r3, 512		// 9001c2a0
9001c0a4:	a4660001 	andi	r3, r6, 1
9001c0a8:	bc0301e8 	beqi	r3, 488		// 9001c290
9001c0ac:	bc0401c0 	beqi	r4, 448		// 9001c26c
9001c0b0:	34640020 	rsubik	r3, r4, 32
9001c0b4:	44671c00 	bsll	r3, r7, r3
9001c0b8:	44e72000 	bsrl	r7, r7, r4
9001c0bc:	80633000 	or	r3, r3, r6
9001c0c0:	f8690000 	swi	r3, r9, 0
9001c0c4:	88670400 	pcmpeq	r3, r7, r0
9001c0c8:	34c30002 	rsubik	r6, r3, 2
9001c0cc:	f8e90004 	swi	r7, r9, 4
9001c0d0:	f8d80010 	swi	r6, r24, 16
9001c0d4:	be280134 	bneid	r8, 308		// 9001c208
9001c0d8:	10644000 	addk	r3, r4, r8
9001c0dc:	64660402 	bslli	r3, r6, 2
9001c0e0:	10634800 	addk	r3, r3, r9
9001c0e4:	e8a3fffc 	lwi	r5, r3, -4
9001c0e8:	3084fbce 	addik	r4, r4, -1074
9001c0ec:	f89a0000 	swi	r4, r26, 0
9001c0f0:	b000ffff 	imm	-1
9001c0f4:	a4650000 	andi	r3, r5, 0
9001c0f8:	be230010 	bneid	r3, 16		// 9001c108
9001c0fc:	10880000 	addk	r4, r8, r0
9001c100:	64a50410 	bslli	r5, r5, 16
9001c104:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
9001c108:	b000ff00 	imm	-256
9001c10c:	a4650000 	andi	r3, r5, 0
9001c110:	bc23000c 	bnei	r3, 12		// 9001c11c
9001c114:	64a50408 	bslli	r5, r5, 8
9001c118:	30840008 	addik	r4, r4, 8
9001c11c:	b000f000 	imm	-4096
9001c120:	a4650000 	andi	r3, r5, 0
9001c124:	bc23000c 	bnei	r3, 12		// 9001c130
9001c128:	64a50404 	bslli	r5, r5, 4
9001c12c:	30840004 	addik	r4, r4, 4
9001c130:	b000c000 	imm	-16384
9001c134:	a4650000 	andi	r3, r5, 0
9001c138:	bc23000c 	bnei	r3, 12		// 9001c144
9001c13c:	64a50402 	bslli	r5, r5, 2
9001c140:	30840002 	addik	r4, r4, 2
9001c144:	be45001c 	bltid	r5, 28		// 9001c160
9001c148:	64660405 	bslli	r3, r6, 5
9001c14c:	b0004000 	imm	16384
9001c150:	a4650000 	andi	r3, r5, 0
9001c154:	be030124 	beqid	r3, 292		// 9001c278
9001c158:	30840001 	addik	r4, r4, 1
9001c15c:	64660405 	bslli	r3, r6, 5
9001c160:	14641800 	rsubk	r3, r4, r3
9001c164:	f87b0000 	swi	r3, r27, 0
9001c168:	b81000b4 	brid	180		// 9001c21c
9001c16c:	10780000 	addk	r3, r24, r0
9001c170:	a4670007 	andi	r3, r7, 7
9001c174:	be2300d0 	bneid	r3, 208		// 9001c244
9001c178:	a4670001 	andi	r3, r7, 1
9001c17c:	b0000000 	imm	0
9001c180:	a467ffff 	andi	r3, r7, -1
9001c184:	be030194 	beqid	r3, 404		// 9001c318
9001c188:	64a70010 	bsrli	r5, r7, 16
9001c18c:	10d70000 	addk	r6, r23, r0
9001c190:	10a70000 	addk	r5, r7, r0
9001c194:	a46500ff 	andi	r3, r5, 255
9001c198:	be230014 	bneid	r3, 20		// 9001c1ac
9001c19c:	a465000f 	andi	r3, r5, 15
9001c1a0:	64a50008 	bsrli	r5, r5, 8
9001c1a4:	30c60008 	addik	r6, r6, 8
9001c1a8:	a465000f 	andi	r3, r5, 15
9001c1ac:	be230014 	bneid	r3, 20		// 9001c1c0
9001c1b0:	a4650003 	andi	r3, r5, 3
9001c1b4:	64a50004 	bsrli	r5, r5, 4
9001c1b8:	30c60004 	addik	r6, r6, 4
9001c1bc:	a4650003 	andi	r3, r5, 3
9001c1c0:	be230014 	bneid	r3, 20		// 9001c1d4
9001c1c4:	a4650001 	andi	r3, r5, 1
9001c1c8:	64a50002 	bsrli	r5, r5, 2
9001c1cc:	30c60002 	addik	r6, r6, 2
9001c1d0:	a4650001 	andi	r3, r5, 1
9001c1d4:	bc230014 	bnei	r3, 20		// 9001c1e8
9001c1d8:	90a50041 	srl	r5, r5
9001c1dc:	be050014 	beqid	r5, 20		// 9001c1f0
9001c1e0:	30800040 	addik	r4, r0, 64
9001c1e4:	30c60001 	addik	r6, r6, 1
9001c1e8:	10e50000 	addk	r7, r5, r0
9001c1ec:	30860020 	addik	r4, r6, 32
9001c1f0:	30600001 	addik	r3, r0, 1
9001c1f4:	f8e90000 	swi	r7, r9, 0
9001c1f8:	f8780010 	swi	r3, r24, 16
9001c1fc:	be08fee0 	beqid	r8, -288		// 9001c0dc
9001c200:	10c30000 	addk	r6, r3, r0
9001c204:	10644000 	addk	r3, r4, r8
9001c208:	3063fbcd 	addik	r3, r3, -1075
9001c20c:	f87a0000 	swi	r3, r26, 0
9001c210:	34840035 	rsubik	r4, r4, 53
9001c214:	f89b0000 	swi	r4, r27, 0
9001c218:	10780000 	addk	r3, r24, r0
9001c21c:	e9e10000 	lwi	r15, r1, 0
9001c220:	ea61001c 	lwi	r19, r1, 28
9001c224:	eac10020 	lwi	r22, r1, 32
9001c228:	eae10024 	lwi	r23, r1, 36
9001c22c:	eb010028 	lwi	r24, r1, 40
9001c230:	eb21002c 	lwi	r25, r1, 44
9001c234:	eb410030 	lwi	r26, r1, 48
9001c238:	eb610034 	lwi	r27, r1, 52
9001c23c:	b60f0008 	rtsd	r15, 8
9001c240:	30210038 	addik	r1, r1, 56
9001c244:	be23ffac 	bneid	r3, -84		// 9001c1f0
9001c248:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
9001c24c:	a4670002 	andi	r3, r7, 2
9001c250:	bc030134 	beqi	r3, 308		// 9001c384
9001c254:	90e70041 	srl	r7, r7
9001c258:	b810ff98 	brid	-104		// 9001c1f0
9001c25c:	30800021 	addik	r4, r0, 33
9001c260:	be0300a0 	beqid	r3, 160		// 9001c300
9001c264:	10d70000 	addk	r6, r23, r0
9001c268:	10800000 	addk	r4, r0, r0
9001c26c:	f8c90000 	swi	r6, r9, 0
9001c270:	b810fe58 	brid	-424		// 9001c0c8
9001c274:	88670400 	pcmpeq	r3, r7, r0
9001c278:	64660405 	bslli	r3, r6, 5
9001c27c:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
9001c280:	14641800 	rsubk	r3, r4, r3
9001c284:	f87b0000 	swi	r3, r27, 0
9001c288:	b810ff94 	brid	-108		// 9001c21c
9001c28c:	10780000 	addk	r3, r24, r0
9001c290:	90c60041 	srl	r6, r6
9001c294:	bc0600e4 	beqi	r6, 228		// 9001c378
9001c298:	b810fe14 	brid	-492		// 9001c0ac
9001c29c:	30840001 	addik	r4, r4, 1
9001c2a0:	64c60002 	bsrli	r6, r6, 2
9001c2a4:	a4660001 	andi	r3, r6, 1
9001c2a8:	be23fe04 	bneid	r3, -508		// 9001c0ac
9001c2ac:	30840002 	addik	r4, r4, 2
9001c2b0:	b810ffe4 	brid	-28		// 9001c294
9001c2b4:	90c60041 	srl	r6, r6
9001c2b8:	64c60008 	bsrli	r6, r6, 8
9001c2bc:	a466000f 	andi	r3, r6, 15
9001c2c0:	be23fddc 	bneid	r3, -548		// 9001c09c
9001c2c4:	30840008 	addik	r4, r4, 8
9001c2c8:	b8100024 	brid	36		// 9001c2ec
9001c2cc:	64c60004 	bsrli	r6, r6, 4
9001c2d0:	64d70010 	bsrli	r6, r23, 16
9001c2d4:	a46600ff 	andi	r3, r6, 255
9001c2d8:	be23fdbc 	bneid	r3, -580		// 9001c094
9001c2dc:	30800010 	addik	r4, r0, 16	// 10 <_vector_interrupt>
9001c2e0:	b810ffdc 	brid	-36		// 9001c2bc
9001c2e4:	64c60008 	bsrli	r6, r6, 8
9001c2e8:	64c60004 	bsrli	r6, r6, 4
9001c2ec:	a4660003 	andi	r3, r6, 3
9001c2f0:	be23fdb4 	bneid	r3, -588		// 9001c0a4
9001c2f4:	30840004 	addik	r4, r4, 4
9001c2f8:	b810ffac 	brid	-84		// 9001c2a4
9001c2fc:	64c60002 	bsrli	r6, r6, 2
9001c300:	a4770002 	andi	r3, r23, 2
9001c304:	bc030064 	beqi	r3, 100		// 9001c368
9001c308:	90d70041 	srl	r6, r23
9001c30c:	30800001 	addik	r4, r0, 1
9001c310:	b810fda4 	brid	-604		// 9001c0b4
9001c314:	3060001f 	addik	r3, r0, 31
9001c318:	b810fe7c 	brid	-388		// 9001c194
9001c31c:	30c00010 	addik	r6, r0, 16	// 10 <_vector_interrupt>
9001c320:	b9f4e8fc 	brlid	r15, -5892	// 9001ac1c <malloc>
9001c324:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001c328:	12630000 	addk	r19, r3, r0
9001c32c:	f8790024 	swi	r3, r25, 36
9001c330:	f8030004 	swi	r0, r3, 4
9001c334:	f8030008 	swi	r0, r3, 8
9001c338:	f8030000 	swi	r0, r3, 0
9001c33c:	f803000c 	swi	r0, r3, 12
9001c340:	10b90000 	addk	r5, r25, r0
9001c344:	30c00004 	addik	r6, r0, 4
9001c348:	b9f4191c 	brlid	r15, 6428	// 9001dc64 <_calloc_r>
9001c34c:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001c350:	f873000c 	swi	r3, r19, 12
9001c354:	ea790024 	lwi	r19, r25, 36
9001c358:	e873000c 	lwi	r3, r19, 12
9001c35c:	be23fcc8 	bneid	r3, -824		// 9001c024
9001c360:	13030000 	addk	r24, r3, r0
9001c364:	b800fce0 	bri	-800		// 9001c044
9001c368:	64d70002 	bsrli	r6, r23, 2
9001c36c:	30800002 	addik	r4, r0, 2
9001c370:	b810fd44 	brid	-700		// 9001c0b4
9001c374:	3060001e 	addik	r3, r0, 30
9001c378:	10c50000 	addk	r6, r5, r0
9001c37c:	b810fd38 	brid	-712		// 9001c0b4
9001c380:	30800020 	addik	r4, r0, 32	// 20 <_vector_hw_exception>
9001c384:	64e70002 	bsrli	r7, r7, 2
9001c388:	b810fe68 	brid	-408		// 9001c1f0
9001c38c:	30800022 	addik	r4, r0, 34
9001c390:	30c00001 	addik	r6, r0, 1
9001c394:	b9f418d0 	brlid	r15, 6352	// 9001dc64 <_calloc_r>
9001c398:	30e0001c 	addik	r7, r0, 28
9001c39c:	be03fca8 	beqid	r3, -856		// 9001c044
9001c3a0:	30800002 	addik	r4, r0, 2
9001c3a4:	13030000 	addk	r24, r3, r0
9001c3a8:	30600001 	addik	r3, r0, 1
9001c3ac:	f8780004 	swi	r3, r24, 4
9001c3b0:	f8980008 	swi	r4, r24, 8
9001c3b4:	b800fc88 	bri	-888		// 9001c03c

9001c3b8 <__mdiff>:
9001c3b8:	3021ffc4 	addik	r1, r1, -60
9001c3bc:	fae10024 	swi	r23, r1, 36
9001c3c0:	fb21002c 	swi	r25, r1, 44
9001c3c4:	fb410030 	swi	r26, r1, 48
9001c3c8:	fb810038 	swi	r28, r1, 56
9001c3cc:	f9e10000 	swi	r15, r1, 0
9001c3d0:	fa61001c 	swi	r19, r1, 28
9001c3d4:	fac10020 	swi	r22, r1, 32
9001c3d8:	fb010028 	swi	r24, r1, 40
9001c3dc:	fb610034 	swi	r27, r1, 52
9001c3e0:	e8660010 	lwi	r3, r6, 16
9001c3e4:	e8870010 	lwi	r4, r7, 16
9001c3e8:	12e60000 	addk	r23, r6, r0
9001c3ec:	13270000 	addk	r25, r7, r0
9001c3f0:	17441800 	rsubk	r26, r4, r3
9001c3f4:	be3a007c 	bneid	r26, 124		// 9001c470
9001c3f8:	13850000 	addk	r28, r5, r0
9001c3fc:	64840402 	bslli	r4, r4, 2
9001c400:	33060014 	addik	r24, r6, 20
9001c404:	30640014 	addik	r3, r4, 20
9001c408:	10a71800 	addk	r5, r7, r3
9001c40c:	10982000 	addk	r4, r24, r4
9001c410:	3084fffc 	addik	r4, r4, -4
9001c414:	30a5fffc 	addik	r5, r5, -4
9001c418:	e8c40000 	lwi	r6, r4, 0
9001c41c:	e8650000 	lwi	r3, r5, 0
9001c420:	16433000 	rsubk	r18, r3, r6
9001c424:	bc3201a8 	bnei	r18, 424		// 9001c5cc
9001c428:	1644c003 	cmpu	r18, r4, r24
9001c42c:	bc52ffe4 	blti	r18, -28		// 9001c410
9001c430:	ea7c0024 	lwi	r19, r28, 36
9001c434:	bc130200 	beqi	r19, 512		// 9001c634
9001c438:	e873000c 	lwi	r3, r19, 12
9001c43c:	bc030218 	beqi	r3, 536		// 9001c654
9001c440:	e893000c 	lwi	r4, r19, 12
9001c444:	eac40000 	lwi	r22, r4, 0
9001c448:	bc160260 	beqi	r22, 608		// 9001c6a8
9001c44c:	e8760000 	lwi	r3, r22, 0
9001c450:	f8640000 	swi	r3, r4, 0
9001c454:	f8160010 	swi	r0, r22, 16
9001c458:	f816000c 	swi	r0, r22, 12
9001c45c:	30600001 	addik	r3, r0, 1
9001c460:	f8760010 	swi	r3, r22, 16
9001c464:	f8160014 	swi	r0, r22, 20
9001c468:	b8100138 	brid	312		// 9001c5a0
9001c46c:	10760000 	addk	r3, r22, r0
9001c470:	be5a0168 	bltid	r26, 360		// 9001c5d8
9001c474:	10790000 	addk	r3, r25, r0
9001c478:	13400000 	addk	r26, r0, r0
9001c47c:	33060014 	addik	r24, r6, 20
9001c480:	ea7c0024 	lwi	r19, r28, 36
9001c484:	eb770004 	lwi	r27, r23, 4
9001c488:	bc130164 	beqi	r19, 356		// 9001c5ec
9001c48c:	e873000c 	lwi	r3, r19, 12
9001c490:	be030180 	beqid	r3, 384		// 9001c610
9001c494:	10bc0000 	addk	r5, r28, r0
9001c498:	e8b3000c 	lwi	r5, r19, 12
9001c49c:	649b0402 	bslli	r4, r27, 2
9001c4a0:	cac52000 	lw	r22, r5, r4
9001c4a4:	be1601dc 	beqid	r22, 476		// 9001c680
9001c4a8:	30c00001 	addik	r6, r0, 1
9001c4ac:	e8760000 	lwi	r3, r22, 0
9001c4b0:	d8652000 	sw	r3, r5, r4
9001c4b4:	f8160010 	swi	r0, r22, 16
9001c4b8:	f816000c 	swi	r0, r22, 12
9001c4bc:	e9770010 	lwi	r11, r23, 16
9001c4c0:	e8790010 	lwi	r3, r25, 16
9001c4c4:	11380000 	addk	r9, r24, r0
9001c4c8:	648b0402 	bslli	r4, r11, 2
9001c4cc:	64630402 	bslli	r3, r3, 2
9001c4d0:	30f90014 	addik	r7, r25, 20
9001c4d4:	fb56000c 	swi	r26, r22, 12
9001c4d8:	12782000 	addk	r19, r24, r4
9001c4dc:	11871800 	addk	r12, r7, r3
9001c4e0:	31160014 	addik	r8, r22, 20
9001c4e4:	11400000 	addk	r10, r0, r0
9001c4e8:	e8890000 	lwi	r4, r9, 0
9001c4ec:	e8c70000 	lwi	r6, r7, 0
9001c4f0:	30e70004 	addik	r7, r7, 4
9001c4f4:	b0000000 	imm	0
9001c4f8:	a4a4ffff 	andi	r5, r4, -1
9001c4fc:	b0000000 	imm	0
9001c500:	a466ffff 	andi	r3, r6, -1
9001c504:	14a32800 	rsubk	r5, r3, r5
9001c508:	10a55000 	addk	r5, r5, r10
9001c50c:	64840010 	bsrli	r4, r4, 16
9001c510:	64c60010 	bsrli	r6, r6, 16
9001c514:	64650210 	bsrai	r3, r5, 16
9001c518:	14862000 	rsubk	r4, r6, r4
9001c51c:	10841800 	addk	r4, r4, r3
9001c520:	f4880000 	shi	r4, r8, 0
9001c524:	f4a80002 	shi	r5, r8, 2
9001c528:	31290004 	addik	r9, r9, 4
9001c52c:	31080004 	addik	r8, r8, 4
9001c530:	164c3803 	cmpu	r18, r12, r7
9001c534:	be52ffb4 	bltid	r18, -76		// 9001c4e8
9001c538:	65440210 	bsrai	r10, r4, 16
9001c53c:	16534803 	cmpu	r18, r19, r9
9001c540:	bcb2003c 	bgei	r18, 60		// 9001c57c
9001c544:	e8690000 	lwi	r3, r9, 0
9001c548:	31290004 	addik	r9, r9, 4
9001c54c:	b0000000 	imm	0
9001c550:	a4a3ffff 	andi	r5, r3, -1
9001c554:	10a55000 	addk	r5, r5, r10
9001c558:	64630010 	bsrli	r3, r3, 16
9001c55c:	64850210 	bsrai	r4, r5, 16
9001c560:	10632000 	addk	r3, r3, r4
9001c564:	f4680000 	shi	r3, r8, 0
9001c568:	f4a80002 	shi	r5, r8, 2
9001c56c:	65430210 	bsrai	r10, r3, 16
9001c570:	16534803 	cmpu	r18, r19, r9
9001c574:	be52ffd0 	bltid	r18, -48		// 9001c544
9001c578:	31080004 	addik	r8, r8, 4
9001c57c:	e868fffc 	lwi	r3, r8, -4
9001c580:	be230018 	bneid	r3, 24		// 9001c598
9001c584:	3088fffc 	addik	r4, r8, -4
9001c588:	3084fffc 	addik	r4, r4, -4
9001c58c:	e8640000 	lwi	r3, r4, 0
9001c590:	be03fff8 	beqid	r3, -8		// 9001c588
9001c594:	316bffff 	addik	r11, r11, -1
9001c598:	f9760010 	swi	r11, r22, 16
9001c59c:	10760000 	addk	r3, r22, r0
9001c5a0:	e9e10000 	lwi	r15, r1, 0
9001c5a4:	ea61001c 	lwi	r19, r1, 28
9001c5a8:	eac10020 	lwi	r22, r1, 32
9001c5ac:	eae10024 	lwi	r23, r1, 36
9001c5b0:	eb010028 	lwi	r24, r1, 40
9001c5b4:	eb21002c 	lwi	r25, r1, 44
9001c5b8:	eb410030 	lwi	r26, r1, 48
9001c5bc:	eb610034 	lwi	r27, r1, 52
9001c5c0:	eb810038 	lwi	r28, r1, 56
9001c5c4:	b60f0008 	rtsd	r15, 8
9001c5c8:	3021003c 	addik	r1, r1, 60
9001c5cc:	16433003 	cmpu	r18, r3, r6
9001c5d0:	beb2feb0 	bgeid	r18, -336		// 9001c480
9001c5d4:	10790000 	addk	r3, r25, r0
9001c5d8:	13370000 	addk	r25, r23, r0
9001c5dc:	33400001 	addik	r26, r0, 1
9001c5e0:	12e30000 	addk	r23, r3, r0
9001c5e4:	b810fe9c 	brid	-356		// 9001c480
9001c5e8:	33030014 	addik	r24, r3, 20
9001c5ec:	b9f4e630 	brlid	r15, -6608	// 9001ac1c <malloc>
9001c5f0:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001c5f4:	12630000 	addk	r19, r3, r0
9001c5f8:	f87c0024 	swi	r3, r28, 36
9001c5fc:	f8030004 	swi	r0, r3, 4
9001c600:	f8030008 	swi	r0, r3, 8
9001c604:	f8030000 	swi	r0, r3, 0
9001c608:	f803000c 	swi	r0, r3, 12
9001c60c:	10bc0000 	addk	r5, r28, r0
9001c610:	30c00004 	addik	r6, r0, 4
9001c614:	b9f41650 	brlid	r15, 5712	// 9001dc64 <_calloc_r>
9001c618:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001c61c:	f873000c 	swi	r3, r19, 12
9001c620:	ea7c0024 	lwi	r19, r28, 36
9001c624:	e873000c 	lwi	r3, r19, 12
9001c628:	be23fe70 	bneid	r3, -400		// 9001c498
9001c62c:	12c30000 	addk	r22, r3, r0
9001c630:	b800fe8c 	bri	-372		// 9001c4bc
9001c634:	b9f4e5e8 	brlid	r15, -6680	// 9001ac1c <malloc>
9001c638:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001c63c:	12630000 	addk	r19, r3, r0
9001c640:	f87c0024 	swi	r3, r28, 36
9001c644:	f8030004 	swi	r0, r3, 4
9001c648:	f8030008 	swi	r0, r3, 8
9001c64c:	f8030000 	swi	r0, r3, 0
9001c650:	f803000c 	swi	r0, r3, 12
9001c654:	10bc0000 	addk	r5, r28, r0
9001c658:	30c00004 	addik	r6, r0, 4
9001c65c:	b9f41608 	brlid	r15, 5640	// 9001dc64 <_calloc_r>
9001c660:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001c664:	f873000c 	swi	r3, r19, 12
9001c668:	ea7c0024 	lwi	r19, r28, 36
9001c66c:	e873000c 	lwi	r3, r19, 12
9001c670:	be23fdd0 	bneid	r3, -560		// 9001c440
9001c674:	12c30000 	addk	r22, r3, r0
9001c678:	b810fde8 	brid	-536		// 9001c460
9001c67c:	30600001 	addik	r3, r0, 1
9001c680:	4666dc00 	bsll	r19, r6, r27
9001c684:	10bc0000 	addk	r5, r28, r0
9001c688:	64f30402 	bslli	r7, r19, 2
9001c68c:	b9f415d8 	brlid	r15, 5592	// 9001dc64 <_calloc_r>
9001c690:	30e70014 	addik	r7, r7, 20
9001c694:	bc03fe28 	beqi	r3, -472		// 9001c4bc
9001c698:	fb630004 	swi	r27, r3, 4
9001c69c:	fa630008 	swi	r19, r3, 8
9001c6a0:	b810fe14 	brid	-492		// 9001c4b4
9001c6a4:	12c30000 	addk	r22, r3, r0
9001c6a8:	10bc0000 	addk	r5, r28, r0
9001c6ac:	30c00001 	addik	r6, r0, 1
9001c6b0:	b9f415b4 	brlid	r15, 5556	// 9001dc64 <_calloc_r>
9001c6b4:	30e00018 	addik	r7, r0, 24
9001c6b8:	bc03fda4 	beqi	r3, -604		// 9001c45c
9001c6bc:	12c30000 	addk	r22, r3, r0
9001c6c0:	30600001 	addik	r3, r0, 1
9001c6c4:	f8760008 	swi	r3, r22, 8
9001c6c8:	f8160004 	swi	r0, r22, 4
9001c6cc:	b800fd88 	bri	-632		// 9001c454

9001c6d0 <_multadd>:
9001c6d0:	3021ffc8 	addik	r1, r1, -56
9001c6d4:	fa61001c 	swi	r19, r1, 28
9001c6d8:	fb010028 	swi	r24, r1, 40
9001c6dc:	fb610034 	swi	r27, r1, 52
9001c6e0:	f9e10000 	swi	r15, r1, 0
9001c6e4:	fac10020 	swi	r22, r1, 32
9001c6e8:	fae10024 	swi	r23, r1, 36
9001c6ec:	fb21002c 	swi	r25, r1, 44
9001c6f0:	fb410030 	swi	r26, r1, 48
9001c6f4:	13060000 	addk	r24, r6, r0
9001c6f8:	13650000 	addk	r27, r5, r0
9001c6fc:	eae60010 	lwi	r23, r6, 16
9001c700:	12680000 	addk	r19, r8, r0
9001c704:	11200000 	addk	r9, r0, r0
9001c708:	31060014 	addik	r8, r6, 20
9001c70c:	e8880000 	lwi	r4, r8, 0
9001c710:	31290001 	addik	r9, r9, 1
9001c714:	b0000000 	imm	0
9001c718:	a464ffff 	andi	r3, r4, -1
9001c71c:	40633800 	mul	r3, r3, r7
9001c720:	64840010 	bsrli	r4, r4, 16
9001c724:	10639800 	addk	r3, r3, r19
9001c728:	40843800 	mul	r4, r4, r7
9001c72c:	b0000000 	imm	0
9001c730:	a4c3ffff 	andi	r6, r3, -1
9001c734:	64630010 	bsrli	r3, r3, 16
9001c738:	10841800 	addk	r4, r4, r3
9001c73c:	64a40410 	bslli	r5, r4, 16
9001c740:	66640010 	bsrli	r19, r4, 16
9001c744:	10a53000 	addk	r5, r5, r6
9001c748:	f8a80000 	swi	r5, r8, 0
9001c74c:	16574801 	cmp	r18, r23, r9
9001c750:	be52ffbc 	bltid	r18, -68		// 9001c70c
9001c754:	31080004 	addik	r8, r8, 4
9001c758:	be1300b8 	beqid	r19, 184		// 9001c810
9001c75c:	10780000 	addk	r3, r24, r0
9001c760:	e8780008 	lwi	r3, r24, 8
9001c764:	1643b801 	cmp	r18, r3, r23
9001c768:	be520094 	bltid	r18, 148		// 9001c7fc
9001c76c:	64770402 	bslli	r3, r23, 2
9001c770:	eadb0024 	lwi	r22, r27, 36
9001c774:	eb580004 	lwi	r26, r24, 4
9001c778:	be1600c0 	beqid	r22, 192		// 9001c838
9001c77c:	13360000 	addk	r25, r22, r0
9001c780:	e876000c 	lwi	r3, r22, 12
9001c784:	be0300d8 	beqid	r3, 216		// 9001c85c
9001c788:	10bb0000 	addk	r5, r27, r0
9001c78c:	335a0001 	addik	r26, r26, 1
9001c790:	e8b6000c 	lwi	r5, r22, 12
9001c794:	649a0402 	bslli	r4, r26, 2
9001c798:	cb252000 	lw	r25, r5, r4
9001c79c:	be190108 	beqid	r25, 264		// 9001c8a4
9001c7a0:	30c00001 	addik	r6, r0, 1
9001c7a4:	e8790000 	lwi	r3, r25, 0
9001c7a8:	d8652000 	sw	r3, r5, r4
9001c7ac:	f8190010 	swi	r0, r25, 16
9001c7b0:	f819000c 	swi	r0, r25, 12
9001c7b4:	e8f80010 	lwi	r7, r24, 16
9001c7b8:	30b9000c 	addik	r5, r25, 12
9001c7bc:	30d8000c 	addik	r6, r24, 12
9001c7c0:	64e70402 	bslli	r7, r7, 2
9001c7c4:	b000ffff 	imm	-1
9001c7c8:	b9f47748 	brlid	r15, 30536	// 90013f10 <memcpy>
9001c7cc:	30e70008 	addik	r7, r7, 8
9001c7d0:	eadb0024 	lwi	r22, r27, 36
9001c7d4:	be1600ac 	beqid	r22, 172		// 9001c880
9001c7d8:	13560000 	addk	r26, r22, r0
9001c7dc:	e8780004 	lwi	r3, r24, 4
9001c7e0:	e8b6000c 	lwi	r5, r22, 12
9001c7e4:	64630402 	bslli	r3, r3, 2
9001c7e8:	c8851800 	lw	r4, r5, r3
9001c7ec:	f8980000 	swi	r4, r24, 0
9001c7f0:	db051800 	sw	r24, r5, r3
9001c7f4:	13190000 	addk	r24, r25, r0
9001c7f8:	64770402 	bslli	r3, r23, 2
9001c7fc:	30970001 	addik	r4, r23, 1
9001c800:	1063c000 	addk	r3, r3, r24
9001c804:	fa630014 	swi	r19, r3, 20
9001c808:	f8980010 	swi	r4, r24, 16
9001c80c:	10780000 	addk	r3, r24, r0
9001c810:	e9e10000 	lwi	r15, r1, 0
9001c814:	ea61001c 	lwi	r19, r1, 28
9001c818:	eac10020 	lwi	r22, r1, 32
9001c81c:	eae10024 	lwi	r23, r1, 36
9001c820:	eb010028 	lwi	r24, r1, 40
9001c824:	eb21002c 	lwi	r25, r1, 44
9001c828:	eb410030 	lwi	r26, r1, 48
9001c82c:	eb610034 	lwi	r27, r1, 52
9001c830:	b60f0008 	rtsd	r15, 8
9001c834:	30210038 	addik	r1, r1, 56
9001c838:	b9f4e3e4 	brlid	r15, -7196	// 9001ac1c <malloc>
9001c83c:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001c840:	fb23000c 	swi	r25, r3, 12
9001c844:	f87b0024 	swi	r3, r27, 36
9001c848:	fb230004 	swi	r25, r3, 4
9001c84c:	fb230008 	swi	r25, r3, 8
9001c850:	fb230000 	swi	r25, r3, 0
9001c854:	b810ff2c 	brid	-212		// 9001c780
9001c858:	12c30000 	addk	r22, r3, r0
9001c85c:	30c00004 	addik	r6, r0, 4
9001c860:	b9f41404 	brlid	r15, 5124	// 9001dc64 <_calloc_r>
9001c864:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001c868:	f876000c 	swi	r3, r22, 12
9001c86c:	eadb0024 	lwi	r22, r27, 36
9001c870:	e876000c 	lwi	r3, r22, 12
9001c874:	be23ff18 	bneid	r3, -232		// 9001c78c
9001c878:	13230000 	addk	r25, r3, r0
9001c87c:	b800ff38 	bri	-200		// 9001c7b4
9001c880:	b9f4e39c 	brlid	r15, -7268	// 9001ac1c <malloc>
9001c884:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001c888:	f87b0024 	swi	r3, r27, 36
9001c88c:	fb43000c 	swi	r26, r3, 12
9001c890:	fb430004 	swi	r26, r3, 4
9001c894:	fb430008 	swi	r26, r3, 8
9001c898:	fb430000 	swi	r26, r3, 0
9001c89c:	b810ff40 	brid	-192		// 9001c7dc
9001c8a0:	12c30000 	addk	r22, r3, r0
9001c8a4:	46c6d400 	bsll	r22, r6, r26
9001c8a8:	10bb0000 	addk	r5, r27, r0
9001c8ac:	64f60402 	bslli	r7, r22, 2
9001c8b0:	b9f413b4 	brlid	r15, 5044	// 9001dc64 <_calloc_r>
9001c8b4:	30e70014 	addik	r7, r7, 20
9001c8b8:	bc03fefc 	beqi	r3, -260		// 9001c7b4
9001c8bc:	fb430004 	swi	r26, r3, 4
9001c8c0:	fac30008 	swi	r22, r3, 8
9001c8c4:	b810fee8 	brid	-280		// 9001c7ac
9001c8c8:	13230000 	addk	r25, r3, r0

9001c8cc <_lshift>:
9001c8cc:	3021ffc0 	addik	r1, r1, -64
9001c8d0:	fae10024 	swi	r23, r1, 36
9001c8d4:	fb21002c 	swi	r25, r1, 44
9001c8d8:	fb410030 	swi	r26, r1, 48
9001c8dc:	fb610034 	swi	r27, r1, 52
9001c8e0:	fb810038 	swi	r28, r1, 56
9001c8e4:	f9e10000 	swi	r15, r1, 0
9001c8e8:	fa61001c 	swi	r19, r1, 28
9001c8ec:	fac10020 	swi	r22, r1, 32
9001c8f0:	fb010028 	swi	r24, r1, 40
9001c8f4:	fba1003c 	swi	r29, r1, 60
9001c8f8:	e8660010 	lwi	r3, r6, 16
9001c8fc:	66e70205 	bsrai	r23, r7, 5
9001c900:	e8860008 	lwi	r4, r6, 8
9001c904:	30630001 	addik	r3, r3, 1
9001c908:	13371800 	addk	r25, r23, r3
9001c90c:	13460000 	addk	r26, r6, r0
9001c910:	13870000 	addk	r28, r7, r0
9001c914:	ea660004 	lwi	r19, r6, 4
9001c918:	16592001 	cmp	r18, r25, r4
9001c91c:	beb20018 	bgeid	r18, 24		// 9001c934
9001c920:	13650000 	addk	r27, r5, r0
9001c924:	10842000 	addk	r4, r4, r4
9001c928:	16592001 	cmp	r18, r25, r4
9001c92c:	be52fff8 	bltid	r18, -8		// 9001c924
9001c930:	32730001 	addik	r19, r19, 1
9001c934:	eadb0024 	lwi	r22, r27, 36
9001c938:	bc160164 	beqi	r22, 356		// 9001ca9c
9001c93c:	e876000c 	lwi	r3, r22, 12
9001c940:	be030180 	beqid	r3, 384		// 9001cac0
9001c944:	10bb0000 	addk	r5, r27, r0
9001c948:	e8b6000c 	lwi	r5, r22, 12
9001c94c:	64930402 	bslli	r4, r19, 2
9001c950:	cb052000 	lw	r24, r5, r4
9001c954:	be180190 	beqid	r24, 400		// 9001cae4
9001c958:	30c00001 	addik	r6, r0, 1
9001c95c:	e8780000 	lwi	r3, r24, 0
9001c960:	d8652000 	sw	r3, r5, r4
9001c964:	f8180010 	swi	r0, r24, 16
9001c968:	f818000c 	swi	r0, r24, 12
9001c96c:	be77002c 	bleid	r23, 44		// 9001c998
9001c970:	30d80014 	addik	r6, r24, 20
9001c974:	10660000 	addk	r3, r6, r0
9001c978:	10800000 	addk	r4, r0, r0
9001c97c:	30840001 	addik	r4, r4, 1
9001c980:	f8030000 	swi	r0, r3, 0
9001c984:	1644b800 	rsubk	r18, r4, r23
9001c988:	be32fff4 	bneid	r18, -12		// 9001c97c
9001c98c:	30630004 	addik	r3, r3, 4
9001c990:	64770402 	bslli	r3, r23, 2
9001c994:	10c61800 	addk	r6, r6, r3
9001c998:	e87a0010 	lwi	r3, r26, 16
9001c99c:	30ba0014 	addik	r5, r26, 20
9001c9a0:	a4fc001f 	andi	r7, r28, 31
9001c9a4:	64630402 	bslli	r3, r3, 2
9001c9a8:	be07009c 	beqid	r7, 156		// 9001ca44
9001c9ac:	11051800 	addk	r8, r5, r3
9001c9b0:	35270020 	rsubik	r9, r7, 32
9001c9b4:	10800000 	addk	r4, r0, r0
9001c9b8:	e8650000 	lwi	r3, r5, 0
9001c9bc:	44633c00 	bsll	r3, r3, r7
9001c9c0:	80641800 	or	r3, r4, r3
9001c9c4:	f8660000 	swi	r3, r6, 0
9001c9c8:	e8850000 	lwi	r4, r5, 0
9001c9cc:	30a50004 	addik	r5, r5, 4
9001c9d0:	30c60004 	addik	r6, r6, 4
9001c9d4:	16482803 	cmpu	r18, r8, r5
9001c9d8:	be52ffe0 	bltid	r18, -32		// 9001c9b8
9001c9dc:	44844800 	bsrl	r4, r4, r9
9001c9e0:	f8860000 	swi	r4, r6, 0
9001c9e4:	be240080 	bneid	r4, 128		// 9001ca64
9001c9e8:	3079ffff 	addik	r3, r25, -1
9001c9ec:	f8780010 	swi	r3, r24, 16
9001c9f0:	be160088 	beqid	r22, 136		// 9001ca78
9001c9f4:	12760000 	addk	r19, r22, r0
9001c9f8:	e89a0004 	lwi	r4, r26, 4
9001c9fc:	e8d6000c 	lwi	r6, r22, 12
9001ca00:	10780000 	addk	r3, r24, r0
9001ca04:	64840402 	bslli	r4, r4, 2
9001ca08:	c8a62000 	lw	r5, r6, r4
9001ca0c:	f8ba0000 	swi	r5, r26, 0
9001ca10:	db462000 	sw	r26, r6, r4
9001ca14:	e9e10000 	lwi	r15, r1, 0
9001ca18:	ea61001c 	lwi	r19, r1, 28
9001ca1c:	eac10020 	lwi	r22, r1, 32
9001ca20:	eae10024 	lwi	r23, r1, 36
9001ca24:	eb010028 	lwi	r24, r1, 40
9001ca28:	eb21002c 	lwi	r25, r1, 44
9001ca2c:	eb410030 	lwi	r26, r1, 48
9001ca30:	eb610034 	lwi	r27, r1, 52
9001ca34:	eb810038 	lwi	r28, r1, 56
9001ca38:	eba1003c 	lwi	r29, r1, 60
9001ca3c:	b60f0008 	rtsd	r15, 8
9001ca40:	30210040 	addik	r1, r1, 64
9001ca44:	e8650000 	lwi	r3, r5, 0
9001ca48:	30a50004 	addik	r5, r5, 4
9001ca4c:	f8660000 	swi	r3, r6, 0
9001ca50:	16482803 	cmpu	r18, r8, r5
9001ca54:	be52fff0 	bltid	r18, -16		// 9001ca44
9001ca58:	30c60004 	addik	r6, r6, 4
9001ca5c:	b810ff90 	brid	-112		// 9001c9ec
9001ca60:	3079ffff 	addik	r3, r25, -1
9001ca64:	33390001 	addik	r25, r25, 1
9001ca68:	3079ffff 	addik	r3, r25, -1
9001ca6c:	f8780010 	swi	r3, r24, 16
9001ca70:	be36ff88 	bneid	r22, -120		// 9001c9f8
9001ca74:	12760000 	addk	r19, r22, r0
9001ca78:	b9f4e1a4 	brlid	r15, -7772	// 9001ac1c <malloc>
9001ca7c:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001ca80:	f87b0024 	swi	r3, r27, 36
9001ca84:	fa63000c 	swi	r19, r3, 12
9001ca88:	fa630004 	swi	r19, r3, 4
9001ca8c:	fa630008 	swi	r19, r3, 8
9001ca90:	fa630000 	swi	r19, r3, 0
9001ca94:	b810ff64 	brid	-156		// 9001c9f8
9001ca98:	12c30000 	addk	r22, r3, r0
9001ca9c:	b9f4e180 	brlid	r15, -7808	// 9001ac1c <malloc>
9001caa0:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001caa4:	12c30000 	addk	r22, r3, r0
9001caa8:	f87b0024 	swi	r3, r27, 36
9001caac:	f8030004 	swi	r0, r3, 4
9001cab0:	f8030008 	swi	r0, r3, 8
9001cab4:	f8030000 	swi	r0, r3, 0
9001cab8:	f803000c 	swi	r0, r3, 12
9001cabc:	10bb0000 	addk	r5, r27, r0
9001cac0:	30c00004 	addik	r6, r0, 4
9001cac4:	b9f411a0 	brlid	r15, 4512	// 9001dc64 <_calloc_r>
9001cac8:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001cacc:	f876000c 	swi	r3, r22, 12
9001cad0:	eadb0024 	lwi	r22, r27, 36
9001cad4:	e876000c 	lwi	r3, r22, 12
9001cad8:	be23fe70 	bneid	r3, -400		// 9001c948
9001cadc:	13030000 	addk	r24, r3, r0
9001cae0:	b800fe8c 	bri	-372		// 9001c96c
9001cae4:	47a69c00 	bsll	r29, r6, r19
9001cae8:	10bb0000 	addk	r5, r27, r0
9001caec:	64fd0402 	bslli	r7, r29, 2
9001caf0:	b9f41174 	brlid	r15, 4468	// 9001dc64 <_calloc_r>
9001caf4:	30e70014 	addik	r7, r7, 20
9001caf8:	bc030018 	beqi	r3, 24		// 9001cb10
9001cafc:	eadb0024 	lwi	r22, r27, 36
9001cb00:	fa630004 	swi	r19, r3, 4
9001cb04:	fba30008 	swi	r29, r3, 8
9001cb08:	b810fe5c 	brid	-420		// 9001c964
9001cb0c:	13030000 	addk	r24, r3, r0
9001cb10:	eadb0024 	lwi	r22, r27, 36
9001cb14:	b800fe58 	bri	-424		// 9001c96c

9001cb18 <_multiply>:
9001cb18:	3021ffc0 	addik	r1, r1, -64
9001cb1c:	fac10020 	swi	r22, r1, 32
9001cb20:	fb21002c 	swi	r25, r1, 44
9001cb24:	fba1003c 	swi	r29, r1, 60
9001cb28:	f9e10000 	swi	r15, r1, 0
9001cb2c:	fa61001c 	swi	r19, r1, 28
9001cb30:	fae10024 	swi	r23, r1, 36
9001cb34:	fb010028 	swi	r24, r1, 40
9001cb38:	fb410030 	swi	r26, r1, 48
9001cb3c:	fb610034 	swi	r27, r1, 52
9001cb40:	fb810038 	swi	r28, r1, 56
9001cb44:	eb860010 	lwi	r28, r6, 16
9001cb48:	eb670010 	lwi	r27, r7, 16
9001cb4c:	12c60000 	addk	r22, r6, r0
9001cb50:	13a70000 	addk	r29, r7, r0
9001cb54:	165be001 	cmp	r18, r27, r28
9001cb58:	beb20018 	bgeid	r18, 24		// 9001cb70
9001cb5c:	13250000 	addk	r25, r5, r0
9001cb60:	137c0000 	addk	r27, r28, r0
9001cb64:	13a60000 	addk	r29, r6, r0
9001cb68:	12c70000 	addk	r22, r7, r0
9001cb6c:	eb870010 	lwi	r28, r7, 16
9001cb70:	e8760008 	lwi	r3, r22, 8
9001cb74:	12fcd800 	addk	r23, r28, r27
9001cb78:	eb160004 	lwi	r24, r22, 4
9001cb7c:	16571801 	cmp	r18, r23, r3
9001cb80:	bcb20008 	bgei	r18, 8		// 9001cb88
9001cb84:	33180001 	addik	r24, r24, 1
9001cb88:	ea790024 	lwi	r19, r25, 36
9001cb8c:	bc1301e4 	beqi	r19, 484		// 9001cd70
9001cb90:	e873000c 	lwi	r3, r19, 12
9001cb94:	be030200 	beqid	r3, 512		// 9001cd94
9001cb98:	10b90000 	addk	r5, r25, r0
9001cb9c:	e8b3000c 	lwi	r5, r19, 12
9001cba0:	64980402 	bslli	r4, r24, 2
9001cba4:	cb452000 	lw	r26, r5, r4
9001cba8:	be1a0214 	beqid	r26, 532		// 9001cdbc
9001cbac:	30c00001 	addik	r6, r0, 1
9001cbb0:	e87a0000 	lwi	r3, r26, 0
9001cbb4:	d8652000 	sw	r3, r5, r4
9001cbb8:	f81a0010 	swi	r0, r26, 16
9001cbbc:	f81a000c 	swi	r0, r26, 12
9001cbc0:	64770402 	bslli	r3, r23, 2
9001cbc4:	30ba0014 	addik	r5, r26, 20
9001cbc8:	13251800 	addk	r25, r5, r3
9001cbcc:	16592803 	cmpu	r18, r25, r5
9001cbd0:	beb20018 	bgeid	r18, 24		// 9001cbe8
9001cbd4:	10650000 	addk	r3, r5, r0
9001cbd8:	f8030000 	swi	r0, r3, 0
9001cbdc:	30630004 	addik	r3, r3, 4
9001cbe0:	16591803 	cmpu	r18, r25, r3
9001cbe4:	bc52fff4 	blti	r18, -12		// 9001cbd8
9001cbe8:	647b0402 	bslli	r3, r27, 2
9001cbec:	649c0402 	bslli	r4, r28, 2
9001cbf0:	319d0014 	addik	r12, r29, 20
9001cbf4:	33160014 	addik	r24, r22, 20
9001cbf8:	136c1800 	addk	r27, r12, r3
9001cbfc:	165b6003 	cmpu	r18, r27, r12
9001cc00:	beb20110 	bgeid	r18, 272		// 9001cd10
9001cc04:	12782000 	addk	r19, r24, r4
9001cc08:	12c50000 	addk	r22, r5, r0
9001cc0c:	e88c0000 	lwi	r4, r12, 0
9001cc10:	b0000000 	imm	0
9001cc14:	a544ffff 	andi	r10, r4, -1
9001cc18:	be0a0070 	beqid	r10, 112		// 9001cc88
9001cc1c:	11160000 	addk	r8, r22, r0
9001cc20:	11380000 	addk	r9, r24, r0
9001cc24:	10800000 	addk	r4, r0, r0
9001cc28:	e8690000 	lwi	r3, r9, 0
9001cc2c:	e8e80000 	lwi	r7, r8, 0
9001cc30:	31290004 	addik	r9, r9, 4
9001cc34:	b0000000 	imm	0
9001cc38:	a4c3ffff 	andi	r6, r3, -1
9001cc3c:	40ca3000 	mul	r6, r10, r6
9001cc40:	b0000000 	imm	0
9001cc44:	a4a7ffff 	andi	r5, r7, -1
9001cc48:	64630010 	bsrli	r3, r3, 16
9001cc4c:	64e70010 	bsrli	r7, r7, 16
9001cc50:	406a1800 	mul	r3, r10, r3
9001cc54:	10a42800 	addk	r5, r4, r5
9001cc58:	10c62800 	addk	r6, r6, r5
9001cc5c:	64860010 	bsrli	r4, r6, 16
9001cc60:	10633800 	addk	r3, r3, r7
9001cc64:	10841800 	addk	r4, r4, r3
9001cc68:	f4880000 	shi	r4, r8, 0
9001cc6c:	f4c80002 	shi	r6, r8, 2
9001cc70:	64840010 	bsrli	r4, r4, 16
9001cc74:	16534803 	cmpu	r18, r19, r9
9001cc78:	be52ffb0 	bltid	r18, -80		// 9001cc28
9001cc7c:	31080004 	addik	r8, r8, 4
9001cc80:	f8880000 	swi	r4, r8, 0
9001cc84:	e88c0000 	lwi	r4, r12, 0
9001cc88:	65440010 	bsrli	r10, r4, 16
9001cc8c:	be0a0074 	beqid	r10, 116		// 9001cd00
9001cc90:	10f60000 	addk	r7, r22, r0
9001cc94:	e9160000 	lwi	r8, r22, 0
9001cc98:	11380000 	addk	r9, r24, r0
9001cc9c:	10c80000 	addk	r6, r8, r0
9001cca0:	11600000 	addk	r11, r0, r0
9001cca4:	e8a90000 	lwi	r5, r9, 0
9001cca8:	64660010 	bsrli	r3, r6, 16
9001ccac:	b0000000 	imm	0
9001ccb0:	a485ffff 	andi	r4, r5, -1
9001ccb4:	408a2000 	mul	r4, r10, r4
9001ccb8:	106b1800 	addk	r3, r11, r3
9001ccbc:	64a50010 	bsrli	r5, r5, 16
9001ccc0:	10841800 	addk	r4, r4, r3
9001ccc4:	f5070002 	shi	r8, r7, 2
9001ccc8:	f4870000 	shi	r4, r7, 0
9001cccc:	30e70004 	addik	r7, r7, 4
9001ccd0:	e8c70000 	lwi	r6, r7, 0
9001ccd4:	40aa2800 	mul	r5, r10, r5
9001ccd8:	31290004 	addik	r9, r9, 4
9001ccdc:	64840010 	bsrli	r4, r4, 16
9001cce0:	b0000000 	imm	0
9001cce4:	a466ffff 	andi	r3, r6, -1
9001cce8:	10a51800 	addk	r5, r5, r3
9001ccec:	11042800 	addk	r8, r4, r5
9001ccf0:	16534803 	cmpu	r18, r19, r9
9001ccf4:	be52ffb0 	bltid	r18, -80		// 9001cca4
9001ccf8:	65680010 	bsrli	r11, r8, 16
9001ccfc:	f9070000 	swi	r8, r7, 0
9001cd00:	318c0004 	addik	r12, r12, 4
9001cd04:	165b6003 	cmpu	r18, r27, r12
9001cd08:	be52ff04 	bltid	r18, -252		// 9001cc0c
9001cd0c:	32d60004 	addik	r22, r22, 4
9001cd10:	bc770028 	blei	r23, 40		// 9001cd38
9001cd14:	e879fffc 	lwi	r3, r25, -4
9001cd18:	be030014 	beqid	r3, 20		// 9001cd2c
9001cd1c:	3099fffc 	addik	r4, r25, -4
9001cd20:	b8000018 	bri	24		// 9001cd38
9001cd24:	e8640000 	lwi	r3, r4, 0
9001cd28:	bc230010 	bnei	r3, 16		// 9001cd38
9001cd2c:	32f7ffff 	addik	r23, r23, -1
9001cd30:	be37fff4 	bneid	r23, -12		// 9001cd24
9001cd34:	3084fffc 	addik	r4, r4, -4
9001cd38:	fafa0010 	swi	r23, r26, 16
9001cd3c:	107a0000 	addk	r3, r26, r0
9001cd40:	e9e10000 	lwi	r15, r1, 0
9001cd44:	ea61001c 	lwi	r19, r1, 28
9001cd48:	eac10020 	lwi	r22, r1, 32
9001cd4c:	eae10024 	lwi	r23, r1, 36
9001cd50:	eb010028 	lwi	r24, r1, 40
9001cd54:	eb21002c 	lwi	r25, r1, 44
9001cd58:	eb410030 	lwi	r26, r1, 48
9001cd5c:	eb610034 	lwi	r27, r1, 52
9001cd60:	eb810038 	lwi	r28, r1, 56
9001cd64:	eba1003c 	lwi	r29, r1, 60
9001cd68:	b60f0008 	rtsd	r15, 8
9001cd6c:	30210040 	addik	r1, r1, 64
9001cd70:	b9f4deac 	brlid	r15, -8532	// 9001ac1c <malloc>
9001cd74:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001cd78:	12630000 	addk	r19, r3, r0
9001cd7c:	f8790024 	swi	r3, r25, 36
9001cd80:	f8030004 	swi	r0, r3, 4
9001cd84:	f8030008 	swi	r0, r3, 8
9001cd88:	f8030000 	swi	r0, r3, 0
9001cd8c:	f803000c 	swi	r0, r3, 12
9001cd90:	10b90000 	addk	r5, r25, r0
9001cd94:	30c00004 	addik	r6, r0, 4
9001cd98:	b9f40ecc 	brlid	r15, 3788	// 9001dc64 <_calloc_r>
9001cd9c:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001cda0:	f873000c 	swi	r3, r19, 12
9001cda4:	ea790024 	lwi	r19, r25, 36
9001cda8:	e873000c 	lwi	r3, r19, 12
9001cdac:	be23fdf0 	bneid	r3, -528		// 9001cb9c
9001cdb0:	13430000 	addk	r26, r3, r0
9001cdb4:	b810fe10 	brid	-496		// 9001cbc4
9001cdb8:	64770402 	bslli	r3, r23, 2
9001cdbc:	4666c400 	bsll	r19, r6, r24
9001cdc0:	10b90000 	addk	r5, r25, r0
9001cdc4:	64f30402 	bslli	r7, r19, 2
9001cdc8:	b9f40e9c 	brlid	r15, 3740	// 9001dc64 <_calloc_r>
9001cdcc:	30e70014 	addik	r7, r7, 20
9001cdd0:	bc03fdf0 	beqi	r3, -528		// 9001cbc0
9001cdd4:	fb030004 	swi	r24, r3, 4
9001cdd8:	fa630008 	swi	r19, r3, 8
9001cddc:	b810fddc 	brid	-548		// 9001cbb8
9001cde0:	13430000 	addk	r26, r3, r0

9001cde4 <_i2b>:
9001cde4:	3021ffd4 	addik	r1, r1, -44
9001cde8:	fae10024 	swi	r23, r1, 36
9001cdec:	12e50000 	addk	r23, r5, r0
9001cdf0:	fb010028 	swi	r24, r1, 40
9001cdf4:	f9e10000 	swi	r15, r1, 0
9001cdf8:	fa61001c 	swi	r19, r1, 28
9001cdfc:	fac10020 	swi	r22, r1, 32
9001ce00:	ead70024 	lwi	r22, r23, 36
9001ce04:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001ce08:	be160068 	beqid	r22, 104		// 9001ce70
9001ce0c:	13060000 	addk	r24, r6, r0
9001ce10:	e876000c 	lwi	r3, r22, 12
9001ce14:	be030080 	beqid	r3, 128		// 9001ce94
9001ce18:	10b70000 	addk	r5, r23, r0
9001ce1c:	e896000c 	lwi	r4, r22, 12
9001ce20:	10b70000 	addk	r5, r23, r0
9001ce24:	30c00001 	addik	r6, r0, 1
9001ce28:	ea640004 	lwi	r19, r4, 4
9001ce2c:	be130090 	beqid	r19, 144		// 9001cebc
9001ce30:	30e0001c 	addik	r7, r0, 28
9001ce34:	e8730000 	lwi	r3, r19, 0
9001ce38:	f8640004 	swi	r3, r4, 4
9001ce3c:	f813000c 	swi	r0, r19, 12
9001ce40:	f8130010 	swi	r0, r19, 16
9001ce44:	30600001 	addik	r3, r0, 1
9001ce48:	f8730010 	swi	r3, r19, 16
9001ce4c:	fb130014 	swi	r24, r19, 20
9001ce50:	10730000 	addk	r3, r19, r0
9001ce54:	e9e10000 	lwi	r15, r1, 0
9001ce58:	ea61001c 	lwi	r19, r1, 28
9001ce5c:	eac10020 	lwi	r22, r1, 32
9001ce60:	eae10024 	lwi	r23, r1, 36
9001ce64:	eb010028 	lwi	r24, r1, 40
9001ce68:	b60f0008 	rtsd	r15, 8
9001ce6c:	3021002c 	addik	r1, r1, 44
9001ce70:	b9f4ddac 	brlid	r15, -8788	// 9001ac1c <malloc>
9001ce74:	80000000 	or	r0, r0, r0
9001ce78:	12c30000 	addk	r22, r3, r0
9001ce7c:	f8770024 	swi	r3, r23, 36
9001ce80:	f8030004 	swi	r0, r3, 4
9001ce84:	f8030008 	swi	r0, r3, 8
9001ce88:	f8030000 	swi	r0, r3, 0
9001ce8c:	f803000c 	swi	r0, r3, 12
9001ce90:	10b70000 	addk	r5, r23, r0
9001ce94:	30c00004 	addik	r6, r0, 4
9001ce98:	b9f40dcc 	brlid	r15, 3532	// 9001dc64 <_calloc_r>
9001ce9c:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001cea0:	f876000c 	swi	r3, r22, 12
9001cea4:	ead70024 	lwi	r22, r23, 36
9001cea8:	e876000c 	lwi	r3, r22, 12
9001ceac:	be23ff70 	bneid	r3, -144		// 9001ce1c
9001ceb0:	12630000 	addk	r19, r3, r0
9001ceb4:	b810ff94 	brid	-108		// 9001ce48
9001ceb8:	30600001 	addik	r3, r0, 1
9001cebc:	b9f40da8 	brlid	r15, 3496	// 9001dc64 <_calloc_r>
9001cec0:	80000000 	or	r0, r0, r0
9001cec4:	be03ff80 	beqid	r3, -128		// 9001ce44
9001cec8:	30800002 	addik	r4, r0, 2
9001cecc:	12630000 	addk	r19, r3, r0
9001ced0:	30600001 	addik	r3, r0, 1
9001ced4:	f8730004 	swi	r3, r19, 4
9001ced8:	f8930008 	swi	r4, r19, 8
9001cedc:	b800ff60 	bri	-160		// 9001ce3c

9001cee0 <_s2b>:
9001cee0:	3021ffc4 	addik	r1, r1, -60
9001cee4:	fb010028 	swi	r24, r1, 40
9001cee8:	fb410030 	swi	r26, r1, 48
9001ceec:	13050000 	addk	r24, r5, r0
9001cef0:	13460000 	addk	r26, r6, r0
9001cef4:	30a80008 	addik	r5, r8, 8
9001cef8:	30c00009 	addik	r6, r0, 9
9001cefc:	fae10024 	swi	r23, r1, 36
9001cf00:	fb21002c 	swi	r25, r1, 44
9001cf04:	fb610034 	swi	r27, r1, 52
9001cf08:	fb810038 	swi	r28, r1, 56
9001cf0c:	f9e10000 	swi	r15, r1, 0
9001cf10:	fa61001c 	swi	r19, r1, 28
9001cf14:	fac10020 	swi	r22, r1, 32
9001cf18:	13680000 	addk	r27, r8, r0
9001cf1c:	13270000 	addk	r25, r7, r0
9001cf20:	b9f42e6c 	brlid	r15, 11884	// 9001fd8c <__divsi3>
9001cf24:	13890000 	addk	r28, r9, r0
9001cf28:	32400001 	addik	r18, r0, 1
9001cf2c:	16439001 	cmp	r18, r3, r18
9001cf30:	beb2001c 	bgeid	r18, 28		// 9001cf4c
9001cf34:	12e00000 	addk	r23, r0, r0
9001cf38:	30800001 	addik	r4, r0, 1
9001cf3c:	10842000 	addk	r4, r4, r4
9001cf40:	16432001 	cmp	r18, r3, r4
9001cf44:	be52fff8 	bltid	r18, -8		// 9001cf3c
9001cf48:	32f70001 	addik	r23, r23, 1
9001cf4c:	ea780024 	lwi	r19, r24, 36
9001cf50:	be13010c 	beqid	r19, 268		// 9001d05c
9001cf54:	12d30000 	addk	r22, r19, r0
9001cf58:	e873000c 	lwi	r3, r19, 12
9001cf5c:	be030124 	beqid	r3, 292		// 9001d080
9001cf60:	10b80000 	addk	r5, r24, r0
9001cf64:	e8b3000c 	lwi	r5, r19, 12
9001cf68:	64970402 	bslli	r4, r23, 2
9001cf6c:	cac52000 	lw	r22, r5, r4
9001cf70:	be160138 	beqid	r22, 312		// 9001d0a8
9001cf74:	30c00001 	addik	r6, r0, 1
9001cf78:	e8760000 	lwi	r3, r22, 0
9001cf7c:	d8652000 	sw	r3, r5, r4
9001cf80:	f8160010 	swi	r0, r22, 16
9001cf84:	f816000c 	swi	r0, r22, 12
9001cf88:	30600001 	addik	r3, r0, 1
9001cf8c:	fb960014 	swi	r28, r22, 20
9001cf90:	f8760010 	swi	r3, r22, 16
9001cf94:	32400009 	addik	r18, r0, 9
9001cf98:	16599001 	cmp	r18, r25, r18
9001cf9c:	beb200b8 	bgeid	r18, 184		// 9001d054
9001cfa0:	307a000a 	addik	r3, r26, 10
9001cfa4:	32fa0009 	addik	r23, r26, 9
9001cfa8:	32600009 	addik	r19, r0, 9
9001cfac:	c11a9800 	lbu	r8, r26, r19
9001cfb0:	10d60000 	addk	r6, r22, r0
9001cfb4:	10b80000 	addk	r5, r24, r0
9001cfb8:	91080060 	sext8	r8, r8
9001cfbc:	3108ffd0 	addik	r8, r8, -48
9001cfc0:	b9f4f710 	brlid	r15, -2288	// 9001c6d0 <_multadd>
9001cfc4:	30e0000a 	addik	r7, r0, 10
9001cfc8:	32730001 	addik	r19, r19, 1
9001cfcc:	1653c800 	rsubk	r18, r19, r25
9001cfd0:	be32ffdc 	bneid	r18, -36		// 9001cfac
9001cfd4:	12c30000 	addk	r22, r3, r0
9001cfd8:	10b90000 	addk	r5, r25, r0
9001cfdc:	1077c800 	addk	r3, r23, r25
9001cfe0:	3063fff8 	addik	r3, r3, -8
9001cfe4:	165b2801 	cmp	r18, r27, r5
9001cfe8:	beb2003c 	bgeid	r18, 60		// 9001d024
9001cfec:	12630000 	addk	r19, r3, r0
9001cff0:	1465d800 	rsubk	r3, r5, r27
9001cff4:	12f31800 	addk	r23, r19, r3
9001cff8:	e1130000 	lbui	r8, r19, 0
9001cffc:	10d60000 	addk	r6, r22, r0
9001d000:	10b80000 	addk	r5, r24, r0
9001d004:	91080060 	sext8	r8, r8
9001d008:	3108ffd0 	addik	r8, r8, -48
9001d00c:	b9f4f6c4 	brlid	r15, -2364	// 9001c6d0 <_multadd>
9001d010:	30e0000a 	addik	r7, r0, 10
9001d014:	32730001 	addik	r19, r19, 1
9001d018:	1653b800 	rsubk	r18, r19, r23
9001d01c:	be32ffdc 	bneid	r18, -36		// 9001cff8
9001d020:	12c30000 	addk	r22, r3, r0
9001d024:	10760000 	addk	r3, r22, r0
9001d028:	e9e10000 	lwi	r15, r1, 0
9001d02c:	ea61001c 	lwi	r19, r1, 28
9001d030:	eac10020 	lwi	r22, r1, 32
9001d034:	eae10024 	lwi	r23, r1, 36
9001d038:	eb010028 	lwi	r24, r1, 40
9001d03c:	eb21002c 	lwi	r25, r1, 44
9001d040:	eb410030 	lwi	r26, r1, 48
9001d044:	eb610034 	lwi	r27, r1, 52
9001d048:	eb810038 	lwi	r28, r1, 56
9001d04c:	b60f0008 	rtsd	r15, 8
9001d050:	3021003c 	addik	r1, r1, 60
9001d054:	b810ff90 	brid	-112		// 9001cfe4
9001d058:	30a00009 	addik	r5, r0, 9
9001d05c:	b9f4dbc0 	brlid	r15, -9280	// 9001ac1c <malloc>
9001d060:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001d064:	fac3000c 	swi	r22, r3, 12
9001d068:	f8780024 	swi	r3, r24, 36
9001d06c:	fac30004 	swi	r22, r3, 4
9001d070:	fac30008 	swi	r22, r3, 8
9001d074:	fac30000 	swi	r22, r3, 0
9001d078:	b810fee0 	brid	-288		// 9001cf58
9001d07c:	12630000 	addk	r19, r3, r0
9001d080:	30c00004 	addik	r6, r0, 4
9001d084:	b9f40be0 	brlid	r15, 3040	// 9001dc64 <_calloc_r>
9001d088:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001d08c:	f873000c 	swi	r3, r19, 12
9001d090:	ea780024 	lwi	r19, r24, 36
9001d094:	e873000c 	lwi	r3, r19, 12
9001d098:	be23fecc 	bneid	r3, -308		// 9001cf64
9001d09c:	12c30000 	addk	r22, r3, r0
9001d0a0:	b810feec 	brid	-276		// 9001cf8c
9001d0a4:	30600001 	addik	r3, r0, 1
9001d0a8:	4666bc00 	bsll	r19, r6, r23
9001d0ac:	10b80000 	addk	r5, r24, r0
9001d0b0:	64f30402 	bslli	r7, r19, 2
9001d0b4:	b9f40bb0 	brlid	r15, 2992	// 9001dc64 <_calloc_r>
9001d0b8:	30e70014 	addik	r7, r7, 20
9001d0bc:	bc03fecc 	beqi	r3, -308		// 9001cf88
9001d0c0:	fae30004 	swi	r23, r3, 4
9001d0c4:	fa630008 	swi	r19, r3, 8
9001d0c8:	b810feb8 	brid	-328		// 9001cf80
9001d0cc:	12c30000 	addk	r22, r3, r0

9001d0d0 <_pow5mult>:
9001d0d0:	3021ffcc 	addik	r1, r1, -52
9001d0d4:	a4670003 	andi	r3, r7, 3
9001d0d8:	fa61001c 	swi	r19, r1, 28
9001d0dc:	fb010028 	swi	r24, r1, 40
9001d0e0:	fb21002c 	swi	r25, r1, 44
9001d0e4:	f9e10000 	swi	r15, r1, 0
9001d0e8:	fac10020 	swi	r22, r1, 32
9001d0ec:	fae10024 	swi	r23, r1, 36
9001d0f0:	fb410030 	swi	r26, r1, 48
9001d0f4:	12670000 	addk	r19, r7, r0
9001d0f8:	13250000 	addk	r25, r5, r0
9001d0fc:	be2300e0 	bneid	r3, 224		// 9001d1dc
9001d100:	13060000 	addk	r24, r6, r0
9001d104:	66f30202 	bsrai	r23, r19, 2
9001d108:	bc170094 	beqi	r23, 148		// 9001d19c
9001d10c:	ea790024 	lwi	r19, r25, 36
9001d110:	be130154 	beqid	r19, 340		// 9001d264
9001d114:	12d30000 	addk	r22, r19, r0
9001d118:	ead30008 	lwi	r22, r19, 8
9001d11c:	be36002c 	bneid	r22, 44		// 9001d148
9001d120:	13530000 	addk	r26, r19, r0
9001d124:	b80000f4 	bri	244		// 9001d218
9001d128:	92f70001 	sra	r23, r23
9001d12c:	10d60000 	addk	r6, r22, r0
9001d130:	10f60000 	addk	r7, r22, r0
9001d134:	be170068 	beqid	r23, 104		// 9001d19c
9001d138:	10b90000 	addk	r5, r25, r0
9001d13c:	ea760000 	lwi	r19, r22, 0
9001d140:	bc130084 	beqi	r19, 132		// 9001d1c4
9001d144:	12d30000 	addk	r22, r19, r0
9001d148:	a4770001 	andi	r3, r23, 1
9001d14c:	10d80000 	addk	r6, r24, r0
9001d150:	10f60000 	addk	r7, r22, r0
9001d154:	be03ffd4 	beqid	r3, -44		// 9001d128
9001d158:	10b90000 	addk	r5, r25, r0
9001d15c:	b9f4f9bc 	brlid	r15, -1604	// 9001cb18 <_multiply>
9001d160:	80000000 	or	r0, r0, r0
9001d164:	ea790024 	lwi	r19, r25, 36
9001d168:	13430000 	addk	r26, r3, r0
9001d16c:	be13008c 	beqid	r19, 140		// 9001d1f8
9001d170:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001d174:	bc180020 	beqi	r24, 32		// 9001d194
9001d178:	e8990024 	lwi	r4, r25, 36
9001d17c:	e8780004 	lwi	r3, r24, 4
9001d180:	e8a4000c 	lwi	r5, r4, 12
9001d184:	64630402 	bslli	r3, r3, 2
9001d188:	c8851800 	lw	r4, r5, r3
9001d18c:	f8980000 	swi	r4, r24, 0
9001d190:	db051800 	sw	r24, r5, r3
9001d194:	b810ff94 	brid	-108		// 9001d128
9001d198:	131a0000 	addk	r24, r26, r0
9001d19c:	10780000 	addk	r3, r24, r0
9001d1a0:	e9e10000 	lwi	r15, r1, 0
9001d1a4:	ea61001c 	lwi	r19, r1, 28
9001d1a8:	eac10020 	lwi	r22, r1, 32
9001d1ac:	eae10024 	lwi	r23, r1, 36
9001d1b0:	eb010028 	lwi	r24, r1, 40
9001d1b4:	eb21002c 	lwi	r25, r1, 44
9001d1b8:	eb410030 	lwi	r26, r1, 48
9001d1bc:	b60f0008 	rtsd	r15, 8
9001d1c0:	30210034 	addik	r1, r1, 52
9001d1c4:	b9f4f954 	brlid	r15, -1708	// 9001cb18 <_multiply>
9001d1c8:	80000000 	or	r0, r0, r0
9001d1cc:	f8760000 	swi	r3, r22, 0
9001d1d0:	fa630000 	swi	r19, r3, 0
9001d1d4:	b810ff74 	brid	-140		// 9001d148
9001d1d8:	12c30000 	addk	r22, r3, r0
9001d1dc:	64630402 	bslli	r3, r3, 2
9001d1e0:	b0009002 	imm	-28670
9001d1e4:	e8e33664 	lwi	r7, r3, 13924
9001d1e8:	b9f4f4e8 	brlid	r15, -2840	// 9001c6d0 <_multadd>
9001d1ec:	11000000 	addk	r8, r0, r0
9001d1f0:	b810ff14 	brid	-236		// 9001d104
9001d1f4:	13030000 	addk	r24, r3, r0
9001d1f8:	b9f4da24 	brlid	r15, -9692	// 9001ac1c <malloc>
9001d1fc:	80000000 	or	r0, r0, r0
9001d200:	fa63000c 	swi	r19, r3, 12
9001d204:	fa630008 	swi	r19, r3, 8
9001d208:	fa630000 	swi	r19, r3, 0
9001d20c:	f8790024 	swi	r3, r25, 36
9001d210:	fa630004 	swi	r19, r3, 4
9001d214:	b800ff60 	bri	-160		// 9001d174
9001d218:	e873000c 	lwi	r3, r19, 12
9001d21c:	be03006c 	beqid	r3, 108		// 9001d288
9001d220:	10b90000 	addk	r5, r25, r0
9001d224:	e893000c 	lwi	r4, r19, 12
9001d228:	eac40004 	lwi	r22, r4, 4
9001d22c:	be16007c 	beqid	r22, 124		// 9001d2a8
9001d230:	30c00001 	addik	r6, r0, 1
9001d234:	e8760000 	lwi	r3, r22, 0
9001d238:	f8640004 	swi	r3, r4, 4
9001d23c:	f8160010 	swi	r0, r22, 16
9001d240:	f816000c 	swi	r0, r22, 12
9001d244:	fada0008 	swi	r22, r26, 8
9001d248:	30600271 	addik	r3, r0, 625
9001d24c:	30800001 	addik	r4, r0, 1
9001d250:	f8760014 	swi	r3, r22, 20
9001d254:	f8960010 	swi	r4, r22, 16
9001d258:	f8160000 	swi	r0, r22, 0
9001d25c:	b810fef0 	brid	-272		// 9001d14c
9001d260:	a4770001 	andi	r3, r23, 1
9001d264:	b9f4d9b8 	brlid	r15, -9800	// 9001ac1c <malloc>
9001d268:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001d26c:	fac3000c 	swi	r22, r3, 12
9001d270:	f8790024 	swi	r3, r25, 36
9001d274:	fac30004 	swi	r22, r3, 4
9001d278:	fac30008 	swi	r22, r3, 8
9001d27c:	fac30000 	swi	r22, r3, 0
9001d280:	b810fe98 	brid	-360		// 9001d118
9001d284:	12630000 	addk	r19, r3, r0
9001d288:	30c00004 	addik	r6, r0, 4
9001d28c:	b9f409d8 	brlid	r15, 2520	// 9001dc64 <_calloc_r>
9001d290:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001d294:	f873000c 	swi	r3, r19, 12
9001d298:	ea790024 	lwi	r19, r25, 36
9001d29c:	e873000c 	lwi	r3, r19, 12
9001d2a0:	bc23ff84 	bnei	r3, -124		// 9001d224
9001d2a4:	b800ffa0 	bri	-96		// 9001d244
9001d2a8:	10b90000 	addk	r5, r25, r0
9001d2ac:	b9f409b8 	brlid	r15, 2488	// 9001dc64 <_calloc_r>
9001d2b0:	30e0001c 	addik	r7, r0, 28
9001d2b4:	be03ff90 	beqid	r3, -112		// 9001d244
9001d2b8:	30800002 	addik	r4, r0, 2
9001d2bc:	12c30000 	addk	r22, r3, r0
9001d2c0:	30600001 	addik	r3, r0, 1
9001d2c4:	f8760004 	swi	r3, r22, 4
9001d2c8:	f8960008 	swi	r4, r22, 8
9001d2cc:	b800ff70 	bri	-144		// 9001d23c

9001d2d0 <_realloc_r>:
9001d2d0:	3021ffbc 	addik	r1, r1, -68
9001d2d4:	fac10020 	swi	r22, r1, 32
9001d2d8:	fae10024 	swi	r23, r1, 36
9001d2dc:	fb810038 	swi	r28, r1, 56
9001d2e0:	f9e10000 	swi	r15, r1, 0
9001d2e4:	fa61001c 	swi	r19, r1, 28
9001d2e8:	fb010028 	swi	r24, r1, 40
9001d2ec:	fb21002c 	swi	r25, r1, 44
9001d2f0:	fb410030 	swi	r26, r1, 48
9001d2f4:	fb610034 	swi	r27, r1, 52
9001d2f8:	fba1003c 	swi	r29, r1, 60
9001d2fc:	fbc10040 	swi	r30, r1, 64
9001d300:	12e60000 	addk	r23, r6, r0
9001d304:	12c70000 	addk	r22, r7, r0
9001d308:	be060224 	beqid	r6, 548		// 9001d52c
9001d30c:	13850000 	addk	r28, r5, r0
9001d310:	b9f4e3c4 	brlid	r15, -7228	// 9001b6d4 <__malloc_lock>
9001d314:	3277fff8 	addik	r19, r23, -8
9001d318:	3076000b 	addik	r3, r22, 11
9001d31c:	e8d30004 	lwi	r6, r19, 4
9001d320:	22400016 	addi	r18, r0, 22
9001d324:	16439003 	cmpu	r18, r3, r18
9001d328:	be520084 	bltid	r18, 132		// 9001d3ac
9001d32c:	a4a3fff8 	andi	r5, r3, -8
9001d330:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001d334:	13650000 	addk	r27, r5, r0
9001d338:	1656d803 	cmpu	r18, r22, r27
9001d33c:	be520080 	bltid	r18, 128		// 9001d3bc
9001d340:	10600000 	addk	r3, r0, r0
9001d344:	be230078 	bneid	r3, 120		// 9001d3bc
9001d348:	a706fffc 	andi	r24, r6, -4
9001d34c:	1645c001 	cmp	r18, r5, r24
9001d350:	be5200b0 	bltid	r18, 176		// 9001d400
9001d354:	10f3c000 	addk	r7, r19, r24
9001d358:	13380000 	addk	r25, r24, r0
9001d35c:	13530000 	addk	r26, r19, r0
9001d360:	11130000 	addk	r8, r19, r0
9001d364:	32730008 	addik	r19, r19, 8
9001d368:	14fbc800 	rsubk	r7, r27, r25
9001d36c:	2240000f 	addi	r18, r0, 15
9001d370:	16479003 	cmpu	r18, r7, r18
9001d374:	bc5201f4 	blti	r18, 500		// 9001d568
9001d378:	e8680004 	lwi	r3, r8, 4
9001d37c:	10b9d000 	addk	r5, r25, r26
9001d380:	a4630001 	andi	r3, r3, 1
9001d384:	80791800 	or	r3, r25, r3
9001d388:	f8680004 	swi	r3, r8, 4
9001d38c:	e8850004 	lwi	r4, r5, 4
9001d390:	a0840001 	ori	r4, r4, 1
9001d394:	f8850004 	swi	r4, r5, 4
9001d398:	10bc0000 	addk	r5, r28, r0
9001d39c:	b9f4e340 	brlid	r15, -7360	// 9001b6dc <__malloc_unlock>
9001d3a0:	12d30000 	addk	r22, r19, r0
9001d3a4:	b8100028 	brid	40		// 9001d3cc
9001d3a8:	10760000 	addk	r3, r22, r0
9001d3ac:	13650000 	addk	r27, r5, r0
9001d3b0:	1656d803 	cmpu	r18, r22, r27
9001d3b4:	beb2ff90 	bgeid	r18, -112		// 9001d344
9001d3b8:	6465001f 	bsrli	r3, r5, 31
9001d3bc:	3060000c 	addik	r3, r0, 12
9001d3c0:	12c00000 	addk	r22, r0, r0
9001d3c4:	f87c000c 	swi	r3, r28, 12
9001d3c8:	10760000 	addk	r3, r22, r0
9001d3cc:	e9e10000 	lwi	r15, r1, 0
9001d3d0:	ea61001c 	lwi	r19, r1, 28
9001d3d4:	eac10020 	lwi	r22, r1, 32
9001d3d8:	eae10024 	lwi	r23, r1, 36
9001d3dc:	eb010028 	lwi	r24, r1, 40
9001d3e0:	eb21002c 	lwi	r25, r1, 44
9001d3e4:	eb410030 	lwi	r26, r1, 48
9001d3e8:	eb610034 	lwi	r27, r1, 52
9001d3ec:	eb810038 	lwi	r28, r1, 56
9001d3f0:	eba1003c 	lwi	r29, r1, 60
9001d3f4:	ebc10040 	lwi	r30, r1, 64
9001d3f8:	b60f0008 	rtsd	r15, 8
9001d3fc:	30210044 	addik	r1, r1, 68
9001d400:	b0009002 	imm	-28670
9001d404:	e9203c6c 	lwi	r9, r0, 15468
9001d408:	b0009002 	imm	-28670
9001d40c:	33c03c64 	addik	r30, r0, 15460
9001d410:	16493800 	rsubk	r18, r9, r7
9001d414:	be120314 	beqid	r18, 788		// 9001d728
9001d418:	13530000 	addk	r26, r19, r0
9001d41c:	e9070004 	lwi	r8, r7, 4
9001d420:	a468fffe 	andi	r3, r8, -2
9001d424:	10633800 	addk	r3, r3, r7
9001d428:	e8830004 	lwi	r4, r3, 4
9001d42c:	a4840001 	andi	r4, r4, 1
9001d430:	be04010c 	beqid	r4, 268		// 9001d53c
9001d434:	a508fffc 	andi	r8, r8, -4
9001d438:	11000000 	addk	r8, r0, r0
9001d43c:	10e80000 	addk	r7, r8, r0
9001d440:	a4660001 	andi	r3, r6, 1
9001d444:	be230164 	bneid	r3, 356		// 9001d5a8
9001d448:	10d60000 	addk	r6, r22, r0
9001d44c:	e8730000 	lwi	r3, r19, 0
9001d450:	17a39800 	rsubk	r29, r3, r19
9001d454:	e89d0004 	lwi	r4, r29, 4
9001d458:	be070218 	beqid	r7, 536		// 9001d670
9001d45c:	a484fffc 	andi	r4, r4, -4
9001d460:	16493800 	rsubk	r18, r9, r7
9001d464:	be120320 	beqid	r18, 800		// 9001d784
9001d468:	11382000 	addk	r9, r24, r4
9001d46c:	13284800 	addk	r25, r8, r9
9001d470:	1645c801 	cmp	r18, r5, r25
9001d474:	bc520200 	blti	r18, 512		// 9001d674
9001d478:	e867000c 	lwi	r3, r7, 12
9001d47c:	e8a70008 	lwi	r5, r7, 8
9001d480:	30f8fffc 	addik	r7, r24, -4
9001d484:	135d0000 	addk	r26, r29, r0
9001d488:	f865000c 	swi	r3, r5, 12
9001d48c:	f8a30008 	swi	r5, r3, 8
9001d490:	e89d000c 	lwi	r4, r29, 12
9001d494:	e87d0008 	lwi	r3, r29, 8
9001d498:	f8640008 	swi	r3, r4, 8
9001d49c:	f883000c 	swi	r4, r3, 12
9001d4a0:	22400024 	addi	r18, r0, 36
9001d4a4:	16479003 	cmpu	r18, r7, r18
9001d4a8:	be5203cc 	bltid	r18, 972		// 9001d874
9001d4ac:	315d0008 	addik	r10, r29, 8
9001d4b0:	10b70000 	addk	r5, r23, r0
9001d4b4:	22400013 	addi	r18, r0, 19
9001d4b8:	16479003 	cmpu	r18, r7, r18
9001d4bc:	beb2004c 	bgeid	r18, 76		// 9001d508
9001d4c0:	112a0000 	addk	r9, r10, r0
9001d4c4:	e8970000 	lwi	r4, r23, 0
9001d4c8:	313d0010 	addik	r9, r29, 16
9001d4cc:	f89d0008 	swi	r4, r29, 8
9001d4d0:	e8770004 	lwi	r3, r23, 4
9001d4d4:	f87d000c 	swi	r3, r29, 12
9001d4d8:	2240001b 	addi	r18, r0, 27
9001d4dc:	16479003 	cmpu	r18, r7, r18
9001d4e0:	beb20028 	bgeid	r18, 40		// 9001d508
9001d4e4:	30b70008 	addik	r5, r23, 8
9001d4e8:	e8970008 	lwi	r4, r23, 8
9001d4ec:	313d0018 	addik	r9, r29, 24
9001d4f0:	f89d0010 	swi	r4, r29, 16
9001d4f4:	e877000c 	lwi	r3, r23, 12
9001d4f8:	f87d0014 	swi	r3, r29, 20
9001d4fc:	aa470024 	xori	r18, r7, 36
9001d500:	be1203d8 	beqid	r18, 984		// 9001d8d8
9001d504:	30b70010 	addik	r5, r23, 16
9001d508:	e8650000 	lwi	r3, r5, 0
9001d50c:	111d0000 	addk	r8, r29, r0
9001d510:	f8690000 	swi	r3, r9, 0
9001d514:	e8850004 	lwi	r4, r5, 4
9001d518:	f8890004 	swi	r4, r9, 4
9001d51c:	e8650008 	lwi	r3, r5, 8
9001d520:	f8690008 	swi	r3, r9, 8
9001d524:	b810fe44 	brid	-444		// 9001d368
9001d528:	126a0000 	addk	r19, r10, r0
9001d52c:	b9f4d718 	brlid	r15, -10472	// 9001ac44 <_malloc_r>
9001d530:	10c70000 	addk	r6, r7, r0
9001d534:	b810fe94 	brid	-364		// 9001d3c8
9001d538:	12c30000 	addk	r22, r3, r0
9001d53c:	13384000 	addk	r25, r24, r8
9001d540:	1645c801 	cmp	r18, r5, r25
9001d544:	be52ff00 	bltid	r18, -256		// 9001d444
9001d548:	a4660001 	andi	r3, r6, 1
9001d54c:	e8870008 	lwi	r4, r7, 8
9001d550:	e867000c 	lwi	r3, r7, 12
9001d554:	11130000 	addk	r8, r19, r0
9001d558:	f8830008 	swi	r4, r3, 8
9001d55c:	f864000c 	swi	r3, r4, 12
9001d560:	b810fe08 	brid	-504		// 9001d368
9001d564:	32730008 	addik	r19, r19, 8
9001d568:	e8680004 	lwi	r3, r8, 4
9001d56c:	10dbd000 	addk	r6, r27, r26
9001d570:	a0a70001 	ori	r5, r7, 1
9001d574:	a4630001 	andi	r3, r3, 1
9001d578:	807b1800 	or	r3, r27, r3
9001d57c:	f8680004 	swi	r3, r8, 4
9001d580:	f8a60004 	swi	r5, r6, 4
9001d584:	10863800 	addk	r4, r6, r7
9001d588:	e8640004 	lwi	r3, r4, 4
9001d58c:	10bc0000 	addk	r5, r28, r0
9001d590:	a0630001 	ori	r3, r3, 1
9001d594:	f8640004 	swi	r3, r4, 4
9001d598:	b9f4cb3c 	brlid	r15, -13508	// 9001a0d4 <_free_r>
9001d59c:	30c60008 	addik	r6, r6, 8
9001d5a0:	b810fdfc 	brid	-516		// 9001d39c
9001d5a4:	10bc0000 	addk	r5, r28, r0
9001d5a8:	b9f4d69c 	brlid	r15, -10596	// 9001ac44 <_malloc_r>
9001d5ac:	10bc0000 	addk	r5, r28, r0
9001d5b0:	be0300b0 	beqid	r3, 176		// 9001d660
9001d5b4:	12c30000 	addk	r22, r3, r0
9001d5b8:	e8730004 	lwi	r3, r19, 4
9001d5bc:	3096fff8 	addik	r4, r22, -8
9001d5c0:	a463fffe 	andi	r3, r3, -2
9001d5c4:	10731800 	addk	r3, r19, r3
9001d5c8:	16432000 	rsubk	r18, r3, r4
9001d5cc:	be120290 	beqid	r18, 656		// 9001d85c
9001d5d0:	30f8fffc 	addik	r7, r24, -4
9001d5d4:	22400024 	addi	r18, r0, 36
9001d5d8:	16479003 	cmpu	r18, r7, r18
9001d5dc:	be520198 	bltid	r18, 408		// 9001d774
9001d5e0:	10b60000 	addk	r5, r22, r0
9001d5e4:	10b70000 	addk	r5, r23, r0
9001d5e8:	22400013 	addi	r18, r0, 19
9001d5ec:	16479003 	cmpu	r18, r7, r18
9001d5f0:	beb2004c 	bgeid	r18, 76		// 9001d63c
9001d5f4:	10d60000 	addk	r6, r22, r0
9001d5f8:	e8970000 	lwi	r4, r23, 0
9001d5fc:	30d60008 	addik	r6, r22, 8
9001d600:	f8960000 	swi	r4, r22, 0
9001d604:	e8770004 	lwi	r3, r23, 4
9001d608:	f8760004 	swi	r3, r22, 4
9001d60c:	2240001b 	addi	r18, r0, 27
9001d610:	16479003 	cmpu	r18, r7, r18
9001d614:	beb20028 	bgeid	r18, 40		// 9001d63c
9001d618:	30b70008 	addik	r5, r23, 8
9001d61c:	e8970008 	lwi	r4, r23, 8
9001d620:	30d60010 	addik	r6, r22, 16
9001d624:	f8960008 	swi	r4, r22, 8
9001d628:	e877000c 	lwi	r3, r23, 12
9001d62c:	f876000c 	swi	r3, r22, 12
9001d630:	aa470024 	xori	r18, r7, 36
9001d634:	be120274 	beqid	r18, 628		// 9001d8a8
9001d638:	30b70010 	addik	r5, r23, 16
9001d63c:	e8650000 	lwi	r3, r5, 0
9001d640:	f8660000 	swi	r3, r6, 0
9001d644:	e8850004 	lwi	r4, r5, 4
9001d648:	f8860004 	swi	r4, r6, 4
9001d64c:	e8650008 	lwi	r3, r5, 8
9001d650:	f8660008 	swi	r3, r6, 8
9001d654:	10d70000 	addk	r6, r23, r0
9001d658:	b9f4ca7c 	brlid	r15, -13700	// 9001a0d4 <_free_r>
9001d65c:	10bc0000 	addk	r5, r28, r0
9001d660:	b9f4e07c 	brlid	r15, -8068	// 9001b6dc <__malloc_unlock>
9001d664:	10bc0000 	addk	r5, r28, r0
9001d668:	b810fd64 	brid	-668		// 9001d3cc
9001d66c:	10760000 	addk	r3, r22, r0
9001d670:	11382000 	addk	r9, r24, r4
9001d674:	16454801 	cmp	r18, r5, r9
9001d678:	be52ff30 	bltid	r18, -208		// 9001d5a8
9001d67c:	10d60000 	addk	r6, r22, r0
9001d680:	e89d000c 	lwi	r4, r29, 12
9001d684:	e87d0008 	lwi	r3, r29, 8
9001d688:	30f8fffc 	addik	r7, r24, -4
9001d68c:	135d0000 	addk	r26, r29, r0
9001d690:	f8640008 	swi	r3, r4, 8
9001d694:	f883000c 	swi	r4, r3, 12
9001d698:	22400024 	addi	r18, r0, 36
9001d69c:	16479003 	cmpu	r18, r7, r18
9001d6a0:	be5201ec 	bltid	r18, 492		// 9001d88c
9001d6a4:	317d0008 	addik	r11, r29, 8
9001d6a8:	10b70000 	addk	r5, r23, r0
9001d6ac:	22400013 	addi	r18, r0, 19
9001d6b0:	16479003 	cmpu	r18, r7, r18
9001d6b4:	beb2004c 	bgeid	r18, 76		// 9001d700
9001d6b8:	114b0000 	addk	r10, r11, r0
9001d6bc:	e8970000 	lwi	r4, r23, 0
9001d6c0:	315d0010 	addik	r10, r29, 16
9001d6c4:	f89d0008 	swi	r4, r29, 8
9001d6c8:	e8770004 	lwi	r3, r23, 4
9001d6cc:	f87d000c 	swi	r3, r29, 12
9001d6d0:	2240001b 	addi	r18, r0, 27
9001d6d4:	16479003 	cmpu	r18, r7, r18
9001d6d8:	beb20028 	bgeid	r18, 40		// 9001d700
9001d6dc:	30b70008 	addik	r5, r23, 8
9001d6e0:	e8970008 	lwi	r4, r23, 8
9001d6e4:	315d0018 	addik	r10, r29, 24
9001d6e8:	f89d0010 	swi	r4, r29, 16
9001d6ec:	e877000c 	lwi	r3, r23, 12
9001d6f0:	f87d0014 	swi	r3, r29, 20
9001d6f4:	aa470024 	xori	r18, r7, 36
9001d6f8:	be1201fc 	beqid	r18, 508		// 9001d8f4
9001d6fc:	30b70010 	addik	r5, r23, 16
9001d700:	e8650000 	lwi	r3, r5, 0
9001d704:	111d0000 	addk	r8, r29, r0
9001d708:	13290000 	addk	r25, r9, r0
9001d70c:	f86a0000 	swi	r3, r10, 0
9001d710:	e8850004 	lwi	r4, r5, 4
9001d714:	f88a0004 	swi	r4, r10, 4
9001d718:	e8650008 	lwi	r3, r5, 8
9001d71c:	f86a0008 	swi	r3, r10, 8
9001d720:	b810fc48 	brid	-952		// 9001d368
9001d724:	126b0000 	addk	r19, r11, r0
9001d728:	e8670004 	lwi	r3, r7, 4
9001d72c:	309b0010 	addik	r4, r27, 16
9001d730:	a503fffc 	andi	r8, r3, -4
9001d734:	10784000 	addk	r3, r24, r8
9001d738:	16441801 	cmp	r18, r4, r3
9001d73c:	be52fd04 	bltid	r18, -764		// 9001d440
9001d740:	147b1800 	rsubk	r3, r27, r3
9001d744:	10d3d800 	addk	r6, r19, r27
9001d748:	a0630001 	ori	r3, r3, 1
9001d74c:	f8660004 	swi	r3, r6, 4
9001d750:	e8930004 	lwi	r4, r19, 4
9001d754:	f8de0008 	swi	r6, r30, 8
9001d758:	a4840001 	andi	r4, r4, 1
9001d75c:	809b2000 	or	r4, r27, r4
9001d760:	f8930004 	swi	r4, r19, 4
9001d764:	b9f4df78 	brlid	r15, -8328	// 9001b6dc <__malloc_unlock>
9001d768:	10bc0000 	addk	r5, r28, r0
9001d76c:	b810fc5c 	brid	-932		// 9001d3c8
9001d770:	32d30008 	addik	r22, r19, 8
9001d774:	b9f4de50 	brlid	r15, -8624	// 9001b5c4 <memmove>
9001d778:	10d70000 	addk	r6, r23, r0
9001d77c:	b810fedc 	brid	-292		// 9001d658
9001d780:	10d70000 	addk	r6, r23, r0
9001d784:	13284800 	addk	r25, r8, r9
9001d788:	307b0010 	addik	r3, r27, 16
9001d78c:	1643c801 	cmp	r18, r3, r25
9001d790:	be52fee4 	bltid	r18, -284		// 9001d674
9001d794:	30f8fffc 	addik	r7, r24, -4
9001d798:	e89d000c 	lwi	r4, r29, 12
9001d79c:	e87d0008 	lwi	r3, r29, 8
9001d7a0:	f8640008 	swi	r3, r4, 8
9001d7a4:	f883000c 	swi	r4, r3, 12
9001d7a8:	22400024 	addi	r18, r0, 36
9001d7ac:	16479003 	cmpu	r18, r7, r18
9001d7b0:	be520114 	bltid	r18, 276		// 9001d8c4
9001d7b4:	32dd0008 	addik	r22, r29, 8
9001d7b8:	10d70000 	addk	r6, r23, r0
9001d7bc:	22400013 	addi	r18, r0, 19
9001d7c0:	16479003 	cmpu	r18, r7, r18
9001d7c4:	beb2004c 	bgeid	r18, 76		// 9001d810
9001d7c8:	10b60000 	addk	r5, r22, r0
9001d7cc:	e8970000 	lwi	r4, r23, 0
9001d7d0:	30bd0010 	addik	r5, r29, 16
9001d7d4:	f89d0008 	swi	r4, r29, 8
9001d7d8:	e8770004 	lwi	r3, r23, 4
9001d7dc:	f87d000c 	swi	r3, r29, 12
9001d7e0:	2240001b 	addi	r18, r0, 27
9001d7e4:	16479003 	cmpu	r18, r7, r18
9001d7e8:	beb20028 	bgeid	r18, 40		// 9001d810
9001d7ec:	30d70008 	addik	r6, r23, 8
9001d7f0:	e8970008 	lwi	r4, r23, 8
9001d7f4:	30bd0018 	addik	r5, r29, 24
9001d7f8:	f89d0010 	swi	r4, r29, 16
9001d7fc:	e877000c 	lwi	r3, r23, 12
9001d800:	f87d0014 	swi	r3, r29, 20
9001d804:	aa470024 	xori	r18, r7, 36
9001d808:	be120108 	beqid	r18, 264		// 9001d910
9001d80c:	30d70010 	addik	r6, r23, 16
9001d810:	e8660000 	lwi	r3, r6, 0
9001d814:	f8650000 	swi	r3, r5, 0
9001d818:	e8860004 	lwi	r4, r6, 4
9001d81c:	f8850004 	swi	r4, r5, 4
9001d820:	e8660008 	lwi	r3, r6, 8
9001d824:	f8650008 	swi	r3, r5, 8
9001d828:	147bc800 	rsubk	r3, r27, r25
9001d82c:	10ddd800 	addk	r6, r29, r27
9001d830:	a0630001 	ori	r3, r3, 1
9001d834:	f8660004 	swi	r3, r6, 4
9001d838:	e89d0004 	lwi	r4, r29, 4
9001d83c:	f8de0008 	swi	r6, r30, 8
9001d840:	a4840001 	andi	r4, r4, 1
9001d844:	809b2000 	or	r4, r27, r4
9001d848:	f89d0004 	swi	r4, r29, 4
9001d84c:	b9f4de90 	brlid	r15, -8560	// 9001b6dc <__malloc_unlock>
9001d850:	10bc0000 	addk	r5, r28, r0
9001d854:	b810fb78 	brid	-1160		// 9001d3cc
9001d858:	10760000 	addk	r3, r22, r0
9001d85c:	e8640004 	lwi	r3, r4, 4
9001d860:	11130000 	addk	r8, r19, r0
9001d864:	32730008 	addik	r19, r19, 8
9001d868:	a463fffc 	andi	r3, r3, -4
9001d86c:	b810fafc 	brid	-1284		// 9001d368
9001d870:	13381800 	addk	r25, r24, r3
9001d874:	10d70000 	addk	r6, r23, r0
9001d878:	10aa0000 	addk	r5, r10, r0
9001d87c:	b9f4dd48 	brlid	r15, -8888	// 9001b5c4 <memmove>
9001d880:	126a0000 	addk	r19, r10, r0
9001d884:	b810fae4 	brid	-1308		// 9001d368
9001d888:	111d0000 	addk	r8, r29, r0
9001d88c:	10d70000 	addk	r6, r23, r0
9001d890:	10ab0000 	addk	r5, r11, r0
9001d894:	13290000 	addk	r25, r9, r0
9001d898:	b9f4dd2c 	brlid	r15, -8916	// 9001b5c4 <memmove>
9001d89c:	126b0000 	addk	r19, r11, r0
9001d8a0:	b810fac8 	brid	-1336		// 9001d368
9001d8a4:	111d0000 	addk	r8, r29, r0
9001d8a8:	e8970010 	lwi	r4, r23, 16
9001d8ac:	30d60018 	addik	r6, r22, 24
9001d8b0:	f8960010 	swi	r4, r22, 16
9001d8b4:	e8770014 	lwi	r3, r23, 20
9001d8b8:	f8760014 	swi	r3, r22, 20
9001d8bc:	b810fd80 	brid	-640		// 9001d63c
9001d8c0:	30b70018 	addik	r5, r23, 24
9001d8c4:	10d70000 	addk	r6, r23, r0
9001d8c8:	b9f4dcfc 	brlid	r15, -8964	// 9001b5c4 <memmove>
9001d8cc:	10b60000 	addk	r5, r22, r0
9001d8d0:	b810ff5c 	brid	-164		// 9001d82c
9001d8d4:	147bc800 	rsubk	r3, r27, r25
9001d8d8:	e8970010 	lwi	r4, r23, 16
9001d8dc:	30b70018 	addik	r5, r23, 24
9001d8e0:	f89d0018 	swi	r4, r29, 24
9001d8e4:	e8770014 	lwi	r3, r23, 20
9001d8e8:	f87d001c 	swi	r3, r29, 28
9001d8ec:	b810fc1c 	brid	-996		// 9001d508
9001d8f0:	313d0020 	addik	r9, r29, 32
9001d8f4:	e8970010 	lwi	r4, r23, 16
9001d8f8:	30b70018 	addik	r5, r23, 24
9001d8fc:	f89d0018 	swi	r4, r29, 24
9001d900:	e8770014 	lwi	r3, r23, 20
9001d904:	f87d001c 	swi	r3, r29, 28
9001d908:	b810fdf8 	brid	-520		// 9001d700
9001d90c:	315d0020 	addik	r10, r29, 32
9001d910:	e8970010 	lwi	r4, r23, 16
9001d914:	30d70018 	addik	r6, r23, 24
9001d918:	f89d0018 	swi	r4, r29, 24
9001d91c:	e8770014 	lwi	r3, r23, 20
9001d920:	f87d001c 	swi	r3, r29, 28
9001d924:	b810feec 	brid	-276		// 9001d810
9001d928:	30bd0020 	addik	r5, r29, 32

9001d92c <_sbrk_r>:
9001d92c:	3021ffe0 	addik	r1, r1, -32
9001d930:	fa61001c 	swi	r19, r1, 28
9001d934:	12650000 	addk	r19, r5, r0
9001d938:	f9e10000 	swi	r15, r1, 0
9001d93c:	b0009003 	imm	-28669
9001d940:	f8004ffc 	swi	r0, r0, 20476
9001d944:	b9f40ac0 	brlid	r15, 2752	// 9001e404 <sbrk>
9001d948:	10a60000 	addk	r5, r6, r0
9001d94c:	aa43ffff 	xori	r18, r3, -1
9001d950:	bc120014 	beqi	r18, 20		// 9001d964
9001d954:	e9e10000 	lwi	r15, r1, 0
9001d958:	ea61001c 	lwi	r19, r1, 28
9001d95c:	b60f0008 	rtsd	r15, 8
9001d960:	30210020 	addik	r1, r1, 32
9001d964:	b0009003 	imm	-28669
9001d968:	e8804ffc 	lwi	r4, r0, 20476
9001d96c:	bc04ffe8 	beqi	r4, -24		// 9001d954
9001d970:	f893000c 	swi	r4, r19, 12
9001d974:	e9e10000 	lwi	r15, r1, 0
9001d978:	ea61001c 	lwi	r19, r1, 28
9001d97c:	b60f0008 	rtsd	r15, 8
9001d980:	30210020 	addik	r1, r1, 32

9001d984 <__sclose>:
9001d984:	3021ffe4 	addik	r1, r1, -28
9001d988:	f9e10000 	swi	r15, r1, 0
9001d98c:	e4c5000e 	lhui	r6, r5, 14
9001d990:	b0009002 	imm	-28670
9001d994:	e8a03b60 	lwi	r5, r0, 15200
9001d998:	b9f4038c 	brlid	r15, 908	// 9001dd24 <_close_r>
9001d99c:	90c60061 	sext16	r6, r6
9001d9a0:	e9e10000 	lwi	r15, r1, 0
9001d9a4:	b60f0008 	rtsd	r15, 8
9001d9a8:	3021001c 	addik	r1, r1, 28

9001d9ac <__sseek>:
9001d9ac:	3021ffe0 	addik	r1, r1, -32
9001d9b0:	fa61001c 	swi	r19, r1, 28
9001d9b4:	f9e10000 	swi	r15, r1, 0
9001d9b8:	e465000e 	lhui	r3, r5, 14
9001d9bc:	11070000 	addk	r8, r7, r0
9001d9c0:	12650000 	addk	r19, r5, r0
9001d9c4:	10e60000 	addk	r7, r6, r0
9001d9c8:	b0009002 	imm	-28670
9001d9cc:	e8a03b60 	lwi	r5, r0, 15200
9001d9d0:	b9f405c4 	brlid	r15, 1476	// 9001df94 <_lseek_r>
9001d9d4:	90c30061 	sext16	r6, r3
9001d9d8:	aa43ffff 	xori	r18, r3, -1
9001d9dc:	be12002c 	beqid	r18, 44		// 9001da08
9001d9e0:	10830000 	addk	r4, r3, r0
9001d9e4:	e473000c 	lhui	r3, r19, 12
9001d9e8:	f8930054 	swi	r4, r19, 84
9001d9ec:	a0631000 	ori	r3, r3, 4096
9001d9f0:	f473000c 	shi	r3, r19, 12
9001d9f4:	10640000 	addk	r3, r4, r0
9001d9f8:	e9e10000 	lwi	r15, r1, 0
9001d9fc:	ea61001c 	lwi	r19, r1, 28
9001da00:	b60f0008 	rtsd	r15, 8
9001da04:	30210020 	addik	r1, r1, 32
9001da08:	e473000c 	lhui	r3, r19, 12
9001da0c:	a463efff 	andi	r3, r3, -4097
9001da10:	f473000c 	shi	r3, r19, 12
9001da14:	b810ffe4 	brid	-28		// 9001d9f8
9001da18:	10640000 	addk	r3, r4, r0

9001da1c <__swrite>:
9001da1c:	3021ffd8 	addik	r1, r1, -40
9001da20:	fa61001c 	swi	r19, r1, 28
9001da24:	fac10020 	swi	r22, r1, 32
9001da28:	fae10024 	swi	r23, r1, 36
9001da2c:	f9e10000 	swi	r15, r1, 0
9001da30:	e465000c 	lhui	r3, r5, 12
9001da34:	12c70000 	addk	r22, r7, r0
9001da38:	12650000 	addk	r19, r5, r0
9001da3c:	a4630100 	andi	r3, r3, 256
9001da40:	31000002 	addik	r8, r0, 2
9001da44:	12e60000 	addk	r23, r6, r0
9001da48:	be03001c 	beqid	r3, 28		// 9001da64
9001da4c:	10e00000 	addk	r7, r0, r0
9001da50:	e4c5000e 	lhui	r6, r5, 14
9001da54:	b0009002 	imm	-28670
9001da58:	e8a03b60 	lwi	r5, r0, 15200
9001da5c:	b9f40538 	brlid	r15, 1336	// 9001df94 <_lseek_r>
9001da60:	90c60061 	sext16	r6, r6
9001da64:	e473000c 	lhui	r3, r19, 12
9001da68:	e4d3000e 	lhui	r6, r19, 14
9001da6c:	10f70000 	addk	r7, r23, r0
9001da70:	11160000 	addk	r8, r22, r0
9001da74:	b0009002 	imm	-28670
9001da78:	e8a03b60 	lwi	r5, r0, 15200
9001da7c:	a463efff 	andi	r3, r3, -4097
9001da80:	f473000c 	shi	r3, r19, 12
9001da84:	b9f40180 	brlid	r15, 384	// 9001dc04 <_write_r>
9001da88:	90c60061 	sext16	r6, r6
9001da8c:	e9e10000 	lwi	r15, r1, 0
9001da90:	ea61001c 	lwi	r19, r1, 28
9001da94:	eac10020 	lwi	r22, r1, 32
9001da98:	eae10024 	lwi	r23, r1, 36
9001da9c:	b60f0008 	rtsd	r15, 8
9001daa0:	30210028 	addik	r1, r1, 40

9001daa4 <__sread>:
9001daa4:	3021ffe0 	addik	r1, r1, -32
9001daa8:	fa61001c 	swi	r19, r1, 28
9001daac:	f9e10000 	swi	r15, r1, 0
9001dab0:	e465000e 	lhui	r3, r5, 14
9001dab4:	11070000 	addk	r8, r7, r0
9001dab8:	12650000 	addk	r19, r5, r0
9001dabc:	10e60000 	addk	r7, r6, r0
9001dac0:	b0009002 	imm	-28670
9001dac4:	e8a03b60 	lwi	r5, r0, 15200
9001dac8:	b9f4052c 	brlid	r15, 1324	// 9001dff4 <_read_r>
9001dacc:	90c30061 	sext16	r6, r3
9001dad0:	be430028 	bltid	r3, 40		// 9001daf8
9001dad4:	10830000 	addk	r4, r3, r0
9001dad8:	e8730054 	lwi	r3, r19, 84
9001dadc:	10632000 	addk	r3, r3, r4
9001dae0:	f8730054 	swi	r3, r19, 84
9001dae4:	10640000 	addk	r3, r4, r0
9001dae8:	e9e10000 	lwi	r15, r1, 0
9001daec:	ea61001c 	lwi	r19, r1, 28
9001daf0:	b60f0008 	rtsd	r15, 8
9001daf4:	30210020 	addik	r1, r1, 32
9001daf8:	e473000c 	lhui	r3, r19, 12
9001dafc:	a463efff 	andi	r3, r3, -4097
9001db00:	f473000c 	shi	r3, r19, 12
9001db04:	b810ffe4 	brid	-28		// 9001dae8
9001db08:	10640000 	addk	r3, r4, r0

9001db0c <strchr>:
9001db0c:	a4650003 	andi	r3, r5, 3
9001db10:	be2300d8 	bneid	r3, 216		// 9001dbe8
9001db14:	a50600ff 	andi	r8, r6, 255
9001db18:	64680408 	bslli	r3, r8, 8
9001db1c:	e8c50000 	lwi	r6, r5, 0
9001db20:	80681800 	or	r3, r8, r3
9001db24:	64630408 	bslli	r3, r3, 8
9001db28:	b000fefe 	imm	-258
9001db2c:	3086feff 	addik	r4, r6, -257
9001db30:	80681800 	or	r3, r8, r3
9001db34:	10e50000 	addk	r7, r5, r0
9001db38:	64630408 	bslli	r3, r3, 8
9001db3c:	b0008080 	imm	-32640
9001db40:	a4848080 	andi	r4, r4, -32640
9001db44:	a8a6ffff 	xori	r5, r6, -1
9001db48:	84842800 	and	r4, r4, r5
9001db4c:	be240080 	bneid	r4, 128		// 9001dbcc
9001db50:	81281800 	or	r9, r8, r3
9001db54:	88664800 	xor	r3, r6, r9
9001db58:	b000fefe 	imm	-258
9001db5c:	3083feff 	addik	r4, r3, -257
9001db60:	b0008080 	imm	-32640
9001db64:	a4848080 	andi	r4, r4, -32640
9001db68:	a863ffff 	xori	r3, r3, -1
9001db6c:	84632000 	and	r3, r3, r4
9001db70:	be030020 	beqid	r3, 32		// 9001db90
9001db74:	30e70004 	addik	r7, r7, 4
9001db78:	30e7fffc 	addik	r7, r7, -4
9001db7c:	b8100054 	brid	84		// 9001dbd0
9001db80:	10a70000 	addk	r5, r7, r0
9001db84:	be24004c 	bneid	r4, 76		// 9001dbd0
9001db88:	10a70000 	addk	r5, r7, r0
9001db8c:	30e70004 	addik	r7, r7, 4
9001db90:	e8670000 	lwi	r3, r7, 0
9001db94:	88834800 	xor	r4, r3, r9
9001db98:	b000fefe 	imm	-258
9001db9c:	30c3feff 	addik	r6, r3, -257
9001dba0:	b000fefe 	imm	-258
9001dba4:	30a4feff 	addik	r5, r4, -257
9001dba8:	b0008080 	imm	-32640
9001dbac:	a4c68080 	andi	r6, r6, -32640
9001dbb0:	a863ffff 	xori	r3, r3, -1
9001dbb4:	b0008080 	imm	-32640
9001dbb8:	a4a58080 	andi	r5, r5, -32640
9001dbbc:	a884ffff 	xori	r4, r4, -1
9001dbc0:	84633000 	and	r3, r3, r6
9001dbc4:	be03ffc0 	beqid	r3, -64		// 9001db84
9001dbc8:	84842800 	and	r4, r4, r5
9001dbcc:	10a70000 	addk	r5, r7, r0
9001dbd0:	e0650000 	lbui	r3, r5, 0
9001dbd4:	bc03001c 	beqi	r3, 28		// 9001dbf0
9001dbd8:	16434000 	rsubk	r18, r3, r8
9001dbdc:	be120020 	beqid	r18, 32		// 9001dbfc
9001dbe0:	10650000 	addk	r3, r5, r0
9001dbe4:	30a50001 	addik	r5, r5, 1
9001dbe8:	e0650000 	lbui	r3, r5, 0
9001dbec:	bc23ffec 	bnei	r3, -20		// 9001dbd8
9001dbf0:	be28000c 	bneid	r8, 12		// 9001dbfc
9001dbf4:	10600000 	addk	r3, r0, r0
9001dbf8:	10650000 	addk	r3, r5, r0
9001dbfc:	b60f0008 	rtsd	r15, 8
9001dc00:	80000000 	or	r0, r0, r0

9001dc04 <_write_r>:
9001dc04:	3021ffe0 	addik	r1, r1, -32
9001dc08:	fa61001c 	swi	r19, r1, 28
9001dc0c:	12650000 	addk	r19, r5, r0
9001dc10:	10a60000 	addk	r5, r6, r0
9001dc14:	10c70000 	addk	r6, r7, r0
9001dc18:	f9e10000 	swi	r15, r1, 0
9001dc1c:	b0009003 	imm	-28669
9001dc20:	f8004ffc 	swi	r0, r0, 20476
9001dc24:	b9f40854 	brlid	r15, 2132	// 9001e478 <write>
9001dc28:	10e80000 	addk	r7, r8, r0
9001dc2c:	aa43ffff 	xori	r18, r3, -1
9001dc30:	bc120014 	beqi	r18, 20		// 9001dc44
9001dc34:	e9e10000 	lwi	r15, r1, 0
9001dc38:	ea61001c 	lwi	r19, r1, 28
9001dc3c:	b60f0008 	rtsd	r15, 8
9001dc40:	30210020 	addik	r1, r1, 32
9001dc44:	b0009003 	imm	-28669
9001dc48:	e8804ffc 	lwi	r4, r0, 20476
9001dc4c:	bc04ffe8 	beqi	r4, -24		// 9001dc34
9001dc50:	f893000c 	swi	r4, r19, 12
9001dc54:	e9e10000 	lwi	r15, r1, 0
9001dc58:	ea61001c 	lwi	r19, r1, 28
9001dc5c:	b60f0008 	rtsd	r15, 8
9001dc60:	30210020 	addik	r1, r1, 32

9001dc64 <_calloc_r>:
9001dc64:	3021ffe0 	addik	r1, r1, -32
9001dc68:	fa61001c 	swi	r19, r1, 28
9001dc6c:	f9e10000 	swi	r15, r1, 0
9001dc70:	b9f4cfd4 	brlid	r15, -12332	// 9001ac44 <_malloc_r>
9001dc74:	40c63800 	mul	r6, r6, r7
9001dc78:	be030048 	beqid	r3, 72		// 9001dcc0
9001dc7c:	12630000 	addk	r19, r3, r0
9001dc80:	e863fffc 	lwi	r3, r3, -4
9001dc84:	10b30000 	addk	r5, r19, r0
9001dc88:	10c00000 	addk	r6, r0, r0
9001dc8c:	a463fffc 	andi	r3, r3, -4
9001dc90:	3063fffc 	addik	r3, r3, -4
9001dc94:	22400024 	addi	r18, r0, 36
9001dc98:	16439003 	cmpu	r18, r3, r18
9001dc9c:	be520074 	bltid	r18, 116		// 9001dd10
9001dca0:	10e30000 	addk	r7, r3, r0
9001dca4:	22400013 	addi	r18, r0, 19
9001dca8:	16439003 	cmpu	r18, r3, r18
9001dcac:	be520028 	bltid	r18, 40		// 9001dcd4
9001dcb0:	10930000 	addk	r4, r19, r0
9001dcb4:	f8040008 	swi	r0, r4, 8
9001dcb8:	f8040000 	swi	r0, r4, 0
9001dcbc:	f8040004 	swi	r0, r4, 4
9001dcc0:	10730000 	addk	r3, r19, r0
9001dcc4:	e9e10000 	lwi	r15, r1, 0
9001dcc8:	ea61001c 	lwi	r19, r1, 28
9001dccc:	b60f0008 	rtsd	r15, 8
9001dcd0:	30210020 	addik	r1, r1, 32
9001dcd4:	f8d30000 	swi	r6, r19, 0
9001dcd8:	f8d30004 	swi	r6, r19, 4
9001dcdc:	2240001b 	addi	r18, r0, 27
9001dce0:	16439003 	cmpu	r18, r3, r18
9001dce4:	beb2ffd0 	bgeid	r18, -48		// 9001dcb4
9001dce8:	30930008 	addik	r4, r19, 8
9001dcec:	f8d30008 	swi	r6, r19, 8
9001dcf0:	f8d3000c 	swi	r6, r19, 12
9001dcf4:	aa430024 	xori	r18, r3, 36
9001dcf8:	be32ffbc 	bneid	r18, -68		// 9001dcb4
9001dcfc:	30930010 	addik	r4, r19, 16
9001dd00:	f8d30010 	swi	r6, r19, 16
9001dd04:	f8d30014 	swi	r6, r19, 20
9001dd08:	b810ffac 	brid	-84		// 9001dcb4
9001dd0c:	30930018 	addik	r4, r19, 24
9001dd10:	b000ffff 	imm	-1
9001dd14:	b9f462bc 	brlid	r15, 25276	// 90013fd0 <memset>
9001dd18:	80000000 	or	r0, r0, r0
9001dd1c:	b810ffa8 	brid	-88		// 9001dcc4
9001dd20:	10730000 	addk	r3, r19, r0

9001dd24 <_close_r>:
9001dd24:	3021ffe0 	addik	r1, r1, -32
9001dd28:	fa61001c 	swi	r19, r1, 28
9001dd2c:	12650000 	addk	r19, r5, r0
9001dd30:	f9e10000 	swi	r15, r1, 0
9001dd34:	b0009003 	imm	-28669
9001dd38:	f8004ffc 	swi	r0, r0, 20476
9001dd3c:	b9f40838 	brlid	r15, 2104	// 9001e574 <close>
9001dd40:	10a60000 	addk	r5, r6, r0
9001dd44:	aa43ffff 	xori	r18, r3, -1
9001dd48:	bc120014 	beqi	r18, 20		// 9001dd5c
9001dd4c:	e9e10000 	lwi	r15, r1, 0
9001dd50:	ea61001c 	lwi	r19, r1, 28
9001dd54:	b60f0008 	rtsd	r15, 8
9001dd58:	30210020 	addik	r1, r1, 32
9001dd5c:	b0009003 	imm	-28669
9001dd60:	e8804ffc 	lwi	r4, r0, 20476
9001dd64:	bc04ffe8 	beqi	r4, -24		// 9001dd4c
9001dd68:	f893000c 	swi	r4, r19, 12
9001dd6c:	e9e10000 	lwi	r15, r1, 0
9001dd70:	ea61001c 	lwi	r19, r1, 28
9001dd74:	b60f0008 	rtsd	r15, 8
9001dd78:	30210020 	addik	r1, r1, 32

9001dd7c <_fclose_r>:
9001dd7c:	3021ffd8 	addik	r1, r1, -40
9001dd80:	fa61001c 	swi	r19, r1, 28
9001dd84:	fac10020 	swi	r22, r1, 32
9001dd88:	fae10024 	swi	r23, r1, 36
9001dd8c:	f9e10000 	swi	r15, r1, 0
9001dd90:	12660000 	addk	r19, r6, r0
9001dd94:	12e50000 	addk	r23, r5, r0
9001dd98:	be0600cc 	beqid	r6, 204		// 9001de64
9001dd9c:	12c60000 	addk	r22, r6, r0
9001dda0:	b9f4bb8c 	brlid	r15, -17524	// 9001992c <__sfp_lock_acquire>
9001dda4:	80000000 	or	r0, r0, r0
9001dda8:	bc17000c 	beqi	r23, 12		// 9001ddb4
9001ddac:	e8770018 	lwi	r3, r23, 24
9001ddb0:	bc0300e0 	beqi	r3, 224		// 9001de90
9001ddb4:	b0009002 	imm	-28670
9001ddb8:	aa5334a4 	xori	r18, r19, 13476
9001ddbc:	bc1200e8 	beqi	r18, 232		// 9001dea4
9001ddc0:	b0009002 	imm	-28670
9001ddc4:	aa5334c4 	xori	r18, r19, 13508
9001ddc8:	bc120138 	beqi	r18, 312		// 9001df00
9001ddcc:	b0009002 	imm	-28670
9001ddd0:	aa5334e4 	xori	r18, r19, 13540
9001ddd4:	bc120114 	beqi	r18, 276		// 9001dee8
9001ddd8:	e473000c 	lhui	r3, r19, 12
9001dddc:	90630061 	sext16	r3, r3
9001dde0:	bc0300a0 	beqi	r3, 160		// 9001de80
9001dde4:	a4630008 	andi	r3, r3, 8
9001dde8:	be2300cc 	bneid	r3, 204		// 9001deb4
9001ddec:	12c30000 	addk	r22, r3, r0
9001ddf0:	e8730030 	lwi	r3, r19, 48
9001ddf4:	bc030014 	beqi	r3, 20		// 9001de08
9001ddf8:	e8b30020 	lwi	r5, r19, 32
9001ddfc:	99fc1800 	brald	r15, r3
9001de00:	80000000 	or	r0, r0, r0
9001de04:	bc4300f4 	blti	r3, 244		// 9001def8
9001de08:	e473000c 	lhui	r3, r19, 12
9001de0c:	a4630080 	andi	r3, r3, 128
9001de10:	bc2300bc 	bnei	r3, 188		// 9001decc
9001de14:	e8d30034 	lwi	r6, r19, 52
9001de18:	be060024 	beqid	r6, 36		// 9001de3c
9001de1c:	30730044 	addik	r3, r19, 68
9001de20:	16433000 	rsubk	r18, r3, r6
9001de24:	bc120014 	beqi	r18, 20		// 9001de38
9001de28:	b0009002 	imm	-28670
9001de2c:	e8a03b60 	lwi	r5, r0, 15200
9001de30:	b9f4c2a4 	brlid	r15, -15708	// 9001a0d4 <_free_r>
9001de34:	80000000 	or	r0, r0, r0
9001de38:	f8130034 	swi	r0, r19, 52
9001de3c:	e8d30048 	lwi	r6, r19, 72
9001de40:	bc060018 	beqi	r6, 24		// 9001de58
9001de44:	b0009002 	imm	-28670
9001de48:	e8a03b60 	lwi	r5, r0, 15200
9001de4c:	b9f4c288 	brlid	r15, -15736	// 9001a0d4 <_free_r>
9001de50:	80000000 	or	r0, r0, r0
9001de54:	f8130048 	swi	r0, r19, 72
9001de58:	f413000c 	shi	r0, r19, 12
9001de5c:	b9f4bad8 	brlid	r15, -17704	// 90019934 <__sfp_lock_release>
9001de60:	80000000 	or	r0, r0, r0
9001de64:	10760000 	addk	r3, r22, r0
9001de68:	e9e10000 	lwi	r15, r1, 0
9001de6c:	ea61001c 	lwi	r19, r1, 28
9001de70:	eac10020 	lwi	r22, r1, 32
9001de74:	eae10024 	lwi	r23, r1, 36
9001de78:	b60f0008 	rtsd	r15, 8
9001de7c:	30210028 	addik	r1, r1, 40
9001de80:	b9f4bab4 	brlid	r15, -17740	// 90019934 <__sfp_lock_release>
9001de84:	12c30000 	addk	r22, r3, r0
9001de88:	b810ffe0 	brid	-32		// 9001de68
9001de8c:	10760000 	addk	r3, r22, r0
9001de90:	b9f4bbd4 	brlid	r15, -17452	// 90019a64 <__sinit>
9001de94:	10b70000 	addk	r5, r23, r0
9001de98:	b0009002 	imm	-28670
9001de9c:	aa5334a4 	xori	r18, r19, 13476
9001dea0:	bc32ff20 	bnei	r18, -224		// 9001ddc0
9001dea4:	b0009002 	imm	-28670
9001dea8:	e8603b60 	lwi	r3, r0, 15200
9001deac:	ea630000 	lwi	r19, r3, 0
9001deb0:	b800ff28 	bri	-216		// 9001ddd8
9001deb4:	b9f4b924 	brlid	r15, -18140	// 900197d8 <fflush>
9001deb8:	10b30000 	addk	r5, r19, r0
9001debc:	12c30000 	addk	r22, r3, r0
9001dec0:	e8730030 	lwi	r3, r19, 48
9001dec4:	bc23ff34 	bnei	r3, -204		// 9001ddf8
9001dec8:	b800ff40 	bri	-192		// 9001de08
9001decc:	e8d30010 	lwi	r6, r19, 16
9001ded0:	b9f4c204 	brlid	r15, -15868	// 9001a0d4 <_free_r>
9001ded4:	10b70000 	addk	r5, r23, r0
9001ded8:	e8d30034 	lwi	r6, r19, 52
9001dedc:	be26ff44 	bneid	r6, -188		// 9001de20
9001dee0:	30730044 	addik	r3, r19, 68
9001dee4:	b800ff58 	bri	-168		// 9001de3c
9001dee8:	b0009002 	imm	-28670
9001deec:	e8603b60 	lwi	r3, r0, 15200
9001def0:	ea630008 	lwi	r19, r3, 8
9001def4:	b800fee4 	bri	-284		// 9001ddd8
9001def8:	b810ff10 	brid	-240		// 9001de08
9001defc:	32c0ffff 	addik	r22, r0, -1
9001df00:	b0009002 	imm	-28670
9001df04:	e8603b60 	lwi	r3, r0, 15200
9001df08:	ea630004 	lwi	r19, r3, 4
9001df0c:	b800fecc 	bri	-308		// 9001ddd8

9001df10 <fclose>:
9001df10:	10c50000 	addk	r6, r5, r0
9001df14:	b0009002 	imm	-28670
9001df18:	e8a03b60 	lwi	r5, r0, 15200
9001df1c:	3021ffe4 	addik	r1, r1, -28
9001df20:	f9e10000 	swi	r15, r1, 0
9001df24:	b9f4fe58 	brlid	r15, -424	// 9001dd7c <_fclose_r>
9001df28:	80000000 	or	r0, r0, r0
9001df2c:	e9e10000 	lwi	r15, r1, 0
9001df30:	b60f0008 	rtsd	r15, 8
9001df34:	3021001c 	addik	r1, r1, 28

9001df38 <_fstat_r>:
9001df38:	3021ffe0 	addik	r1, r1, -32
9001df3c:	fa61001c 	swi	r19, r1, 28
9001df40:	12650000 	addk	r19, r5, r0
9001df44:	10a60000 	addk	r5, r6, r0
9001df48:	f9e10000 	swi	r15, r1, 0
9001df4c:	b0009003 	imm	-28669
9001df50:	f8004ffc 	swi	r0, r0, 20476
9001df54:	b9f40468 	brlid	r15, 1128	// 9001e3bc <fstat>
9001df58:	10c70000 	addk	r6, r7, r0
9001df5c:	aa43ffff 	xori	r18, r3, -1
9001df60:	bc120014 	beqi	r18, 20		// 9001df74
9001df64:	e9e10000 	lwi	r15, r1, 0
9001df68:	ea61001c 	lwi	r19, r1, 28
9001df6c:	b60f0008 	rtsd	r15, 8
9001df70:	30210020 	addik	r1, r1, 32
9001df74:	b0009003 	imm	-28669
9001df78:	e8804ffc 	lwi	r4, r0, 20476
9001df7c:	bc04ffe8 	beqi	r4, -24		// 9001df64
9001df80:	f893000c 	swi	r4, r19, 12
9001df84:	e9e10000 	lwi	r15, r1, 0
9001df88:	ea61001c 	lwi	r19, r1, 28
9001df8c:	b60f0008 	rtsd	r15, 8
9001df90:	30210020 	addik	r1, r1, 32

9001df94 <_lseek_r>:
9001df94:	3021ffe0 	addik	r1, r1, -32
9001df98:	fa61001c 	swi	r19, r1, 28
9001df9c:	12650000 	addk	r19, r5, r0
9001dfa0:	10a60000 	addk	r5, r6, r0
9001dfa4:	10c70000 	addk	r6, r7, r0
9001dfa8:	f9e10000 	swi	r15, r1, 0
9001dfac:	b0009003 	imm	-28669
9001dfb0:	f8004ffc 	swi	r0, r0, 20476
9001dfb4:	b9f40428 	brlid	r15, 1064	// 9001e3dc <lseek>
9001dfb8:	10e80000 	addk	r7, r8, r0
9001dfbc:	aa43ffff 	xori	r18, r3, -1
9001dfc0:	bc120014 	beqi	r18, 20		// 9001dfd4
9001dfc4:	e9e10000 	lwi	r15, r1, 0
9001dfc8:	ea61001c 	lwi	r19, r1, 28
9001dfcc:	b60f0008 	rtsd	r15, 8
9001dfd0:	30210020 	addik	r1, r1, 32
9001dfd4:	b0009003 	imm	-28669
9001dfd8:	e8804ffc 	lwi	r4, r0, 20476
9001dfdc:	bc04ffe8 	beqi	r4, -24		// 9001dfc4
9001dfe0:	f893000c 	swi	r4, r19, 12
9001dfe4:	e9e10000 	lwi	r15, r1, 0
9001dfe8:	ea61001c 	lwi	r19, r1, 28
9001dfec:	b60f0008 	rtsd	r15, 8
9001dff0:	30210020 	addik	r1, r1, 32

9001dff4 <_read_r>:
9001dff4:	3021ffe0 	addik	r1, r1, -32
9001dff8:	fa61001c 	swi	r19, r1, 28
9001dffc:	12650000 	addk	r19, r5, r0
9001e000:	10a60000 	addk	r5, r6, r0
9001e004:	10c70000 	addk	r6, r7, r0
9001e008:	f9e10000 	swi	r15, r1, 0
9001e00c:	b0009003 	imm	-28669
9001e010:	f8004ffc 	swi	r0, r0, 20476
9001e014:	b9f404ec 	brlid	r15, 1260	// 9001e500 <read>
9001e018:	10e80000 	addk	r7, r8, r0
9001e01c:	aa43ffff 	xori	r18, r3, -1
9001e020:	bc120014 	beqi	r18, 20		// 9001e034
9001e024:	e9e10000 	lwi	r15, r1, 0
9001e028:	ea61001c 	lwi	r19, r1, 28
9001e02c:	b60f0008 	rtsd	r15, 8
9001e030:	30210020 	addik	r1, r1, 32
9001e034:	b0009003 	imm	-28669
9001e038:	e8804ffc 	lwi	r4, r0, 20476
9001e03c:	bc04ffe8 	beqi	r4, -24		// 9001e024
9001e040:	f893000c 	swi	r4, r19, 12
9001e044:	e9e10000 	lwi	r15, r1, 0
9001e048:	ea61001c 	lwi	r19, r1, 28
9001e04c:	b60f0008 	rtsd	r15, 8
9001e050:	30210020 	addik	r1, r1, 32

9001e054 <_wrapup_reent>:
9001e054:	3021ffd4 	addik	r1, r1, -44
9001e058:	fb010028 	swi	r24, r1, 40
9001e05c:	f9e10000 	swi	r15, r1, 0
9001e060:	fa61001c 	swi	r19, r1, 28
9001e064:	fac10020 	swi	r22, r1, 32
9001e068:	fae10024 	swi	r23, r1, 36
9001e06c:	be05006c 	beqid	r5, 108		// 9001e0d8
9001e070:	13050000 	addk	r24, r5, r0
9001e074:	30980048 	addik	r4, r24, 72
9001e078:	eae40004 	lwi	r23, r4, 4
9001e07c:	3077ffff 	addik	r3, r23, -1
9001e080:	be43002c 	bltid	r3, 44		// 9001e0ac
9001e084:	64630402 	bslli	r3, r3, 2
9001e088:	30630008 	addik	r3, r3, 8
9001e08c:	12641800 	addk	r19, r4, r3
9001e090:	12c00000 	addk	r22, r0, r0
9001e094:	e8730000 	lwi	r3, r19, 0
9001e098:	32d60001 	addik	r22, r22, 1
9001e09c:	99fc1800 	brald	r15, r3
9001e0a0:	3273fffc 	addik	r19, r19, -4
9001e0a4:	1657b000 	rsubk	r18, r23, r22
9001e0a8:	bc32ffec 	bnei	r18, -20		// 9001e094
9001e0ac:	e8780028 	lwi	r3, r24, 40
9001e0b0:	bc03000c 	beqi	r3, 12		// 9001e0bc
9001e0b4:	99fc1800 	brald	r15, r3
9001e0b8:	10b80000 	addk	r5, r24, r0
9001e0bc:	e9e10000 	lwi	r15, r1, 0
9001e0c0:	ea61001c 	lwi	r19, r1, 28
9001e0c4:	eac10020 	lwi	r22, r1, 32
9001e0c8:	eae10024 	lwi	r23, r1, 36
9001e0cc:	eb010028 	lwi	r24, r1, 40
9001e0d0:	b60f0008 	rtsd	r15, 8
9001e0d4:	3021002c 	addik	r1, r1, 44
9001e0d8:	b0009002 	imm	-28670
9001e0dc:	eb003b60 	lwi	r24, r0, 15200
9001e0e0:	b810ff98 	brid	-104		// 9001e078
9001e0e4:	30980048 	addik	r4, r24, 72

9001e0e8 <cleanup_glue>:
9001e0e8:	3021ffbc 	addik	r1, r1, -68
9001e0ec:	fac10020 	swi	r22, r1, 32
9001e0f0:	fbc10040 	swi	r30, r1, 64
9001e0f4:	f9e10000 	swi	r15, r1, 0
9001e0f8:	fa61001c 	swi	r19, r1, 28
9001e0fc:	fae10024 	swi	r23, r1, 36
9001e100:	fb010028 	swi	r24, r1, 40
9001e104:	fb21002c 	swi	r25, r1, 44
9001e108:	fb410030 	swi	r26, r1, 48
9001e10c:	fb610034 	swi	r27, r1, 52
9001e110:	fb810038 	swi	r28, r1, 56
9001e114:	fba1003c 	swi	r29, r1, 60
9001e118:	eb060000 	lwi	r24, r6, 0
9001e11c:	13c60000 	addk	r30, r6, r0
9001e120:	be1800b4 	beqid	r24, 180		// 9001e1d4
9001e124:	12c50000 	addk	r22, r5, r0
9001e128:	eb380000 	lwi	r25, r24, 0
9001e12c:	bc19009c 	beqi	r25, 156		// 9001e1c8
9001e130:	eb590000 	lwi	r26, r25, 0
9001e134:	bc1a0088 	beqi	r26, 136		// 9001e1bc
9001e138:	eb9a0000 	lwi	r28, r26, 0
9001e13c:	bc1c0074 	beqi	r28, 116		// 9001e1b0
9001e140:	ebbc0000 	lwi	r29, r28, 0
9001e144:	bc1d0060 	beqi	r29, 96		// 9001e1a4
9001e148:	eb7d0000 	lwi	r27, r29, 0
9001e14c:	bc1b004c 	beqi	r27, 76		// 9001e198
9001e150:	eafb0000 	lwi	r23, r27, 0
9001e154:	bc170038 	beqi	r23, 56		// 9001e18c
9001e158:	ea770000 	lwi	r19, r23, 0
9001e15c:	be130028 	beqid	r19, 40		// 9001e184
9001e160:	10d70000 	addk	r6, r23, r0
9001e164:	e8d30000 	lwi	r6, r19, 0
9001e168:	bc06000c 	beqi	r6, 12		// 9001e174
9001e16c:	b9f4ff7c 	brlid	r15, -132	// 9001e0e8 <cleanup_glue>
9001e170:	80000000 	or	r0, r0, r0
9001e174:	10d30000 	addk	r6, r19, r0
9001e178:	b9f4bf5c 	brlid	r15, -16548	// 9001a0d4 <_free_r>
9001e17c:	10b60000 	addk	r5, r22, r0
9001e180:	10d70000 	addk	r6, r23, r0
9001e184:	b9f4bf50 	brlid	r15, -16560	// 9001a0d4 <_free_r>
9001e188:	10b60000 	addk	r5, r22, r0
9001e18c:	10db0000 	addk	r6, r27, r0
9001e190:	b9f4bf44 	brlid	r15, -16572	// 9001a0d4 <_free_r>
9001e194:	10b60000 	addk	r5, r22, r0
9001e198:	10dd0000 	addk	r6, r29, r0
9001e19c:	b9f4bf38 	brlid	r15, -16584	// 9001a0d4 <_free_r>
9001e1a0:	10b60000 	addk	r5, r22, r0
9001e1a4:	10dc0000 	addk	r6, r28, r0
9001e1a8:	b9f4bf2c 	brlid	r15, -16596	// 9001a0d4 <_free_r>
9001e1ac:	10b60000 	addk	r5, r22, r0
9001e1b0:	10da0000 	addk	r6, r26, r0
9001e1b4:	b9f4bf20 	brlid	r15, -16608	// 9001a0d4 <_free_r>
9001e1b8:	10b60000 	addk	r5, r22, r0
9001e1bc:	10d90000 	addk	r6, r25, r0
9001e1c0:	b9f4bf14 	brlid	r15, -16620	// 9001a0d4 <_free_r>
9001e1c4:	10b60000 	addk	r5, r22, r0
9001e1c8:	10d80000 	addk	r6, r24, r0
9001e1cc:	b9f4bf08 	brlid	r15, -16632	// 9001a0d4 <_free_r>
9001e1d0:	10b60000 	addk	r5, r22, r0
9001e1d4:	10b60000 	addk	r5, r22, r0
9001e1d8:	b9f4befc 	brlid	r15, -16644	// 9001a0d4 <_free_r>
9001e1dc:	10de0000 	addk	r6, r30, r0
9001e1e0:	e9e10000 	lwi	r15, r1, 0
9001e1e4:	ea61001c 	lwi	r19, r1, 28
9001e1e8:	eac10020 	lwi	r22, r1, 32
9001e1ec:	eae10024 	lwi	r23, r1, 36
9001e1f0:	eb010028 	lwi	r24, r1, 40
9001e1f4:	eb21002c 	lwi	r25, r1, 44
9001e1f8:	eb410030 	lwi	r26, r1, 48
9001e1fc:	eb610034 	lwi	r27, r1, 52
9001e200:	eb810038 	lwi	r28, r1, 56
9001e204:	eba1003c 	lwi	r29, r1, 60
9001e208:	ebc10040 	lwi	r30, r1, 64
9001e20c:	b60f0008 	rtsd	r15, 8
9001e210:	30210044 	addik	r1, r1, 68

9001e214 <_reclaim_reent>:
9001e214:	b0009002 	imm	-28670
9001e218:	e8603b60 	lwi	r3, r0, 15200
9001e21c:	3021ffd8 	addik	r1, r1, -40
9001e220:	fa61001c 	swi	r19, r1, 28
9001e224:	f9e10000 	swi	r15, r1, 0
9001e228:	fac10020 	swi	r22, r1, 32
9001e22c:	fae10024 	swi	r23, r1, 36
9001e230:	16451800 	rsubk	r18, r5, r3
9001e234:	be1200d8 	beqid	r18, 216		// 9001e30c
9001e238:	12650000 	addk	r19, r5, r0
9001e23c:	e8850024 	lwi	r4, r5, 36
9001e240:	bc040050 	beqi	r4, 80		// 9001e290
9001e244:	e864000c 	lwi	r3, r4, 12
9001e248:	bc030048 	beqi	r3, 72		// 9001e290
9001e24c:	12e00000 	addk	r23, r0, r0
9001e250:	e864000c 	lwi	r3, r4, 12
9001e254:	c8771800 	lw	r3, r23, r3
9001e258:	bc030020 	beqi	r3, 32		// 9001e278
9001e25c:	10c30000 	addk	r6, r3, r0
9001e260:	eac30000 	lwi	r22, r3, 0
9001e264:	b9f4be70 	brlid	r15, -16784	// 9001a0d4 <_free_r>
9001e268:	10b30000 	addk	r5, r19, r0
9001e26c:	be36fff0 	bneid	r22, -16		// 9001e25c
9001e270:	10760000 	addk	r3, r22, r0
9001e274:	e8930024 	lwi	r4, r19, 36
9001e278:	32f70004 	addik	r23, r23, 4
9001e27c:	aa57003c 	xori	r18, r23, 60
9001e280:	bc32ffd0 	bnei	r18, -48		// 9001e250
9001e284:	e8c4000c 	lwi	r6, r4, 12
9001e288:	b9f4be4c 	brlid	r15, -16820	// 9001a0d4 <_free_r>
9001e28c:	10b30000 	addk	r5, r19, r0
9001e290:	e8d30014 	lwi	r6, r19, 20
9001e294:	bc06000c 	beqi	r6, 12		// 9001e2a0
9001e298:	b9f4be3c 	brlid	r15, -16836	// 9001a0d4 <_free_r>
9001e29c:	10b30000 	addk	r5, r19, r0
9001e2a0:	e8d30024 	lwi	r6, r19, 36
9001e2a4:	bc06000c 	beqi	r6, 12		// 9001e2b0
9001e2a8:	b9f4be2c 	brlid	r15, -16852	// 9001a0d4 <_free_r>
9001e2ac:	10b30000 	addk	r5, r19, r0
9001e2b0:	e8d30038 	lwi	r6, r19, 56
9001e2b4:	bc06000c 	beqi	r6, 12		// 9001e2c0
9001e2b8:	b9f4be1c 	brlid	r15, -16868	// 9001a0d4 <_free_r>
9001e2bc:	10b30000 	addk	r5, r19, r0
9001e2c0:	e8d3003c 	lwi	r6, r19, 60
9001e2c4:	bc06000c 	beqi	r6, 12		// 9001e2d0
9001e2c8:	b9f4be0c 	brlid	r15, -16884	// 9001a0d4 <_free_r>
9001e2cc:	10b30000 	addk	r5, r19, r0
9001e2d0:	e8d30040 	lwi	r6, r19, 64
9001e2d4:	bc06000c 	beqi	r6, 12		// 9001e2e0
9001e2d8:	b9f4bdfc 	brlid	r15, -16900	// 9001a0d4 <_free_r>
9001e2dc:	10b30000 	addk	r5, r19, r0
9001e2e0:	e8730048 	lwi	r3, r19, 72
9001e2e4:	e8c30088 	lwi	r6, r3, 136
9001e2e8:	bc06000c 	beqi	r6, 12		// 9001e2f4
9001e2ec:	b9f4bde8 	brlid	r15, -16920	// 9001a0d4 <_free_r>
9001e2f0:	10b30000 	addk	r5, r19, r0
9001e2f4:	e8d30034 	lwi	r6, r19, 52
9001e2f8:	bc06000c 	beqi	r6, 12		// 9001e304
9001e2fc:	b9f4bdd8 	brlid	r15, -16936	// 9001a0d4 <_free_r>
9001e300:	10b30000 	addk	r5, r19, r0
9001e304:	e8730018 	lwi	r3, r19, 24
9001e308:	bc23001c 	bnei	r3, 28		// 9001e324
9001e30c:	e9e10000 	lwi	r15, r1, 0
9001e310:	ea61001c 	lwi	r19, r1, 28
9001e314:	eac10020 	lwi	r22, r1, 32
9001e318:	eae10024 	lwi	r23, r1, 36
9001e31c:	b60f0008 	rtsd	r15, 8
9001e320:	30210028 	addik	r1, r1, 40
9001e324:	e8730028 	lwi	r3, r19, 40
9001e328:	99fc1800 	brald	r15, r3
9001e32c:	10b30000 	addk	r5, r19, r0
9001e330:	ead300d8 	lwi	r22, r19, 216
9001e334:	bc16ffd8 	beqi	r22, -40		// 9001e30c
9001e338:	e8d60000 	lwi	r6, r22, 0
9001e33c:	bc06000c 	beqi	r6, 12		// 9001e348
9001e340:	b9f4fda8 	brlid	r15, -600	// 9001e0e8 <cleanup_glue>
9001e344:	10b30000 	addk	r5, r19, r0
9001e348:	10b30000 	addk	r5, r19, r0
9001e34c:	b9f4bd88 	brlid	r15, -17016	// 9001a0d4 <_free_r>
9001e350:	10d60000 	addk	r6, r22, r0
9001e354:	b800ffb8 	bri	-72		// 9001e30c

9001e358 <isinf>:
9001e358:	11050000 	addk	r8, r5, r0
9001e35c:	14660000 	rsubk	r3, r6, r0
9001e360:	80633000 	or	r3, r3, r6
9001e364:	6463001f 	bsrli	r3, r3, 31
9001e368:	b0007fff 	imm	32767
9001e36c:	a488ffff 	andi	r4, r8, -1
9001e370:	80632000 	or	r3, r3, r4
9001e374:	b0007ff0 	imm	32752
9001e378:	34630000 	rsubik	r3, r3, 0
9001e37c:	14830000 	rsubk	r4, r3, r0
9001e380:	80632000 	or	r3, r3, r4
9001e384:	6463001f 	bsrli	r3, r3, 31
9001e388:	b60f0008 	rtsd	r15, 8
9001e38c:	34630001 	rsubik	r3, r3, 1

9001e390 <isnan>:
9001e390:	11050000 	addk	r8, r5, r0
9001e394:	14660000 	rsubk	r3, r6, r0
9001e398:	80633000 	or	r3, r3, r6
9001e39c:	6463001f 	bsrli	r3, r3, 31
9001e3a0:	b0007fff 	imm	32767
9001e3a4:	a488ffff 	andi	r4, r8, -1
9001e3a8:	80632000 	or	r3, r3, r4
9001e3ac:	b0007ff0 	imm	32752
9001e3b0:	34630000 	rsubik	r3, r3, 0
9001e3b4:	b60f0008 	rtsd	r15, 8
9001e3b8:	6463001f 	bsrli	r3, r3, 31

9001e3bc <fstat>:
9001e3bc:	10600000 	addk	r3, r0, r0
9001e3c0:	30802000 	addik	r4, r0, 8192
9001e3c4:	f8860004 	swi	r4, r6, 4
9001e3c8:	f866002c 	swi	r3, r6, 44
9001e3cc:	b60f0008 	rtsd	r15, 8
9001e3d0:	80000000 	or	r0, r0, r0

9001e3d4 <isatty>:
9001e3d4:	b60f0008 	rtsd	r15, 8
9001e3d8:	30600001 	addik	r3, r0, 1

9001e3dc <lseek>:
9001e3dc:	3021ffe4 	addik	r1, r1, -28
9001e3e0:	f9e10000 	swi	r15, r1, 0
9001e3e4:	b9f40198 	brlid	r15, 408	// 9001e57c <__errno>
9001e3e8:	80000000 	or	r0, r0, r0
9001e3ec:	3080001d 	addik	r4, r0, 29
9001e3f0:	f8830000 	swi	r4, r3, 0
9001e3f4:	e9e10000 	lwi	r15, r1, 0
9001e3f8:	3060ffff 	addik	r3, r0, -1
9001e3fc:	b60f0008 	rtsd	r15, 8
9001e400:	3021001c 	addik	r1, r1, 28

9001e404 <sbrk>:
9001e404:	b0009002 	imm	-28670
9001e408:	e860fe18 	lwi	r3, r0, -488
9001e40c:	3021ffe4 	addik	r1, r1, -28
9001e410:	f9e10000 	swi	r15, r1, 0
9001e414:	bc03004c 	beqi	r3, 76		// 9001e460
9001e418:	10830000 	addk	r4, r3, r0
9001e41c:	10632800 	addk	r3, r3, r5
9001e420:	b0009002 	imm	-28670
9001e424:	f860fe18 	swi	r3, r0, -488
9001e428:	b0009003 	imm	-28669
9001e42c:	22409001 	addi	r18, r0, -28671
9001e430:	16439003 	cmpu	r18, r3, r18
9001e434:	beb20020 	bgeid	r18, 32		// 9001e454
9001e438:	10640000 	addk	r3, r4, r0
9001e43c:	b9f40140 	brlid	r15, 320	// 9001e57c <__errno>
9001e440:	80000000 	or	r0, r0, r0
9001e444:	3080000c 	addik	r4, r0, 12
9001e448:	f8830000 	swi	r4, r3, 0
9001e44c:	3080ffff 	addik	r4, r0, -1
9001e450:	10640000 	addk	r3, r4, r0
9001e454:	e9e10000 	lwi	r15, r1, 0
9001e458:	b60f0008 	rtsd	r15, 8
9001e45c:	3021001c 	addik	r1, r1, 28
9001e460:	b0009003 	imm	-28669
9001e464:	30605000 	addik	r3, r0, 20480
9001e468:	b0009002 	imm	-28670
9001e46c:	f860fe18 	swi	r3, r0, -488
9001e470:	b810ffac 	brid	-84		// 9001e41c
9001e474:	10830000 	addk	r4, r3, r0

9001e478 <write>:
9001e478:	3021ffd8 	addik	r1, r1, -40
9001e47c:	fac10020 	swi	r22, r1, 32
9001e480:	fae10024 	swi	r23, r1, 36
9001e484:	f9e10000 	swi	r15, r1, 0
9001e488:	fa61001c 	swi	r19, r1, 28
9001e48c:	12c70000 	addk	r22, r7, r0
9001e490:	be670054 	bleid	r7, 84		// 9001e4e4
9001e494:	12e60000 	addk	r23, r6, r0
9001e498:	b8100024 	brid	36		// 9001e4bc
9001e49c:	12600000 	addk	r19, r0, r0
9001e4a0:	10a30000 	addk	r5, r3, r0
9001e4a4:	b000ffff 	imm	-1
9001e4a8:	b9f43d6c 	brlid	r15, 15724	// 90012214 <outbyte>
9001e4ac:	32730001 	addik	r19, r19, 1
9001e4b0:	1653b000 	rsubk	r18, r19, r22
9001e4b4:	be120034 	beqid	r18, 52		// 9001e4e8
9001e4b8:	10760000 	addk	r3, r22, r0
9001e4bc:	c0779800 	lbu	r3, r23, r19
9001e4c0:	aa43000a 	xori	r18, r3, 10
9001e4c4:	be32ffdc 	bneid	r18, -36		// 9001e4a0
9001e4c8:	30a0000d 	addik	r5, r0, 13
9001e4cc:	b000ffff 	imm	-1
9001e4d0:	b9f43d44 	brlid	r15, 15684	// 90012214 <outbyte>
9001e4d4:	80000000 	or	r0, r0, r0
9001e4d8:	c0779800 	lbu	r3, r23, r19
9001e4dc:	b810ffc8 	brid	-56		// 9001e4a4
9001e4e0:	10a30000 	addk	r5, r3, r0
9001e4e4:	10760000 	addk	r3, r22, r0
9001e4e8:	e9e10000 	lwi	r15, r1, 0
9001e4ec:	ea61001c 	lwi	r19, r1, 28
9001e4f0:	eac10020 	lwi	r22, r1, 32
9001e4f4:	eae10024 	lwi	r23, r1, 36
9001e4f8:	b60f0008 	rtsd	r15, 8
9001e4fc:	30210028 	addik	r1, r1, 40

9001e500 <read>:
9001e500:	3021ffd8 	addik	r1, r1, -40
9001e504:	fac10020 	swi	r22, r1, 32
9001e508:	fae10024 	swi	r23, r1, 36
9001e50c:	f9e10000 	swi	r15, r1, 0
9001e510:	fa61001c 	swi	r19, r1, 28
9001e514:	12e70000 	addk	r23, r7, r0
9001e518:	12c60000 	addk	r22, r6, r0
9001e51c:	be670040 	bleid	r7, 64		// 9001e55c
9001e520:	30600001 	addik	r3, r0, 1
9001e524:	12600000 	addk	r19, r0, r0
9001e528:	b000ffff 	imm	-1
9001e52c:	b9f43b24 	brlid	r15, 15140	// 90012050 <inbyte>
9001e530:	80000000 	or	r0, r0, r0
9001e534:	d0769800 	sb	r3, r22, r19
9001e538:	aa43000a 	xori	r18, r3, 10
9001e53c:	bc12001c 	beqi	r18, 28		// 9001e558
9001e540:	aa43000d 	xori	r18, r3, 13
9001e544:	be120018 	beqid	r18, 24		// 9001e55c
9001e548:	30730001 	addik	r3, r19, 1
9001e54c:	32730001 	addik	r19, r19, 1
9001e550:	1653b800 	rsubk	r18, r19, r23
9001e554:	bc32ffd4 	bnei	r18, -44		// 9001e528
9001e558:	30730001 	addik	r3, r19, 1
9001e55c:	e9e10000 	lwi	r15, r1, 0
9001e560:	ea61001c 	lwi	r19, r1, 28
9001e564:	eac10020 	lwi	r22, r1, 32
9001e568:	eae10024 	lwi	r23, r1, 36
9001e56c:	b60f0008 	rtsd	r15, 8
9001e570:	30210028 	addik	r1, r1, 40

9001e574 <close>:
9001e574:	b60f0008 	rtsd	r15, 8
9001e578:	10600000 	addk	r3, r0, r0

9001e57c <__errno>:
9001e57c:	b0009002 	imm	-28670
9001e580:	e8603b60 	lwi	r3, r0, 15200
9001e584:	b60f0008 	rtsd	r15, 8
9001e588:	3063000c 	addik	r3, r3, 12

9001e58c <__umoddi3>:
9001e58c:	10850000 	addk	r4, r5, r0
9001e590:	11280000 	addk	r9, r8, r0
9001e594:	10a60000 	addk	r5, r6, r0
9001e598:	3021ffb0 	addik	r1, r1, -80
9001e59c:	fa610024 	swi	r19, r1, 36
9001e5a0:	fae1002c 	swi	r23, r1, 44
9001e5a4:	fb210034 	swi	r25, r1, 52
9001e5a8:	f9e10000 	swi	r15, r1, 0
9001e5ac:	fac10028 	swi	r22, r1, 40
9001e5b0:	fb010030 	swi	r24, r1, 48
9001e5b4:	fb410038 	swi	r26, r1, 56
9001e5b8:	fb61003c 	swi	r27, r1, 60
9001e5bc:	fb810040 	swi	r28, r1, 64
9001e5c0:	fba10044 	swi	r29, r1, 68
9001e5c4:	fbc10048 	swi	r30, r1, 72
9001e5c8:	fbe1004c 	swi	r31, r1, 76
9001e5cc:	10c90000 	addk	r6, r9, r0
9001e5d0:	12690000 	addk	r19, r9, r0
9001e5d4:	13250000 	addk	r25, r5, r0
9001e5d8:	be2700dc 	bneid	r7, 220		// 9001e6b4
9001e5dc:	12e40000 	addk	r23, r4, r0
9001e5e0:	16492003 	cmpu	r18, r9, r4
9001e5e4:	bc520188 	blti	r18, 392		// 9001e76c
9001e5e8:	bc0902b8 	beqi	r9, 696		// 9001e8a0
9001e5ec:	b0000000 	imm	0
9001e5f0:	2240ffff 	addi	r18, r0, -1
9001e5f4:	16539003 	cmpu	r18, r19, r18
9001e5f8:	bc52028c 	blti	r18, 652		// 9001e884
9001e5fc:	224000ff 	addi	r18, r0, 255
9001e600:	16539003 	cmpu	r18, r19, r18
9001e604:	be5205b4 	bltid	r18, 1460		// 9001ebb8
9001e608:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
9001e60c:	10a00000 	addk	r5, r0, r0
9001e610:	10650000 	addk	r3, r5, r0
9001e614:	44931800 	bsrl	r4, r19, r3
9001e618:	b0009002 	imm	-28670
9001e61c:	e0642e7c 	lbui	r3, r4, 11900
9001e620:	10651800 	addk	r3, r5, r3
9001e624:	37a30020 	rsubik	r29, r3, 32
9001e628:	be3d0480 	bneid	r29, 1152		// 9001eaa8
9001e62c:	4497ec00 	bsll	r4, r23, r29
9001e630:	139d0000 	addk	r28, r29, r0
9001e634:	67130010 	bsrli	r24, r19, 16
9001e638:	16d3b800 	rsubk	r22, r19, r23
9001e63c:	b0000000 	imm	0
9001e640:	a6f3ffff 	andi	r23, r19, -1
9001e644:	10b60000 	addk	r5, r22, r0
9001e648:	b000ffff 	imm	-1
9001e64c:	b9f43940 	brlid	r15, 14656	// 90011f8c <__udivsi3>
9001e650:	10d80000 	addk	r6, r24, r0
9001e654:	10b60000 	addk	r5, r22, r0
9001e658:	10d80000 	addk	r6, r24, r0
9001e65c:	b000ffff 	imm	-1
9001e660:	b9f43870 	brlid	r15, 14448	// 90011ed0 <__umodsi3>
9001e664:	42d71800 	mul	r22, r23, r3
9001e668:	64630410 	bslli	r3, r3, 16
9001e66c:	64990010 	bsrli	r4, r25, 16
9001e670:	80632000 	or	r3, r3, r4
9001e674:	16561803 	cmpu	r18, r22, r3
9001e678:	bcb20018 	bgei	r18, 24		// 9001e690
9001e67c:	10639800 	addk	r3, r3, r19
9001e680:	16531803 	cmpu	r18, r19, r3
9001e684:	bc52000c 	blti	r18, 12		// 9001e690
9001e688:	16561803 	cmpu	r18, r22, r3
9001e68c:	bc52056c 	blti	r18, 1388		// 9001ebf8
9001e690:	16d61800 	rsubk	r22, r22, r3
9001e694:	10b60000 	addk	r5, r22, r0
9001e698:	b000ffff 	imm	-1
9001e69c:	b9f438f0 	brlid	r15, 14576	// 90011f8c <__udivsi3>
9001e6a0:	10d80000 	addk	r6, r24, r0
9001e6a4:	10b60000 	addk	r5, r22, r0
9001e6a8:	10d80000 	addk	r6, r24, r0
9001e6ac:	b810018c 	brid	396		// 9001e838
9001e6b0:	42d71800 	mul	r22, r23, r3
9001e6b4:	16472003 	cmpu	r18, r7, r4
9001e6b8:	beb2004c 	bgeid	r18, 76		// 9001e704
9001e6bc:	13650000 	addk	r27, r5, r0
9001e6c0:	13440000 	addk	r26, r4, r0
9001e6c4:	107a0000 	addk	r3, r26, r0
9001e6c8:	109b0000 	addk	r4, r27, r0
9001e6cc:	e9e10000 	lwi	r15, r1, 0
9001e6d0:	ea610024 	lwi	r19, r1, 36
9001e6d4:	eac10028 	lwi	r22, r1, 40
9001e6d8:	eae1002c 	lwi	r23, r1, 44
9001e6dc:	eb010030 	lwi	r24, r1, 48
9001e6e0:	eb210034 	lwi	r25, r1, 52
9001e6e4:	eb410038 	lwi	r26, r1, 56
9001e6e8:	eb61003c 	lwi	r27, r1, 60
9001e6ec:	eb810040 	lwi	r28, r1, 64
9001e6f0:	eba10044 	lwi	r29, r1, 68
9001e6f4:	ebc10048 	lwi	r30, r1, 72
9001e6f8:	ebe1004c 	lwi	r31, r1, 76
9001e6fc:	b60f0008 	rtsd	r15, 8
9001e700:	30210050 	addik	r1, r1, 80
9001e704:	b0000000 	imm	0
9001e708:	2240ffff 	addi	r18, r0, -1
9001e70c:	16479003 	cmpu	r18, r7, r18
9001e710:	bc5201d0 	blti	r18, 464		// 9001e8e0
9001e714:	224000ff 	addi	r18, r0, 255
9001e718:	16479003 	cmpu	r18, r7, r18
9001e71c:	be5204a4 	bltid	r18, 1188		// 9001ebc0
9001e720:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
9001e724:	10a00000 	addk	r5, r0, r0
9001e728:	10650000 	addk	r3, r5, r0
9001e72c:	44871800 	bsrl	r4, r7, r3
9001e730:	b0009002 	imm	-28670
9001e734:	e0642e7c 	lbui	r3, r4, 11900
9001e738:	10651800 	addk	r3, r5, r3
9001e73c:	37030020 	rsubik	r24, r3, 32
9001e740:	be3801d8 	bneid	r24, 472		// 9001e918
9001e744:	37d80020 	rsubik	r30, r24, 32
9001e748:	16573803 	cmpu	r18, r23, r7
9001e74c:	be5201b0 	bltid	r18, 432		// 9001e8fc
9001e750:	1473c800 	rsubk	r3, r19, r25
9001e754:	1653c803 	cmpu	r18, r19, r25
9001e758:	beb201a8 	bgeid	r18, 424		// 9001e900
9001e75c:	1487b800 	rsubk	r4, r7, r23
9001e760:	13790000 	addk	r27, r25, r0
9001e764:	b810ff60 	brid	-160		// 9001e6c4
9001e768:	13570000 	addk	r26, r23, r0
9001e76c:	b0000000 	imm	0
9001e770:	2240ffff 	addi	r18, r0, -1
9001e774:	16499003 	cmpu	r18, r9, r18
9001e778:	bc52014c 	blti	r18, 332		// 9001e8c4
9001e77c:	224000ff 	addi	r18, r0, 255
9001e780:	16499003 	cmpu	r18, r9, r18
9001e784:	bc520444 	blti	r18, 1092		// 9001ebc8
9001e788:	10670000 	addk	r3, r7, r0
9001e78c:	44931800 	bsrl	r4, r19, r3
9001e790:	b0009002 	imm	-28670
9001e794:	e0642e7c 	lbui	r3, r4, 11900
9001e798:	10671800 	addk	r3, r7, r3
9001e79c:	34630020 	rsubik	r3, r3, 32
9001e7a0:	be030020 	beqid	r3, 32		// 9001e7c0
9001e7a4:	13830000 	addk	r28, r3, r0
9001e7a8:	34630020 	rsubik	r3, r3, 32
9001e7ac:	44791800 	bsrl	r3, r25, r3
9001e7b0:	4497e400 	bsll	r4, r23, r28
9001e7b4:	4673e400 	bsll	r19, r19, r28
9001e7b8:	4739e400 	bsll	r25, r25, r28
9001e7bc:	82e41800 	or	r23, r4, r3
9001e7c0:	67130010 	bsrli	r24, r19, 16
9001e7c4:	10b70000 	addk	r5, r23, r0
9001e7c8:	b0000000 	imm	0
9001e7cc:	a7b3ffff 	andi	r29, r19, -1
9001e7d0:	b000ffff 	imm	-1
9001e7d4:	b9f437b8 	brlid	r15, 14264	// 90011f8c <__udivsi3>
9001e7d8:	10d80000 	addk	r6, r24, r0
9001e7dc:	10b70000 	addk	r5, r23, r0
9001e7e0:	10d80000 	addk	r6, r24, r0
9001e7e4:	b000ffff 	imm	-1
9001e7e8:	b9f436e8 	brlid	r15, 14056	// 90011ed0 <__umodsi3>
9001e7ec:	42dd1800 	mul	r22, r29, r3
9001e7f0:	64630410 	bslli	r3, r3, 16
9001e7f4:	64990010 	bsrli	r4, r25, 16
9001e7f8:	80632000 	or	r3, r3, r4
9001e7fc:	16561803 	cmpu	r18, r22, r3
9001e800:	bcb20018 	bgei	r18, 24		// 9001e818
9001e804:	10639800 	addk	r3, r3, r19
9001e808:	16531803 	cmpu	r18, r19, r3
9001e80c:	bc52000c 	blti	r18, 12		// 9001e818
9001e810:	16561803 	cmpu	r18, r22, r3
9001e814:	bc5203dc 	blti	r18, 988		// 9001ebf0
9001e818:	16d61800 	rsubk	r22, r22, r3
9001e81c:	10b60000 	addk	r5, r22, r0
9001e820:	b000ffff 	imm	-1
9001e824:	b9f43768 	brlid	r15, 14184	// 90011f8c <__udivsi3>
9001e828:	10d80000 	addk	r6, r24, r0
9001e82c:	10b60000 	addk	r5, r22, r0
9001e830:	10d80000 	addk	r6, r24, r0
9001e834:	42dd1800 	mul	r22, r29, r3
9001e838:	b000ffff 	imm	-1
9001e83c:	b9f43694 	brlid	r15, 13972	// 90011ed0 <__umodsi3>
9001e840:	80000000 	or	r0, r0, r0
9001e844:	64630410 	bslli	r3, r3, 16
9001e848:	b0000000 	imm	0
9001e84c:	a499ffff 	andi	r4, r25, -1
9001e850:	80632000 	or	r3, r3, r4
9001e854:	16561803 	cmpu	r18, r22, r3
9001e858:	bcb2001c 	bgei	r18, 28		// 9001e874
9001e85c:	10639800 	addk	r3, r3, r19
9001e860:	16531803 	cmpu	r18, r19, r3
9001e864:	bc520010 	blti	r18, 16		// 9001e874
9001e868:	16561803 	cmpu	r18, r22, r3
9001e86c:	bcb20008 	bgei	r18, 8		// 9001e874
9001e870:	10639800 	addk	r3, r3, r19
9001e874:	14761800 	rsubk	r3, r22, r3
9001e878:	4763e000 	bsrl	r27, r3, r28
9001e87c:	b810fe48 	brid	-440		// 9001e6c4
9001e880:	13400000 	addk	r26, r0, r0
9001e884:	b00000ff 	imm	255
9001e888:	2240ffff 	addi	r18, r0, -1
9001e88c:	16539003 	cmpu	r18, r19, r18
9001e890:	bc52031c 	blti	r18, 796		// 9001ebac
9001e894:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001e898:	b810fd7c 	brid	-644		// 9001e614
9001e89c:	10650000 	addk	r3, r5, r0
9001e8a0:	b000ffff 	imm	-1
9001e8a4:	b9f436e8 	brlid	r15, 14056	// 90011f8c <__udivsi3>
9001e8a8:	30a00001 	addik	r5, r0, 1
9001e8ac:	12630000 	addk	r19, r3, r0
9001e8b0:	b0000000 	imm	0
9001e8b4:	2240ffff 	addi	r18, r0, -1
9001e8b8:	16539003 	cmpu	r18, r19, r18
9001e8bc:	bc52ffc8 	blti	r18, -56		// 9001e884
9001e8c0:	b800fd3c 	bri	-708		// 9001e5fc
9001e8c4:	b00000ff 	imm	255
9001e8c8:	2240ffff 	addi	r18, r0, -1
9001e8cc:	16499003 	cmpu	r18, r9, r18
9001e8d0:	bc5202d0 	blti	r18, 720		// 9001eba0
9001e8d4:	30e00010 	addik	r7, r0, 16	// 10 <_vector_interrupt>
9001e8d8:	b810feb4 	brid	-332		// 9001e78c
9001e8dc:	10670000 	addk	r3, r7, r0
9001e8e0:	b00000ff 	imm	255
9001e8e4:	2240ffff 	addi	r18, r0, -1
9001e8e8:	16479003 	cmpu	r18, r7, r18
9001e8ec:	bc5202e8 	blti	r18, 744		// 9001ebd4
9001e8f0:	30a00010 	addik	r5, r0, 16	// 10 <_vector_interrupt>
9001e8f4:	b810fe38 	brid	-456		// 9001e72c
9001e8f8:	10650000 	addk	r3, r5, r0
9001e8fc:	1487b800 	rsubk	r4, r7, r23
9001e900:	1643c803 	cmpu	r18, r3, r25
9001e904:	be5202dc 	bltid	r18, 732		// 9001ebe0
9001e908:	10a00000 	addk	r5, r0, r0
9001e90c:	13230000 	addk	r25, r3, r0
9001e910:	b810fe50 	brid	-432		// 9001e760
9001e914:	16e52000 	rsubk	r23, r5, r4
9001e918:	4487c400 	bsll	r4, r7, r24
9001e91c:	4473f000 	bsrl	r3, r19, r30
9001e920:	44f9f000 	bsrl	r7, r25, r30
9001e924:	4739c400 	bsll	r25, r25, r24
9001e928:	46d7f000 	bsrl	r22, r23, r30
9001e92c:	4517c400 	bsll	r8, r23, r24
9001e930:	47f3c400 	bsll	r31, r19, r24
9001e934:	fb21001c 	swi	r25, r1, 28
9001e938:	83241800 	or	r25, r4, r3
9001e93c:	66f90010 	bsrli	r23, r25, 16
9001e940:	10b60000 	addk	r5, r22, r0
9001e944:	81083800 	or	r8, r8, r7
9001e948:	f9010020 	swi	r8, r1, 32
9001e94c:	b000ffff 	imm	-1
9001e950:	b9f4363c 	brlid	r15, 13884	// 90011f8c <__udivsi3>
9001e954:	10d70000 	addk	r6, r23, r0
9001e958:	10b60000 	addk	r5, r22, r0
9001e95c:	10d70000 	addk	r6, r23, r0
9001e960:	b0000000 	imm	0
9001e964:	a7b9ffff 	andi	r29, r25, -1
9001e968:	13830000 	addk	r28, r3, r0
9001e96c:	b000ffff 	imm	-1
9001e970:	b9f43560 	brlid	r15, 13664	// 90011ed0 <__umodsi3>
9001e974:	42dd1800 	mul	r22, r29, r3
9001e978:	64630410 	bslli	r3, r3, 16
9001e97c:	e8a10020 	lwi	r5, r1, 32
9001e980:	64850010 	bsrli	r4, r5, 16
9001e984:	80632000 	or	r3, r3, r4
9001e988:	16561803 	cmpu	r18, r22, r3
9001e98c:	bcb20014 	bgei	r18, 20		// 9001e9a0
9001e990:	1063c800 	addk	r3, r3, r25
9001e994:	16591803 	cmpu	r18, r25, r3
9001e998:	beb20290 	bgeid	r18, 656		// 9001ec28
9001e99c:	339cffff 	addik	r28, r28, -1
9001e9a0:	16d61800 	rsubk	r22, r22, r3
9001e9a4:	10b60000 	addk	r5, r22, r0
9001e9a8:	b000ffff 	imm	-1
9001e9ac:	b9f435e0 	brlid	r15, 13792	// 90011f8c <__udivsi3>
9001e9b0:	10d70000 	addk	r6, r23, r0
9001e9b4:	10b60000 	addk	r5, r22, r0
9001e9b8:	10d70000 	addk	r6, r23, r0
9001e9bc:	12630000 	addk	r19, r3, r0
9001e9c0:	b000ffff 	imm	-1
9001e9c4:	b9f4350c 	brlid	r15, 13580	// 90011ed0 <__umodsi3>
9001e9c8:	42dd1800 	mul	r22, r29, r3
9001e9cc:	64630410 	bslli	r3, r3, 16
9001e9d0:	e8a10020 	lwi	r5, r1, 32
9001e9d4:	b0000000 	imm	0
9001e9d8:	a485ffff 	andi	r4, r5, -1
9001e9dc:	80a32000 	or	r5, r3, r4
9001e9e0:	16562803 	cmpu	r18, r22, r5
9001e9e4:	beb2001c 	bgeid	r18, 28		// 9001ea00
9001e9e8:	647c0410 	bslli	r3, r28, 16
9001e9ec:	10a5c800 	addk	r5, r5, r25
9001e9f0:	16592803 	cmpu	r18, r25, r5
9001e9f4:	beb2021c 	bgeid	r18, 540		// 9001ec10
9001e9f8:	3273ffff 	addik	r19, r19, -1
9001e9fc:	647c0410 	bslli	r3, r28, 16
9001ea00:	64ff0010 	bsrli	r7, r31, 16
9001ea04:	80731800 	or	r3, r19, r3
9001ea08:	64c30010 	bsrli	r6, r3, 16
9001ea0c:	b0000000 	imm	0
9001ea10:	a49fffff 	andi	r4, r31, -1
9001ea14:	b0000000 	imm	0
9001ea18:	a463ffff 	andi	r3, r3, -1
9001ea1c:	41232000 	mul	r9, r3, r4
9001ea20:	15162800 	rsubk	r8, r22, r5
9001ea24:	40862000 	mul	r4, r6, r4
9001ea28:	40633800 	mul	r3, r3, r7
9001ea2c:	64a90010 	bsrli	r5, r9, 16
9001ea30:	10632000 	addk	r3, r3, r4
9001ea34:	10a51800 	addk	r5, r5, r3
9001ea38:	16442803 	cmpu	r18, r4, r5
9001ea3c:	beb20010 	bgeid	r18, 16		// 9001ea4c
9001ea40:	40c63800 	mul	r6, r6, r7
9001ea44:	b0000001 	imm	1
9001ea48:	30c60000 	addik	r6, r6, 0
9001ea4c:	64650010 	bsrli	r3, r5, 16
9001ea50:	64a50410 	bslli	r5, r5, 16
9001ea54:	b0000000 	imm	0
9001ea58:	a489ffff 	andi	r4, r9, -1
9001ea5c:	10661800 	addk	r3, r6, r3
9001ea60:	16434003 	cmpu	r18, r3, r8
9001ea64:	be52011c 	bltid	r18, 284		// 9001eb80
9001ea68:	10852000 	addk	r4, r5, r4
9001ea6c:	16434000 	rsubk	r18, r3, r8
9001ea70:	bc120104 	beqi	r18, 260		// 9001eb74
9001ea74:	e8a1001c 	lwi	r5, r1, 28
9001ea78:	14634000 	rsubk	r3, r3, r8
9001ea7c:	15242800 	rsubk	r9, r4, r5
9001ea80:	16492803 	cmpu	r18, r9, r5
9001ea84:	beb2000c 	bgeid	r18, 12		// 9001ea90
9001ea88:	10800000 	addk	r4, r0, r0
9001ea8c:	30800001 	addik	r4, r0, 1
9001ea90:	14a41800 	rsubk	r5, r4, r3
9001ea94:	4485f400 	bsll	r4, r5, r30
9001ea98:	4469c000 	bsrl	r3, r9, r24
9001ea9c:	4745c000 	bsrl	r26, r5, r24
9001eaa0:	b810fc24 	brid	-988		// 9001e6c4
9001eaa4:	83641800 	or	r27, r4, r3
9001eaa8:	4673ec00 	bsll	r19, r19, r29
9001eaac:	67130010 	bsrli	r24, r19, 16
9001eab0:	347d0020 	rsubik	r3, r29, 32
9001eab4:	46d71800 	bsrl	r22, r23, r3
9001eab8:	44791800 	bsrl	r3, r25, r3
9001eabc:	10b60000 	addk	r5, r22, r0
9001eac0:	10d80000 	addk	r6, r24, r0
9001eac4:	b0000000 	imm	0
9001eac8:	a6f3ffff 	andi	r23, r19, -1
9001eacc:	b000ffff 	imm	-1
9001ead0:	b9f434bc 	brlid	r15, 13500	// 90011f8c <__udivsi3>
9001ead4:	83c41800 	or	r30, r4, r3
9001ead8:	10b60000 	addk	r5, r22, r0
9001eadc:	10d80000 	addk	r6, r24, r0
9001eae0:	42d71800 	mul	r22, r23, r3
9001eae4:	b000ffff 	imm	-1
9001eae8:	b9f433e8 	brlid	r15, 13288	// 90011ed0 <__umodsi3>
9001eaec:	139d0000 	addk	r28, r29, r0
9001eaf0:	64630410 	bslli	r3, r3, 16
9001eaf4:	649e0010 	bsrli	r4, r30, 16
9001eaf8:	80632000 	or	r3, r3, r4
9001eafc:	16561803 	cmpu	r18, r22, r3
9001eb00:	bcb20010 	bgei	r18, 16		// 9001eb10
9001eb04:	10639800 	addk	r3, r3, r19
9001eb08:	16531803 	cmpu	r18, r19, r3
9001eb0c:	bcb200f4 	bgei	r18, 244		// 9001ec00
9001eb10:	16d61800 	rsubk	r22, r22, r3
9001eb14:	10b60000 	addk	r5, r22, r0
9001eb18:	b000ffff 	imm	-1
9001eb1c:	b9f43470 	brlid	r15, 13424	// 90011f8c <__udivsi3>
9001eb20:	10d80000 	addk	r6, r24, r0
9001eb24:	10b60000 	addk	r5, r22, r0
9001eb28:	10d80000 	addk	r6, r24, r0
9001eb2c:	b000ffff 	imm	-1
9001eb30:	b9f433a0 	brlid	r15, 13216	// 90011ed0 <__umodsi3>
9001eb34:	42d71800 	mul	r22, r23, r3
9001eb38:	64630410 	bslli	r3, r3, 16
9001eb3c:	b0000000 	imm	0
9001eb40:	a49effff 	andi	r4, r30, -1
9001eb44:	80632000 	or	r3, r3, r4
9001eb48:	16561803 	cmpu	r18, r22, r3
9001eb4c:	bcb2001c 	bgei	r18, 28		// 9001eb68
9001eb50:	10639800 	addk	r3, r3, r19
9001eb54:	16531803 	cmpu	r18, r19, r3
9001eb58:	bc520010 	blti	r18, 16		// 9001eb68
9001eb5c:	16561803 	cmpu	r18, r22, r3
9001eb60:	bcb20008 	bgei	r18, 8		// 9001eb68
9001eb64:	10639800 	addk	r3, r3, r19
9001eb68:	4739ec00 	bsll	r25, r25, r29
9001eb6c:	b810fad8 	brid	-1320		// 9001e644
9001eb70:	16d61800 	rsubk	r22, r22, r3
9001eb74:	e8a1001c 	lwi	r5, r1, 28
9001eb78:	16442803 	cmpu	r18, r4, r5
9001eb7c:	bcb2fefc 	bgei	r18, -260		// 9001ea78
9001eb80:	14ff2000 	rsubk	r7, r31, r4
9001eb84:	14791800 	rsubk	r3, r25, r3
9001eb88:	16472003 	cmpu	r18, r7, r4
9001eb8c:	be52005c 	bltid	r18, 92		// 9001ebe8
9001eb90:	10a00000 	addk	r5, r0, r0
9001eb94:	10870000 	addk	r4, r7, r0
9001eb98:	b810fedc 	brid	-292		// 9001ea74
9001eb9c:	14651800 	rsubk	r3, r5, r3
9001eba0:	30e00018 	addik	r7, r0, 24
9001eba4:	b810fbe8 	brid	-1048		// 9001e78c
9001eba8:	10670000 	addk	r3, r7, r0
9001ebac:	30a00018 	addik	r5, r0, 24
9001ebb0:	b810fa64 	brid	-1436		// 9001e614
9001ebb4:	10650000 	addk	r3, r5, r0
9001ebb8:	b810fa5c 	brid	-1444		// 9001e614
9001ebbc:	10650000 	addk	r3, r5, r0
9001ebc0:	b810fb6c 	brid	-1172		// 9001e72c
9001ebc4:	10650000 	addk	r3, r5, r0
9001ebc8:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
9001ebcc:	b810fbc0 	brid	-1088		// 9001e78c
9001ebd0:	10670000 	addk	r3, r7, r0
9001ebd4:	30a00018 	addik	r5, r0, 24
9001ebd8:	b810fb54 	brid	-1196		// 9001e72c
9001ebdc:	10650000 	addk	r3, r5, r0
9001ebe0:	b810fd2c 	brid	-724		// 9001e90c
9001ebe4:	30a00001 	addik	r5, r0, 1
9001ebe8:	b810ffac 	brid	-84		// 9001eb94
9001ebec:	30a00001 	addik	r5, r0, 1
9001ebf0:	b810fc28 	brid	-984		// 9001e818
9001ebf4:	10639800 	addk	r3, r3, r19
9001ebf8:	b810fa98 	brid	-1384		// 9001e690
9001ebfc:	10639800 	addk	r3, r3, r19
9001ec00:	16561803 	cmpu	r18, r22, r3
9001ec04:	bcb2ff0c 	bgei	r18, -244		// 9001eb10
9001ec08:	b810ff08 	brid	-248		// 9001eb10
9001ec0c:	10639800 	addk	r3, r3, r19
9001ec10:	16562803 	cmpu	r18, r22, r5
9001ec14:	beb2fdec 	bgeid	r18, -532		// 9001ea00
9001ec18:	647c0410 	bslli	r3, r28, 16
9001ec1c:	3273ffff 	addik	r19, r19, -1
9001ec20:	b810fde0 	brid	-544		// 9001ea00
9001ec24:	10a5c800 	addk	r5, r5, r25
9001ec28:	16561803 	cmpu	r18, r22, r3
9001ec2c:	bcb2fd74 	bgei	r18, -652		// 9001e9a0
9001ec30:	339cffff 	addik	r28, r28, -1
9001ec34:	b810fd6c 	brid	-660		// 9001e9a0
9001ec38:	1063c800 	addk	r3, r3, r25

9001ec3c <_fpadd_parts>:
9001ec3c:	3021ffdc 	addik	r1, r1, -36
9001ec40:	fb010010 	swi	r24, r1, 16
9001ec44:	fa610004 	swi	r19, r1, 4
9001ec48:	fac10008 	swi	r22, r1, 8
9001ec4c:	fae1000c 	swi	r23, r1, 12
9001ec50:	fb210014 	swi	r25, r1, 20
9001ec54:	fb410018 	swi	r26, r1, 24
9001ec58:	fb61001c 	swi	r27, r1, 28
9001ec5c:	fb810020 	swi	r28, r1, 32
9001ec60:	e8850000 	lwi	r4, r5, 0
9001ec64:	11250000 	addk	r9, r5, r0
9001ec68:	11860000 	addk	r12, r6, r0
9001ec6c:	22400001 	addi	r18, r0, 1
9001ec70:	16449003 	cmpu	r18, r4, r18
9001ec74:	beb20048 	bgeid	r18, 72		// 9001ecbc
9001ec78:	13070000 	addk	r24, r7, r0
9001ec7c:	e8660000 	lwi	r3, r6, 0
9001ec80:	22400001 	addi	r18, r0, 1
9001ec84:	16439003 	cmpu	r18, r3, r18
9001ec88:	bcb20068 	bgei	r18, 104		// 9001ecf0
9001ec8c:	aa440004 	xori	r18, r4, 4
9001ec90:	bc320058 	bnei	r18, 88		// 9001ece8
9001ec94:	aa430004 	xori	r18, r3, 4
9001ec98:	be320028 	bneid	r18, 40		// 9001ecc0
9001ec9c:	10690000 	addk	r3, r9, r0
9001eca0:	e8860004 	lwi	r4, r6, 4
9001eca4:	e8650004 	lwi	r3, r5, 4
9001eca8:	16441800 	rsubk	r18, r4, r3
9001ecac:	be120014 	beqid	r18, 20		// 9001ecc0
9001ecb0:	10690000 	addk	r3, r9, r0
9001ecb4:	b0009002 	imm	-28670
9001ecb8:	31203674 	addik	r9, r0, 13940
9001ecbc:	10690000 	addk	r3, r9, r0
9001ecc0:	ea610004 	lwi	r19, r1, 4
9001ecc4:	eac10008 	lwi	r22, r1, 8
9001ecc8:	eae1000c 	lwi	r23, r1, 12
9001eccc:	eb010010 	lwi	r24, r1, 16
9001ecd0:	eb210014 	lwi	r25, r1, 20
9001ecd4:	eb410018 	lwi	r26, r1, 24
9001ecd8:	eb61001c 	lwi	r27, r1, 28
9001ecdc:	eb810020 	lwi	r28, r1, 32
9001ece0:	b60f0008 	rtsd	r15, 8
9001ece4:	30210024 	addik	r1, r1, 36
9001ece8:	aa430004 	xori	r18, r3, 4
9001ecec:	bc32000c 	bnei	r18, 12		// 9001ecf8
9001ecf0:	b810ffcc 	brid	-52		// 9001ecbc
9001ecf4:	112c0000 	addk	r9, r12, r0
9001ecf8:	aa430002 	xori	r18, r3, 2
9001ecfc:	bc320050 	bnei	r18, 80		// 9001ed4c
9001ed00:	aa440002 	xori	r18, r4, 2
9001ed04:	be32ffbc 	bneid	r18, -68		// 9001ecc0
9001ed08:	10690000 	addk	r3, r9, r0
9001ed0c:	e8650004 	lwi	r3, r5, 4
9001ed10:	e8850008 	lwi	r4, r5, 8
9001ed14:	e8e50000 	lwi	r7, r5, 0
9001ed18:	e8c90010 	lwi	r6, r9, 16
9001ed1c:	e8a5000c 	lwi	r5, r5, 12
9001ed20:	f8780004 	swi	r3, r24, 4
9001ed24:	f8f80000 	swi	r7, r24, 0
9001ed28:	f8980008 	swi	r4, r24, 8
9001ed2c:	f8b8000c 	swi	r5, r24, 12
9001ed30:	f8d80010 	swi	r6, r24, 16
9001ed34:	e8690004 	lwi	r3, r9, 4
9001ed38:	e88c0004 	lwi	r4, r12, 4
9001ed3c:	84632000 	and	r3, r3, r4
9001ed40:	f8780004 	swi	r3, r24, 4
9001ed44:	b810ff78 	brid	-136		// 9001ecbc
9001ed48:	11380000 	addk	r9, r24, r0
9001ed4c:	aa440002 	xori	r18, r4, 2
9001ed50:	bc12ffa0 	beqi	r18, -96		// 9001ecf0
9001ed54:	eb850008 	lwi	r28, r5, 8
9001ed58:	eb260008 	lwi	r25, r6, 8
9001ed5c:	eac5000c 	lwi	r22, r5, 12
9001ed60:	eae50010 	lwi	r23, r5, 16
9001ed64:	e946000c 	lwi	r10, r6, 12
9001ed68:	e9660010 	lwi	r11, r6, 16
9001ed6c:	1679e000 	rsubk	r19, r25, r28
9001ed70:	6493021f 	bsrai	r4, r19, 31
9001ed74:	88649800 	xor	r3, r4, r19
9001ed78:	14641800 	rsubk	r3, r4, r3
9001ed7c:	3240003f 	addik	r18, r0, 63
9001ed80:	16439001 	cmp	r18, r3, r18
9001ed84:	bcb2014c 	bgei	r18, 332		// 9001eed0
9001ed88:	165cc801 	cmp	r18, r28, r25
9001ed8c:	bc520200 	blti	r18, 512		// 9001ef8c
9001ed90:	13990000 	addk	r28, r25, r0
9001ed94:	12c00000 	addk	r22, r0, r0
9001ed98:	12e00000 	addk	r23, r0, r0
9001ed9c:	e8a90004 	lwi	r5, r9, 4
9001eda0:	e86c0004 	lwi	r3, r12, 4
9001eda4:	16432800 	rsubk	r18, r3, r5
9001eda8:	bc1201c4 	beqi	r18, 452		// 9001ef6c
9001edac:	bc0501b4 	beqi	r5, 436		// 9001ef60
9001edb0:	04f75800 	rsub	r7, r23, r11
9001edb4:	0cd65000 	rsubc	r6, r22, r10
9001edb8:	be4601e0 	bltid	r6, 480		// 9001ef98
9001edbc:	30600001 	addik	r3, r0, 1
9001edc0:	fb980008 	swi	r28, r24, 8
9001edc4:	f8d8000c 	swi	r6, r24, 12
9001edc8:	f8f80010 	swi	r7, r24, 16
9001edcc:	f8180004 	swi	r0, r24, 4
9001edd0:	e958000c 	lwi	r10, r24, 12
9001edd4:	e9780010 	lwi	r11, r24, 16
9001edd8:	20abffff 	addi	r5, r11, -1
9001eddc:	088a0000 	addc	r4, r10, r0
9001ede0:	2084ffff 	addi	r4, r4, -1
9001ede4:	b0000fff 	imm	4095
9001ede8:	2240ffff 	addi	r18, r0, -1
9001edec:	16449003 	cmpu	r18, r4, r18
9001edf0:	be520084 	bltid	r18, 132		// 9001ee74
9001edf4:	30600003 	addik	r3, r0, 3
9001edf8:	b0000fff 	imm	4095
9001edfc:	aa44ffff 	xori	r18, r4, -1
9001ee00:	bc1201b4 	beqi	r18, 436		// 9001efb4
9001ee04:	e8d80008 	lwi	r6, r24, 8
9001ee08:	646b001f 	bsrli	r3, r11, 31
9001ee0c:	108a5000 	addk	r4, r10, r10
9001ee10:	10ab5800 	addk	r5, r11, r11
9001ee14:	80841800 	or	r4, r4, r3
9001ee18:	f898000c 	swi	r4, r24, 12
9001ee1c:	f8b80010 	swi	r5, r24, 16
9001ee20:	e958000c 	lwi	r10, r24, 12
9001ee24:	e9780010 	lwi	r11, r24, 16
9001ee28:	30c6ffff 	addik	r6, r6, -1
9001ee2c:	f8d80008 	swi	r6, r24, 8
9001ee30:	20abffff 	addi	r5, r11, -1
9001ee34:	088a0000 	addc	r4, r10, r0
9001ee38:	2084ffff 	addi	r4, r4, -1
9001ee3c:	b0000fff 	imm	4095
9001ee40:	2240ffff 	addi	r18, r0, -1
9001ee44:	16449003 	cmpu	r18, r4, r18
9001ee48:	be52002c 	bltid	r18, 44		// 9001ee74
9001ee4c:	30600003 	addik	r3, r0, 3
9001ee50:	b0000fff 	imm	4095
9001ee54:	aa44ffff 	xori	r18, r4, -1
9001ee58:	be32ffb4 	bneid	r18, -76		// 9001ee0c
9001ee5c:	646b001f 	bsrli	r3, r11, 31
9001ee60:	2240fffe 	addi	r18, r0, -2
9001ee64:	16459003 	cmpu	r18, r5, r18
9001ee68:	beb2ffa8 	bgeid	r18, -88		// 9001ee10
9001ee6c:	108a5000 	addk	r4, r10, r10
9001ee70:	30600003 	addik	r3, r0, 3
9001ee74:	f8780000 	swi	r3, r24, 0
9001ee78:	b0001fff 	imm	8191
9001ee7c:	2240ffff 	addi	r18, r0, -1
9001ee80:	164a9003 	cmpu	r18, r10, r18
9001ee84:	beb2fe38 	bgeid	r18, -456		// 9001ecbc
9001ee88:	11380000 	addk	r9, r24, r0
9001ee8c:	e9180008 	lwi	r8, r24, 8
9001ee90:	646a041f 	bslli	r3, r10, 31
9001ee94:	30c00000 	addik	r6, r0, 0
9001ee98:	30e00001 	addik	r7, r0, 1
9001ee9c:	90ab0041 	srl	r5, r11
9001eea0:	84ca3000 	and	r6, r10, r6
9001eea4:	84eb3800 	and	r7, r11, r7
9001eea8:	80a32800 	or	r5, r3, r5
9001eeac:	908a0041 	srl	r4, r10
9001eeb0:	80c62000 	or	r6, r6, r4
9001eeb4:	80e72800 	or	r7, r7, r5
9001eeb8:	31080001 	addik	r8, r8, 1
9001eebc:	f8d8000c 	swi	r6, r24, 12
9001eec0:	f8f80010 	swi	r7, r24, 16
9001eec4:	f9180008 	swi	r8, r24, 8
9001eec8:	b810fdf8 	brid	-520		// 9001ecc0
9001eecc:	10690000 	addk	r3, r9, r0
9001eed0:	165cc801 	cmp	r18, r28, r25
9001eed4:	beb20040 	bgeid	r18, 64		// 9001ef14
9001eed8:	11000000 	addk	r8, r0, r0
9001eedc:	33400000 	addik	r26, r0, 0
9001eee0:	33600001 	addik	r27, r0, 1
9001eee4:	646a041f 	bslli	r3, r10, 31
9001eee8:	90ab0041 	srl	r5, r11
9001eeec:	84cad000 	and	r6, r10, r26
9001eef0:	84ebd800 	and	r7, r11, r27
9001eef4:	80a32800 	or	r5, r3, r5
9001eef8:	908a0041 	srl	r4, r10
9001eefc:	31080001 	addik	r8, r8, 1
9001ef00:	81462000 	or	r10, r6, r4
9001ef04:	16489800 	rsubk	r18, r8, r19
9001ef08:	be32ffdc 	bneid	r18, -36		// 9001eee4
9001ef0c:	81672800 	or	r11, r7, r5
9001ef10:	13399800 	addk	r25, r25, r19
9001ef14:	1659e001 	cmp	r18, r25, r28
9001ef18:	beb2fe84 	bgeid	r18, -380		// 9001ed9c
9001ef1c:	11000000 	addk	r8, r0, r0
9001ef20:	167cc800 	rsubk	r19, r28, r25
9001ef24:	33400000 	addik	r26, r0, 0
9001ef28:	33600001 	addik	r27, r0, 1
9001ef2c:	6476041f 	bslli	r3, r22, 31
9001ef30:	90b70041 	srl	r5, r23
9001ef34:	84d6d000 	and	r6, r22, r26
9001ef38:	84f7d800 	and	r7, r23, r27
9001ef3c:	80a32800 	or	r5, r3, r5
9001ef40:	90960041 	srl	r4, r22
9001ef44:	31080001 	addik	r8, r8, 1
9001ef48:	82c62000 	or	r22, r6, r4
9001ef4c:	16489800 	rsubk	r18, r8, r19
9001ef50:	be32ffdc 	bneid	r18, -36		// 9001ef2c
9001ef54:	82e72800 	or	r23, r7, r5
9001ef58:	b810fe44 	brid	-444		// 9001ed9c
9001ef5c:	139c9800 	addk	r28, r28, r19
9001ef60:	04ebb800 	rsub	r7, r11, r23
9001ef64:	0ccab000 	rsubc	r6, r10, r22
9001ef68:	b800fe50 	bri	-432		// 9001edb8
9001ef6c:	01775800 	add	r11, r23, r11
9001ef70:	09565000 	addc	r10, r22, r10
9001ef74:	f8b80004 	swi	r5, r24, 4
9001ef78:	fb980008 	swi	r28, r24, 8
9001ef7c:	f958000c 	swi	r10, r24, 12
9001ef80:	f9780010 	swi	r11, r24, 16
9001ef84:	b810fef0 	brid	-272		// 9001ee74
9001ef88:	30600003 	addik	r3, r0, 3
9001ef8c:	11400000 	addk	r10, r0, r0
9001ef90:	11600000 	addk	r11, r0, r0
9001ef94:	b800fe08 	bri	-504		// 9001ed9c
9001ef98:	05670000 	rsub	r11, r7, r0
9001ef9c:	0d460000 	rsubc	r10, r6, r0
9001efa0:	f8780004 	swi	r3, r24, 4
9001efa4:	fb980008 	swi	r28, r24, 8
9001efa8:	f958000c 	swi	r10, r24, 12
9001efac:	f9780010 	swi	r11, r24, 16
9001efb0:	b800fe20 	bri	-480		// 9001edd0
9001efb4:	2240fffe 	addi	r18, r0, -2
9001efb8:	16459003 	cmpu	r18, r5, r18
9001efbc:	be52feb8 	bltid	r18, -328		// 9001ee74
9001efc0:	30600003 	addik	r3, r0, 3
9001efc4:	b800fe40 	bri	-448		// 9001ee04

9001efc8 <__subdf3>:
9001efc8:	3021ff88 	addik	r1, r1, -120
9001efcc:	fb210074 	swi	r25, r1, 116
9001efd0:	3321002c 	addik	r25, r1, 44
9001efd4:	11470000 	addk	r10, r7, r0
9001efd8:	11680000 	addk	r11, r8, r0
9001efdc:	fac10068 	swi	r22, r1, 104
9001efe0:	fae1006c 	swi	r23, r1, 108
9001efe4:	12c50000 	addk	r22, r5, r0
9001efe8:	12e60000 	addk	r23, r6, r0
9001efec:	10d90000 	addk	r6, r25, r0
9001eff0:	fb010070 	swi	r24, r1, 112
9001eff4:	30a1001c 	addik	r5, r1, 28
9001eff8:	f9e10000 	swi	r15, r1, 0
9001effc:	f9410024 	swi	r10, r1, 36
9001f000:	f9610028 	swi	r11, r1, 40
9001f004:	fac1001c 	swi	r22, r1, 28
9001f008:	fae10020 	swi	r23, r1, 32
9001f00c:	b9f41174 	brlid	r15, 4468	// 90020180 <__unpack_d>
9001f010:	33010040 	addik	r24, r1, 64
9001f014:	10d80000 	addk	r6, r24, r0
9001f018:	b9f41168 	brlid	r15, 4456	// 90020180 <__unpack_d>
9001f01c:	30a10024 	addik	r5, r1, 36
9001f020:	e8610044 	lwi	r3, r1, 68
9001f024:	10d80000 	addk	r6, r24, r0
9001f028:	10b90000 	addk	r5, r25, r0
9001f02c:	a8630001 	xori	r3, r3, 1
9001f030:	f8610044 	swi	r3, r1, 68
9001f034:	b9f4fc08 	brlid	r15, -1016	// 9001ec3c <_fpadd_parts>
9001f038:	30e10054 	addik	r7, r1, 84
9001f03c:	b9f40dec 	brlid	r15, 3564	// 9001fe28 <__pack_d>
9001f040:	10a30000 	addk	r5, r3, r0
9001f044:	e9e10000 	lwi	r15, r1, 0
9001f048:	eac10068 	lwi	r22, r1, 104
9001f04c:	eae1006c 	lwi	r23, r1, 108
9001f050:	eb010070 	lwi	r24, r1, 112
9001f054:	eb210074 	lwi	r25, r1, 116
9001f058:	b60f0008 	rtsd	r15, 8
9001f05c:	30210078 	addik	r1, r1, 120

9001f060 <__adddf3>:
9001f060:	3021ff88 	addik	r1, r1, -120
9001f064:	fb210074 	swi	r25, r1, 116
9001f068:	3321002c 	addik	r25, r1, 44
9001f06c:	11470000 	addk	r10, r7, r0
9001f070:	11680000 	addk	r11, r8, r0
9001f074:	fac10068 	swi	r22, r1, 104
9001f078:	fae1006c 	swi	r23, r1, 108
9001f07c:	12c50000 	addk	r22, r5, r0
9001f080:	12e60000 	addk	r23, r6, r0
9001f084:	10d90000 	addk	r6, r25, r0
9001f088:	fb010070 	swi	r24, r1, 112
9001f08c:	30a1001c 	addik	r5, r1, 28
9001f090:	f9e10000 	swi	r15, r1, 0
9001f094:	f9410024 	swi	r10, r1, 36
9001f098:	f9610028 	swi	r11, r1, 40
9001f09c:	fac1001c 	swi	r22, r1, 28
9001f0a0:	fae10020 	swi	r23, r1, 32
9001f0a4:	b9f410dc 	brlid	r15, 4316	// 90020180 <__unpack_d>
9001f0a8:	33010040 	addik	r24, r1, 64
9001f0ac:	10d80000 	addk	r6, r24, r0
9001f0b0:	b9f410d0 	brlid	r15, 4304	// 90020180 <__unpack_d>
9001f0b4:	30a10024 	addik	r5, r1, 36
9001f0b8:	10d80000 	addk	r6, r24, r0
9001f0bc:	10b90000 	addk	r5, r25, r0
9001f0c0:	b9f4fb7c 	brlid	r15, -1156	// 9001ec3c <_fpadd_parts>
9001f0c4:	30e10054 	addik	r7, r1, 84
9001f0c8:	b9f40d60 	brlid	r15, 3424	// 9001fe28 <__pack_d>
9001f0cc:	10a30000 	addk	r5, r3, r0
9001f0d0:	e9e10000 	lwi	r15, r1, 0
9001f0d4:	eac10068 	lwi	r22, r1, 104
9001f0d8:	eae1006c 	lwi	r23, r1, 108
9001f0dc:	eb010070 	lwi	r24, r1, 112
9001f0e0:	eb210074 	lwi	r25, r1, 116
9001f0e4:	b60f0008 	rtsd	r15, 8
9001f0e8:	30210078 	addik	r1, r1, 120

9001f0ec <__muldf3>:
9001f0ec:	3021ff68 	addik	r1, r1, -152
9001f0f0:	fb010078 	swi	r24, r1, 120
9001f0f4:	3301002c 	addik	r24, r1, 44
9001f0f8:	11470000 	addk	r10, r7, r0
9001f0fc:	11680000 	addk	r11, r8, r0
9001f100:	fac10070 	swi	r22, r1, 112
9001f104:	fae10074 	swi	r23, r1, 116
9001f108:	12c50000 	addk	r22, r5, r0
9001f10c:	12e60000 	addk	r23, r6, r0
9001f110:	10d80000 	addk	r6, r24, r0
9001f114:	fb410080 	swi	r26, r1, 128
9001f118:	30a1001c 	addik	r5, r1, 28
9001f11c:	f9e10000 	swi	r15, r1, 0
9001f120:	f9410024 	swi	r10, r1, 36
9001f124:	f9610028 	swi	r11, r1, 40
9001f128:	fb21007c 	swi	r25, r1, 124
9001f12c:	fb610084 	swi	r27, r1, 132
9001f130:	fb810088 	swi	r28, r1, 136
9001f134:	fba1008c 	swi	r29, r1, 140
9001f138:	fbc10090 	swi	r30, r1, 144
9001f13c:	fbe10094 	swi	r31, r1, 148
9001f140:	fac1001c 	swi	r22, r1, 28
9001f144:	fae10020 	swi	r23, r1, 32
9001f148:	b9f41038 	brlid	r15, 4152	// 90020180 <__unpack_d>
9001f14c:	33410040 	addik	r26, r1, 64
9001f150:	10da0000 	addk	r6, r26, r0
9001f154:	b9f4102c 	brlid	r15, 4140	// 90020180 <__unpack_d>
9001f158:	30a10024 	addik	r5, r1, 36
9001f15c:	e861002c 	lwi	r3, r1, 44
9001f160:	22400001 	addi	r18, r0, 1
9001f164:	16439003 	cmpu	r18, r3, r18
9001f168:	bcb20068 	bgei	r18, 104		// 9001f1d0
9001f16c:	e8810040 	lwi	r4, r1, 64
9001f170:	22400001 	addi	r18, r0, 1
9001f174:	16449003 	cmpu	r18, r4, r18
9001f178:	bcb20024 	bgei	r18, 36		// 9001f19c
9001f17c:	aa430004 	xori	r18, r3, 4
9001f180:	bc120040 	beqi	r18, 64		// 9001f1c0
9001f184:	aa440004 	xori	r18, r4, 4
9001f188:	bc3200a4 	bnei	r18, 164		// 9001f22c
9001f18c:	b0009002 	imm	-28670
9001f190:	30c03674 	addik	r6, r0, 13940
9001f194:	aa430002 	xori	r18, r3, 2
9001f198:	bc120058 	beqi	r18, 88		// 9001f1f0
9001f19c:	e8a10044 	lwi	r5, r1, 68
9001f1a0:	e8610030 	lwi	r3, r1, 48
9001f1a4:	88632800 	xor	r3, r3, r5
9001f1a8:	14830000 	rsubk	r4, r3, r0
9001f1ac:	80841800 	or	r4, r4, r3
9001f1b0:	6484001f 	bsrli	r4, r4, 31
9001f1b4:	f8810044 	swi	r4, r1, 68
9001f1b8:	b8100038 	brid	56		// 9001f1f0
9001f1bc:	10da0000 	addk	r6, r26, r0
9001f1c0:	b0009002 	imm	-28670
9001f1c4:	30c03674 	addik	r6, r0, 13940
9001f1c8:	aa440002 	xori	r18, r4, 2
9001f1cc:	bc120024 	beqi	r18, 36		// 9001f1f0
9001f1d0:	e8610030 	lwi	r3, r1, 48
9001f1d4:	e8a10044 	lwi	r5, r1, 68
9001f1d8:	10d80000 	addk	r6, r24, r0
9001f1dc:	88632800 	xor	r3, r3, r5
9001f1e0:	14830000 	rsubk	r4, r3, r0
9001f1e4:	80841800 	or	r4, r4, r3
9001f1e8:	6484001f 	bsrli	r4, r4, 31
9001f1ec:	f8810030 	swi	r4, r1, 48
9001f1f0:	b9f40c38 	brlid	r15, 3128	// 9001fe28 <__pack_d>
9001f1f4:	10a60000 	addk	r5, r6, r0
9001f1f8:	e9e10000 	lwi	r15, r1, 0
9001f1fc:	eac10070 	lwi	r22, r1, 112
9001f200:	eae10074 	lwi	r23, r1, 116
9001f204:	eb010078 	lwi	r24, r1, 120
9001f208:	eb21007c 	lwi	r25, r1, 124
9001f20c:	eb410080 	lwi	r26, r1, 128
9001f210:	eb610084 	lwi	r27, r1, 132
9001f214:	eb810088 	lwi	r28, r1, 136
9001f218:	eba1008c 	lwi	r29, r1, 140
9001f21c:	ebc10090 	lwi	r30, r1, 144
9001f220:	ebe10094 	lwi	r31, r1, 148
9001f224:	b60f0008 	rtsd	r15, 8
9001f228:	30210098 	addik	r1, r1, 152
9001f22c:	aa430002 	xori	r18, r3, 2
9001f230:	bc12ffa0 	beqi	r18, -96		// 9001f1d0
9001f234:	aa440002 	xori	r18, r4, 2
9001f238:	bc12ff64 	beqi	r18, -156		// 9001f19c
9001f23c:	eb010038 	lwi	r24, r1, 56
9001f240:	eb21003c 	lwi	r25, r1, 60
9001f244:	eac1004c 	lwi	r22, r1, 76
9001f248:	eae10050 	lwi	r23, r1, 80
9001f24c:	33790000 	addik	r27, r25, 0
9001f250:	33400000 	addik	r26, r0, 0
9001f254:	33b70000 	addik	r29, r23, 0
9001f258:	33800000 	addik	r28, r0, 0
9001f25c:	10fa0000 	addk	r7, r26, r0
9001f260:	111b0000 	addk	r8, r27, r0
9001f264:	10bc0000 	addk	r5, r28, r0
9001f268:	32f60000 	addik	r23, r22, 0
9001f26c:	32c00000 	addik	r22, r0, 0
9001f270:	b000ffff 	imm	-1
9001f274:	b9f42518 	brlid	r15, 9496	// 9001178c <__muldi3>
9001f278:	10dd0000 	addk	r6, r29, r0
9001f27c:	10ba0000 	addk	r5, r26, r0
9001f280:	10db0000 	addk	r6, r27, r0
9001f284:	10f60000 	addk	r7, r22, r0
9001f288:	11170000 	addk	r8, r23, r0
9001f28c:	33780000 	addik	r27, r24, 0
9001f290:	33400000 	addik	r26, r0, 0
9001f294:	fac10068 	swi	r22, r1, 104
9001f298:	fae1006c 	swi	r23, r1, 108
9001f29c:	13c30000 	addk	r30, r3, r0
9001f2a0:	b000ffff 	imm	-1
9001f2a4:	b9f424e8 	brlid	r15, 9448	// 9001178c <__muldi3>
9001f2a8:	13e40000 	addk	r31, r4, r0
9001f2ac:	10dd0000 	addk	r6, r29, r0
9001f2b0:	10fa0000 	addk	r7, r26, r0
9001f2b4:	10bc0000 	addk	r5, r28, r0
9001f2b8:	111b0000 	addk	r8, r27, r0
9001f2bc:	12c30000 	addk	r22, r3, r0
9001f2c0:	b000ffff 	imm	-1
9001f2c4:	b9f424c8 	brlid	r15, 9416	// 9001178c <__muldi3>
9001f2c8:	12e40000 	addk	r23, r4, r0
9001f2cc:	10c30000 	addk	r6, r3, r0
9001f2d0:	10e40000 	addk	r7, r4, r0
9001f2d4:	03373800 	add	r25, r23, r7
9001f2d8:	0b163000 	addc	r24, r22, r6
9001f2dc:	1656c003 	cmpu	r18, r22, r24
9001f2e0:	bc5201d8 	blti	r18, 472		// 9001f4b8
9001f2e4:	1658b000 	rsubk	r18, r24, r22
9001f2e8:	bc1201c8 	beqi	r18, 456		// 9001f4b0
9001f2ec:	13800000 	addk	r28, r0, r0
9001f2f0:	13a00000 	addk	r29, r0, r0
9001f2f4:	30b90000 	addik	r5, r25, 0
9001f2f8:	30800000 	addik	r4, r0, 0
9001f2fc:	10850000 	addk	r4, r5, r0
9001f300:	10a00000 	addk	r5, r0, r0
9001f304:	02ff2800 	add	r23, r31, r5
9001f308:	0ade2000 	addc	r22, r30, r4
9001f30c:	165eb003 	cmpu	r18, r30, r22
9001f310:	bc520194 	blti	r18, 404		// 9001f4a4
9001f314:	1656f000 	rsubk	r18, r22, r30
9001f318:	bc120184 	beqi	r18, 388		// 9001f49c
9001f31c:	e8a10068 	lwi	r5, r1, 104
9001f320:	e8c1006c 	lwi	r6, r1, 108
9001f324:	10fa0000 	addk	r7, r26, r0
9001f328:	b000ffff 	imm	-1
9001f32c:	b9f42460 	brlid	r15, 9312	// 9001178c <__muldi3>
9001f330:	111b0000 	addk	r8, r27, r0
9001f334:	10c30000 	addk	r6, r3, r0
9001f338:	10e40000 	addk	r7, r4, r0
9001f33c:	e8610030 	lwi	r3, r1, 48
9001f340:	e8810044 	lwi	r4, r1, 68
9001f344:	e9210034 	lwi	r9, r1, 52
9001f348:	10b80000 	addk	r5, r24, r0
9001f34c:	88632000 	xor	r3, r3, r4
9001f350:	15030000 	rsubk	r8, r3, r0
9001f354:	81081800 	or	r8, r8, r3
9001f358:	e8610048 	lwi	r3, r1, 72
9001f35c:	10800000 	addk	r4, r0, r0
9001f360:	31290004 	addik	r9, r9, 4
9001f364:	6508001f 	bsrli	r8, r8, 31
9001f368:	00e72800 	add	r7, r7, r5
9001f36c:	08c62000 	addc	r6, r6, r4
9001f370:	10634800 	addk	r3, r3, r9
9001f374:	017d3800 	add	r11, r29, r7
9001f378:	095c3000 	addc	r10, r28, r6
9001f37c:	f9010058 	swi	r8, r1, 88
9001f380:	f861005c 	swi	r3, r1, 92
9001f384:	b0001fff 	imm	8191
9001f388:	2240ffff 	addi	r18, r0, -1
9001f38c:	164a9003 	cmpu	r18, r10, r18
9001f390:	beb20070 	bgeid	r18, 112		// 9001f400
9001f394:	11030000 	addk	r8, r3, r0
9001f398:	33000000 	addik	r24, r0, 0
9001f39c:	33200001 	addik	r25, r0, 1
9001f3a0:	b0008000 	imm	-32768
9001f3a4:	33400000 	addik	r26, r0, 0
9001f3a8:	33600000 	addik	r27, r0, 0
9001f3ac:	646a041f 	bslli	r3, r10, 31
9001f3b0:	6536041f 	bslli	r9, r22, 31
9001f3b4:	90ab0041 	srl	r5, r11
9001f3b8:	80a32800 	or	r5, r3, r5
9001f3bc:	908a0041 	srl	r4, r10
9001f3c0:	846bc800 	and	r3, r11, r25
9001f3c4:	31080001 	addik	r8, r8, 1
9001f3c8:	11440000 	addk	r10, r4, r0
9001f3cc:	be03001c 	beqid	r3, 28		// 9001f3e8
9001f3d0:	11650000 	addk	r11, r5, r0
9001f3d4:	90f70041 	srl	r7, r23
9001f3d8:	80e93800 	or	r7, r9, r7
9001f3dc:	90d60041 	srl	r6, r22
9001f3e0:	82c6d000 	or	r22, r6, r26
9001f3e4:	82e7d800 	or	r23, r7, r27
9001f3e8:	b0001fff 	imm	8191
9001f3ec:	2240ffff 	addi	r18, r0, -1
9001f3f0:	164a9003 	cmpu	r18, r10, r18
9001f3f4:	be52ffbc 	bltid	r18, -68		// 9001f3b0
9001f3f8:	646a041f 	bslli	r3, r10, 31
9001f3fc:	f901005c 	swi	r8, r1, 92
9001f400:	b0000fff 	imm	4095
9001f404:	2240ffff 	addi	r18, r0, -1
9001f408:	164a9003 	cmpu	r18, r10, r18
9001f40c:	bc52005c 	blti	r18, 92		// 9001f468
9001f410:	e8e1005c 	lwi	r7, r1, 92
9001f414:	33000000 	addik	r24, r0, 0
9001f418:	33200001 	addik	r25, r0, 1
9001f41c:	64cb001f 	bsrli	r6, r11, 31
9001f420:	6477001f 	bsrli	r3, r23, 31
9001f424:	108a5000 	addk	r4, r10, r10
9001f428:	1116b000 	addk	r8, r22, r22
9001f42c:	80862000 	or	r4, r6, r4
9001f430:	10ab5800 	addk	r5, r11, r11
9001f434:	81034000 	or	r8, r3, r8
9001f438:	1137b800 	addk	r9, r23, r23
9001f43c:	30e7ffff 	addik	r7, r7, -1
9001f440:	11440000 	addk	r10, r4, r0
9001f444:	be560080 	bltid	r22, 128		// 9001f4c4
9001f448:	11650000 	addk	r11, r5, r0
9001f44c:	12c80000 	addk	r22, r8, r0
9001f450:	b0000fff 	imm	4095
9001f454:	2240ffff 	addi	r18, r0, -1
9001f458:	164a9003 	cmpu	r18, r10, r18
9001f45c:	beb2ffc0 	bgeid	r18, -64		// 9001f41c
9001f460:	12e90000 	addk	r23, r9, r0
9001f464:	f8e1005c 	swi	r7, r1, 92
9001f468:	30800000 	addik	r4, r0, 0
9001f46c:	30a000ff 	addik	r5, r0, 255
9001f470:	848a2000 	and	r4, r10, r4
9001f474:	be240010 	bneid	r4, 16		// 9001f484
9001f478:	84ab2800 	and	r5, r11, r5
9001f47c:	aa450080 	xori	r18, r5, 128
9001f480:	bc120050 	beqi	r18, 80		// 9001f4d0
9001f484:	30600003 	addik	r3, r0, 3
9001f488:	f9410060 	swi	r10, r1, 96
9001f48c:	f9610064 	swi	r11, r1, 100
9001f490:	f8610054 	swi	r3, r1, 84
9001f494:	b810fd5c 	brid	-676		// 9001f1f0
9001f498:	30c10054 	addik	r6, r1, 84
9001f49c:	165fb803 	cmpu	r18, r31, r23
9001f4a0:	bcb2fe7c 	bgei	r18, -388		// 9001f31c
9001f4a4:	23bd0001 	addi	r29, r29, 1
9001f4a8:	0b9c0000 	addc	r28, r28, r0
9001f4ac:	b800fe70 	bri	-400		// 9001f31c
9001f4b0:	1657c803 	cmpu	r18, r23, r25
9001f4b4:	bcb2fe38 	bgei	r18, -456		// 9001f2ec
9001f4b8:	33800001 	addik	r28, r0, 1
9001f4bc:	33a00000 	addik	r29, r0, 0
9001f4c0:	b800fe34 	bri	-460		// 9001f2f4
9001f4c4:	8144c000 	or	r10, r4, r24
9001f4c8:	b810ff84 	brid	-124		// 9001f44c
9001f4cc:	8165c800 	or	r11, r5, r25
9001f4d0:	30800000 	addik	r4, r0, 0
9001f4d4:	30a00100 	addik	r5, r0, 256
9001f4d8:	848a2000 	and	r4, r10, r4
9001f4dc:	84ab2800 	and	r5, r11, r5
9001f4e0:	80842800 	or	r4, r4, r5
9001f4e4:	be24ffa4 	bneid	r4, -92		// 9001f488
9001f4e8:	30600003 	addik	r3, r0, 3
9001f4ec:	8076b800 	or	r3, r22, r23
9001f4f0:	be03ff98 	beqid	r3, -104		// 9001f488
9001f4f4:	30600003 	addik	r3, r0, 3
9001f4f8:	20eb0080 	addi	r7, r11, 128
9001f4fc:	08ca0000 	addc	r6, r10, r0
9001f500:	3080ffff 	addik	r4, r0, -1
9001f504:	30a0ff00 	addik	r5, r0, -256
9001f508:	85462000 	and	r10, r6, r4
9001f50c:	b810ff7c 	brid	-132		// 9001f488
9001f510:	85672800 	and	r11, r7, r5

9001f514 <__divdf3>:
9001f514:	3021ff98 	addik	r1, r1, -104
9001f518:	fa610054 	swi	r19, r1, 84
9001f51c:	3261002c 	addik	r19, r1, 44
9001f520:	11470000 	addk	r10, r7, r0
9001f524:	11680000 	addk	r11, r8, r0
9001f528:	fac10058 	swi	r22, r1, 88
9001f52c:	fae1005c 	swi	r23, r1, 92
9001f530:	12c50000 	addk	r22, r5, r0
9001f534:	12e60000 	addk	r23, r6, r0
9001f538:	10d30000 	addk	r6, r19, r0
9001f53c:	fb010060 	swi	r24, r1, 96
9001f540:	30a1001c 	addik	r5, r1, 28
9001f544:	f9e10000 	swi	r15, r1, 0
9001f548:	f9410024 	swi	r10, r1, 36
9001f54c:	f9610028 	swi	r11, r1, 40
9001f550:	fb210064 	swi	r25, r1, 100
9001f554:	fac1001c 	swi	r22, r1, 28
9001f558:	fae10020 	swi	r23, r1, 32
9001f55c:	b9f40c24 	brlid	r15, 3108	// 90020180 <__unpack_d>
9001f560:	33010040 	addik	r24, r1, 64
9001f564:	10d80000 	addk	r6, r24, r0
9001f568:	b9f40c18 	brlid	r15, 3096	// 90020180 <__unpack_d>
9001f56c:	30a10024 	addik	r5, r1, 36
9001f570:	e8c1002c 	lwi	r6, r1, 44
9001f574:	22400001 	addi	r18, r0, 1
9001f578:	16469003 	cmpu	r18, r6, r18
9001f57c:	beb2005c 	bgeid	r18, 92		// 9001f5d8
9001f580:	10b30000 	addk	r5, r19, r0
9001f584:	e8e10040 	lwi	r7, r1, 64
9001f588:	22400001 	addi	r18, r0, 1
9001f58c:	16479003 	cmpu	r18, r7, r18
9001f590:	beb20048 	bgeid	r18, 72		// 9001f5d8
9001f594:	10b80000 	addk	r5, r24, r0
9001f598:	e8610030 	lwi	r3, r1, 48
9001f59c:	e8810044 	lwi	r4, r1, 68
9001f5a0:	88632000 	xor	r3, r3, r4
9001f5a4:	f8610030 	swi	r3, r1, 48
9001f5a8:	aa460004 	xori	r18, r6, 4
9001f5ac:	bc120054 	beqi	r18, 84		// 9001f600
9001f5b0:	aa460002 	xori	r18, r6, 2
9001f5b4:	bc12004c 	beqi	r18, 76		// 9001f600
9001f5b8:	aa470004 	xori	r18, r7, 4
9001f5bc:	be32005c 	bneid	r18, 92		// 9001f618
9001f5c0:	10b30000 	addk	r5, r19, r0
9001f5c4:	10c00000 	addk	r6, r0, r0
9001f5c8:	10e00000 	addk	r7, r0, r0
9001f5cc:	f8c10038 	swi	r6, r1, 56
9001f5d0:	f8e1003c 	swi	r7, r1, 60
9001f5d4:	f8010034 	swi	r0, r1, 52
9001f5d8:	b9f40850 	brlid	r15, 2128	// 9001fe28 <__pack_d>
9001f5dc:	80000000 	or	r0, r0, r0
9001f5e0:	e9e10000 	lwi	r15, r1, 0
9001f5e4:	ea610054 	lwi	r19, r1, 84
9001f5e8:	eac10058 	lwi	r22, r1, 88
9001f5ec:	eae1005c 	lwi	r23, r1, 92
9001f5f0:	eb010060 	lwi	r24, r1, 96
9001f5f4:	eb210064 	lwi	r25, r1, 100
9001f5f8:	b60f0008 	rtsd	r15, 8
9001f5fc:	30210068 	addik	r1, r1, 104
9001f600:	b0009002 	imm	-28670
9001f604:	30a03674 	addik	r5, r0, 13940
9001f608:	16463800 	rsubk	r18, r6, r7
9001f60c:	bc12ffcc 	beqi	r18, -52		// 9001f5d8
9001f610:	b810ffc8 	brid	-56		// 9001f5d8
9001f614:	10b30000 	addk	r5, r19, r0
9001f618:	aa470002 	xori	r18, r7, 2
9001f61c:	be1200c0 	beqid	r18, 192		// 9001f6dc
9001f620:	30600004 	addik	r3, r0, 4
9001f624:	e8810034 	lwi	r4, r1, 52
9001f628:	e8610048 	lwi	r3, r1, 72
9001f62c:	e9410038 	lwi	r10, r1, 56
9001f630:	e961003c 	lwi	r11, r1, 60
9001f634:	eac1004c 	lwi	r22, r1, 76
9001f638:	eae10050 	lwi	r23, r1, 80
9001f63c:	14c32000 	rsubk	r6, r3, r4
9001f640:	f8c10034 	swi	r6, r1, 52
9001f644:	16565003 	cmpu	r18, r22, r10
9001f648:	bc5200d4 	blti	r18, 212		// 9001f71c
9001f64c:	164ab000 	rsubk	r18, r10, r22
9001f650:	bc1200c4 	beqi	r18, 196		// 9001f714
9001f654:	b0001000 	imm	4096
9001f658:	30c00000 	addik	r6, r0, 0
9001f65c:	30e00000 	addik	r7, r0, 0
9001f660:	13000000 	addk	r24, r0, r0
9001f664:	13200000 	addk	r25, r0, r0
9001f668:	b810004c 	brid	76		// 9001f6b4
9001f66c:	11800000 	addk	r12, r0, r0
9001f670:	05775800 	rsub	r11, r23, r11
9001f674:	0d565000 	rsubc	r10, r22, r10
9001f678:	83183000 	or	r24, r24, r6
9001f67c:	83393800 	or	r25, r25, r7
9001f680:	90a70041 	srl	r5, r7
9001f684:	80a32800 	or	r5, r3, r5
9001f688:	646b001f 	bsrli	r3, r11, 31
9001f68c:	110a5000 	addk	r8, r10, r10
9001f690:	90860041 	srl	r4, r6
9001f694:	81034000 	or	r8, r3, r8
9001f698:	112b5800 	addk	r9, r11, r11
9001f69c:	10c40000 	addk	r6, r4, r0
9001f6a0:	10e50000 	addk	r7, r5, r0
9001f6a4:	11480000 	addk	r10, r8, r0
9001f6a8:	aa4c003d 	xori	r18, r12, 61
9001f6ac:	be12003c 	beqid	r18, 60		// 9001f6e8
9001f6b0:	11690000 	addk	r11, r9, r0
9001f6b4:	318c0001 	addik	r12, r12, 1
9001f6b8:	16565003 	cmpu	r18, r22, r10
9001f6bc:	be52ffc4 	bltid	r18, -60		// 9001f680
9001f6c0:	6466041f 	bslli	r3, r6, 31
9001f6c4:	164ab000 	rsubk	r18, r10, r22
9001f6c8:	bc32ffa8 	bnei	r18, -88		// 9001f670
9001f6cc:	16575803 	cmpu	r18, r23, r11
9001f6d0:	be52ffb4 	bltid	r18, -76		// 9001f684
9001f6d4:	90a70041 	srl	r5, r7
9001f6d8:	b800ff98 	bri	-104		// 9001f670
9001f6dc:	f861002c 	swi	r3, r1, 44
9001f6e0:	b810fef8 	brid	-264		// 9001f5d8
9001f6e4:	10b30000 	addk	r5, r19, r0
9001f6e8:	30800000 	addik	r4, r0, 0
9001f6ec:	30a000ff 	addik	r5, r0, 255
9001f6f0:	84982000 	and	r4, r24, r4
9001f6f4:	be240010 	bneid	r4, 16		// 9001f704
9001f6f8:	84b92800 	and	r5, r25, r5
9001f6fc:	aa450080 	xori	r18, r5, 128
9001f700:	bc120040 	beqi	r18, 64		// 9001f740
9001f704:	fb010038 	swi	r24, r1, 56
9001f708:	fb21003c 	swi	r25, r1, 60
9001f70c:	b810fecc 	brid	-308		// 9001f5d8
9001f710:	10b30000 	addk	r5, r19, r0
9001f714:	16575803 	cmpu	r18, r23, r11
9001f718:	bcb2ff3c 	bgei	r18, -196		// 9001f654
9001f71c:	646b001f 	bsrli	r3, r11, 31
9001f720:	108a5000 	addk	r4, r10, r10
9001f724:	80832000 	or	r4, r3, r4
9001f728:	10ab5800 	addk	r5, r11, r11
9001f72c:	11440000 	addk	r10, r4, r0
9001f730:	30c6ffff 	addik	r6, r6, -1
9001f734:	f8c10034 	swi	r6, r1, 52
9001f738:	b810ff1c 	brid	-228		// 9001f654
9001f73c:	11650000 	addk	r11, r5, r0
9001f740:	30800000 	addik	r4, r0, 0
9001f744:	30a00100 	addik	r5, r0, 256
9001f748:	84982000 	and	r4, r24, r4
9001f74c:	84b92800 	and	r5, r25, r5
9001f750:	80842800 	or	r4, r4, r5
9001f754:	be24ffb0 	bneid	r4, -80		// 9001f704
9001f758:	80684800 	or	r3, r8, r9
9001f75c:	bc03ffa8 	beqi	r3, -88		// 9001f704
9001f760:	20f90080 	addi	r7, r25, 128
9001f764:	08d80000 	addc	r6, r24, r0
9001f768:	3080ffff 	addik	r4, r0, -1
9001f76c:	30a0ff00 	addik	r5, r0, -256
9001f770:	87062000 	and	r24, r6, r4
9001f774:	b810ff90 	brid	-112		// 9001f704
9001f778:	87272800 	and	r25, r7, r5

9001f77c <__eqdf2>:
9001f77c:	3021ff9c 	addik	r1, r1, -100
9001f780:	fb010060 	swi	r24, r1, 96
9001f784:	3301002c 	addik	r24, r1, 44
9001f788:	11450000 	addk	r10, r5, r0
9001f78c:	11660000 	addk	r11, r6, r0
9001f790:	fac10058 	swi	r22, r1, 88
9001f794:	fae1005c 	swi	r23, r1, 92
9001f798:	12c70000 	addk	r22, r7, r0
9001f79c:	12e80000 	addk	r23, r8, r0
9001f7a0:	10d80000 	addk	r6, r24, r0
9001f7a4:	fa610054 	swi	r19, r1, 84
9001f7a8:	30a1001c 	addik	r5, r1, 28
9001f7ac:	f9e10000 	swi	r15, r1, 0
9001f7b0:	f941001c 	swi	r10, r1, 28
9001f7b4:	f9610020 	swi	r11, r1, 32
9001f7b8:	fac10024 	swi	r22, r1, 36
9001f7bc:	fae10028 	swi	r23, r1, 40
9001f7c0:	b9f409c0 	brlid	r15, 2496	// 90020180 <__unpack_d>
9001f7c4:	32610040 	addik	r19, r1, 64
9001f7c8:	10d30000 	addk	r6, r19, r0
9001f7cc:	b9f409b4 	brlid	r15, 2484	// 90020180 <__unpack_d>
9001f7d0:	30a10024 	addik	r5, r1, 36
9001f7d4:	e861002c 	lwi	r3, r1, 44
9001f7d8:	22400001 	addi	r18, r0, 1
9001f7dc:	16439003 	cmpu	r18, r3, r18
9001f7e0:	beb20020 	bgeid	r18, 32		// 9001f800
9001f7e4:	30800001 	addik	r4, r0, 1
9001f7e8:	e8610040 	lwi	r3, r1, 64
9001f7ec:	10b80000 	addk	r5, r24, r0
9001f7f0:	22400001 	addi	r18, r0, 1
9001f7f4:	16439003 	cmpu	r18, r3, r18
9001f7f8:	be520028 	bltid	r18, 40		// 9001f820
9001f7fc:	10d30000 	addk	r6, r19, r0
9001f800:	10640000 	addk	r3, r4, r0
9001f804:	e9e10000 	lwi	r15, r1, 0
9001f808:	ea610054 	lwi	r19, r1, 84
9001f80c:	eac10058 	lwi	r22, r1, 88
9001f810:	eae1005c 	lwi	r23, r1, 92
9001f814:	eb010060 	lwi	r24, r1, 96
9001f818:	b60f0008 	rtsd	r15, 8
9001f81c:	30210064 	addik	r1, r1, 100
9001f820:	b9f40ad0 	brlid	r15, 2768	// 900202f0 <__fpcmp_parts_d>
9001f824:	80000000 	or	r0, r0, r0
9001f828:	b810ffd8 	brid	-40		// 9001f800
9001f82c:	10830000 	addk	r4, r3, r0

9001f830 <__nedf2>:
9001f830:	3021ff9c 	addik	r1, r1, -100
9001f834:	fb010060 	swi	r24, r1, 96
9001f838:	3301002c 	addik	r24, r1, 44
9001f83c:	11450000 	addk	r10, r5, r0
9001f840:	11660000 	addk	r11, r6, r0
9001f844:	fac10058 	swi	r22, r1, 88
9001f848:	fae1005c 	swi	r23, r1, 92
9001f84c:	12c70000 	addk	r22, r7, r0
9001f850:	12e80000 	addk	r23, r8, r0
9001f854:	10d80000 	addk	r6, r24, r0
9001f858:	fa610054 	swi	r19, r1, 84
9001f85c:	30a1001c 	addik	r5, r1, 28
9001f860:	f9e10000 	swi	r15, r1, 0
9001f864:	f941001c 	swi	r10, r1, 28
9001f868:	f9610020 	swi	r11, r1, 32
9001f86c:	fac10024 	swi	r22, r1, 36
9001f870:	fae10028 	swi	r23, r1, 40
9001f874:	b9f4090c 	brlid	r15, 2316	// 90020180 <__unpack_d>
9001f878:	32610040 	addik	r19, r1, 64
9001f87c:	10d30000 	addk	r6, r19, r0
9001f880:	b9f40900 	brlid	r15, 2304	// 90020180 <__unpack_d>
9001f884:	30a10024 	addik	r5, r1, 36
9001f888:	e861002c 	lwi	r3, r1, 44
9001f88c:	22400001 	addi	r18, r0, 1
9001f890:	16439003 	cmpu	r18, r3, r18
9001f894:	beb20020 	bgeid	r18, 32		// 9001f8b4
9001f898:	30800001 	addik	r4, r0, 1
9001f89c:	e8610040 	lwi	r3, r1, 64
9001f8a0:	10b80000 	addk	r5, r24, r0
9001f8a4:	22400001 	addi	r18, r0, 1
9001f8a8:	16439003 	cmpu	r18, r3, r18
9001f8ac:	be520028 	bltid	r18, 40		// 9001f8d4
9001f8b0:	10d30000 	addk	r6, r19, r0
9001f8b4:	10640000 	addk	r3, r4, r0
9001f8b8:	e9e10000 	lwi	r15, r1, 0
9001f8bc:	ea610054 	lwi	r19, r1, 84
9001f8c0:	eac10058 	lwi	r22, r1, 88
9001f8c4:	eae1005c 	lwi	r23, r1, 92
9001f8c8:	eb010060 	lwi	r24, r1, 96
9001f8cc:	b60f0008 	rtsd	r15, 8
9001f8d0:	30210064 	addik	r1, r1, 100
9001f8d4:	b9f40a1c 	brlid	r15, 2588	// 900202f0 <__fpcmp_parts_d>
9001f8d8:	80000000 	or	r0, r0, r0
9001f8dc:	b810ffd8 	brid	-40		// 9001f8b4
9001f8e0:	10830000 	addk	r4, r3, r0

9001f8e4 <__gtdf2>:
9001f8e4:	3021ff9c 	addik	r1, r1, -100
9001f8e8:	fb010060 	swi	r24, r1, 96
9001f8ec:	3301002c 	addik	r24, r1, 44
9001f8f0:	11450000 	addk	r10, r5, r0
9001f8f4:	11660000 	addk	r11, r6, r0
9001f8f8:	fac10058 	swi	r22, r1, 88
9001f8fc:	fae1005c 	swi	r23, r1, 92
9001f900:	12c70000 	addk	r22, r7, r0
9001f904:	12e80000 	addk	r23, r8, r0
9001f908:	10d80000 	addk	r6, r24, r0
9001f90c:	fa610054 	swi	r19, r1, 84
9001f910:	30a1001c 	addik	r5, r1, 28
9001f914:	f9e10000 	swi	r15, r1, 0
9001f918:	f941001c 	swi	r10, r1, 28
9001f91c:	f9610020 	swi	r11, r1, 32
9001f920:	fac10024 	swi	r22, r1, 36
9001f924:	fae10028 	swi	r23, r1, 40
9001f928:	b9f40858 	brlid	r15, 2136	// 90020180 <__unpack_d>
9001f92c:	32610040 	addik	r19, r1, 64
9001f930:	10d30000 	addk	r6, r19, r0
9001f934:	b9f4084c 	brlid	r15, 2124	// 90020180 <__unpack_d>
9001f938:	30a10024 	addik	r5, r1, 36
9001f93c:	e861002c 	lwi	r3, r1, 44
9001f940:	22400001 	addi	r18, r0, 1
9001f944:	16439003 	cmpu	r18, r3, r18
9001f948:	be520028 	bltid	r18, 40		// 9001f970
9001f94c:	3080ffff 	addik	r4, r0, -1
9001f950:	10640000 	addk	r3, r4, r0
9001f954:	e9e10000 	lwi	r15, r1, 0
9001f958:	ea610054 	lwi	r19, r1, 84
9001f95c:	eac10058 	lwi	r22, r1, 88
9001f960:	eae1005c 	lwi	r23, r1, 92
9001f964:	eb010060 	lwi	r24, r1, 96
9001f968:	b60f0008 	rtsd	r15, 8
9001f96c:	30210064 	addik	r1, r1, 100
9001f970:	e8610040 	lwi	r3, r1, 64
9001f974:	10b80000 	addk	r5, r24, r0
9001f978:	22400001 	addi	r18, r0, 1
9001f97c:	16439003 	cmpu	r18, r3, r18
9001f980:	beb2ffd0 	bgeid	r18, -48		// 9001f950
9001f984:	10d30000 	addk	r6, r19, r0
9001f988:	b9f40968 	brlid	r15, 2408	// 900202f0 <__fpcmp_parts_d>
9001f98c:	80000000 	or	r0, r0, r0
9001f990:	b810ffc0 	brid	-64		// 9001f950
9001f994:	10830000 	addk	r4, r3, r0

9001f998 <__gedf2>:
9001f998:	3021ff9c 	addik	r1, r1, -100
9001f99c:	fb010060 	swi	r24, r1, 96
9001f9a0:	3301002c 	addik	r24, r1, 44
9001f9a4:	11450000 	addk	r10, r5, r0
9001f9a8:	11660000 	addk	r11, r6, r0
9001f9ac:	fac10058 	swi	r22, r1, 88
9001f9b0:	fae1005c 	swi	r23, r1, 92
9001f9b4:	12c70000 	addk	r22, r7, r0
9001f9b8:	12e80000 	addk	r23, r8, r0
9001f9bc:	10d80000 	addk	r6, r24, r0
9001f9c0:	fa610054 	swi	r19, r1, 84
9001f9c4:	30a1001c 	addik	r5, r1, 28
9001f9c8:	f9e10000 	swi	r15, r1, 0
9001f9cc:	f941001c 	swi	r10, r1, 28
9001f9d0:	f9610020 	swi	r11, r1, 32
9001f9d4:	fac10024 	swi	r22, r1, 36
9001f9d8:	fae10028 	swi	r23, r1, 40
9001f9dc:	b9f407a4 	brlid	r15, 1956	// 90020180 <__unpack_d>
9001f9e0:	32610040 	addik	r19, r1, 64
9001f9e4:	10d30000 	addk	r6, r19, r0
9001f9e8:	b9f40798 	brlid	r15, 1944	// 90020180 <__unpack_d>
9001f9ec:	30a10024 	addik	r5, r1, 36
9001f9f0:	e861002c 	lwi	r3, r1, 44
9001f9f4:	22400001 	addi	r18, r0, 1
9001f9f8:	16439003 	cmpu	r18, r3, r18
9001f9fc:	be520028 	bltid	r18, 40		// 9001fa24
9001fa00:	3080ffff 	addik	r4, r0, -1
9001fa04:	10640000 	addk	r3, r4, r0
9001fa08:	e9e10000 	lwi	r15, r1, 0
9001fa0c:	ea610054 	lwi	r19, r1, 84
9001fa10:	eac10058 	lwi	r22, r1, 88
9001fa14:	eae1005c 	lwi	r23, r1, 92
9001fa18:	eb010060 	lwi	r24, r1, 96
9001fa1c:	b60f0008 	rtsd	r15, 8
9001fa20:	30210064 	addik	r1, r1, 100
9001fa24:	e8610040 	lwi	r3, r1, 64
9001fa28:	10b80000 	addk	r5, r24, r0
9001fa2c:	22400001 	addi	r18, r0, 1
9001fa30:	16439003 	cmpu	r18, r3, r18
9001fa34:	beb2ffd0 	bgeid	r18, -48		// 9001fa04
9001fa38:	10d30000 	addk	r6, r19, r0
9001fa3c:	b9f408b4 	brlid	r15, 2228	// 900202f0 <__fpcmp_parts_d>
9001fa40:	80000000 	or	r0, r0, r0
9001fa44:	b810ffc0 	brid	-64		// 9001fa04
9001fa48:	10830000 	addk	r4, r3, r0

9001fa4c <__ltdf2>:
9001fa4c:	3021ff9c 	addik	r1, r1, -100
9001fa50:	fb010060 	swi	r24, r1, 96
9001fa54:	3301002c 	addik	r24, r1, 44
9001fa58:	11450000 	addk	r10, r5, r0
9001fa5c:	11660000 	addk	r11, r6, r0
9001fa60:	fac10058 	swi	r22, r1, 88
9001fa64:	fae1005c 	swi	r23, r1, 92
9001fa68:	12c70000 	addk	r22, r7, r0
9001fa6c:	12e80000 	addk	r23, r8, r0
9001fa70:	10d80000 	addk	r6, r24, r0
9001fa74:	fa610054 	swi	r19, r1, 84
9001fa78:	30a1001c 	addik	r5, r1, 28
9001fa7c:	f9e10000 	swi	r15, r1, 0
9001fa80:	f941001c 	swi	r10, r1, 28
9001fa84:	f9610020 	swi	r11, r1, 32
9001fa88:	fac10024 	swi	r22, r1, 36
9001fa8c:	fae10028 	swi	r23, r1, 40
9001fa90:	b9f406f0 	brlid	r15, 1776	// 90020180 <__unpack_d>
9001fa94:	32610040 	addik	r19, r1, 64
9001fa98:	10d30000 	addk	r6, r19, r0
9001fa9c:	b9f406e4 	brlid	r15, 1764	// 90020180 <__unpack_d>
9001faa0:	30a10024 	addik	r5, r1, 36
9001faa4:	e861002c 	lwi	r3, r1, 44
9001faa8:	22400001 	addi	r18, r0, 1
9001faac:	16439003 	cmpu	r18, r3, r18
9001fab0:	beb20020 	bgeid	r18, 32		// 9001fad0
9001fab4:	30800001 	addik	r4, r0, 1
9001fab8:	e8610040 	lwi	r3, r1, 64
9001fabc:	10b80000 	addk	r5, r24, r0
9001fac0:	22400001 	addi	r18, r0, 1
9001fac4:	16439003 	cmpu	r18, r3, r18
9001fac8:	be520028 	bltid	r18, 40		// 9001faf0
9001facc:	10d30000 	addk	r6, r19, r0
9001fad0:	10640000 	addk	r3, r4, r0
9001fad4:	e9e10000 	lwi	r15, r1, 0
9001fad8:	ea610054 	lwi	r19, r1, 84
9001fadc:	eac10058 	lwi	r22, r1, 88
9001fae0:	eae1005c 	lwi	r23, r1, 92
9001fae4:	eb010060 	lwi	r24, r1, 96
9001fae8:	b60f0008 	rtsd	r15, 8
9001faec:	30210064 	addik	r1, r1, 100
9001faf0:	b9f40800 	brlid	r15, 2048	// 900202f0 <__fpcmp_parts_d>
9001faf4:	80000000 	or	r0, r0, r0
9001faf8:	b810ffd8 	brid	-40		// 9001fad0
9001fafc:	10830000 	addk	r4, r3, r0

9001fb00 <__floatsidf>:
9001fb00:	3021ffd0 	addik	r1, r1, -48
9001fb04:	30600003 	addik	r3, r0, 3
9001fb08:	f9e10000 	swi	r15, r1, 0
9001fb0c:	f861001c 	swi	r3, r1, 28
9001fb10:	f8010020 	swi	r0, r1, 32
9001fb14:	be450100 	bltid	r5, 256		// 9001fc14
9001fb18:	30600001 	addik	r3, r0, 1
9001fb1c:	be250034 	bneid	r5, 52		// 9001fb50
9001fb20:	3100003c 	addik	r8, r0, 60
9001fb24:	30600002 	addik	r3, r0, 2
9001fb28:	f861001c 	swi	r3, r1, 28
9001fb2c:	b9f402fc 	brlid	r15, 764	// 9001fe28 <__pack_d>
9001fb30:	30a1001c 	addik	r5, r1, 28
9001fb34:	10c30000 	addk	r6, r3, r0
9001fb38:	10e40000 	addk	r7, r4, r0
9001fb3c:	10660000 	addk	r3, r6, r0
9001fb40:	10870000 	addk	r4, r7, r0
9001fb44:	e9e10000 	lwi	r15, r1, 0
9001fb48:	b60f0008 	rtsd	r15, 8
9001fb4c:	30210030 	addik	r1, r1, 48
9001fb50:	e8610020 	lwi	r3, r1, 32
9001fb54:	f9010024 	swi	r8, r1, 36
9001fb58:	bc030098 	beqi	r3, 152		// 9001fbf0
9001fb5c:	b000c1e0 	imm	-15904
9001fb60:	30c00000 	addik	r6, r0, 0
9001fb64:	30e00000 	addik	r7, r0, 0
9001fb68:	b0008000 	imm	-32768
9001fb6c:	aa450000 	xori	r18, r5, 0
9001fb70:	be12ffcc 	beqid	r18, -52		// 9001fb3c
9001fb74:	14850000 	rsubk	r4, r5, r0
9001fb78:	00a02000 	add	r5, r0, r4
9001fb7c:	00852800 	add	r4, r5, r5
9001fb80:	08800000 	addc	r4, r0, r0
9001fb84:	bc040008 	beqi	r4, 8		// 9001fb8c
9001fb88:	2080ffff 	addi	r4, r0, -1
9001fb8c:	f8810028 	swi	r4, r1, 40
9001fb90:	f8a1002c 	swi	r5, r1, 44
9001fb94:	e8c10028 	lwi	r6, r1, 40
9001fb98:	e8e1002c 	lwi	r7, r1, 44
9001fb9c:	b0000fff 	imm	4095
9001fba0:	2240ffff 	addi	r18, r0, -1
9001fba4:	16469003 	cmpu	r18, r6, r18
9001fba8:	bc52ff84 	blti	r18, -124		// 9001fb2c
9001fbac:	e9010024 	lwi	r8, r1, 36
9001fbb0:	6487001f 	bsrli	r4, r7, 31
9001fbb4:	10663000 	addk	r3, r6, r6
9001fbb8:	80632000 	or	r3, r3, r4
9001fbbc:	10a73800 	addk	r5, r7, r7
9001fbc0:	f8610028 	swi	r3, r1, 40
9001fbc4:	f8a1002c 	swi	r5, r1, 44
9001fbc8:	e8c10028 	lwi	r6, r1, 40
9001fbcc:	e8e1002c 	lwi	r7, r1, 44
9001fbd0:	3068ffff 	addik	r3, r8, -1
9001fbd4:	f8610024 	swi	r3, r1, 36
9001fbd8:	b0000fff 	imm	4095
9001fbdc:	2240ffff 	addi	r18, r0, -1
9001fbe0:	16469003 	cmpu	r18, r6, r18
9001fbe4:	beb2ffcc 	bgeid	r18, -52		// 9001fbb0
9001fbe8:	11030000 	addk	r8, r3, r0
9001fbec:	b800ff40 	bri	-192		// 9001fb2c
9001fbf0:	10850000 	addk	r4, r5, r0
9001fbf4:	00a02000 	add	r5, r0, r4
9001fbf8:	00852800 	add	r4, r5, r5
9001fbfc:	08800000 	addc	r4, r0, r0
9001fc00:	bc040008 	beqi	r4, 8		// 9001fc08
9001fc04:	2080ffff 	addi	r4, r0, -1
9001fc08:	f8810028 	swi	r4, r1, 40
9001fc0c:	f8a1002c 	swi	r5, r1, 44
9001fc10:	b800ff84 	bri	-124		// 9001fb94
9001fc14:	f8610020 	swi	r3, r1, 32
9001fc18:	b800ff04 	bri	-252		// 9001fb1c

9001fc1c <__fixdfsi>:
9001fc1c:	11050000 	addk	r8, r5, r0
9001fc20:	11260000 	addk	r9, r6, r0
9001fc24:	3021ffc8 	addik	r1, r1, -56
9001fc28:	30a1001c 	addik	r5, r1, 28
9001fc2c:	f9e10000 	swi	r15, r1, 0
9001fc30:	f901001c 	swi	r8, r1, 28
9001fc34:	f9210020 	swi	r9, r1, 32
9001fc38:	b9f40548 	brlid	r15, 1352	// 90020180 <__unpack_d>
9001fc3c:	30c10024 	addik	r6, r1, 36
9001fc40:	e8610024 	lwi	r3, r1, 36
9001fc44:	aa430002 	xori	r18, r3, 2
9001fc48:	be12003c 	beqid	r18, 60		// 9001fc84
9001fc4c:	10800000 	addk	r4, r0, r0
9001fc50:	22400001 	addi	r18, r0, 1
9001fc54:	16439003 	cmpu	r18, r3, r18
9001fc58:	bcb2002c 	bgei	r18, 44		// 9001fc84
9001fc5c:	aa430004 	xori	r18, r3, 4
9001fc60:	bc320034 	bnei	r18, 52		// 9001fc94
9001fc64:	e8610028 	lwi	r3, r1, 40
9001fc68:	b0007fff 	imm	32767
9001fc6c:	3080ffff 	addik	r4, r0, -1
9001fc70:	bc030014 	beqi	r3, 20		// 9001fc84
9001fc74:	b0008000 	imm	-32768
9001fc78:	30800000 	addik	r4, r0, 0
9001fc7c:	b810000c 	brid	12		// 9001fc88
9001fc80:	10640000 	addk	r3, r4, r0
9001fc84:	10640000 	addk	r3, r4, r0
9001fc88:	e9e10000 	lwi	r15, r1, 0
9001fc8c:	b60f0008 	rtsd	r15, 8
9001fc90:	30210038 	addik	r1, r1, 56
9001fc94:	e861002c 	lwi	r3, r1, 44
9001fc98:	be43ffec 	bltid	r3, -20		// 9001fc84
9001fc9c:	10800000 	addk	r4, r0, r0
9001fca0:	3240001e 	addik	r18, r0, 30
9001fca4:	16439001 	cmp	r18, r3, r18
9001fca8:	be52ffbc 	bltid	r18, -68		// 9001fc64
9001fcac:	34e3003c 	rsubik	r7, r3, 60
9001fcb0:	a4670020 	andi	r3, r7, 32
9001fcb4:	be030024 	beqid	r3, 36		// 9001fcd8
9001fcb8:	a8a7ffff 	xori	r5, r7, -1
9001fcbc:	e8610030 	lwi	r3, r1, 48
9001fcc0:	45233800 	bsrl	r9, r3, r7
9001fcc4:	e8610028 	lwi	r3, r1, 40
9001fcc8:	be03ffbc 	beqid	r3, -68		// 9001fc84
9001fccc:	10890000 	addk	r4, r9, r0
9001fcd0:	b810ffb4 	brid	-76		// 9001fc84
9001fcd4:	14890000 	rsubk	r4, r9, r0
9001fcd8:	e8c10030 	lwi	r6, r1, 48
9001fcdc:	e8810034 	lwi	r4, r1, 52
9001fce0:	10663000 	addk	r3, r6, r6
9001fce4:	44632c00 	bsll	r3, r3, r5
9001fce8:	45243800 	bsrl	r9, r4, r7
9001fcec:	b810ffd8 	brid	-40		// 9001fcc4
9001fcf0:	81234800 	or	r9, r3, r9

9001fcf4 <__modsi3>:
9001fcf4:	3021fff0 	addik	r1, r1, -16
9001fcf8:	fb810000 	swi	r28, r1, 0
9001fcfc:	fba10004 	swi	r29, r1, 4
9001fd00:	fbc10008 	swi	r30, r1, 8
9001fd04:	fbe1000c 	swi	r31, r1, 12
9001fd08:	bc060068 	beqi	r6, 104		// 9001fd70
9001fd0c:	bc050064 	beqi	r5, 100		// 9001fd70
9001fd10:	bea5000c 	bgeid	r5, 12		// 9001fd1c
9001fd14:	03850000 	add	r28, r5, r0
9001fd18:	24a50000 	rsubi	r5, r5, 0
9001fd1c:	bca60008 	bgei	r6, 8		// 9001fd24
9001fd20:	24c60000 	rsubi	r6, r6, 0
9001fd24:	30600000 	addik	r3, r0, 0
9001fd28:	33c00000 	addik	r30, r0, 0
9001fd2c:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
9001fd30:	00a52800 	add	r5, r5, r5
9001fd34:	bea5fffc 	bgeid	r5, -4		// 9001fd30
9001fd38:	33bdffff 	addik	r29, r29, -1
9001fd3c:	00a52800 	add	r5, r5, r5
9001fd40:	08631800 	addc	r3, r3, r3
9001fd44:	07e61800 	rsub	r31, r6, r3
9001fd48:	bc5f000c 	blti	r31, 12		// 9001fd54
9001fd4c:	8060f800 	or	r3, r0, r31
9001fd50:	33de0001 	addik	r30, r30, 1
9001fd54:	33bdffff 	addik	r29, r29, -1
9001fd58:	bc1d000c 	beqi	r29, 12		// 9001fd64
9001fd5c:	03def000 	add	r30, r30, r30
9001fd60:	b800ffdc 	bri	-36		// 9001fd3c
9001fd64:	bcbc0010 	bgei	r28, 16		// 9001fd74
9001fd68:	b810000c 	brid	12		// 9001fd74
9001fd6c:	24630000 	rsubi	r3, r3, 0
9001fd70:	80600000 	or	r3, r0, r0
9001fd74:	eb810000 	lwi	r28, r1, 0
9001fd78:	eba10004 	lwi	r29, r1, 4
9001fd7c:	ebc10008 	lwi	r30, r1, 8
9001fd80:	ebe1000c 	lwi	r31, r1, 12
9001fd84:	b60f0008 	rtsd	r15, 8
9001fd88:	30210010 	addik	r1, r1, 16

9001fd8c <__divsi3>:
9001fd8c:	3021fff0 	addik	r1, r1, -16
9001fd90:	fb810000 	swi	r28, r1, 0
9001fd94:	fba10004 	swi	r29, r1, 4
9001fd98:	fbc10008 	swi	r30, r1, 8
9001fd9c:	fbe1000c 	swi	r31, r1, 12
9001fda0:	bc06006c 	beqi	r6, 108		// 9001fe0c
9001fda4:	bc050068 	beqi	r5, 104		// 9001fe0c
9001fda8:	bea5000c 	bgeid	r5, 12		// 9001fdb4
9001fdac:	8b853000 	xor	r28, r5, r6
9001fdb0:	24a50000 	rsubi	r5, r5, 0
9001fdb4:	bca60008 	bgei	r6, 8		// 9001fdbc
9001fdb8:	24c60000 	rsubi	r6, r6, 0
9001fdbc:	33c00000 	addik	r30, r0, 0
9001fdc0:	30600000 	addik	r3, r0, 0
9001fdc4:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
9001fdc8:	bc450010 	blti	r5, 16		// 9001fdd8
9001fdcc:	00a52800 	add	r5, r5, r5
9001fdd0:	be85fffc 	bgtid	r5, -4		// 9001fdcc
9001fdd4:	33bdffff 	addik	r29, r29, -1
9001fdd8:	00a52800 	add	r5, r5, r5
9001fddc:	0bdef000 	addc	r30, r30, r30
9001fde0:	07e6f000 	rsub	r31, r6, r30
9001fde4:	bc5f000c 	blti	r31, 12		// 9001fdf0
9001fde8:	83c0f800 	or	r30, r0, r31
9001fdec:	30630001 	addik	r3, r3, 1
9001fdf0:	33bdffff 	addik	r29, r29, -1
9001fdf4:	bc1d000c 	beqi	r29, 12		// 9001fe00
9001fdf8:	00631800 	add	r3, r3, r3
9001fdfc:	b800ffdc 	bri	-36		// 9001fdd8
9001fe00:	bcbc0010 	bgei	r28, 16		// 9001fe10
9001fe04:	b810000c 	brid	12		// 9001fe10
9001fe08:	24630000 	rsubi	r3, r3, 0
9001fe0c:	80600000 	or	r3, r0, r0
9001fe10:	eb810000 	lwi	r28, r1, 0
9001fe14:	eba10004 	lwi	r29, r1, 4
9001fe18:	ebc10008 	lwi	r30, r1, 8
9001fe1c:	ebe1000c 	lwi	r31, r1, 12
9001fe20:	b60f0008 	rtsd	r15, 8
9001fe24:	30210010 	addik	r1, r1, 16

9001fe28 <__pack_d>:
9001fe28:	3021ffec 	addik	r1, r1, -20
9001fe2c:	fac10004 	swi	r22, r1, 4
9001fe30:	fae10008 	swi	r23, r1, 8
9001fe34:	fb01000c 	swi	r24, r1, 12
9001fe38:	fb210010 	swi	r25, r1, 16
9001fe3c:	e8650000 	lwi	r3, r5, 0
9001fe40:	e8c5000c 	lwi	r6, r5, 12
9001fe44:	e8e50010 	lwi	r7, r5, 16
9001fe48:	e9850004 	lwi	r12, r5, 4
9001fe4c:	22400001 	addi	r18, r0, 1
9001fe50:	16439003 	cmpu	r18, r3, r18
9001fe54:	bc520084 	blti	r18, 132		// 9001fed8
9001fe58:	b0000008 	imm	8
9001fe5c:	30800000 	addik	r4, r0, 0
9001fe60:	30a00000 	addik	r5, r0, 0
9001fe64:	80862000 	or	r4, r6, r4
9001fe68:	80a72800 	or	r5, r7, r5
9001fe6c:	b000000f 	imm	15
9001fe70:	30c0ffff 	addik	r6, r0, -1
9001fe74:	30e0ffff 	addik	r7, r0, -1
9001fe78:	86c43000 	and	r22, r4, r6
9001fe7c:	86e53800 	and	r23, r5, r7
9001fe80:	b0007ff0 	imm	32752
9001fe84:	31000000 	addik	r8, r0, 0
9001fe88:	31200000 	addik	r9, r0, 0
9001fe8c:	30ac0000 	addik	r5, r12, 0
9001fe90:	30800000 	addik	r4, r0, 0
9001fe94:	30c00000 	addik	r6, r0, 0
9001fe98:	30e00001 	addik	r7, r0, 1
9001fe9c:	84a53800 	and	r5, r5, r7
9001fea0:	6485041f 	bslli	r4, r5, 31
9001fea4:	10a00000 	addk	r5, r0, r0
9001fea8:	80962000 	or	r4, r22, r4
9001feac:	80b72800 	or	r5, r23, r5
9001feb0:	80c82000 	or	r6, r8, r4
9001feb4:	80e92800 	or	r7, r9, r5
9001feb8:	10660000 	addk	r3, r6, r0
9001febc:	10870000 	addk	r4, r7, r0
9001fec0:	eac10004 	lwi	r22, r1, 4
9001fec4:	eae10008 	lwi	r23, r1, 8
9001fec8:	eb01000c 	lwi	r24, r1, 12
9001fecc:	eb210010 	lwi	r25, r1, 16
9001fed0:	b60f0008 	rtsd	r15, 8
9001fed4:	30210014 	addik	r1, r1, 20
9001fed8:	aa430004 	xori	r18, r3, 4
9001fedc:	bc120110 	beqi	r18, 272		// 9001ffec
9001fee0:	aa430002 	xori	r18, r3, 2
9001fee4:	be120120 	beqid	r18, 288		// 90020004
9001fee8:	80663800 	or	r3, r6, r7
9001feec:	bc030118 	beqi	r3, 280		// 90020004
9001fef0:	e9450008 	lwi	r10, r5, 8
9001fef4:	3240fc02 	addik	r18, r0, -1022
9001fef8:	16525001 	cmp	r18, r18, r10
9001fefc:	beb2011c 	bgeid	r18, 284		// 90020018
9001ff00:	34aafc02 	rsubik	r5, r10, -1022
9001ff04:	32400038 	addik	r18, r0, 56
9001ff08:	16459001 	cmp	r18, r5, r18
9001ff0c:	bc5201ac 	blti	r18, 428		// 900200b8
9001ff10:	a5450020 	andi	r10, r5, 32
9001ff14:	be0a01e0 	beqid	r10, 480		// 900200f4
9001ff18:	10663000 	addk	r3, r6, r6
9001ff1c:	46e62800 	bsrl	r23, r6, r5
9001ff20:	12c00000 	addk	r22, r0, r0
9001ff24:	13000000 	addk	r24, r0, r0
9001ff28:	13200000 	addk	r25, r0, r0
9001ff2c:	be0a01e0 	beqid	r10, 480		// 9002010c
9001ff30:	30600001 	addik	r3, r0, 1
9001ff34:	45032c00 	bsll	r8, r3, r5
9001ff38:	11200000 	addk	r9, r0, r0
9001ff3c:	20a9ffff 	addi	r5, r9, -1
9001ff40:	08880000 	addc	r4, r8, r0
9001ff44:	2084ffff 	addi	r4, r4, -1
9001ff48:	84862000 	and	r4, r6, r4
9001ff4c:	84a72800 	and	r5, r7, r5
9001ff50:	80842800 	or	r4, r4, r5
9001ff54:	bc04000c 	beqi	r4, 12		// 9001ff60
9001ff58:	33000000 	addik	r24, r0, 0
9001ff5c:	33200001 	addik	r25, r0, 1
9001ff60:	30800000 	addik	r4, r0, 0
9001ff64:	30a000ff 	addik	r5, r0, 255
9001ff68:	80d6c000 	or	r6, r22, r24
9001ff6c:	80f7c800 	or	r7, r23, r25
9001ff70:	84862000 	and	r4, r6, r4
9001ff74:	be240010 	bneid	r4, 16		// 9001ff84
9001ff78:	84a72800 	and	r5, r7, r5
9001ff7c:	aa450080 	xori	r18, r5, 128
9001ff80:	bc120198 	beqi	r18, 408		// 90020118
9001ff84:	20a7007f 	addi	r5, r7, 127
9001ff88:	08860000 	addc	r4, r6, r0
9001ff8c:	b0000fff 	imm	4095
9001ff90:	2240ffff 	addi	r18, r0, -1
9001ff94:	16449003 	cmpu	r18, r4, r18
9001ff98:	beb2000c 	bgeid	r18, 12		// 9001ffa4
9001ff9c:	10600000 	addk	r3, r0, r0
9001ffa0:	30600001 	addik	r3, r0, 1
9001ffa4:	11030000 	addk	r8, r3, r0
9001ffa8:	65650008 	bsrli	r11, r5, 8
9001ffac:	64640418 	bslli	r3, r4, 24
9001ffb0:	65440008 	bsrli	r10, r4, 8
9001ffb4:	81635800 	or	r11, r3, r11
9001ffb8:	30a80000 	addik	r5, r8, 0
9001ffbc:	30800000 	addik	r4, r0, 0
9001ffc0:	30c00000 	addik	r6, r0, 0
9001ffc4:	30e007ff 	addik	r7, r0, 2047
9001ffc8:	b000000f 	imm	15
9001ffcc:	3100ffff 	addik	r8, r0, -1
9001ffd0:	3120ffff 	addik	r9, r0, -1
9001ffd4:	84a53800 	and	r5, r5, r7
9001ffd8:	86ca4000 	and	r22, r10, r8
9001ffdc:	65050414 	bslli	r8, r5, 20
9001ffe0:	86eb4800 	and	r23, r11, r9
9001ffe4:	b810fea8 	brid	-344		// 9001fe8c
9001ffe8:	11200000 	addk	r9, r0, r0
9001ffec:	12c00000 	addk	r22, r0, r0
9001fff0:	12e00000 	addk	r23, r0, r0
9001fff4:	b0007ff0 	imm	32752
9001fff8:	31000000 	addik	r8, r0, 0
9001fffc:	31200000 	addik	r9, r0, 0
90020000:	b800fe8c 	bri	-372		// 9001fe8c
90020004:	11000000 	addk	r8, r0, r0
90020008:	11200000 	addk	r9, r0, r0
9002000c:	12c80000 	addk	r22, r8, r0
90020010:	b810fe7c 	brid	-388		// 9001fe8c
90020014:	12e90000 	addk	r23, r9, r0
90020018:	324003ff 	addik	r18, r0, 1023
9002001c:	164a9001 	cmp	r18, r10, r18
90020020:	bc52ffcc 	blti	r18, -52		// 9001ffec
90020024:	30800000 	addik	r4, r0, 0
90020028:	30a000ff 	addik	r5, r0, 255
9002002c:	84862000 	and	r4, r6, r4
90020030:	84a72800 	and	r5, r7, r5
90020034:	be040094 	beqid	r4, 148		// 900200c8
90020038:	314a03ff 	addik	r10, r10, 1023
9002003c:	20e7007f 	addi	r7, r7, 127
90020040:	08c60000 	addc	r6, r6, r0
90020044:	b0001fff 	imm	8191
90020048:	2240ffff 	addi	r18, r0, -1
9002004c:	16469003 	cmpu	r18, r6, r18
90020050:	beb20028 	bgeid	r18, 40		// 90020078
90020054:	64660418 	bslli	r3, r6, 24
90020058:	6466041f 	bslli	r3, r6, 31
9002005c:	90a70041 	srl	r5, r7
90020060:	80a32800 	or	r5, r3, r5
90020064:	90860041 	srl	r4, r6
90020068:	10c40000 	addk	r6, r4, r0
9002006c:	10e50000 	addk	r7, r5, r0
90020070:	314a0001 	addik	r10, r10, 1
90020074:	64660418 	bslli	r3, r6, 24
90020078:	64a70008 	bsrli	r5, r7, 8
9002007c:	64860008 	bsrli	r4, r6, 8
90020080:	316a0000 	addik	r11, r10, 0
90020084:	31400000 	addik	r10, r0, 0
90020088:	30c00000 	addik	r6, r0, 0
9002008c:	30e007ff 	addik	r7, r0, 2047
90020090:	b000000f 	imm	15
90020094:	3100ffff 	addik	r8, r0, -1
90020098:	3120ffff 	addik	r9, r0, -1
9002009c:	856b3800 	and	r11, r11, r7
900200a0:	80a32800 	or	r5, r3, r5
900200a4:	86c44000 	and	r22, r4, r8
900200a8:	650b0414 	bslli	r8, r11, 20
900200ac:	86e54800 	and	r23, r5, r9
900200b0:	b810fddc 	brid	-548		// 9001fe8c
900200b4:	11200000 	addk	r9, r0, r0
900200b8:	11400000 	addk	r10, r0, r0
900200bc:	11600000 	addk	r11, r0, r0
900200c0:	b810fef8 	brid	-264		// 9001ffb8
900200c4:	11000000 	addk	r8, r0, r0
900200c8:	aa450080 	xori	r18, r5, 128
900200cc:	bc32ff70 	bnei	r18, -144		// 9002003c
900200d0:	30800000 	addik	r4, r0, 0
900200d4:	30a00100 	addik	r5, r0, 256
900200d8:	84862000 	and	r4, r6, r4
900200dc:	84a72800 	and	r5, r7, r5
900200e0:	80842800 	or	r4, r4, r5
900200e4:	bc04ff60 	beqi	r4, -160		// 90020044
900200e8:	20e70080 	addi	r7, r7, 128
900200ec:	08c60000 	addc	r6, r6, r0
900200f0:	b800ff54 	bri	-172		// 90020044
900200f4:	a885ffff 	xori	r4, r5, -1
900200f8:	44632400 	bsll	r3, r3, r4
900200fc:	46e72800 	bsrl	r23, r7, r5
90020100:	46c62800 	bsrl	r22, r6, r5
90020104:	b810fe20 	brid	-480		// 9001ff24
90020108:	82e3b800 	or	r23, r3, r23
9002010c:	110a0000 	addk	r8, r10, r0
90020110:	b810fe2c 	brid	-468		// 9001ff3c
90020114:	45232c00 	bsll	r9, r3, r5
90020118:	30800000 	addik	r4, r0, 0
9002011c:	30a00100 	addik	r5, r0, 256
90020120:	84862000 	and	r4, r6, r4
90020124:	84a72800 	and	r5, r7, r5
90020128:	80842800 	or	r4, r4, r5
9002012c:	bc240030 	bnei	r4, 48		// 9002015c
90020130:	b0000fff 	imm	4095
90020134:	2240ffff 	addi	r18, r0, -1
90020138:	16469003 	cmpu	r18, r6, r18
9002013c:	beb2000c 	bgeid	r18, 12		// 90020148
90020140:	64660418 	bslli	r3, r6, 24
90020144:	30800001 	addik	r4, r0, 1
90020148:	65670008 	bsrli	r11, r7, 8
9002014c:	65460008 	bsrli	r10, r6, 8
90020150:	11040000 	addk	r8, r4, r0
90020154:	b810fe64 	brid	-412		// 9001ffb8
90020158:	81635800 	or	r11, r3, r11
9002015c:	20a70080 	addi	r5, r7, 128
90020160:	08860000 	addc	r4, r6, r0
90020164:	b0000fff 	imm	4095
90020168:	2240ffff 	addi	r18, r0, -1
9002016c:	16449003 	cmpu	r18, r4, r18
90020170:	beb2fe34 	bgeid	r18, -460		// 9001ffa4
90020174:	10600000 	addk	r3, r0, r0
90020178:	b810fe2c 	brid	-468		// 9001ffa4
9002017c:	30600001 	addik	r3, r0, 1

90020180 <__unpack_d>:
90020180:	3021fff8 	addik	r1, r1, -8
90020184:	fa610004 	swi	r19, r1, 4
90020188:	e9050000 	lwi	r8, r5, 0
9002018c:	e9250004 	lwi	r9, r5, 4
90020190:	12660000 	addk	r19, r6, r0
90020194:	64a80014 	bsrli	r5, r8, 20
90020198:	64e8001f 	bsrli	r7, r8, 31
9002019c:	a58507ff 	andi	r12, r5, 2047
900201a0:	a4670001 	andi	r3, r7, 1
900201a4:	b000000f 	imm	15
900201a8:	3080ffff 	addik	r4, r0, -1
900201ac:	30a0ffff 	addik	r5, r0, -1
900201b0:	f8660004 	swi	r3, r6, 4
900201b4:	85482000 	and	r10, r8, r4
900201b8:	be2c008c 	bneid	r12, 140		// 90020244
900201bc:	85692800 	and	r11, r9, r5
900201c0:	806a5800 	or	r3, r10, r11
900201c4:	be0300d0 	beqid	r3, 208		// 90020294
900201c8:	30600002 	addik	r3, r0, 2
900201cc:	30600003 	addik	r3, r0, 3
900201d0:	3080fc02 	addik	r4, r0, -1022
900201d4:	f8660000 	swi	r3, r6, 0
900201d8:	f8860008 	swi	r4, r6, 8
900201dc:	646b0018 	bsrli	r3, r11, 24
900201e0:	64ca0408 	bslli	r6, r10, 8
900201e4:	80c33000 	or	r6, r3, r6
900201e8:	b0000fff 	imm	4095
900201ec:	2240ffff 	addi	r18, r0, -1
900201f0:	16469003 	cmpu	r18, r6, r18
900201f4:	be52003c 	bltid	r18, 60		// 90020230
900201f8:	64eb0408 	bslli	r7, r11, 8
900201fc:	11040000 	addk	r8, r4, r0
90020200:	6467001f 	bsrli	r3, r7, 31
90020204:	10863000 	addk	r4, r6, r6
90020208:	80832000 	or	r4, r3, r4
9002020c:	10a73800 	addk	r5, r7, r7
90020210:	10c40000 	addk	r6, r4, r0
90020214:	10e50000 	addk	r7, r5, r0
90020218:	b0000fff 	imm	4095
9002021c:	2240ffff 	addi	r18, r0, -1
90020220:	16449003 	cmpu	r18, r4, r18
90020224:	beb2ffdc 	bgeid	r18, -36		// 90020200
90020228:	3108ffff 	addik	r8, r8, -1
9002022c:	f9130008 	swi	r8, r19, 8
90020230:	f8d3000c 	swi	r6, r19, 12
90020234:	f8f30010 	swi	r7, r19, 16
90020238:	ea610004 	lwi	r19, r1, 4
9002023c:	b60f0008 	rtsd	r15, 8
90020240:	30210008 	addik	r1, r1, 8
90020244:	aa4c07ff 	xori	r18, r12, 2047
90020248:	be12005c 	beqid	r18, 92		// 900202a4
9002024c:	646b0018 	bsrli	r3, r11, 24
90020250:	648a0408 	bslli	r4, r10, 8
90020254:	64ab0408 	bslli	r5, r11, 8
90020258:	80832000 	or	r4, r3, r4
9002025c:	b0001000 	imm	4096
90020260:	30c00000 	addik	r6, r0, 0
90020264:	30e00000 	addik	r7, r0, 0
90020268:	310cfc01 	addik	r8, r12, -1023
9002026c:	80843000 	or	r4, r4, r6
90020270:	80a53800 	or	r5, r5, r7
90020274:	30600003 	addik	r3, r0, 3
90020278:	f893000c 	swi	r4, r19, 12
9002027c:	f8b30010 	swi	r5, r19, 16
90020280:	f9130008 	swi	r8, r19, 8
90020284:	f8730000 	swi	r3, r19, 0
90020288:	ea610004 	lwi	r19, r1, 4
9002028c:	b60f0008 	rtsd	r15, 8
90020290:	30210008 	addik	r1, r1, 8
90020294:	f8660000 	swi	r3, r6, 0
90020298:	ea610004 	lwi	r19, r1, 4
9002029c:	b60f0008 	rtsd	r15, 8
900202a0:	30210008 	addik	r1, r1, 8
900202a4:	806a5800 	or	r3, r10, r11
900202a8:	be230010 	bneid	r3, 16		// 900202b8
900202ac:	30600004 	addik	r3, r0, 4
900202b0:	f8660000 	swi	r3, r6, 0
900202b4:	b800ffd4 	bri	-44		// 90020288
900202b8:	b0000008 	imm	8
900202bc:	30800000 	addik	r4, r0, 0
900202c0:	30a00000 	addik	r5, r0, 0
900202c4:	848a2000 	and	r4, r10, r4
900202c8:	84ab2800 	and	r5, r11, r5
900202cc:	80842800 	or	r4, r4, r5
900202d0:	be040018 	beqid	r4, 24		// 900202e8
900202d4:	30600001 	addik	r3, r0, 1
900202d8:	f8660000 	swi	r3, r6, 0
900202dc:	f953000c 	swi	r10, r19, 12
900202e0:	f9730010 	swi	r11, r19, 16
900202e4:	b800ffa4 	bri	-92		// 90020288
900202e8:	f8860000 	swi	r4, r6, 0
900202ec:	b800fff0 	bri	-16		// 900202dc

900202f0 <__fpcmp_parts_d>:
900202f0:	e8650000 	lwi	r3, r5, 0
900202f4:	22400001 	addi	r18, r0, 1
900202f8:	16439003 	cmpu	r18, r3, r18
900202fc:	bcb2002c 	bgei	r18, 44		// 90020328
90020300:	e8860000 	lwi	r4, r6, 0
90020304:	22400001 	addi	r18, r0, 1
90020308:	16449003 	cmpu	r18, r4, r18
9002030c:	bcb2001c 	bgei	r18, 28		// 90020328
90020310:	aa430004 	xori	r18, r3, 4
90020314:	bc32001c 	bnei	r18, 28		// 90020330
90020318:	aa440004 	xori	r18, r4, 4
9002031c:	bc120048 	beqi	r18, 72		// 90020364
90020320:	e8650004 	lwi	r3, r5, 4
90020324:	bc2300b4 	bnei	r3, 180		// 900203d8
90020328:	b60f0008 	rtsd	r15, 8
9002032c:	30600001 	addik	r3, r0, 1
90020330:	aa440004 	xori	r18, r4, 4
90020334:	bc1200b0 	beqi	r18, 176		// 900203e4
90020338:	aa430002 	xori	r18, r3, 2
9002033c:	bc120038 	beqi	r18, 56		// 90020374
90020340:	aa440002 	xori	r18, r4, 2
90020344:	bc12ffdc 	beqi	r18, -36		// 90020320
90020348:	e8850004 	lwi	r4, r5, 4
9002034c:	e8660004 	lwi	r3, r6, 4
90020350:	16432000 	rsubk	r18, r3, r4
90020354:	bc120030 	beqi	r18, 48		// 90020384
90020358:	bc04ffd0 	beqi	r4, -48		// 90020328
9002035c:	b60f0008 	rtsd	r15, 8
90020360:	3060ffff 	addik	r3, r0, -1
90020364:	e8860004 	lwi	r4, r6, 4
90020368:	e8650004 	lwi	r3, r5, 4
9002036c:	b60f0008 	rtsd	r15, 8
90020370:	14632000 	rsubk	r3, r3, r4
90020374:	aa440002 	xori	r18, r4, 2
90020378:	bc32006c 	bnei	r18, 108		// 900203e4
9002037c:	b60f0008 	rtsd	r15, 8
90020380:	10600000 	addk	r3, r0, r0
90020384:	e8e50008 	lwi	r7, r5, 8
90020388:	e8660008 	lwi	r3, r6, 8
9002038c:	16471801 	cmp	r18, r7, r3
90020390:	bc52ffc8 	blti	r18, -56		// 90020358
90020394:	16433801 	cmp	r18, r3, r7
90020398:	bc52003c 	blti	r18, 60		// 900203d4
9002039c:	e905000c 	lwi	r8, r5, 12
900203a0:	e9250010 	lwi	r9, r5, 16
900203a4:	e8e60010 	lwi	r7, r6, 16
900203a8:	e8c6000c 	lwi	r6, r6, 12
900203ac:	16483003 	cmpu	r18, r8, r6
900203b0:	bc52ffa8 	blti	r18, -88		// 90020358
900203b4:	16464000 	rsubk	r18, r6, r8
900203b8:	bc12003c 	beqi	r18, 60		// 900203f4
900203bc:	16464003 	cmpu	r18, r6, r8
900203c0:	bc520014 	blti	r18, 20		// 900203d4
900203c4:	16483000 	rsubk	r18, r8, r6
900203c8:	bc32ffb4 	bnei	r18, -76		// 9002037c
900203cc:	16474803 	cmpu	r18, r7, r9
900203d0:	bcb2ffac 	bgei	r18, -84		// 9002037c
900203d4:	bc24ff54 	bnei	r4, -172		// 90020328
900203d8:	3060ffff 	addik	r3, r0, -1
900203dc:	b60f0008 	rtsd	r15, 8
900203e0:	80000000 	or	r0, r0, r0
900203e4:	e8660004 	lwi	r3, r6, 4
900203e8:	bc23ff40 	bnei	r3, -192		// 90020328
900203ec:	b60f0008 	rtsd	r15, 8
900203f0:	3060ffff 	addik	r3, r0, -1
900203f4:	16493803 	cmpu	r18, r9, r7
900203f8:	bcb2ffc4 	bgei	r18, -60		// 900203bc
900203fc:	b800ff5c 	bri	-164		// 90020358

90020400 <__do_global_ctors_aux>:
90020400:	b0009002 	imm	-28670
90020404:	e8604078 	lwi	r3, r0, 16504
90020408:	3021ffe0 	addik	r1, r1, -32
9002040c:	fa61001c 	swi	r19, r1, 28
90020410:	f9e10000 	swi	r15, r1, 0
90020414:	b0009002 	imm	-28670
90020418:	32604078 	addik	r19, r0, 16504
9002041c:	aa43ffff 	xori	r18, r3, -1
90020420:	bc120018 	beqi	r18, 24		// 90020438
90020424:	99fc1800 	brald	r15, r3
90020428:	3273fffc 	addik	r19, r19, -4
9002042c:	e8730000 	lwi	r3, r19, 0
90020430:	aa43ffff 	xori	r18, r3, -1
90020434:	bc32fff0 	bnei	r18, -16		// 90020424
90020438:	e9e10000 	lwi	r15, r1, 0
9002043c:	ea61001c 	lwi	r19, r1, 28
90020440:	b60f0008 	rtsd	r15, 8
90020444:	30210020 	addik	r1, r1, 32
Disassembly of section .init:

90020448 <__init>:
90020448:	3021fff8 	addik	r1, r1, -8
9002044c:	d9e00800 	sw	r15, r0, r1
90020450:	b000fffd 	imm	-3
90020454:	b9f4fc4c 	brlid	r15, -948	// 900000a0 <frame_dummy>
90020458:	80000000 	or	r0, r0, r0
9002045c:	b9f4ffa4 	brlid	r15, -92	// 90020400 <__do_global_ctors_aux>
90020460:	80000000 	or	r0, r0, r0
90020464:	c9e00800 	lw	r15, r0, r1
90020468:	b60f0008 	rtsd	r15, 8
9002046c:	30210008 	addik	r1, r1, 8
Disassembly of section .fini:

90020470 <__fini>:
90020470:	3021fff8 	addik	r1, r1, -8
90020474:	d9e00800 	sw	r15, r0, r1
90020478:	b000fffd 	imm	-3
9002047c:	b9f4fbb4 	brlid	r15, -1100	// 90000030 <__do_global_dtors_aux>
90020480:	80000000 	or	r0, r0, r0
90020484:	c9e00800 	lw	r15, r0, r1
90020488:	b60f0008 	rtsd	r15, 8
9002048c:	30210008 	addik	r1, r1, 8
