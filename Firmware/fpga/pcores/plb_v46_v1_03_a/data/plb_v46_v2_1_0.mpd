## Copyright (c) 1995-2008 Xilinx, Inc.  All rights reserved.

## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : plb_v46
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN plb_v46

## Peripheral Options
OPTION IPTYPE = BUS_ARBITER
OPTION HDL = VHDL
OPTION IMP_NETLIST = TRUE
OPTION BUS_STD = PLBV46
OPTION LAST_UPDATED = 10.1.3
OPTION DESC = Processor Local Bus (PLB) 4.6
OPTION LONG_DESC = 'Xilinx 64-bit Processor Local Bus (PLB) consists of a bus control unit, a watchdog timer, and separate address, write, and read data path units with a a three-cycle only arbitration feature'
OPTION IP_GROUP = Bus and Bridge:MICROBLAZE:PPC
OPTION ARCH_SUPPORT_MAP = (virtex2p=PREFERRED, aspartan3=PREFERRED, spartan3=PREFERRED, spartan3an=PREFERRED, spartan3a=PREFERRED, spartan3e=PREFERRED, spartan3adsp=PREFERRED, virtex4lx=PREFERRED, virtex4sx=PREFERRED, virtex4fx=PREFERRED, virtex5lx=PREFERRED, virtex5sx=PREFERRED, virtex5tx=PREFERRED, virtex5fx=PREFERRED, aspartan3e=PREFERRED, aspartan3a=PREFERRED, aspartan3adsp=PREFERRED, qvirtex4lx=PREFERRED, qvirtex4sx=PREFERRED, qvirtex4fx=PREFERRED, qrvirtex4lx=PREFERRED, qrvirtex4sx=PREFERRED, qrvirtex4fx=PREFERRED)


## Bus Interfaces
BUS_INTERFACE BUS = SDCR, BUS_STD = DCR, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_PLBV46_NUM_MASTERS = 4, DT = integer, RANGE = (1:16)
PARAMETER C_PLBV46_NUM_SLAVES = 8, DT = integer, RANGE = (1:32)
PARAMETER C_PLBV46_MID_WIDTH = 2, DT = integer
PARAMETER C_PLBV46_AWIDTH = 32, DT = integer
PARAMETER C_PLBV46_DWIDTH = 64, DT = integer
PARAMETER C_DCR_INTFCE = 0, DT = integer, BUS = SDCR, VALUES = (0 = Do not include DCR slave interface, 1 = Include DCR slave interface)
PARAMETER C_BASEADDR = 0b1111111111, DT = std_logic_vector, BUS = SDCR
PARAMETER C_HIGHADDR = 0b0000000000, DT = std_logic_vector
PARAMETER C_DCR_AWIDTH = 10, DT = integer, BUS = SDCR
PARAMETER C_DCR_DWIDTH = 32, DT = integer, BUS = SDCR
PARAMETER C_EXT_RESET_HIGH = 1, DT = integer, VALUES = (0 = Active Low, 1 = Active High)
PARAMETER C_IRQ_ACTIVE = 1, DT = std_logic, VALUES = (0 = Falling Edge, 1 = Rising Edge)
PARAMETER C_NUM_CLK_PLB2OPB_REARB = 5, DT = integer, TYPE = NON_HDL
PARAMETER C_ADDR_PIPELINING_TYPE = 1, DT = integer, VALUES = (0 = No Address Pipelining, 1 = 2 Level Address Pipelining)
PARAMETER C_FAMILY = virtex5, DT = string
PARAMETER C_P2P = 0, DT = integer, VALUES = (0 = Shared Bus Topology, 1 = One Master One Slave Topology)
PARAMETER C_ARB_TYPE = 0, DT = integer, VALUES = (0 = Fixed Priority, 1 = Round Robin)

## Ports
PORT PLB_Clk = "", DIR = I, SIGIS = CLK
PORT SYS_Rst = "", DIR = I, SIGIS = RST
PORT PLB_Rst = PLB_Rst, DIR = O, SIGIS = RST
PORT SPLB_Rst = SPLB_Rst, DIR = O, VEC = [0:C_PLBV46_NUM_SLAVES-1], SIGIS = RST
PORT MPLB_Rst = MPLB_Rst, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1], SIGIS = RST
PORT PLB_dcrAck = Sl_dcrAck, DIR = O, BUS = SDCR
PORT PLB_dcrDBus = Sl_dcrDBus, DIR = O, VEC = [0:C_DCR_DWIDTH-1], BUS = SDCR
PORT DCR_ABus = DCR_ABus, DIR = I, VEC = [0:C_DCR_AWIDTH-1], BUS = SDCR
PORT DCR_DBus = DCR_Sl_DBus, DIR = I, VEC = [0:C_DCR_DWIDTH-1], BUS = SDCR
PORT DCR_Read = DCR_Read, DIR = I, BUS = SDCR
PORT DCR_Write = DCR_Write, DIR = I, BUS = SDCR
PORT M_ABus = M_ABus, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*32)-1]
PORT M_UABus = M_UABus, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*32)-1]
PORT M_BE = M_BE, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*(C_PLBV46_DWIDTH/8))-1]
PORT M_RNW = M_RNW, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_abort = M_abort, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_busLock = M_busLock, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_TAttribute = M_TAttribute, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*16)-1]
PORT M_lockErr = M_lockErr, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_MSize = M_MSize, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*2)-1]
PORT M_priority = M_priority, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*2)-1]
PORT M_rdBurst = M_rdBurst, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_request = M_request, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_size = M_size, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*4)-1]
PORT M_type = M_type, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*3)-1]
PORT M_wrBurst = M_wrBurst, DIR = I, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT M_wrDBus = M_wrDBus, DIR = I, VEC = [0:(C_PLBV46_NUM_MASTERS*C_PLBV46_DWIDTH)-1]
PORT Sl_addrAck = Sl_addrAck, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_MRdErr = Sl_MRdErr, DIR = I, VEC = [0:(C_PLBV46_NUM_SLAVES*C_PLBV46_NUM_MASTERS)-1]
PORT Sl_MWrErr = Sl_MWrErr, DIR = I, VEC = [0:(C_PLBV46_NUM_SLAVES*C_PLBV46_NUM_MASTERS)-1]
PORT Sl_MBusy = Sl_MBusy, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES*C_PLBV46_NUM_MASTERS - 1 ]
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_rdComp = Sl_rdComp, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_rdDAck = Sl_rdDAck, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_rdDBus = Sl_rdDBus, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES*C_PLBV46_DWIDTH-1]
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES*4-1]
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_SSize = Sl_SSize, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES*2-1]
PORT Sl_wait = Sl_wait, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_wrComp = Sl_wrComp, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_wrDAck = Sl_wrDAck, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT Sl_MIRQ = Sl_MIRQ, DIR = I, VEC = [0:C_PLBV46_NUM_SLAVES*C_PLBV46_NUM_MASTERS-1]
PORT PLB_MIRQ = PLB_MIRQ, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_ABus = PLB_ABus, DIR = O, VEC = [0:31]
PORT PLB_UABus = PLB_UABus, DIR = O, VEC = [0:31]
PORT PLB_BE = PLB_BE, DIR = O, VEC = [0:(C_PLBV46_DWIDTH/8)-1]
PORT PLB_MAddrAck = PLB_MAddrAck, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MTimeout = PLB_MTimeout, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MBusy = PLB_MBusy, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MRdErr = PLB_MRdErr, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MWrErr = PLB_MWrErr, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MRdBTerm = PLB_MRdBTerm, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MRdDAck = PLB_MRdDAck, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MRdDBus = PLB_MRdDBus, DIR = O, VEC = [0:(C_PLBV46_NUM_MASTERS*C_PLBV46_DWIDTH)-1]
PORT PLB_MRdWdAddr = PLB_MRdWdAddr, DIR = O, VEC = [0:(C_PLBV46_NUM_MASTERS*4)-1]
PORT PLB_MRearbitrate = PLB_MRearbitrate, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MWrBTerm = PLB_MWrBTerm, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MWrDAck = PLB_MWrDAck, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_MSSize = PLB_MSSize, DIR = O, VEC = [0:(C_PLBV46_NUM_MASTERS*2)-1]
PORT PLB_PAValid = PLB_PAValid, DIR = O
PORT PLB_RNW = PLB_RNW, DIR = O
PORT PLB_SAValid = PLB_SAValid, DIR = O
PORT PLB_abort = PLB_abort, DIR = O
PORT PLB_busLock = PLB_busLock, DIR = O
PORT PLB_TAttribute = PLB_TAttribute, DIR = O, VEC = [0:15]
PORT PLB_lockErr = PLB_lockErr, DIR = O
PORT PLB_masterID = PLB_masterID, DIR = O, VEC = [0:C_PLBV46_MID_WIDTH-1]
PORT PLB_MSize = PLB_MSize, DIR = O, VEC = [0:1]
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = O, VEC = [0:1]
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = O, VEC = [0:1]
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = O
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = O
PORT PLB_rdBurst = PLB_rdBurst, DIR = O
PORT PLB_rdPrim = PLB_rdPrim, DIR = O, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT PLB_reqPri = PLB_reqPri, DIR = O, VEC = [0:1]
PORT PLB_size = PLB_size, DIR = O, VEC = [0:3]
PORT PLB_type = PLB_type, DIR = O, VEC = [0:2]
PORT PLB_wrBurst = PLB_wrBurst, DIR = O
PORT PLB_wrDBus = PLB_wrDBus, DIR = O, VEC = [0:C_PLBV46_DWIDTH-1]
PORT PLB_wrPrim = PLB_wrPrim, DIR = O, VEC = [0:C_PLBV46_NUM_SLAVES-1]
PORT PLB_SaddrAck = PLB_SaddrAck, DIR = O
PORT PLB_SMRdErr = PLB_SMRdErr, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_SMWrErr = PLB_SMWrErr, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_SMBusy = PLB_SMBusy, DIR = O, VEC = [0:C_PLBV46_NUM_MASTERS-1]
PORT PLB_SrdBTerm = PLB_SrdBTerm, DIR = O
PORT PLB_SrdComp = PLB_SrdComp, DIR = O
PORT PLB_SrdDAck = PLB_SrdDAck, DIR = O
PORT PLB_SrdDBus = PLB_SrdDBus, DIR = O, VEC = [0:C_PLBV46_DWIDTH-1]
PORT PLB_SrdWdAddr = PLB_SrdWdAddr, DIR = O, VEC = [0:3]
PORT PLB_Srearbitrate = PLB_Srearbitrate, DIR = O
PORT PLB_Sssize = PLB_Sssize, DIR = O, VEC = [0:1]
PORT PLB_Swait = PLB_Swait, DIR = O
PORT PLB_SwrBTerm = PLB_SwrBTerm, DIR = O
PORT PLB_SwrComp = PLB_SwrComp, DIR = O
PORT PLB_SwrDAck = PLB_SwrDAck, DIR = O
PORT Bus_Error_Det = "", DIR = O, EDGE = RISING, SIGIS = INTERRUPT

END
